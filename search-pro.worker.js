const V=Object.entries,et=Object.fromEntries,st="ENTRIES",L="KEYS",T="VALUES",_="";class D{set;_type;_path;constructor(t,s){const n=t._tree,o=Array.from(n.keys());this.set=t,this._type=s,this._path=o.length>0?[{node:n,keys:o}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=E(this._path);if(E(s)===_)return{done:!1,value:this.result()};const n=t.get(E(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=E(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>E(t)).filter(t=>t!==_).join("")}value(){return E(this._path).node.get(_)}result(){switch(this._type){case T:return this.value();case L:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const E=e=>e[e.length-1],nt=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const o=t.length+1,u=o+s,i=new Uint8Array(u*o).fill(s+1);for(let r=0;r<o;++r)i[r]=r;for(let r=1;r<u;++r)i[r*o]=r;return R(e,t,s,n,i,1,o,""),n},R=(e,t,s,n,o,u,i,r)=>{const d=u*i;t:for(const c of e.keys())if(c===_){const a=o[d-1];a<=s&&n.set(r,[e.get(c),a])}else{let a=u;for(let h=0;h<c.length;++h,++a){const g=c[h],m=i*a,p=m-i;let l=o[m];const f=Math.max(0,a-s-1),y=Math.min(i-1,a+s);for(let F=f;F<y;++F){const v=g!==t[F],z=o[p+F]+ +v,A=o[p+F+1]+1,w=o[m+F]+1,j=o[m+F+1]=Math.min(z,A,w);j<l&&(l=j)}if(l>s)continue t}R(e.get(c),t,s,n,o,a,i,r+c)}};class C{_tree;_prefix;_size=void 0;constructor(t=new Map,s=""){this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=x(this._tree,t.slice(this._prefix.length));if(s===void 0){const[o,u]=O(n);for(const i of o.keys())if(i!==_&&i.startsWith(u)){const r=new Map;return r.set(i.slice(u.length),o.get(i)),new C(r,t)}}return new C(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,ot(this._tree,t)}entries(){return new D(this,st)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return nt(this._tree,t,s)}get(t){const s=k(this._tree,t);return s!==void 0?s.get(_):void 0}has(t){const s=k(this._tree,t);return s!==void 0&&s.has(_)}keys(){return new D(this,L)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,I(this._tree,t).set(_,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=I(this._tree,t);return n.set(_,s(n.get(_))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=I(this._tree,t);let o=n.get(_);return o===void 0&&n.set(_,o=s()),o}values(){return new D(this,T)}[Symbol.iterator](){return this.entries()}static from(t){const s=new C;for(const[n,o]of t)s.set(n,o);return s}static fromObject(t){return C.from(Object.entries(t))}}const x=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==_&&t.startsWith(n))return s.push([e,n]),x(e.get(n),t.slice(n.length),s);return s.push([e,t]),x(void 0,"",s)},k=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==_&&t.startsWith(s))return k(e.get(s),t.slice(s.length))},I=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const u of e.keys())if(u!==_&&t[n]===u[0]){const i=Math.min(s-n,u.length);let r=1;for(;r<i&&t[n+r]===u[r];)++r;const d=e.get(u);if(r===u.length)e=d;else{const c=new Map;c.set(u.slice(r),d),e.set(t.slice(n,n+r),c),e.delete(u),e=c}n+=r;continue t}const o=new Map;return e.set(t.slice(n),o),o}return e},ot=(e,t)=>{const[s,n]=x(e,t);if(s!==void 0){if(s.delete(_),s.size===0)W(n);else if(s.size===1){const[o,u]=s.entries().next().value;q(n,o,u)}}},W=e=>{if(e.length===0)return;const[t,s]=O(e);if(t.delete(s),t.size===0)W(e.slice(0,-1));else if(t.size===1){const[n,o]=t.entries().next().value;n!==_&&q(e.slice(0,-1),n,o)}},q=(e,t,s)=>{if(e.length===0)return;const[n,o]=O(e);n.set(o+t,s),n.delete(o)},O=e=>e[e.length-1],ut=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},it=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u,M="or",$="and",rt="and_not",ct=(e,t)=>{e.includes(t)||e.push(t)},N=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},P=({score:e},{score:t})=>t-e,lt=()=>new Map,b=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},G=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,ht={[M]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:o,terms:u,match:i}=t.get(s);n.score=n.score+o,n.match=Object.assign(n.match,i),N(n.terms,u)}}return e},[$]:(e,t)=>{const s=new Map;for(const n of t.keys()){const o=e.get(n);if(o==null)continue;const{score:u,terms:i,match:r}=t.get(n);N(o.terms,i),s.set(n,{score:o.score+u,terms:o.terms,match:Object.assign(o.match,r)})}return s},[rt]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},dt=(e,t,s,n,o,u)=>{const{k:i,b:r,d}=u;return Math.log(1+(s-t+.5)/(t+.5))*(d+e*(i+1)/(e+i*(1-r+r*n/o)))},at=e=>(t,s,n)=>{const o=typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy||!1,u=typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0;return{term:t,fuzzy:o,prefix:u}},H=(e,t,s,n)=>{for(const o of Object.keys(e._fieldIds))if(e._fieldIds[o]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${o}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},ft=(e,t,s,n)=>{if(!e._index.has(n)){H(e,s,t,n);return}const o=e._index.fetch(n,lt),u=o.get(t);u==null||u.get(s)==null?H(e,s,t,n):u.get(s)<=1?u.size<=1?o.delete(t):u.delete(s):u.set(s,u.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},gt={k:1.2,b:.7,d:.5},mt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(it),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{typeof console?.[e]=="function"&&console[e](t)},autoVacuum:!0},J={combineWith:M,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:gt},pt={combineWith:$,prefix:(e,t,s)=>t===s.length-1},Ft={batchSize:1e3,batchWait:10},U={minDirtFactor:.1,minDirtCount:20},_t={...Ft,...U},K=Symbol("*"),yt=(e,t)=>{const s=new Map,n={...e._options.searchOptions,...t};for(const[o,u]of e._documentIds){const i=n.boostDocument?n.boostDocument(u,"",e._storedFields.get(o)):1;s.set(o,{score:i,terms:[],match:{}})}return s},X=(e,t=M)=>{if(e.length===0)return new Map;const s=t.toLowerCase(),n=ht[s];if(!n)throw new Error(`Invalid combination operator: ${t}`);return e.reduce(n)||new Map},S=(e,t,s,n,o,u,i,r,d=new Map)=>{if(o==null)return d;for(const c of Object.keys(u)){const a=u[c],h=e._fieldIds[c],g=o.get(h);if(g==null)continue;let m=g.size;const p=e._avgFieldLength[h];for(const l of g.keys()){if(!e._documentIds.has(l)){ft(e,h,l,s),m-=1;continue}const f=i?i(e._documentIds.get(l),s,e._storedFields.get(l)):1;if(!f)continue;const y=g.get(l),F=e._fieldLength.get(l)[h],v=dt(y,m,e._documentCount,F,p,r),z=n*a*f*v,A=d.get(l);if(A){A.score+=z,ct(A.terms,t);const w=G(A.match,s);w?w.push(c):A.match[s]=[c]}else d.set(l,{score:z,terms:[t],match:{[s]:[c]}})}}return d},At=(e,t,s)=>{const n={...e._options.searchOptions,...s},o=(n.fields||e._options.fields).reduce((l,f)=>({...l,[f]:G(n.boost,f)||1}),{}),{boostDocument:u,weights:i,maxFuzzy:r,bm25:d}=n,{fuzzy:c,prefix:a}={...J.weights,...i},h=e._index.get(t.term),g=S(e,t.term,t.term,1,h,o,u,d);let m,p;if(t.prefix&&(m=e._index.atPrefix(t.term)),t.fuzzy){const l=t.fuzzy===!0?.2:t.fuzzy,f=l<1?Math.min(r,Math.round(t.term.length*l)):l;f&&(p=e._index.fuzzyGet(t.term,f))}if(m)for(const[l,f]of m){const y=l.length-t.term.length;if(!y)continue;p?.delete(l);const F=a*l.length/(l.length+.3*y);S(e,t.term,l,F,f,o,u,d,g)}if(p)for(const l of p.keys()){const[f,y]=p.get(l);if(!y)continue;const F=c*l.length/(l.length+y);S(e,t.term,l,F,f,o,u,d,g)}return g},Y=(e,t,s={})=>{if(t===K)return yt(e,s);if(typeof t!="string"){const a={...s,...t,queries:void 0},h=t.queries.map(g=>Y(e,g,a));return X(h,a.combineWith)}const{tokenize:n,processTerm:o,searchOptions:u}=e._options,i={tokenize:n,processTerm:o,...u,...s},{tokenize:r,processTerm:d}=i,c=r(t).flatMap(a=>d(a)).filter(a=>!!a).map(at(i)).map(a=>At(e,a,i));return X(c,i.combineWith)},Q=(e,t,s={})=>{const n=Y(e,t,s),o=[];for(const[u,{score:i,terms:r,match:d}]of n){const c=r.length||1,a={id:e._documentIds.get(u),score:i*c,terms:Object.keys(d),queryTerms:r,match:d};Object.assign(a,e._storedFields.get(u)),(s.filter==null||s.filter(a))&&o.push(a)}return t===K&&s.boostDocument==null&&e._options.searchOptions.boostDocument==null||o.sort(P),o},Ct=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:u,terms:i}of Q(e,t,s)){const r=i.join(" "),d=n.get(r);d!=null?(d.score+=u,d.count+=1):n.set(r,{score:u,terms:i,count:1})}const o=[];for(const[u,{score:i,terms:r,count:d}]of n)o.push({suggestion:u,terms:r,score:i/d});return o.sort(P),o};class Et{_options;_index;_documentCount;_documentIds;_idToShortId;_fieldIds;_fieldLength;_avgFieldLength;_nextId;_storedFields;_dirtCount;_currentVacuum;_enqueuedVacuum;_enqueuedVacuumConditions;constructor(t){if(t?.fields==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?_t:t.autoVacuum;this._options={...mt,...t,autoVacuum:s,searchOptions:{...J,...t.searchOptions||{}},autoSuggestOptions:{...pt,...t.autoSuggestOptions||{}}},this._index=new C,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=U,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const o={};for(const[u,i]of n)o[u]=Object.fromEntries(i);t.push([s,o])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,serializationVersion:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const zt=({index:e,documentCount:t,nextId:s,documentIds:n,fieldIds:o,fieldLength:u,averageFieldLength:i,storedFields:r,dirtCount:d,serializationVersion:c},a)=>{if(c!==1&&c!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const h=new Et(a);h._documentCount=t,h._nextId=s,h._documentIds=b(n),h._idToShortId=new Map,h._fieldIds=o,h._fieldLength=b(u),h._avgFieldLength=i,h._storedFields=b(r),h._dirtCount=d||0,h._index=new C;for(const[g,m]of h._documentIds)h._idToShortId.set(m,g);for(const[g,m]of e){const p=new Map;for(const l of Object.keys(m)){let f=m[l];c===1&&(f=f.ds),p.set(parseInt(l,10),b(f))}h._index.set(g,p)}return h},B=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),o=[];let u=0,i=0;const r=(c,a=!1)=>{let h="";i===0?h=c.length>20?`… ${c.slice(-20)}`:c:a?h=c.length+i>100?`${c.slice(0,100-i)}… `:c:h=c.length>20?`${c.slice(0,20)} … ${c.slice(-20)}`:c,h&&o.push(h),i+=h.length,a||(o.push(["mark",t]),i+=t.length,i>=100&&o.push(" …"))};let d=s.indexOf(n,u);if(d===-1)return null;for(;d>=0;){const c=d+n.length;if(r(e.slice(u,d)),u=c,i>100)break;d=s.indexOf(n,u)}return i<100&&r(e.slice(u),!0),o},wt=(e,t)=>t.contents.reduce((s,[,n])=>s+n,0)-e.contents.reduce((s,[,n])=>s+n,0),xt=(e,t)=>Math.max(...t.contents.map(([,s])=>s))-Math.max(...e.contents.map(([,s])=>s)),Z=(e,t,s={})=>{const n={};return Q(t,e,{boost:{h:2,t:1,c:4},prefix:!0,...s}).forEach(o=>{const{id:u,terms:i,score:r}=o,d=u.includes("@"),c=u.includes("#"),[a,h]=u.split(/[#@]/),g=Number(a),m=i.sort((l,f)=>l.length-f.length).filter((l,f)=>i.slice(f+1).every(y=>!y.includes(l))),{contents:p}=n[g]??={title:"",contents:[]};if(d)p.push([{type:"customField",id:g,index:h,display:m.map(l=>o.c.map(f=>B(f,l))).flat().filter(l=>l!==null)},r]);else{const l=m.map(f=>B(o.h,f)).filter(f=>f!==null);if(l.length&&p.push([{type:c?"heading":"title",id:g,...c&&{anchor:h},display:l},r]),"t"in o)for(const f of o.t){const y=m.map(F=>B(f,F)).filter(F=>F!==null);y.length&&p.push([{type:"text",id:g,...c&&{anchor:h},display:y},r])}}}),V(n).sort(([,o],[,u])=>"max"==="total"?wt(o,u):xt(o,u)).map(([o,{title:u,contents:i}])=>{if(!u){const r=ut(t,o);r&&(u=r.h)}return{title:u,contents:i.map(([r])=>r)}})},tt=(e,t,s={})=>{const n=Ct(t,e,{fuzzy:.2,maxFuzzy:3,...s}).map(({suggestion:o})=>o);return e.includes(" ")?n:n.filter(o=>!o.includes(" "))},bt=et(V(JSON.parse("{\"/\":{\"documentCount\":744,\"nextId\":744,\"documentIds\":{\"0\":\"1\",\"1\":\"2\",\"2\":\"2@0\",\"3\":\"3\",\"4\":\"3@0\",\"5\":\"3@1\",\"6\":\"4\",\"7\":\"4@0\",\"8\":\"4@1\",\"9\":\"5\",\"10\":\"5#markdown-介绍\",\"11\":\"5#markdown-配置\",\"12\":\"5#markdown-扩展\",\"13\":\"5#vuepress-扩展\",\"14\":\"5#主题扩展\",\"15\":\"5#选项卡\",\"16\":\"5#脚注\",\"17\":\"5#导入文件\",\"18\":\"5#tex-语法\",\"19\":\"5#任务列表\",\"20\":\"5#图片增强\",\"21\":\"5#上下角标\",\"22\":\"5#组件\",\"23\":\"5@0\",\"24\":\"5@1\",\"25\":\"6\",\"26\":\"6#页面标题\",\"27\":\"6#页面信息\",\"28\":\"6#页面内容\",\"29\":\"6#组件\",\"30\":\"6@0\",\"31\":\"6@1\",\"32\":\"7\",\"33\":\"7@0\",\"34\":\"8\",\"35\":\"8#标题-2\",\"36\":\"8#标题-3\",\"37\":\"8@0\",\"38\":\"8@1\",\"39\":\"9\",\"40\":\"9#标题-2\",\"41\":\"9#标题-3\",\"42\":\"9@0\",\"43\":\"9@1\",\"44\":\"10\",\"45\":\"10#标题-2\",\"46\":\"10#标题-3\",\"47\":\"10@0\",\"48\":\"10@1\",\"49\":\"11\",\"50\":\"11#标题-2\",\"51\":\"11#标题-3\",\"52\":\"11@0\",\"53\":\"11@1\",\"54\":\"12\",\"55\":\"12#tcp最主要的特点\",\"56\":\"12#什么是套接字-tcp的连接\",\"57\":\"12#tcp报文段的首部格式\",\"58\":\"12#tcp的可靠传输的实现\",\"59\":\"12#滑动窗口\",\"60\":\"12#超时重传\",\"61\":\"12#流量控制\",\"62\":\"12#拥塞控制\",\"63\":\"12@0\",\"64\":\"12@1\",\"65\":\"13\",\"66\":\"13#连接-es\",\"67\":\"13@0\",\"68\":\"13@1\",\"69\":\"14\",\"70\":\"14#连接-es\",\"71\":\"14@0\",\"72\":\"14@1\",\"73\":\"15\",\"74\":\"15#连接-es\",\"75\":\"15@0\",\"76\":\"15@1\",\"77\":\"16\",\"78\":\"16#连接-es\",\"79\":\"16@0\",\"80\":\"16@1\",\"81\":\"17\",\"82\":\"17@0\",\"83\":\"17@1\",\"84\":\"18\",\"85\":\"18#_4、初步检索\",\"86\":\"18#_5、进阶检索\",\"87\":\"18#_1、searchapi\",\"88\":\"18#_2、query-dsl\",\"89\":\"18#_3、mapping字段映射\",\"90\":\"18#_4、分词\",\"91\":\"18#定义实体\",\"92\":\"18#创建索引-1\",\"93\":\"18#增加文档-1\",\"94\":\"18#动态搜索文档\",\"95\":\"18@0\",\"96\":\"18@1\",\"97\":\"19\",\"98\":\"19#连接-es\",\"99\":\"19@0\",\"100\":\"19@1\",\"101\":\"20\",\"102\":\"20#连接-es\",\"103\":\"20@0\",\"104\":\"20@1\",\"105\":\"21\",\"106\":\"21#关注\",\"107\":\"21#取关\",\"108\":\"21#判断是否关注\",\"109\":\"21#两用户求交集\",\"110\":\"21#关注-1\",\"111\":\"21#取关-1\",\"112\":\"21#获取共同关注\",\"113\":\"21@0\",\"114\":\"21@1\",\"115\":\"22\",\"116\":\"22#往信箱进行发送\",\"117\":\"22#从信箱中取消息\",\"118\":\"22#selectfans-查询用户的粉丝\",\"119\":\"22#从信箱中取消息-1\",\"120\":\"22#selectfans-根据id查询粉丝\",\"121\":\"22#createposthandler-创建帖子的处理函数\",\"122\":\"22#查询分页数据\",\"123\":\"22@0\",\"124\":\"22@1\",\"125\":\"23\",\"126\":\"23#连接-es\",\"127\":\"23@0\",\"128\":\"23@1\",\"129\":\"24\",\"130\":\"24#连接-es\",\"131\":\"24@0\",\"132\":\"24@1\",\"133\":\"25\",\"134\":\"25#_1-1-声明变量\",\"135\":\"25#_1-2-多变量声明\",\"136\":\"25#_1-3-注意事项\",\"137\":\"25#常量constant\",\"138\":\"25#_1-1-常量声明\",\"139\":\"25#_1-2-iota\",\"140\":\"25#_2-1-if-语句\",\"141\":\"25#_2-2-if-变体\",\"142\":\"25#_2-3-switch语句-开关\",\"143\":\"25#_2-4-fallthrough\",\"144\":\"25#_2-5-type-switch\",\"145\":\"25#一、打印输出\",\"146\":\"25#_1-1-fmt包\",\"147\":\"25#_1-2-导入包\",\"148\":\"25#_1-3-常用打印函数\",\"149\":\"25#二、键盘输入\",\"150\":\"25#_2-1-fmt包读取键盘输入\",\"151\":\"25#_2-2-bufio包读取\",\"152\":\"25@0\",\"153\":\"25@1\",\"154\":\"26\",\"155\":\"26@0\",\"156\":\"27\",\"157\":\"27#_1、身份认证-authentication\",\"158\":\"27#_1-1、创建spring-boot项目\",\"159\":\"27#_1-2、创建indexcontroller\",\"160\":\"27#_1-3、创建index-html\",\"161\":\"27#_1-4、启动项目测试controller\",\"162\":\"27#_1-5、注意事项\",\"163\":\"27#_1-5-1、-logout-的作用\",\"164\":\"27#_1-5-2、页面样式无法加载的问题\",\"165\":\"27#_1-6、spring-security默认做了什么\",\"166\":\"27#_2、spring-security-的底层原理\",\"167\":\"27#_2-1、filter\",\"168\":\"27#_2-2、delegatingfilterproxy\",\"169\":\"27#_2-3、filterchainproxy\",\"170\":\"27#_2-4、securityfilterchain\",\"171\":\"27#_2-5、multiple-securityfilterchain\",\"172\":\"27#_3、程序的启动和运行\",\"173\":\"27#_3-1、defaultsecurityfilterchain\",\"174\":\"27#_3-2、securityproperties\",\"175\":\"27#_1、基于内存的用户认证\",\"176\":\"27#_1-1、创建自定义配置\",\"177\":\"27#_1-2、基于内存的用户认证流程\",\"178\":\"27#_2、基于数据库的数据源\",\"179\":\"27#_2-1、sql\",\"180\":\"27#_2-2、引入依赖\",\"181\":\"27#_2-3、配置数据源\",\"182\":\"27#_2-4、实体类\",\"183\":\"27#_2-5、mapper\",\"184\":\"27#_2-6、service\",\"185\":\"27#_2-7、controller\",\"186\":\"27#_3、基于数据库的用户认证\",\"187\":\"27#_3-1、基于数据库的用户认证流程\",\"188\":\"27#_3-2、定义dbuserdetailsmanager\",\"189\":\"27#_3-3、初始化userdetailsservice\",\"190\":\"27#_4、springsecurity的默认配置\",\"191\":\"27#_5、添加用户功能\",\"192\":\"27#_5-1、controller\",\"193\":\"27#_5-2、service\",\"194\":\"27#_5-3、修改配置\",\"195\":\"27#_5-4、使用swagger测试\",\"196\":\"27#_5-5、关闭csrf攻击防御\",\"197\":\"27#_6、密码加密算法\",\"198\":\"27#_6-1、密码加密方式\",\"199\":\"27#_6-2、passwordencoder\",\"200\":\"27#_6-3、密码加密测试\",\"201\":\"27#_6-4、delegatingpasswordencoder\",\"202\":\"27#_7、自定义登录页面\",\"203\":\"27#_7-1、创建登录controller\",\"204\":\"27#_7-2、创建登录页面\",\"205\":\"27#_7-3、配置securityfilterchain\",\"206\":\"27#_1、用户认证流程\",\"207\":\"27#_2、引入fastjson\",\"208\":\"27#_3、认证成功的响应\",\"209\":\"27#_3-1、成功结果处理\",\"210\":\"27#_3-2、securityfilterchain配置\",\"211\":\"27#_4、认证失败响应\",\"212\":\"27#_4-1、失败结果处理\",\"213\":\"27#_4-2securityfilterchain配置\",\"214\":\"27#_5、注销响应\",\"215\":\"27#_5-1、注销结果处理\",\"216\":\"27#_5-2、securityfilterchain配置\",\"217\":\"27#_6、请求未认证的接口\",\"218\":\"27#_6-1、实现authenticationentrypoint接口\",\"219\":\"27#_6-2、securityfilterchain配置\",\"220\":\"27#_7、跨域\",\"221\":\"27#_1、用户认证信息\",\"222\":\"27#_1-1、基本概念\",\"223\":\"27#_1-2、在controller中获取用户信息\",\"224\":\"27#_2、会话并发处理\",\"225\":\"27#_2-1、实现处理器接口\",\"226\":\"27#_2-2、securityfilterchain配置\",\"227\":\"27#_1、基于request的授权\",\"228\":\"27#_1-1、用户-权限-资源\",\"229\":\"27#配置权限\",\"230\":\"27#授予权限\",\"231\":\"27#请求未授权的接口\",\"232\":\"27#_1-2、用户-角色-资源\",\"233\":\"27#配置角色\",\"234\":\"27#授予角色\",\"235\":\"27#_1-3、用户-角色-权限-资源\",\"236\":\"27#_2、基于方法的授权\",\"237\":\"27#_2-1、开启方法授权\",\"238\":\"27#_2-2、给用户授予角色和权限\",\"239\":\"27#_2-2、常用授权注解\",\"240\":\"27#_1、oauth2简介\",\"241\":\"27#_1-1、oauth2是什么\",\"242\":\"27#_1-2、oauth2的角色\",\"243\":\"27#_1-3、oauth2的使用场景\",\"244\":\"27#开放系统间授权\",\"245\":\"27#社交登录\",\"246\":\"27#开放api\",\"247\":\"27#现代微服务安全\",\"248\":\"27#单块应用安全\",\"249\":\"27#微服务安全\",\"250\":\"27#企业内部应用认证授权\",\"251\":\"27#_1-4、oauth2的四种授权模式\",\"252\":\"27#第一种方式-授权码\",\"253\":\"27#第二种方式-隐藏式\",\"254\":\"27#第三种方式-密码式\",\"255\":\"27#第四种方式-凭证式\",\"256\":\"27#_1-5、授权类型的选择\",\"257\":\"27#_2、spring中的oauth2\",\"258\":\"27#_2-1、相关角色\",\"259\":\"27#_2-2、spring中的实现\",\"260\":\"27#_2-3、相关依赖\",\"261\":\"27#_2-4、授权登录的实现思路\",\"262\":\"27#_3、giuhub社交登录案例\",\"263\":\"27#_3-1、创建应用\",\"264\":\"27#_3-2、创建测试项目\",\"265\":\"27#_3-3、配置oauth客户端属性\",\"266\":\"27#_3-4、创建controller\",\"267\":\"27#_3-5、创建html页面\",\"268\":\"27#_3-6、启动应用程序\",\"269\":\"27#_4、案例分析\",\"270\":\"27#_4-1、登录流程\",\"271\":\"27#_4-2、commonoauth2provider\",\"272\":\"27@0\",\"273\":\"27@1\",\"274\":\"28\",\"275\":\"28@0\",\"276\":\"28@1\",\"277\":\"29\",\"278\":\"29#wait-notify原理\",\"279\":\"29#join原理\",\"280\":\"29#park-unpark原理\",\"281\":\"29#先park-后unpark\",\"282\":\"29#先unpark后park\",\"283\":\"29#与-object-的-wait-notify相比\",\"284\":\"29#含义\",\"285\":\"29#作用\",\"286\":\"29#使用场景及原理\",\"287\":\"29#synchronized\",\"288\":\"29#monitor-被翻译为监视器或管程\",\"289\":\"29#关联流程\",\"290\":\"29#对象头\",\"291\":\"29#对象标记\",\"292\":\"29#指向类的指针\",\"293\":\"29#数组长度\",\"294\":\"29#偏向锁\",\"295\":\"29#偏向状态\",\"296\":\"29#撤销-调用对象-hashcode-升级为轻量级锁。\",\"297\":\"29#撤销-其它线程使用对象-升级为轻量级锁\",\"298\":\"29#撤销-调用-wait-notify-升级为重量级锁\",\"299\":\"29#批量重偏向\",\"300\":\"29#批量撤销\",\"301\":\"29#轻量级锁\",\"302\":\"29#锁膨胀\",\"303\":\"29#锁消除\",\"304\":\"29#锁粗化\",\"305\":\"29#synchronized-的四种锁状态\",\"306\":\"29#reentrantlock\",\"307\":\"29#synchronized和reentrantlock对比\",\"308\":\"29#reentrantreadwritelock\",\"309\":\"29#cas-aba问题-自旋问题-单个变量操作\",\"310\":\"29#aqs\",\"311\":\"29#semaphore\",\"312\":\"29#semaphore-原理\",\"313\":\"29#semaphore的主要特点包括\",\"314\":\"29#使用semaphore的一个简单例子\",\"315\":\"29#countdownlatch\",\"316\":\"29#cyclicbarrier-类\",\"317\":\"29#exchanger\",\"318\":\"29#completablefuture\",\"319\":\"29#locksupport\",\"320\":\"29@0\",\"321\":\"29@1\",\"322\":\"30\",\"323\":\"30#_1-程序计数器\",\"324\":\"30#_1-1定义\",\"325\":\"30#_2-虚拟机栈\",\"326\":\"30#_2-1-定义\",\"327\":\"30#_2-2-栈内存溢出\",\"328\":\"30#_2-3-线程运行诊断\",\"329\":\"30#_3-本地方法栈\",\"330\":\"30#_4-堆\",\"331\":\"30#_4-1-定义\",\"332\":\"30#_4-2特点\",\"333\":\"30#_4-3堆内存溢出\",\"334\":\"30#_4-4堆内存诊断\",\"335\":\"30#_5-方法区\",\"336\":\"30#_5-1-定义\",\"337\":\"30#_5-2-组成\",\"338\":\"30#_5-3-方法区内存溢出\",\"339\":\"30#_5-4-通过反编译来查看类的信息\",\"340\":\"30#_5-5-运行时常量池\",\"341\":\"30#_5-6-常量池与串池stringtable的关系\",\"342\":\"30#面试题-string-str1-new-string-abc-和string-str2-abc-和-区别\",\"343\":\"30#面试题-string-s-new-string-a-new-string-b\",\"344\":\"30#_5-7-stringtable-位置\",\"345\":\"30#_5-8-stringtable-垃圾回收\",\"346\":\"30#_5-9-stringtable-性能调优\",\"347\":\"30#_6-直接内存\",\"348\":\"30#_6-1-定义\",\"349\":\"30#_6-2-使用直接内存的好处\",\"350\":\"30#直接内存也会导致内存溢出\",\"351\":\"30#_6-3-直接内存回收原理\",\"352\":\"30#_1-如何判断对象可以回收\",\"353\":\"30#_1-1-引用计数法\",\"354\":\"30#缺点-循环引用时-两个对象的计数都为1-导致两个对象都无法被释放\",\"355\":\"30#_1-2-可达性分析算法\",\"356\":\"30#可以作为gc-root的对象\",\"357\":\"30#使用memory-analyzer-mat-分析。\",\"358\":\"30#_1-3-五种引用\",\"359\":\"30#强引用\",\"360\":\"30#软引用\",\"361\":\"30#弱引用\",\"362\":\"30#虚引用\",\"363\":\"30#终结器引用\",\"364\":\"30#软引用使用\",\"365\":\"30#弱引用-使用\",\"366\":\"30#_2-垃圾回收算法\",\"367\":\"30#_2-1-标记清除\",\"368\":\"30#_2-2-标记整理\",\"369\":\"30#_2-3-复制\",\"370\":\"30#_3-分代垃圾回收\",\"371\":\"30#_3-1-回收流程\",\"372\":\"30#_3-2-gc-分析\",\"373\":\"30#相关vm参数\",\"374\":\"30#大对象处理策略\",\"375\":\"30#线程内存溢出\",\"376\":\"30#_4-垃圾回收器\",\"377\":\"30#_4-1-串行-serial-serialold-新生代复制-老年代标记整理\",\"378\":\"30#_4-2-吞吐量优先\",\"379\":\"30#_4-3-响应时间优先\",\"380\":\"30#_4-4-garbage-first\",\"381\":\"30#young-collection\",\"382\":\"30#young-collection-cm\",\"383\":\"30#mixed-collection\",\"384\":\"30#full-gc\",\"385\":\"30#young-collection-跨代引用\",\"386\":\"30#remark\",\"387\":\"30#jdk-8u20-字符串去重\",\"388\":\"30#jdk-8u40-并发标记类卸载\",\"389\":\"30#jdk-8u60-回收巨型对象\",\"390\":\"30#_5-垃圾回收调优\",\"391\":\"30#_5-1-调优领域\",\"392\":\"30#_5-2-确定目标\",\"393\":\"30#_5-3-最快的-gc是不发生gc\",\"394\":\"30#_5-4-新生代调优\",\"395\":\"30#_5-5-老年代调优\",\"396\":\"30#_5-6-案例\",\"397\":\"30#_1-类文件结构\",\"398\":\"30#_1-1-魔数\",\"399\":\"30#_1-2-版本\",\"400\":\"30#_1-3-常量池\",\"401\":\"30#_1-4-访问标识与继承信息\",\"402\":\"30#_2-字节码指令\",\"403\":\"30#_2-1-javap工具\",\"404\":\"30#_2-2-图解方法执行流程\",\"405\":\"30#_1-代码\",\"406\":\"30#_2-编译后的字节码文件\",\"407\":\"30#_3-常量池载入运行时常量池\",\"408\":\"30#_4-方法字节码载入方法区\",\"409\":\"30#_5-main-线程开始运行-分配栈帧内存\",\"410\":\"30#_6-执行引擎开始执行字节码-bipush-10\",\"411\":\"30#_2-3-练习-分析-i\",\"412\":\"30#_2-4-条件判断指令\",\"413\":\"30#_2-5-循环控制指令\",\"414\":\"30#_2-6-练习-判断结果\",\"415\":\"30#_2-7-构造方法\",\"416\":\"30#_2-8-方法调用\",\"417\":\"30#_2-9-多态的原理\",\"418\":\"30#_1-运行代码\",\"419\":\"30#_2-运行-hsdb-工具\",\"420\":\"30#_3-查找某个对象\",\"421\":\"30#_4-查看对象内存结构\",\"422\":\"30#_5-查看对象-class-的内存地址\",\"423\":\"30#_6-查看类的-vtable\",\"424\":\"30#_7-验证方法地址\",\"425\":\"30#_8-小结\",\"426\":\"30#_2-10-异常处理\",\"427\":\"30#_1-try-catch\",\"428\":\"30#_2-多个-single-catch-块的情况\",\"429\":\"30#_3-multi-catch-的情况\",\"430\":\"30#_4-finally\",\"431\":\"30#_5-finally中的return\",\"432\":\"30#_6-finally不带return\",\"433\":\"30#_2-11-synchronized\",\"434\":\"30#_3-编译器处理\",\"435\":\"30#_3-1-默认构造器\",\"436\":\"30#_3-2-自动拆装箱\",\"437\":\"30#_3-3-泛型集合取值\",\"438\":\"30#_3-4反射获取泛型信息\",\"439\":\"30#_3-5-可变参数\",\"440\":\"30#_3-6-foreach-循环\",\"441\":\"30#_3-7-switch-字符串\",\"442\":\"30#_3-8-switch-枚举\",\"443\":\"30#_3-9-枚举类\",\"444\":\"30#_3-10-try-with-resources\",\"445\":\"30#_3-11-方法重写时的桥接方法\",\"446\":\"30#_3-12-匿名内部类\",\"447\":\"30#_4-类加载阶段\",\"448\":\"30#_4-1-加载\",\"449\":\"30#_4-2-链接\",\"450\":\"30#_1-验证\",\"451\":\"30#_2-准备\",\"452\":\"30#_3-解析\",\"453\":\"30#_4-3-初始化\",\"454\":\"30#_1-cinit-v-方法\",\"455\":\"30#_2-发生的时机\",\"456\":\"30#_4-练习\",\"457\":\"30#_5-类加载器\",\"458\":\"30#_5-1-启动类的加载器\",\"459\":\"30#_5-2-扩展类的加载器\",\"460\":\"30#_5-3-双亲委派模式\",\"461\":\"30#_5-4-自定义类加载器\",\"462\":\"30#_5-5-线程上下文类加载器\",\"463\":\"30#背景\",\"464\":\"30#spi-服务提供接口\",\"465\":\"30#使用\",\"466\":\"30#原理\",\"467\":\"30#_6、运行期优化\",\"468\":\"30#_6-1-即时编译\",\"469\":\"30#_1-分层编译\",\"470\":\"30#_2-方法内联\",\"471\":\"30#_3-字段优化\",\"472\":\"30#_6-2-反射优化\",\"473\":\"30#_1-原子性\",\"474\":\"30#_1-1-问题解析\",\"475\":\"30#_1-2-解决方法-加锁\",\"476\":\"30#_1-synchronized-同步关键字\",\"477\":\"30#_2-可见性\",\"478\":\"30#_2-1-退不出的循环\",\"479\":\"30#_2-2-解决办法\",\"480\":\"30#_1-volatile-易变关键字\",\"481\":\"30#_2-3-可见性\",\"482\":\"30@0\",\"483\":\"30@1\",\"484\":\"31\",\"485\":\"31@0\",\"486\":\"31@1\",\"487\":\"32\",\"488\":\"32#连接-es\",\"489\":\"32@0\",\"490\":\"32@1\",\"491\":\"33\",\"492\":\"33#连接-es\",\"493\":\"33@0\",\"494\":\"33@1\",\"495\":\"34\",\"496\":\"34#连接-es\",\"497\":\"34@0\",\"498\":\"34@1\",\"499\":\"35\",\"500\":\"35#连接-es\",\"501\":\"35@0\",\"502\":\"35@1\",\"503\":\"36\",\"504\":\"36#连接-es\",\"505\":\"36@0\",\"506\":\"36@1\",\"507\":\"37\",\"508\":\"37#连接-es\",\"509\":\"37@0\",\"510\":\"37@1\",\"511\":\"38\",\"512\":\"38#已经有了mysql数据库-为什么还需要redis\",\"513\":\"38#string-类型\",\"514\":\"38#list-类型\",\"515\":\"38#set-类型\",\"516\":\"38#hash-类型\",\"517\":\"38#zset-类型sorted-sets\",\"518\":\"38#stream\",\"519\":\"38#geo\",\"520\":\"38#bitmap\",\"521\":\"38#bitfields\",\"522\":\"38#probabilistic\",\"523\":\"38#time-series\",\"524\":\"38#java\",\"525\":\"38#jedis\",\"526\":\"38#lettuce\",\"527\":\"38#达人探店-发布探店笔记\",\"528\":\"38#达人探店-查看探店笔记\",\"529\":\"38#达人探店-点赞功能\",\"530\":\"38#达人探店-点赞排行榜\",\"531\":\"38#好友关注-关注和取消关注\",\"532\":\"38#好友关注-共同关注\",\"533\":\"38#好友关注-feed流实现方案\",\"534\":\"38#好友关注-推送到粉丝收件箱-滚动查看\",\"535\":\"38#好友关注-实现分页查询收邮箱\",\"536\":\"38#附近商户-导入店铺数据到geo\",\"537\":\"38#附近商户-实现附近商户功能\",\"538\":\"38#用户签到-bitmap功能演示\",\"539\":\"38#用户签到-实现签到功能\",\"540\":\"38#用户签到-签到统计\",\"541\":\"38#额外加餐-关于使用bitmap来解决缓存穿透的方案\",\"542\":\"38#_12-2-uv统计-测试百万数据的统计\",\"543\":\"38@0\",\"544\":\"38@1\",\"545\":\"39\",\"546\":\"39@0\",\"547\":\"39@1\",\"548\":\"40\",\"549\":\"40@0\",\"550\":\"40@1\",\"551\":\"41\",\"552\":\"41#开启mysql-bin-log日志\",\"553\":\"41#安装canal\",\"554\":\"41#编写canal-client\",\"555\":\"41@0\",\"556\":\"41@1\",\"557\":\"42\",\"558\":\"42#mysql和redis数据同步方案\",\"559\":\"42#开启mysql-bin-log日志\",\"560\":\"42#安装canal\",\"561\":\"42#java程序把数据同步到redis\",\"562\":\"42@0\",\"563\":\"42@1\",\"564\":\"43\",\"565\":\"43#mysql-和-elasticsearch-数据同步方案\",\"566\":\"43#开启mysql-bin-log日志\",\"567\":\"43#安装canal\",\"568\":\"43#安装-canal-adapter\",\"569\":\"43#es创建索引库和映射\",\"570\":\"43@0\",\"571\":\"43@1\",\"572\":\"44\",\"573\":\"44@0\",\"574\":\"44@1\",\"575\":\"45\",\"576\":\"45#缓存穿透\",\"577\":\"45#简单的解决方法\",\"578\":\"45#布隆过滤器\",\"579\":\"45#什么是布隆过滤器\",\"580\":\"45#原理\",\"581\":\"45#使用\",\"582\":\"45#代码分析\",\"583\":\"45#参考\",\"584\":\"45@0\",\"585\":\"45@1\",\"586\":\"46\",\"587\":\"46#双写模式\",\"588\":\"46#失效模式\",\"589\":\"46#先删除缓存-后更新数据库\",\"590\":\"46#先更新数据库-后删除缓存\",\"591\":\"46#延迟双删\",\"592\":\"46#加锁-强一致性\",\"593\":\"46@0\",\"594\":\"46@1\",\"595\":\"47\",\"596\":\"47#缓存穿透\",\"597\":\"47#简单的解决方法\",\"598\":\"47#布隆过滤器\",\"599\":\"47#什么是布隆过滤器\",\"600\":\"47#原理\",\"601\":\"47#使用\",\"602\":\"47#代码分析\",\"603\":\"47#参考\",\"604\":\"47@0\",\"605\":\"47@1\",\"606\":\"48\",\"607\":\"48#缓存穿透\",\"608\":\"48#简单的解决方法\",\"609\":\"48#布隆过滤器\",\"610\":\"48#什么是布隆过滤器\",\"611\":\"48#原理\",\"612\":\"48#使用\",\"613\":\"48#代码分析\",\"614\":\"48#参考\",\"615\":\"48@0\",\"616\":\"48@1\",\"617\":\"49\",\"618\":\"49#是什么\",\"619\":\"49#为什么-主从复制主要的作用\",\"620\":\"49#优点和缺点\",\"621\":\"49#工作原理\",\"622\":\"49#目的与好处\",\"623\":\"49#注意事项\",\"624\":\"49#主从复制场景应用\",\"625\":\"49#可以配置的内容-这里可以忽视-直接去redis的配置文件看就行了\",\"626\":\"49#主从复制基础\",\"627\":\"49#认证与安全性\",\"628\":\"49#处理过时数据\",\"629\":\"49#只读从节点\",\"630\":\"49#同步策略\",\"631\":\"49#心跳与超时\",\"632\":\"49#复制积压缓冲区\",\"633\":\"49#从节点优先级\",\"634\":\"49#主节点写入限制\",\"635\":\"49#主从复制replication\",\"636\":\"49#主从复制基础-1\",\"637\":\"49#认证与安全性-1\",\"638\":\"49#处理过时数据-1\",\"639\":\"49#只读从节点-1\",\"640\":\"49#同步策略-1\",\"641\":\"49#心跳与超时-1\",\"642\":\"49#网络优化\",\"643\":\"49#复制积压缓冲区-1\",\"644\":\"49#从节点优先级-1\",\"645\":\"49#主节点写入限制-1\",\"646\":\"49#从节点宣告地址\",\"647\":\"49@0\",\"648\":\"49@1\",\"649\":\"50\",\"650\":\"50#缓存穿透\",\"651\":\"50#简单的解决方法\",\"652\":\"50#布隆过滤器\",\"653\":\"50#什么是布隆过滤器\",\"654\":\"50#原理\",\"655\":\"50#使用\",\"656\":\"50#代码分析\",\"657\":\"50#参考\",\"658\":\"50@0\",\"659\":\"50@1\",\"660\":\"51\",\"661\":\"51#缓存穿透\",\"662\":\"51#简单的解决方法\",\"663\":\"51#布隆过滤器\",\"664\":\"51#什么是布隆过滤器\",\"665\":\"51#原理\",\"666\":\"51#使用\",\"667\":\"51#代码分析\",\"668\":\"51#参考\",\"669\":\"51@0\",\"670\":\"51@1\",\"671\":\"52\",\"672\":\"52@0\",\"673\":\"53\",\"674\":\"53#页面标题\",\"675\":\"53#页面信息\",\"676\":\"53#页面内容\",\"677\":\"53#组件\",\"678\":\"53@0\",\"679\":\"53@1\",\"680\":\"54\",\"681\":\"54@0\",\"682\":\"54@1\",\"683\":\"55\",\"684\":\"55@0\",\"685\":\"55@1\",\"686\":\"56\",\"687\":\"56#标题-2\",\"688\":\"56#标题-3\",\"689\":\"56@0\",\"690\":\"56@1\",\"691\":\"57\",\"692\":\"57#标题-2\",\"693\":\"57#标题-3\",\"694\":\"57@0\",\"695\":\"57@1\",\"696\":\"58\",\"697\":\"58#标题-2\",\"698\":\"58#标题-3\",\"699\":\"58@0\",\"700\":\"58@1\",\"701\":\"59\",\"702\":\"59#标题-2\",\"703\":\"59#标题-3\",\"704\":\"59@0\",\"705\":\"59@1\",\"706\":\"60\",\"707\":\"60#标题-2\",\"708\":\"60#标题-3\",\"709\":\"60@0\",\"710\":\"60@1\",\"711\":\"61\",\"712\":\"61#标题-2\",\"713\":\"61#标题-3\",\"714\":\"61@0\",\"715\":\"61@1\",\"716\":\"62\",\"717\":\"62#标题-2\",\"718\":\"62#标题-3\",\"719\":\"62@0\",\"720\":\"62@1\",\"721\":\"63\",\"722\":\"63#标题-2\",\"723\":\"63#标题-3\",\"724\":\"63@0\",\"725\":\"63@1\",\"726\":\"64\",\"727\":\"64@0\",\"728\":\"64@1\",\"729\":\"65\",\"730\":\"65@0\",\"731\":\"65@1\",\"732\":\"66\",\"733\":\"67\",\"734\":\"68\",\"735\":\"69\",\"736\":\"70\",\"737\":\"71\",\"738\":\"72\",\"739\":\"73\",\"740\":\"74\",\"741\":\"75\",\"742\":\"76\",\"743\":\"77\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1,3],\"1\":[1],\"2\":[null,null,1],\"3\":[1,18],\"4\":[null,null,1],\"5\":[null,null,1],\"6\":[1,20],\"7\":[null,null,1],\"8\":[null,null,1],\"9\":[2,10],\"10\":[2,8],\"11\":[2,12],\"12\":[2,11],\"13\":[2,10],\"14\":[1,10],\"15\":[1,1],\"16\":[1,2],\"17\":[1,1],\"18\":[2,25],\"19\":[1,5],\"20\":[1,2],\"21\":[1,3],\"22\":[1],\"23\":[null,null,1],\"24\":[null,null,1],\"25\":[1,3],\"26\":[1,19],\"27\":[1,20],\"28\":[1,12],\"29\":[1,13],\"30\":[null,null,1],\"31\":[null,null,2],\"32\":[1],\"33\":[null,null,1],\"34\":[1],\"35\":[2,2],\"36\":[2,2],\"37\":[null,null,1],\"38\":[null,null,3],\"39\":[1],\"40\":[2,2],\"41\":[2,2],\"42\":[null,null,2],\"43\":[null,null,2],\"44\":[1],\"45\":[2,2],\"46\":[2,2],\"47\":[null,null,2],\"48\":[null,null,2],\"49\":[1],\"50\":[2,2],\"51\":[2,2],\"52\":[null,null,1],\"53\":[null,null,2],\"54\":[1,11],\"55\":[1,56],\"56\":[2,90],\"57\":[1,85],\"58\":[1],\"59\":[1,17],\"60\":[1,5],\"61\":[1],\"62\":[1,17],\"63\":[null,null,1],\"64\":[null,null,1],\"65\":[2,24],\"66\":[2,43],\"67\":[null,null,1],\"68\":[null,null,1],\"69\":[2,24],\"70\":[2,43],\"71\":[null,null,1],\"72\":[null,null,1],\"73\":[2,24],\"74\":[2,43],\"75\":[null,null,1],\"76\":[null,null,1],\"77\":[2,24],\"78\":[2,43],\"79\":[null,null,1],\"80\":[null,null,1],\"81\":[1,120],\"82\":[null,null,1],\"83\":[null,null,2],\"84\":[1,5],\"85\":[2,291],\"86\":[2],\"87\":[1,78],\"88\":[3,289],\"89\":[2,140],\"90\":[2,273],\"91\":[1,36],\"92\":[1,27],\"93\":[1,51],\"94\":[1,60],\"95\":[null,null,1],\"96\":[null,null,2],\"97\":[2,24],\"98\":[2,137],\"99\":[null,null,1],\"100\":[null,null,1],\"101\":[1,24],\"102\":[2,137],\"103\":[null,null,2],\"104\":[null,null,1],\"105\":[1,24],\"106\":[1,32],\"107\":[1,29],\"108\":[1,25],\"109\":[1,36],\"110\":[1,41],\"111\":[1,29],\"112\":[1,48],\"113\":[null,null,1],\"114\":[null,null,2],\"115\":[1,199],\"116\":[2,44],\"117\":[2,84],\"118\":[3,29],\"119\":[2,27],\"120\":[3,10],\"121\":[3,64],\"122\":[2,51],\"123\":[null,null,1],\"124\":[null,null,3],\"125\":[1,26],\"126\":[2,43],\"127\":[null,null,1],\"128\":[null,null,2],\"129\":[2,24],\"130\":[2,43],\"131\":[null,null,1],\"132\":[null,null,1],\"133\":[1,49],\"134\":[2,54],\"135\":[3,22],\"136\":[3,73],\"137\":[1],\"138\":[2,69],\"139\":[3,80],\"140\":[4,38],\"141\":[3,32],\"142\":[5,72],\"143\":[3,57],\"144\":[4,35],\"145\":[2],\"146\":[2,14],\"147\":[3,3],\"148\":[3,63],\"149\":[2],\"150\":[3,36],\"151\":[2,31],\"152\":[null,null,1],\"153\":[null,null,1],\"154\":[1],\"155\":[null,null,1],\"156\":[1,36],\"157\":[4,6],\"158\":[3,16],\"159\":[3,14],\"160\":[4,36],\"161\":[3,17],\"162\":[3],\"163\":[4,18],\"164\":[4,11],\"165\":[4,28],\"166\":[4,5],\"167\":[3,5],\"168\":[2,16],\"169\":[3,6],\"170\":[3,7],\"171\":[4,13],\"172\":[2],\"173\":[3,4],\"174\":[3,20],\"175\":[2],\"176\":[2,49],\"177\":[3,9],\"178\":[2],\"179\":[3,51],\"180\":[2,33],\"181\":[3,29],\"182\":[3,24],\"183\":[3,34],\"184\":[3,20],\"185\":[3,23],\"186\":[2],\"187\":[3,10],\"188\":[3,65],\"189\":[2,14],\"190\":[2,25],\"191\":[2],\"192\":[3,11],\"193\":[3,30],\"194\":[3,20],\"195\":[3,30],\"196\":[2,13],\"197\":[2,5],\"198\":[3,81],\"199\":[3,31],\"200\":[3,32],\"201\":[3,16],\"202\":[2],\"203\":[3,14],\"204\":[3,57],\"205\":[3,20],\"206\":[2,5],\"207\":[2,13],\"208\":[2],\"209\":[3,50],\"210\":[3,5],\"211\":[2],\"212\":[3,47],\"213\":[2,5],\"214\":[2],\"215\":[3,45],\"216\":[3,8],\"217\":[2],\"218\":[3,58],\"219\":[3,10],\"220\":[2,22],\"221\":[2],\"222\":[2,43],\"223\":[3,54],\"224\":[2,1],\"225\":[3,45],\"226\":[2,25],\"227\":[2],\"228\":[4,7],\"229\":[1,22],\"230\":[1,18],\"231\":[1,41],\"232\":[5,5],\"233\":[1,16],\"234\":[1,17],\"235\":[6,61],\"236\":[2],\"237\":[3,2],\"238\":[2,21],\"239\":[2,37],\"240\":[2],\"241\":[2,21],\"242\":[3,22],\"243\":[3],\"244\":[1],\"245\":[1,19],\"246\":[1,3],\"247\":[1],\"248\":[1,2],\"249\":[1,2],\"250\":[1,11],\"251\":[3,28],\"252\":[2,23],\"253\":[2,38],\"254\":[2,20],\"255\":[2,13],\"256\":[3,2],\"257\":[2],\"258\":[3,13],\"259\":[2,15],\"260\":[3,20],\"261\":[3,4],\"262\":[2],\"263\":[3,20],\"264\":[3,22],\"265\":[2,18],\"266\":[3,30],\"267\":[3,101],\"268\":[3,14],\"269\":[2],\"270\":[3,26],\"271\":[3,64],\"272\":[null,null,2],\"273\":[null,null,1],\"274\":[1,18],\"275\":[null,null,1],\"276\":[null,null,1],\"277\":[1,98],\"278\":[2,28],\"279\":[1,23],\"280\":[2,27],\"281\":[2,7],\"282\":[1,11],\"283\":[5,100],\"284\":[1,8],\"285\":[1,45],\"286\":[1,51],\"287\":[1],\"288\":[2,15],\"289\":[1,142],\"290\":[1,10],\"291\":[1,1],\"292\":[1,4],\"293\":[1,3],\"294\":[1,38],\"295\":[1,38],\"296\":[5,18],\"297\":[3,59],\"298\":[5,50],\"299\":[1,99],\"300\":[1,54],\"301\":[1,59],\"302\":[1,56],\"303\":[1,77],\"304\":[1,8],\"305\":[2,27],\"306\":[1,8],\"307\":[1],\"308\":[1],\"309\":[4,19],\"310\":[1,28],\"311\":[1,6],\"312\":[2,48],\"313\":[1,37],\"314\":[3,17],\"315\":[1,36],\"316\":[2,55],\"317\":[1,2],\"318\":[1,8],\"319\":[1,85],\"320\":[null,null,1],\"321\":[null,null,1],\"322\":[1,5],\"323\":[2],\"324\":[2,53],\"325\":[2,1],\"326\":[3,62],\"327\":[2,18],\"328\":[3,22],\"329\":[2,4],\"330\":[2],\"331\":[3,1],\"332\":[2,3],\"333\":[2,70],\"334\":[2,14],\"335\":[2],\"336\":[3,22],\"337\":[3,12],\"338\":[3,87],\"339\":[3,36],\"340\":[2,13],\"341\":[3,153],\"342\":[1,10],\"343\":[1,71],\"344\":[4,9],\"345\":[4,49],\"346\":[4,12],\"347\":[2],\"348\":[3,6],\"349\":[3,27],\"350\":[1,161],\"351\":[3,78],\"352\":[2],\"353\":[2,7],\"354\":[4,1],\"355\":[3,5],\"356\":[2,12],\"357\":[5,68],\"358\":[3,1],\"359\":[1,7],\"360\":[1,10],\"361\":[1,9],\"362\":[1,20],\"363\":[1,25],\"364\":[1,114],\"365\":[1,62],\"366\":[2],\"367\":[3,19],\"368\":[2,13],\"369\":[3,17],\"370\":[2,5],\"371\":[3,46],\"372\":[4],\"373\":[1,73],\"374\":[1,47],\"375\":[1,58],\"376\":[2,71],\"377\":[9,63],\"378\":[3,73],\"379\":[3,92],\"380\":[3,57],\"381\":[2,18],\"382\":[1,19],\"383\":[1,25],\"384\":[1,23],\"385\":[3,28],\"386\":[1,28],\"387\":[1,35],\"388\":[1,7],\"389\":[3,20],\"390\":[2,13],\"391\":[3,6],\"392\":[3,10],\"393\":[4,33],\"394\":[3,43],\"395\":[2,19],\"396\":[3,16],\"397\":[2,183],\"398\":[2,28],\"399\":[3,29],\"400\":[3,310],\"401\":[3,21],\"402\":[2,3],\"403\":[3,9],\"404\":[2],\"405\":[2,23],\"406\":[3,105],\"407\":[3,3],\"408\":[2,1],\"409\":[5,6],\"410\":[1,97],\"411\":[5,96],\"412\":[3,73],\"413\":[3,51],\"414\":[4,94],\"415\":[3,84],\"416\":[3,101],\"417\":[3,64],\"418\":[2,9],\"419\":[4,18],\"420\":[2,21],\"421\":[2,15],\"422\":[4,24],\"423\":[3,64],\"424\":[2,39],\"425\":[2,12],\"426\":[3],\"427\":[4,62],\"428\":[6,82],\"429\":[5,91],\"430\":[3,86],\"431\":[3,80],\"432\":[3,60],\"433\":[3,92],\"434\":[2,34],\"435\":[3,15],\"436\":[3,37],\"437\":[2,108],\"438\":[2,143],\"439\":[3,42],\"440\":[4,62],\"441\":[4,97],\"442\":[4,56],\"443\":[3,36],\"444\":[5,95],\"445\":[3,56],\"446\":[3,60],\"447\":[2],\"448\":[3,64],\"449\":[3],\"450\":[3,10],\"451\":[3,55],\"452\":[3,36],\"453\":[3],\"454\":[5,6],\"455\":[3,81],\"456\":[2,47],\"457\":[2,48],\"458\":[3,57],\"459\":[3,53],\"460\":[3,90],\"461\":[3,57],\"462\":[2],\"463\":[1,65],\"464\":[2,98],\"465\":[1,29],\"466\":[1,71],\"467\":[2],\"468\":[3],\"469\":[3,92],\"470\":[3,60],\"471\":[3,172],\"472\":[3,140],\"473\":[2],\"474\":[2,94],\"475\":[4],\"476\":[4,90],\"477\":[2],\"478\":[3,52],\"479\":[2],\"480\":[4,58],\"481\":[3,77],\"482\":[null,null,1],\"483\":[null,null,1],\"484\":[1,94],\"485\":[null,null,1],\"486\":[null,null,2],\"487\":[2,24],\"488\":[2,43],\"489\":[null,null,1],\"490\":[null,null,1],\"491\":[2,24],\"492\":[2,43],\"493\":[null,null,1],\"494\":[null,null,1],\"495\":[2,24],\"496\":[2,43],\"497\":[null,null,1],\"498\":[null,null,1],\"499\":[2,24],\"500\":[2,43],\"501\":[null,null,1],\"502\":[null,null,1],\"503\":[2,24],\"504\":[2,43],\"505\":[null,null,1],\"506\":[null,null,1],\"507\":[2,24],\"508\":[2,43],\"509\":[null,null,1],\"510\":[null,null,1],\"511\":[1,15],\"512\":[2,63],\"513\":[2,16],\"514\":[2,10],\"515\":[2,15],\"516\":[2,7],\"517\":[3,8],\"518\":[1,9],\"519\":[1,34],\"520\":[1,8],\"521\":[1,23],\"522\":[1,42],\"523\":[2,32],\"524\":[1],\"525\":[1,33],\"526\":[1,60],\"527\":[2,81],\"528\":[2,27],\"529\":[2,100],\"530\":[2,133],\"531\":[2,84],\"532\":[2,151],\"533\":[2,109],\"534\":[3,120],\"535\":[2,177],\"536\":[2,98],\"537\":[2,177],\"538\":[2,67],\"539\":[2,67],\"540\":[2,141],\"541\":[2,109],\"542\":[4,9],\"543\":[null,null,1],\"544\":[null,null,1],\"545\":[1,205],\"546\":[null,null,1],\"547\":[null,null,2],\"548\":[1,205],\"549\":[null,null,1],\"550\":[null,null,2],\"551\":[3,10],\"552\":[3,68],\"553\":[1,82],\"554\":[2,184],\"555\":[null,null,1],\"556\":[null,null,3],\"557\":[3],\"558\":[1,60],\"559\":[3,66],\"560\":[1,128],\"561\":[1,215],\"562\":[null,null,1],\"563\":[null,null,4],\"564\":[3],\"565\":[4,15],\"566\":[3,66],\"567\":[1,113],\"568\":[3,193],\"569\":[1,31],\"570\":[null,null,1],\"571\":[null,null,4],\"572\":[1,72],\"573\":[null,null,1],\"574\":[null,null,3],\"575\":[2,3],\"576\":[1,23],\"577\":[1,9],\"578\":[1],\"579\":[1,14],\"580\":[1,51],\"581\":[1,64],\"582\":[1,30],\"583\":[1,12],\"584\":[null,null,1],\"585\":[null,null,2],\"586\":[1,8],\"587\":[1,4],\"588\":[1,9],\"589\":[2,2],\"590\":[2,9],\"591\":[1,25],\"592\":[3,51],\"593\":[null,null,1],\"594\":[null,null,2],\"595\":[2,3],\"596\":[1,23],\"597\":[1,9],\"598\":[1],\"599\":[1,14],\"600\":[1,51],\"601\":[1,64],\"602\":[1,30],\"603\":[1,12],\"604\":[null,null,1],\"605\":[null,null,2],\"606\":[2,3],\"607\":[1,23],\"608\":[1,9],\"609\":[1],\"610\":[1,14],\"611\":[1,51],\"612\":[1,64],\"613\":[1,30],\"614\":[1,12],\"615\":[null,null,1],\"616\":[null,null,2],\"617\":[1,5],\"618\":[1,13],\"619\":[3,35],\"620\":[1,13],\"621\":[1,38],\"622\":[1,12],\"623\":[1,11],\"624\":[1,19],\"625\":[3,13],\"626\":[1,10],\"627\":[1,10],\"628\":[1,15],\"629\":[1,16],\"630\":[1,16],\"631\":[1,15],\"632\":[1,15],\"633\":[1,16],\"634\":[1,10],\"635\":[1,104],\"636\":[1,36],\"637\":[1,78],\"638\":[1,96],\"639\":[1,135],\"640\":[1,121],\"641\":[1,87],\"642\":[1,105],\"643\":[1,77],\"644\":[1,93],\"645\":[1,114],\"646\":[1,20],\"647\":[null,null,1],\"648\":[null,null,1],\"649\":[2,3],\"650\":[1,23],\"651\":[1,9],\"652\":[1],\"653\":[1,14],\"654\":[1,51],\"655\":[1,64],\"656\":[1,30],\"657\":[1,12],\"658\":[null,null,1],\"659\":[null,null,2],\"660\":[2,3],\"661\":[1,23],\"662\":[1,9],\"663\":[1],\"664\":[1,14],\"665\":[1,51],\"666\":[1,64],\"667\":[1,30],\"668\":[1,12],\"669\":[null,null,1],\"670\":[null,null,2],\"671\":[1],\"672\":[null,null,1],\"673\":[1,3],\"674\":[1,19],\"675\":[1,20],\"676\":[1,12],\"677\":[1,13],\"678\":[null,null,1],\"679\":[null,null,2],\"680\":[1,15],\"681\":[null,null,1],\"682\":[null,null,2],\"683\":[1,13],\"684\":[null,null,1],\"685\":[null,null,2],\"686\":[2],\"687\":[2,2],\"688\":[2,2],\"689\":[null,null,1],\"690\":[null,null,3],\"691\":[2,2],\"692\":[2,2],\"693\":[2,2],\"694\":[null,null,1],\"695\":[null,null,3],\"696\":[2],\"697\":[2,2],\"698\":[2,2],\"699\":[null,null,2],\"700\":[null,null,3],\"701\":[2],\"702\":[2,2],\"703\":[2,2],\"704\":[null,null,2],\"705\":[null,null,3],\"706\":[2],\"707\":[2,2],\"708\":[2,2],\"709\":[null,null,2],\"710\":[null,null,3],\"711\":[2,4],\"712\":[2,2],\"713\":[2,2],\"714\":[null,null,2],\"715\":[null,null,3],\"716\":[2],\"717\":[2,2],\"718\":[2,2],\"719\":[null,null,1],\"720\":[null,null,3],\"721\":[2],\"722\":[2,2],\"723\":[2,2],\"724\":[null,null,1],\"725\":[null,null,3],\"726\":[1,119],\"727\":[null,null,1],\"728\":[null,null,2],\"729\":[1,119],\"730\":[null,null,1],\"731\":[null,null,2],\"732\":[1,3],\"733\":[1],\"734\":[1],\"735\":[1],\"736\":[1],\"737\":[1],\"738\":[1],\"739\":[1],\"740\":[1],\"741\":[1],\"742\":[1],\"743\":[1]},\"averageFieldLength\":[1.9905461656228967,37.95190744659188,1.0744415331145856],\"storedFields\":{\"0\":{\"h\":\"介绍页\",\"t\":[\"热牛奶 将你的个人介绍和档案放置在此处。\"]},\"1\":{\"h\":\"主要功能与配置演示\"},\"2\":{\"c\":[\"使用指南\"]},\"3\":{\"h\":\"布局与功能禁用\",\"t\":[\"你可以通过设置页面的 Frontmatter，在页面禁用功能与布局。\",\"本页面就是一个示例，禁用了如下功能:\",\"导航栏\",\"侧边栏\",\"路径导航\",\"页面信息\",\"贡献者\",\"编辑此页链接\",\"更新时间\",\"上一篇/下一篇 链接\",\"评论\",\"页脚\",\"返回顶部按钮\"]},\"4\":{\"c\":[\"使用指南\"]},\"5\":{\"c\":[\"禁用\"]},\"6\":{\"h\":\"布局\",\"t\":[\"布局包括:\",\"导航栏\",\"侧边栏\",\"页脚\",\"同时每个页面包含:\",\"路径导航\",\"标题和页面信息\",\"TOC (文章标题列表)\",\"贡献者、更新时间等页面元信息\",\"评论\",\"主题也带有以下元素:\",\"夜间模式按钮\",\"返回顶部按钮\",\"打印按钮\",\"你可以在主题选项和页面的 frontmatter 中自定义它们。\"]},\"7\":{\"c\":[\"指南\"]},\"8\":{\"c\":[\"布局\"]},\"9\":{\"h\":\"Markdown 展示\",\"t\":[\"VuePress 主要从 Markdown 文件生成页面。因此，你可以使用它轻松生成文档或博客站点。\",\"你需要创建并编写 Markdown，以便 VuePress 可以根据文件结构将它们转换为不同的页面。\"]},\"10\":{\"h\":\"Markdown 介绍\",\"t\":[\"如果你是一个新手，还不会编写 Markdown，请先阅读 Markdown 介绍 和 Markdown 演示。\"]},\"11\":{\"h\":\"Markdown 配置\",\"t\":[\"VuePress 通过 Frontmatter 为每个 Markdown 页面引入配置。\",\"Frontmatter\",\"Frontmatter 是 VuePress 中很重要的一个概念，请阅读 Frontmatter 介绍 了解详情。\"]},\"12\":{\"h\":\"Markdown 扩展\",\"t\":[\"VuePress 会使用 markdown-it 来解析 Markdown 内容，因此可以借助于 markdown-it 插件来实现 语法扩展 。\"]},\"13\":{\"h\":\"VuePress 扩展\",\"t\":[\"为了丰富文档写作，VuePress 对 Markdown 语法进行了扩展。\",\"关于这些扩展，请阅读 VuePress 中的 Markdown 扩展。\"]},\"14\":{\"h\":\"主题扩展\",\"t\":[\"通过 vuepress-plugin-md-enhance，主题扩展了更多 Markdown 语法，提供更加丰富的写作功能。\"]},\"15\":{\"h\":\"选项卡\",\"t\":[\"查看详情\"]},\"16\":{\"h\":\"脚注\",\"t\":[\"此文字有脚注^first.\",\"查看详情\"]},\"17\":{\"h\":\"导入文件\",\"t\":[\"查看详情\"]},\"18\":{\"h\":\"TeX 语法\",\"t\":[\"$$ \\\\frac {\\\\partial^r} {\\\\partial \\\\omega^r} \\\\left(\\\\frac {y^{\\\\omega}} {\\\\omega}\\\\right) = \\\\left(\\\\frac {y^{\\\\omega}} {\\\\omega}\\\\right) \\\\left{(\\\\log y)^r + \\\\sum_{i=1}^r \\\\frac {(-1)^i r \\\\cdots (r-i+1) (\\\\log y)^{r-i}} {\\\\omega^i} \\\\right} $$\",\"查看详情\"]},\"19\":{\"h\":\"任务列表\",\"t\":[\" 计划 1\",\" 计划 2\",\"查看详情\"]},\"20\":{\"h\":\"图片增强\",\"t\":[\"支持为图片设置颜色模式和大小。\",\"查看详情\"]},\"21\":{\"h\":\"上下角标\",\"t\":[\"19th H2O\",\"查看详情\"]},\"22\":{\"h\":\"组件\"},\"23\":{\"c\":[\"使用指南\"]},\"24\":{\"c\":[\"Markdown\"]},\"25\":{\"h\":\"页面配置\",\"t\":[\"more 注释之前的内容被视为文章摘要。\"]},\"26\":{\"h\":\"页面标题\",\"t\":[\"The first H1 title in Markdown will be regarded as page title.\",\"Markdown 中的第一个 H1 标题会被视为页面标题。\",\"你可以在 Markdown 的 Frontmatter 中设置页面标题。\",\"--- title: 页面标题 ---\"]},\"27\":{\"h\":\"页面信息\",\"t\":[\"你可以在 Markdown 的 Frontmatter 中设置页面信息。\",\"作者设置为 Ms.Hope。\",\"写作日期为 2020 年 1 月 1 日\",\"分类为 “使用指南”\",\"标签为 “页面配置” 和 “使用指南”\"]},\"28\":{\"h\":\"页面内容\",\"t\":[\"你可以自由在这里书写你的 Markdown。\",\"图片引入\",\"你可以将图片和 Markdown 文件放置在一起使用相对路径进行引用。\",\"对于 .vuepress/public 文件夹的图片，请使用绝对链接 / 进行引用。\"]},\"29\":{\"h\":\"组件\",\"t\":[\"每个 Markdown 页面都会被转换为一个 Vue 组件，这意味着你可以在 Markdown 中使用 Vue 语法：\",\"{{ 1 + 1 }}\",\"{{ i }}\",\"你也可以创建并引入你自己的组件。\"]},\"30\":{\"c\":[\"使用指南\"]},\"31\":{\"c\":[\"页面配置\",\"使用指南\"]},\"32\":{\"h\":\"学习笔记\"},\"33\":{\"c\":[\"学习笔记\"]},\"34\":{\"h\":\"樱桃\"},\"35\":{\"h\":\"标题 2\",\"t\":[\"这里是内容。\"]},\"36\":{\"h\":\"标题 3\",\"t\":[\"这里是内容。\"]},\"37\":{\"c\":[\"樱桃\"]},\"38\":{\"c\":[\"红\",\"小\",\"圆\"]},\"39\":{\"h\":\"火龙果\"},\"40\":{\"h\":\"标题 2\",\"t\":[\"这里是内容。\"]},\"41\":{\"h\":\"标题 3\",\"t\":[\"这里是内容。\"]},\"42\":{\"c\":[\"火龙果\",\"水果\"]},\"43\":{\"c\":[\"红\",\"大\"]},\"44\":{\"h\":\"草莓\"},\"45\":{\"h\":\"标题 2\",\"t\":[\"这里是内容。\"]},\"46\":{\"h\":\"标题 3\",\"t\":[\"这里是内容。\"]},\"47\":{\"c\":[\"水果\",\"草莓\"]},\"48\":{\"c\":[\"红\",\"小\"]},\"49\":{\"h\":\"番茄\"},\"50\":{\"h\":\"标题 2\",\"t\":[\"这里是内容。\"]},\"51\":{\"h\":\"标题 3\",\"t\":[\"这里是内容。\"]},\"52\":{\"c\":[\"蔬菜\"]},\"53\":{\"c\":[\"红\",\"圆\"]},\"54\":{\"h\":\"计算机网络\",\"t\":[\"计算机网络\",\"网络模型\",\"image-20240718012528965\",\"image-20240718012410220\",\"image-20240718012117157\",\"image-20240718012155747\",\"image-20240718012231414\",\"image-20240718012257046\",\"image-20240718012318793\",\"image-20240718014234276\"]},\"55\":{\"h\":\"TCP最主要的特点\",\"t\":[\"(1）TCP是面向连接的运输层协议。这就是说，应用程序在使用TCP协议之前，必须先建立TCP连接。在传送数据完毕后，必须释放已经建立的TCP连接。也就是说，应用进程之间的通信好像在“打电话”：通话前要先拨号建立连接，通话结束后要挂机释放连接。\",\"(2）每一条TCP连接只能有两个端点(endpoint)，每一条TCP连接只能是点对点的（一对一）。\",\"(3）TCP提供可靠交付的服务。通过TCP连接传送的数据，无差错、不丢失、不重复，并且按序到达。\",\"(4）TCP提供全双工通信。TCP允许通信双方的应用进程在任何时候都能发送数据。TCP连接的两端都设有发送缓存和接收缓存，用来临时存放双向通信的数据。在发送时，应用程序在把数据传送给TCP的缓存后，就可以做自己的事，而TCP在合适的时候把数据发送出去。在接收时，TCP把收到的数据放入缓存，上层的应用进程在合适的时候读取缓存中的数据。\",\"(5）面向字节流。TCP中的“流”（stream)指的是流入到进程或从进程流出的字节序列。“面向字节流”的含义是：虽然应用程序和TCP的交互是一次一个数据块（大小不等），但TCP把应用程序交下来的数据仅仅看成是一连串的无结构的字节流。TCP并不知道所传送的字节流的含义。TCP不保证接收方应用程序所收到的数据块和发送方应用程序所发出的数据块具有对应大小的关系（例如，发送方应用程序交给发送方的TCP共10个数据块，但接收方的TCP可能只用了4个数据块就把收到的字节流交付上层的应用程序）。但接收方应用程序收到的字节流必须和发送方应用程序发出的字节流完全一样。当然，接收方的应用程序必须有能力识别收到的字节流，把它还原成有意义的应用层数据。\"]},\"56\":{\"h\":\"什么是套接字 - TCP的连接\",\"t\":[\"​ 前面已经讲过，每一条TCP连接有两个端点。那么，TCP连接的端点是什么呢？不是主机，不是主机的IP地址，不是应用进程，也不是运输层的协议端口。TCP连接的端点叫做套接字(socket)或插口。根据RFC793的定义：端口号拼接到(concatenatedwith）IP地址即构成了套接字。因此，套接字的表示方法是在点分十进制的 IP 地址后面写上端口号，中间用冒号或逗号隔开。例如，若IP地址是192.3.4.5而端口号是80，那么得到的套接字就是(192.3.4.5:80)。总之，我们有 ​ 套接字socket=(IP地址：端口号) (5-1) 每一条TCP连接唯一地被通信两端的两个端点（即两个套接字）所确定。即： TCP连接 ::= (socket1, socket2) ={ ( IP1 : port1 ) , ( IP2 : port2 ) } (5-2)\",\"​ 这里 IP1 和 IP2 分别是两个端点主机的IP地址，而 port1 和 port2 分别是两个端点主机中的端口号。TCP连接的两个套接字就是 socket1 和 socket2 。可见套接字 socket 是个很抽象的概念。 ​ 总之，TCP连接就是由协议软件所提供的一种抽象。虽然有时为了方便，我们也可以说，在一个应用进程和另一个应用进程之间建立了一条TCP连接，但一定要记住：TCP连****接的端点是个很抽象的套接字，即（IP地址：端口号）。也还应记住：同一个IP地址可以有多个不同的TCP连接，而同一个端口号也可以出现在多个不同的TCP连接中。 ​ 请注意，socket这个名词有时容易使人把一些概念弄混淆，因为随着互联网的不断发展以及网络技术的进步，同一个名词socket却可表示多种不同的意思。例如： (1）允许应用程序访问连网协议的应用编程接口API（ApplicationProgrammingInterface)，即运输层和应用层之间的一种接口，称为socketAPI，并简称为socket。 (2）在socketAPI中使用的一个函数名也叫做socket。 (3）调用socket函数的端点称为socket，如“创建一个数据报socket”。 (4）调用socket函数时，其返回值称为socket描述符，可简称为socket。 (5）在操作系统内核中连网协议的Berkeley实现，称为socket实现。 上面的这些socket的意思都和本章所引用的RFC793定义的socket（指端口号拼接到IP地址）不同。请读者加以注意。\"]},\"57\":{\"h\":\"TCP报文段的首部格式\",\"t\":[\"TCP虽然是面向字节流的，但TCP传送的数据单元却是报文段。一个TCP报文段分为首部和数据两部分，而TCP的全部功能都体现在它首部中各字段的作用。因此，只有弄清TCP首部各字段的作用才能掌握TCP的工作原理。下面讨论TCP报文段的首部格式。TCP报文段首部的前20个字节是固定的，后面有4n字节是根据需要而增加的选项（n是整数）。因此TCP首部的最小长度是20字节。\",\"【端口号】：端口号，TCP的分用功能通过端口实现的；\",\"【序号】：在一个TCP连接中传送的字节流中的每一个字节都按顺序编号。首部中的序号字段值则指的是本报文段所发送的数据的第一个字节的序号。在连接建立时由计算机计算出的初始值，通过 SYN 包传给对端主机，每发送一次新的数据包，就累加一次该序列号的大小。用来解决网络包乱序问题；\",\"【确认号】：占4字节，是期望收到对方下一个报文段的第一个数据字节的序号。例如，B正确收到了A发送过来的一个报文段，其序号字段值是501，而数据长度是200字节(序号501~700)，这表明B正确收到了A发送的到序号700为止的数据。因此，B期望收到A的下一个数据序号是701，于是B在发送给A的确认报文段中把确认号置为701.请注意，现在的确认号不是501，也不是700，而是701.。总之，应当记住：\",\"若确认号=N,则表明：到序号N-1为止的所有数据都已正确收到。\",\"【数据偏移】：4位，表示该首部有多大，单位是32个位字（即4个字节）。4位最大是1111，即15。15*4字节=60字节，首部最多是60字节。\",\"【标志字段】：\",\"【ACK】：用以指示确认字段中的值是有效的，即该报文段包括一个对已被成功接收的报文段的确认；\",\"【RST】：用以指示连接的强制拆除，当接收到错误连接时会发送RST位置为1的报文；\",\"【SYN】：用以指示连接的建立，当SYN = 1 而 ACK = 0 时，表明这是一个连接请求报文段。对方若同意建立连接，则应在响应的报文段中使SYN=1和ACK=1。因此，SYN置为1就表示这是一个连接请求或连接接受报文。\",\"【FIN】：用以指示连接的终止，该位为1的报文表示希望断开连接；\",\"【窗口】：2个字节。窗口值在[0,2的16次方-1]。窗口值表示发送本报文段的一方的接受窗口。表示最多可以接受多少个字节。之所以有这个限制，是因为数据缓存空间是有限的。这个值是动态变化的。\"]},\"58\":{\"h\":\"TCP的可靠传输的实现\"},\"59\":{\"h\":\"滑动窗口\",\"t\":[\"TCP的滑动窗口是以字节为单位的。为了便于说明滑动窗口的工作原理，我们故意把后 面图5-15至图5-18中的字节编号都取得很小。现假定A收到了B发来的确认报文段，其中 窗口是20字节，而确认号是31（这表明B期望收到的下一个序号是31，而序号30为止的数 据已经收到了）。根据这两个数据，A就构造出自己的发送窗口。\",\"image-20240718143913151\"]},\"60\":{\"h\":\"超时重传\",\"t\":[\"上面已经讲到，TCP的发送方在规定的时间内没有收到确认就要重传已发送的报文段。这种重传的概念是很简单的，但重传时间的选择却是TCP最复杂的问题之一。\"]},\"61\":{\"h\":\"流量控制\"},\"62\":{\"h\":\"拥塞控制\",\"t\":[\"流量控制、拥塞控制、超时重传、滑动窗口\",\"三次握手（三报文握手，即一次握手交换3个报文）\",\"四次挥手\",\"TCP套接字编程\",\"HTTP\",\"GET/POST\",\"HTTPS加密过程\",\"HTTP、HTTPS对比\",\"计算机网络（第7版）-谢希仁\"]},\"63\":{\"c\":[\"计算机网络\"]},\"64\":{\"c\":[\"计算机网络\"]},\"65\":{\"h\":\"go-简单使用elasticsearch\",\"t\":[\"go-简单使用elasticsearch\",\"go-es客户端：github.com/elastic/go-elasticsearch/v8\",\"执行以下命令安装v8版本的 go 客户端。\",\"go get github.com/elastic/go-elasticsearch/v8@latest\",\"导入依赖。\",\"import \\\"github.com/elastic/go-elasticsearch/v8\\\"\",\"可以根据实际需求导入不同的客户端版本，也支持在一个项目中导入不同的客户端版本。\",\"import ( elasticsearch7 \\\"github.com/elastic/go-elasticsearch/v7\\\" elasticsearch8 \\\"github.com/elastic/go-elasticsearch/v8\\\") // ... es7, _ := elasticsearch7.NewDefaultClient() es8, _ := elasticsearch8.NewDefaultClient()\"]},\"66\":{\"h\":\"连接 ES\",\"t\":[\"指定要连接 ES 的相关配置，并创建客户端连接。\",\"// ES 配置 cfg := elasticsearch.Config{ Addresses: []string{ \\\"http://localhost:9200\\\", }, } // 创建客户端连接 client, err := elasticsearch.NewTypedClient(cfg) if err != nil { fmt.Printf(\\\"elasticsearch.NewTypedClient failed, err:%v\\\\n\\\", err) return}\",\"创建索引：\",\"// createIndex 创建索引 func createIndex(client *elasticsearch.TypedClient) { resp, err := client.Indices.Create(\\\"my-review-1\\\").Do(context.Background()) if err != nil { fmt.Printf(\\\"create index failed, err:%v\\\\n\\\", err) return } fmt.Printf(\\\"index:%#v\\\\n\\\", resp.Index) }\"]},\"67\":{\"c\":[\"Go\"]},\"68\":{\"c\":[\"elasticsearch\"]},\"69\":{\"h\":\"go-简单使用elasticsearch\",\"t\":[\"go-简单使用elasticsearch\",\"go-es客户端：github.com/elastic/go-elasticsearch/v8\",\"执行以下命令安装v8版本的 go 客户端。\",\"go get github.com/elastic/go-elasticsearch/v8@latest\",\"导入依赖。\",\"import \\\"github.com/elastic/go-elasticsearch/v8\\\"\",\"可以根据实际需求导入不同的客户端版本，也支持在一个项目中导入不同的客户端版本。\",\"import ( elasticsearch7 \\\"github.com/elastic/go-elasticsearch/v7\\\" elasticsearch8 \\\"github.com/elastic/go-elasticsearch/v8\\\") // ... es7, _ := elasticsearch7.NewDefaultClient() es8, _ := elasticsearch8.NewDefaultClient()\"]},\"70\":{\"h\":\"连接 ES\",\"t\":[\"指定要连接 ES 的相关配置，并创建客户端连接。\",\"// ES 配置 cfg := elasticsearch.Config{ Addresses: []string{ \\\"http://localhost:9200\\\", }, } // 创建客户端连接 client, err := elasticsearch.NewTypedClient(cfg) if err != nil { fmt.Printf(\\\"elasticsearch.NewTypedClient failed, err:%v\\\\n\\\", err) return}\",\"创建索引：\",\"// createIndex 创建索引 func createIndex(client *elasticsearch.TypedClient) { resp, err := client.Indices.Create(\\\"my-review-1\\\").Do(context.Background()) if err != nil { fmt.Printf(\\\"create index failed, err:%v\\\\n\\\", err) return } fmt.Printf(\\\"index:%#v\\\\n\\\", resp.Index) }\"]},\"71\":{\"c\":[\"Go\"]},\"72\":{\"c\":[\"elasticsearch\"]},\"73\":{\"h\":\"go-简单使用elasticsearch\",\"t\":[\"go-简单使用elasticsearch\",\"go-es客户端：github.com/elastic/go-elasticsearch/v8\",\"执行以下命令安装v8版本的 go 客户端。\",\"go get github.com/elastic/go-elasticsearch/v8@latest\",\"导入依赖。\",\"import \\\"github.com/elastic/go-elasticsearch/v8\\\"\",\"可以根据实际需求导入不同的客户端版本，也支持在一个项目中导入不同的客户端版本。\",\"import ( elasticsearch7 \\\"github.com/elastic/go-elasticsearch/v7\\\" elasticsearch8 \\\"github.com/elastic/go-elasticsearch/v8\\\") // ... es7, _ := elasticsearch7.NewDefaultClient() es8, _ := elasticsearch8.NewDefaultClient()\"]},\"74\":{\"h\":\"连接 ES\",\"t\":[\"指定要连接 ES 的相关配置，并创建客户端连接。\",\"// ES 配置 cfg := elasticsearch.Config{ Addresses: []string{ \\\"http://localhost:9200\\\", }, } // 创建客户端连接 client, err := elasticsearch.NewTypedClient(cfg) if err != nil { fmt.Printf(\\\"elasticsearch.NewTypedClient failed, err:%v\\\\n\\\", err) return}\",\"创建索引：\",\"// createIndex 创建索引 func createIndex(client *elasticsearch.TypedClient) { resp, err := client.Indices.Create(\\\"my-review-1\\\").Do(context.Background()) if err != nil { fmt.Printf(\\\"create index failed, err:%v\\\\n\\\", err) return } fmt.Printf(\\\"index:%#v\\\\n\\\", resp.Index) }\"]},\"75\":{\"c\":[\"Go\"]},\"76\":{\"c\":[\"elasticsearch\"]},\"77\":{\"h\":\"go-简单使用elasticsearch\",\"t\":[\"go-简单使用elasticsearch\",\"go-es客户端：github.com/elastic/go-elasticsearch/v8\",\"执行以下命令安装v8版本的 go 客户端。\",\"go get github.com/elastic/go-elasticsearch/v8@latest\",\"导入依赖。\",\"import \\\"github.com/elastic/go-elasticsearch/v8\\\"\",\"可以根据实际需求导入不同的客户端版本，也支持在一个项目中导入不同的客户端版本。\",\"import ( elasticsearch7 \\\"github.com/elastic/go-elasticsearch/v7\\\" elasticsearch8 \\\"github.com/elastic/go-elasticsearch/v8\\\") // ... es7, _ := elasticsearch7.NewDefaultClient() es8, _ := elasticsearch8.NewDefaultClient()\"]},\"78\":{\"h\":\"连接 ES\",\"t\":[\"指定要连接 ES 的相关配置，并创建客户端连接。\",\"// ES 配置 cfg := elasticsearch.Config{ Addresses: []string{ \\\"http://localhost:9200\\\", }, } // 创建客户端连接 client, err := elasticsearch.NewTypedClient(cfg) if err != nil { fmt.Printf(\\\"elasticsearch.NewTypedClient failed, err:%v\\\\n\\\", err) return}\",\"创建索引：\",\"// createIndex 创建索引 func createIndex(client *elasticsearch.TypedClient) { resp, err := client.Indices.Create(\\\"my-review-1\\\").Do(context.Background()) if err != nil { fmt.Printf(\\\"create index failed, err:%v\\\\n\\\", err) return } fmt.Printf(\\\"index:%#v\\\\n\\\", resp.Index) }\"]},\"79\":{\"c\":[\"Go\"]},\"80\":{\"c\":[\"elasticsearch\"]},\"81\":{\"h\":\"数据同步到Elasticsearch\",\"t\":[\"数据同步到Elasticsearch，同步写，异步写，中间件实现同步。\",\"在写入MySQL时同时写入ES，这是最简单的方式。\",\"image-20240716171141128\",\"优点：系统结构简单，不用引入新的组件，实时性高。\",\"缺点：耦合度高，MYSQL写入失败或ES写入失败都需要考虑回滚，接口性能下降。\",\"基于MQ来实现。\",\"image-20240716171151636\",\"优点：解耦，基于MQ消费确认机制保证数据。\",\"缺点：基于MQ，有一定延时。\",\"基于binlog日志，MySQL通过binlog订阅实现主从同步，canal也是这个原理，将client组件伪装成从库，来实现数据订阅。\",\"image-20240717073857877\",\"image-20240717073909259\",\"Canal 原理就是伪装成 MySQL 的从节点，从而订阅 master 节点的 Binlog 日志，主要流程为：\",\"Canal 服务端向 MySQL 的 master 节点传输 dump 协议；\",\"MySQL 的 master 节点接收到 dump 请求后推送 Binlog 日志给 Canal 服务端，解析 Binlog 对象（原始为 byte 流）转成 Json 格式；\",\"Canal 客户端通过 TCP 协议或 MQ 形式监听 Canal 服务端，同步数据到 ES。\",\"下面是 Cannel 执行的核心流程，其中 Binlog Parser 主要负责 Binlog 的提取、解析和推送，EventSink 负责数据的过滤 、路由和加工，仅作了解即可。\",\"图片\",\"如果对实时性要求不高的情况下，可以考虑用定时器来处理：\",\"数据库的相关表中增加一个字段为 timestamp 的字段，任何 CURD 操作都会导致该字段的时间发生变化；\",\"原来程序中的 CURD 操作不做任何变化；\",\"增加一个定时器程序，让该程序按一定的时间周期扫描指定的表，把该时间段内发生变化的数据提取出来；\",\"逐条写入到 ES 中。\",\"image-20240716171234652\",\"优点：\",\"不改变原来代码，没有侵入性、没有硬编码；\",\"没有业务强耦合，不改变原来程序的性能；\",\"Worker 代码编写简单不需要考虑增删改查。\",\"缺点：\",\"时效性较差，由于是采用定时器根据固定频率查询表来同步数据，尽管将同步周期设置到秒级，也还是会存在一定时间的延迟；\",\"对数据库有一定的轮询压力，一种改进方法是将轮询放到压力不大的从库上。\",\"经典方案：借助 Logstash 实现数据同步，其底层实现原理就是根据配置定期使用 SQL 查询新增的数据写入 ES 中，实现数据的增量同步。\",\"image-20240716173734159\",\"4种数据同步到Elasticsearch方案 - 古道轻风 - 博客园 (cnblogs.com)\"]},\"82\":{\"c\":[\"Elasticsearch\"]},\"83\":{\"c\":[\"elasticsearch\",\"数据同步\"]},\"84\":{\"h\":\"数据同步到Elasticsearch\",\"t\":[\"数据同步到Elasticsearch，同步写，异步写，中间件实现同步。\"]},\"85\":{\"h\":\"4、初步检索\",\"t\":[\"1、_cat\",\"GET /_cat/nodes：查看所有节点 GET /_cat/health：查看 es 健康状况 GET /_cat/master：查看主节点 GET /_cat/indices：查看所有索引 show databases;\",\"2、索引一个文档（保存）\",\"保存一个数据，保存在哪个索引的哪个类型下，指定用哪个唯一标识PUT customer/external/1；在 customer 索引下的 external 类型下保存 1 号数据为\",\"# # 在customer索引下的external类型下保存1号数据 PUT customer/external/1\",\"httpclinet\",\"PUT http://59.110.106.16:9200/customer/external/1 Content-Type: application/json { \\\"name\\\": \\\"John Doe\\\" }\",\"返回数据\",\"返回数据： 带有下划线开头的，称为元数据，反映了当前的基本信息。 { \\\"_index\\\": \\\"customer\\\", 表明该数据在哪个数据库下； \\\"_type\\\": \\\"external\\\", 表明该数据在哪个类型下； \\\"_id\\\": \\\"1\\\", 表明被保存数据的id； \\\"_version\\\": 1, 被保存数据的版本 \\\"result\\\": \\\"created\\\", 这里是创建了一条数据，如果重新put一条数据，则该状态会变为updated，并且版本号也会发生变化。 \\\"_shards\\\": { \\\"total\\\": 2, \\\"successful\\\": 1, \\\"failed\\\": 0 }, \\\"_seq_no\\\": 1, \\\"_primary_term\\\": 1 }\",\"PUT 和 POST 都可以， POST 新增。如果不指定 id，会自动生成 id, 新增这个数据。指定 id 就会修改这个数据，并新增版本号 PUT 可以新增可以修改。PUT 必须指定 id；由于 PUT 需要指定 id，我们一般都用来做修改操作，不指定 id 会报错。\",\"3、查询文档\",\"GET customer/external/1\",\"httpclient\",\"### GET request with a header GET http://59.110.106.16:9200/customer/external/1 Accept: application/json\",\"返回数据：\",\"{ \\\"_index\\\": \\\"customer\\\", \\\"_type\\\": \\\"external\\\", \\\"_id\\\": \\\"1\\\", \\\"_version\\\": 2, \\\"_seq_no\\\": 1, //并发控制字段，每次更新都会+1，用来做乐观锁 \\\"_primary_term\\\": 1,//同上，主分片重新分配，如重启，就会变化 \\\"found\\\": true, \\\"_source\\\": { //存储的信息 \\\"name\\\": \\\"John Doe\\\" } }\",\"乐观锁用法：通过“if_seq_no=1&if_primary_term=1”，当序列号匹配的时候，才进行修改，否则不修改。\",\"示例：\",\"当seq_no=1&primary_term=1时，就修改\",\"### PUT http://59.110.106.16:9200/customer/external/1?if_seq_no=1&if_primary_term=1 Content-Type: application/json { \\\"name\\\": \\\"John Doe\\\" }\",\"修改成功，修改之后seq_no变成2\",\"image-20211011134234874\",\"再次发送上面的请求，修改失败，乐观锁是生效\",\"image-20211011134451525\",\"4、更新文档\",\"POST customer/external/1/_update { \\\"doc\\\":{ \\\"name\\\": \\\"John Doew\\\" } } 或者 POST customer/external/1 { \\\"name\\\": \\\"John Doe2\\\" } 或者 PUT customer/external/1 { \\\"name\\\": \\\"John Doe\\\" }\",\"注意带不带_update的语法不同\",\"带_update会跟原数据对比，跟原来一样就什么都不做,version不增加。 应用场景：对于大并发查询，偶尔更新，带update；对比更新呢，重新计算分配规则\",\"post不带_update,不会检查原数据,直接更新。 应用场景：对于大并发更新，不带update\",\"发送之后，与元素据对比，发现相同，不做任何操作\",\"POST http://59.110.106.16:9200/customer/external/1/_update Content-Type: application/json { \\\"doc\\\":{ \\\"name\\\": \\\"John\\\" } }\",\"5、删除文档&索引\",\"DELETE customer/external/1 DELETE customer\",\"注：elasticsearch并没有提供删除类型的操作，只提供了删除索引和文档的操作。\",\"删除id=1的数据\",\"DELETE http://59.110.106.16:9200/customer/external/1\",\"image-20211011140906175\",\"删除customer索引\",\"DELETE http://59.110.106.16:9200/customer\",\"响应 { \\\"acknowledged\\\": true }\",\"6、ES的批量操作——bulk\",\"用Kibana之中的Dev Tools\",\"示例1:\",\"POST customer/external/_bulk {\\\"index\\\":{\\\"_id\\\":\\\"1\\\"}} {\\\"name\\\": \\\"John Doe\\\" } {\\\"index\\\":{\\\"_id\\\":\\\"2\\\"}} {\\\"name\\\": \\\"Jane Doe\\\" }\",\"语法格式: 两行一组，第一行为操作，第二行为数据\",\"{ action: { metadata }}\\\\n { request body}\\\\n { action: { metadata }}\\\\n { request body}\\\\n\",\"这里的批量操作，当发生某一条执行发生失败时，其他的数据仍然能够接着执行，也就是说彼此之间是独立的。\",\"bulk API 以此按顺序执行所有的 action（动作）。如果一个单个的动作因任何原因而失败，它将继续处理它后面剩余的动作。当 bulk API 返回时，它将提供每个动作的状态（与发送的顺序相同），所以您可以检查是否一个指定的动作是不是失败了。\",\"返回数据\",\"#! Deprecation: [types removal] Specifying types in bulk requests is deprecated. { \\\"took\\\" : 318, 花费了多少ms \\\"errors\\\" : false, 没有发生任何错误 \\\"items\\\" : [ 每个数据的结果 { \\\"index\\\" : { 保存 \\\"_index\\\" : \\\"customer\\\", 索引 \\\"_type\\\" : \\\"external\\\", 类型 \\\"_id\\\" : \\\"1\\\", 文档 \\\"_version\\\" : 1, 版本 \\\"result\\\" : \\\"created\\\", 创建 \\\"_shards\\\" : { \\\"total\\\" : 2, \\\"successful\\\" : 1, \\\"failed\\\" : 0 }, \\\"_seq_no\\\" : 0, \\\"_primary_term\\\" : 1, \\\"status\\\" : 201 新建完成 } }, { \\\"index\\\" : { 第二条记录 \\\"_index\\\" : \\\"customer\\\", \\\"_type\\\" : \\\"external\\\", \\\"_id\\\" : \\\"2\\\", \\\"_version\\\" : 1, \\\"result\\\" : \\\"created\\\", \\\"_shards\\\" : { \\\"total\\\" : 2, \\\"successful\\\" : 1, \\\"failed\\\" : 0 }, \\\"_seq_no\\\" : 1, \\\"_primary_term\\\" : 1, \\\"status\\\" : 201 } } ] }\",\"示例2：\",\"POST /_bulk {\\\"delete\\\":{\\\"_index\\\":\\\"website\\\",\\\"_type\\\":\\\"blog\\\",\\\"_id\\\":\\\"123\\\"}} {\\\"create\\\":{\\\"_index\\\":\\\"website\\\",\\\"_type\\\":\\\"blog\\\",\\\"_id\\\":\\\"123\\\"}} {\\\"title\\\":\\\"my first blog post\\\"} {\\\"index\\\":{\\\"_index\\\":\\\"website\\\",\\\"_type\\\":\\\"blog\\\"}} {\\\"title\\\":\\\"my second blog post\\\"} {\\\"update\\\":{\\\"_index\\\":\\\"website\\\",\\\"_type\\\":\\\"blog\\\",\\\"_id\\\":\\\"123\\\"}} {\\\"doc\\\":{\\\"title\\\":\\\"my updated blog post\\\"}}\",\"7、样本测试数据\",\"一份顾客银行账户信息的虚构的 JSON 文档样本。每个文档都有下列的 schema(模式):\",\"{ \\\"account_number\\\": 0, \\\"balance\\\": 16623, \\\"firstname\\\": \\\"Bradshaw\\\", \\\"lastname\\\": \\\"Mckenzie\\\", \\\"age\\\": 29, \\\"gender\\\": \\\"F\\\", \\\"address\\\": \\\"244 Columbus Place\\\", \\\"employer\\\": \\\"Euron\\\", \\\"email\\\": \\\"bradshawmckenzie@euron.com\\\", \\\"city\\\": \\\"Hobucken\\\", \\\"state\\\": \\\"CO\\\" }\",\"测试数据地址https://gitee.com/xlh_blog/common_content/blob/master/es%E6%B5%8B%E8%AF%95%E6%95%B0%E6%8D%AE.json\",\"POST bank/account/_bulk //上面的数据 //GET _cat/indices, 查看索引 //刚导入了1000条数据 yellow open bank dno5JY9tTrGHdsjIMkvQyA 1 1 1000 0 414.2kb 414.2kb\"]},\"86\":{\"h\":\"5、进阶检索\"},\"87\":{\"h\":\"\",\"t\":[\"ES 支持两种基本方式检索：\",\"一个是通过使用 REST request URI 发送搜索参数（uri+检索参数）\",\"另一个是通过使用 REST request body 来发送它们（uri+请求体）\",\"1）、信息检索\",\"GET bank/_search 检索 bank 下所有信息，包括 type 和 docs GET bank/_search?q=*&sort=account_number:asc 请求参数方式检索 说明： q=* # 查询所有 sort # 排序字段 asc #升序\",\"返回内容：\",\"image-20211011143910397\",\"took – 花费多少ms搜索 timed_out – 是否超时 _shards – 多少分片被搜索了，以及多少成功/失败的搜索分片 max_score –文档相关性最高得分 hits.total.value - 多少匹配文档被找到 hits.sort - 结果的排序key（列），没有的话按照score排序 hits._score - 相关得分 (not applicable when using match_all)\",\"uri+请求体行检索\",\"GET /bank/_search { \\\"query\\\": { \\\"match_all\\\": {} }, \\\"sort\\\": [ { \\\"account_number\\\": \\\"asc\\\" }, { \\\"balance\\\":\\\"desc\\\"} ] }\",\"HTTP客户端工具（POSTMAN），get请求不能携带请求体，我们变为post也是一样的。我们POST一个JSON风格的查询请求体到_search API。\",\"需要了解，一旦搜索的结果被返回Elasticsearch就完成了这次请求，并且不会维护任何服务端的资源或者结果的cursor（游标）\"]},\"88\":{\"h\":\"2、Query DSL\",\"t\":[\"Elasticsearch提供了一个可以执行查询的Json风格的DSL(domain-specific language领域特定语言)。这个被称为Query DSL，该查询语言非常全面。\",\"1、基本语法格式\",\"如果针对于某个字段，那么它的结构如下： { QUERY_NAME:{ # 使用的功能 FIELD_NAME:{ # 功能参数 ARGUMENT:VALUE, ARGUMENT:VALUE,... } } }\",\"示例 使用时不要加#注释内容 GET bank/_search { \\\"query\\\": { # 查询的字段 \\\"match_all\\\": {} }, \\\"from\\\": 0, # 从第几条文档开始查 \\\"size\\\": 5, # 查几条文档 \\\"_source\\\":[\\\"balance\\\"], # 返回的数据字段， 这里只查balance \\\"sort\\\": [ { \\\"account_number\\\": { # 返回结果按哪个列排序 \\\"order\\\": \\\"desc\\\" # 降序 } } ] }\",\"query定义如何查询；\",\"match_all查询类型【代表查询所有的索引】，es中可以在query中组合非常多的查询类型完成复杂查询；\",\"除了query参数之外，我们可也传递其他的参数以改变查询结果，如sort，size；\",\"from+size限定，完成分页功能；\",\"sort排序，多字段排序，会在前序字段相等时后续字段内部排序，否则以前序为准；\",\"2、query/match匹配查询\",\"如果是非字符串，会进行精确匹配。如果是字符串，会进行全文检索\",\"基本类型（非字符串），精确控制: 查询account_number == 20的文档\",\"GET bank/_search { \\\"query\\\": { \\\"match\\\": { \\\"account_number\\\": \\\"20\\\" } } }\",\"字符串，全文检索: 查询address中含有kings的文档\",\"GET bank/_search { \\\"query\\\": { \\\"match\\\": { \\\"address\\\": \\\"kings\\\" } } }\",\"字符串，全文检索：最终查询出 address 中包含 mill 或者 road 或者 mill road 的所有记录，并给出相关性得分\",\"GET bank/_search { \\\"query\\\": { \\\"match\\\": { \\\"address\\\": \\\"mill road\\\" } } }\",\"全文检索，最终会按照评分进行排序，会对检索条件进行分词匹配。\",\"3、query/match_phrase【短语匹配】\",\"将需要匹配的值当成一整个单词（不分词）进行检索\",\"match：拆分字符串进行检索。 包含mill 或 road 或 mill road\",\"match_phrase：不拆分字符串进行检索。 包含mill road\",\"字段.keyword：必须全匹配上才检索成功。\",\"GET bank/_search { \\\"query\\\": { \\\"match_phrase\\\": { \\\"address\\\": \\\"mill road\\\" # 就是说不要匹配只有mill或只有road的，要匹配mill road一整个子串 # \\\"address.keyword\\\": \\\"990 Mill\\\" # 字段后面加上 .keyword, 必须完全匹配 } } }\",\"4、query/multi_math【多字段匹配】\",\"state或者address中包含mill，并且在查询过程中，会对于查询条件进行分词。\",\"GET bank/_search { \\\"query\\\": { \\\"multi_match\\\": { # 前面的match仅指定了一个字段。 \\\"query\\\": \\\"mill\\\", \\\"fields\\\": [ # state和address有mill子串 不要求都有 \\\"state\\\", \\\"address\\\" ] } } }\",\"5、query/bool/must复合查询\",\"复合语句可以合并，任何其他查询语句，包括符合语句。这也就意味着，复合语句之间可以互相嵌套，可以表达非常复杂的逻辑。\",\"must：必须达到must所列举的所有条件\",\"must_not：必须不匹配must_not所列举的所有条件。\",\"should：应该满足should所列举的条件。满足条件最好，不满足也可以，满足得分更高\",\"GET bank/_search { \\\"query\\\": { \\\"bool\\\": { \\\"must\\\": [ # gender必须是M， address必须包含mill { \\\"match\\\": { \\\"gender\\\": \\\"M\\\" } }, { \\\"match\\\": { \\\"address\\\": \\\"mill\\\" } } ], \\\"must_not\\\": [ # age必须不等于18 { \\\"match\\\": { \\\"age\\\": \\\"18\\\" } } ], \\\"should\\\": [ # lastname最好包含wallace { \\\"match\\\": { \\\"lastname\\\": \\\"Wallace\\\" } } ] } } }\",\"6、query/filter【结果过滤】\",\"上面的must和should影响相关性得分，而must_not仅仅是一个filter ，不贡献得分\",\"must改为filter就使must不贡献得分\",\"如果只有filter条件的话，我们会发现得分都是0\",\"并不是所有的查询都需要产生分数，特别是哪些仅用于filtering过滤的文档。不参与评分更快, 为了不计算分数，elasticsearch会自动检查场景并且优化查询的执行。\",\"GET bank/_search { \\\"query\\\": { \\\"bool\\\": { \\\"must\\\": [ { \\\"match\\\": {\\\"address\\\": \\\"mill\\\" } } ], \\\"filter\\\": { # query.bool.filter \\\"range\\\": { \\\"balance\\\": { # 哪个字段 \\\"gte\\\": \\\"10000\\\", \\\"lte\\\": \\\"20000\\\" } } } } } } 这里先是查询所有匹配address包含mill的文档，然后再根据10000<=balance<=20000进行过滤查询结果\",\"7、query/term\",\"和 match 一样。匹配某个属性的值。全文检索字段用 match，其他非 text 字段匹配用 term。\",\"比如：年龄为23岁，用term， address为mill road就用match\",\"GET bank/_search { \\\"query\\\": { \\\"bool\\\": { \\\"must\\\": [ {\\\"term\\\": { \\\"age\\\": { \\\"value\\\": \\\"28\\\" } }}, {\\\"match\\\": { \\\"address\\\": \\\"990 Mill Road\\\" }} ] } } }\",\"8、aggregations（执行聚合）\",\"​ 聚合提供了从数据中分组和提取数据的能力。最简单的聚合方法大致等于 SQL GROUP BY 和 SQL 聚合函数。在 Elasticsearch 中，有执行搜索返回 hits（命中结果），并且同时返回聚合结果，把一个响应中的所有 hits（命中结果）分隔开的能力。这是非常强大且有效的，您可以执行查询和多个聚合，并且在一次使用中得到各自的（任何一个的）返回结果，使用一次简洁和简化的 API 来避免网络往返。\",\"例：搜索 address 中包含 mill 的所有人的年龄分布以及平均年龄，但不显示这些人的详情。\",\"GET bank/_search { \\\"query\\\": { # 查询出包含mill的 \\\"match\\\": { \\\"address\\\": \\\"Mill\\\" } }, \\\"aggs\\\": { #基于查询聚合 \\\"ageAgg\\\": { # 聚合的名字，随便起 \\\"terms\\\": { # 看值的可能性分布 \\\"field\\\": \\\"age\\\", \\\"size\\\": 10 } }, \\\"ageAvg\\\": { \\\"avg\\\": { # 看age值的平均 \\\"field\\\": \\\"age\\\" } }, \\\"balanceAvg\\\": { \\\"avg\\\": { # 看balance的平均 \\\"field\\\": \\\"balance\\\" } } }, \\\"size\\\": 0 # 不看详情 }\",\"查询结果：\",\"{ \\\"took\\\" : 2, \\\"timed_out\\\" : false, \\\"_shards\\\" : { \\\"total\\\" : 1, \\\"successful\\\" : 1, \\\"skipped\\\" : 0, \\\"failed\\\" : 0 }, \\\"hits\\\" : { \\\"total\\\" : { \\\"value\\\" : 4, // 命中4条 \\\"relation\\\" : \\\"eq\\\" }, \\\"max_score\\\" : null, \\\"hits\\\" : [ ] }, \\\"aggregations\\\" : { \\\"ageAgg\\\" : { // 第一个聚合的结果 \\\"doc_count_error_upper_bound\\\" : 0, \\\"sum_other_doc_count\\\" : 0, \\\"buckets\\\" : [ { \\\"key\\\" : 38, # age为38的有2条 \\\"doc_count\\\" : 2 }, { \\\"key\\\" : 28, \\\"doc_count\\\" : 1 }, { \\\"key\\\" : 32, \\\"doc_count\\\" : 1 } ] }, \\\"ageAvg\\\" : { // 第二个聚合的结果 \\\"value\\\" : 34.0 # balance字段的平均值是34 }, \\\"balanceAvg\\\" : { \\\"value\\\" : 25208.0 } } }\",\"例：按照年龄聚合，并且求这些年龄段的这些人的平均薪资\",\"aggs/aggName/aggs/aggName子聚合\",\"写到一个聚合里是基于上个聚合进行子聚合。\",\"下面求每个age分布的平均balance\",\"GET bank/_search { \\\"query\\\": { \\\"match_all\\\": {} }, \\\"aggs\\\": { \\\"ageAgg\\\": { \\\"terms\\\": { # 看分布 \\\"field\\\": \\\"age\\\", \\\"size\\\": 100 }, \\\"aggs\\\": { # 与terms并列 \\\"ageAvg\\\": { #平均 \\\"avg\\\": { \\\"field\\\": \\\"balance\\\" } } } } }, \\\"size\\\": 0 }\",\"例：复杂子聚合：查出所有年龄分布，并且这些年龄段中M的平均薪资和F的平均薪资以及这个年龄段的总体平均薪资\",\"GET bank/_search { \\\"query\\\": { \\\"match_all\\\": {} }, \\\"aggs\\\": { \\\"ageAgg\\\": { \\\"terms\\\": { # 看age分布 \\\"field\\\": \\\"age\\\", \\\"size\\\": 100 }, \\\"aggs\\\": { # 子聚合 \\\"genderAgg\\\": { \\\"terms\\\": { # 看gender分布 \\\"field\\\": \\\"gender.keyword\\\" # 注意这里，文本字段应该用.keyword }, \\\"aggs\\\": { # 子聚合 \\\"balanceAvg\\\": { \\\"avg\\\": { # 男性的平均 \\\"field\\\": \\\"balance\\\" } } } }, \\\"ageBalanceAvg\\\": { \\\"avg\\\": { #age分布的平均（男女） \\\"field\\\": \\\"balance\\\" } } } } }, \\\"size\\\": 0 }\"]},\"89\":{\"h\":\"3、Mapping字段映射\",\"t\":[\"1、字段类型\",\"image-20211012145448490\",\"text ⽤于全⽂索引，搜索时会自动使用分词器进⾏分词再匹配\",\"keyword 不分词，搜索时需要匹配完整的值\",\"image-20211012145516034\",\"image-20211012145531890\",\"2、Mapping（映射） Mapping 是用来定义一个文档（document），以及它所包含的属性（field）是如何存储和索引的。比如，使用 mapping 来定义：\",\"哪些字符串属性应该被看做全文本属性（full text fields）；\",\"哪些属性包含数字，日期或地理位置；\",\"文档中的所有属性是否都能被索引（all 配置）；\",\"日期的格式；\",\"自定义映射规则来执行动态添加属性；\",\"查看mapping信息：GET bank/_mapping\",\"3、新版本改变\",\"ElasticSearch7-去掉type概念\",\"关系型数据库中两个数据表示是独立的，即使他们里面有相同名称的列也不影响使用，但ES中不是这样的。elasticsearch是基于Lucene开发的搜索引擎，而ES中不同type下名称相同的filed最终在Lucene中的处理方式是一样的。 \",\"两个不同type下的两个user_name，在ES同一个索引下其实被认为是同一个filed，你必须在两个不同的type中定义相同的filed映射。否则，不同type中的相同字段名称就会在处理中出现冲突的情况，导致Lucene处理效率下降。\",\"去掉type就是为了提高ES处理数据的效率。\",\"Elasticsearch 7.x URL中的type参数为可选。比如，索引一个文档不再要求提供文档类型。\",\"Elasticsearch 8.x 不再支持URL中的type参数。\",\"解决： 1）将索引从多类型迁移到单类型，每种类型文档一个独立索引\",\"2）将已存在的索引下的类型数据，全部迁移到指定位置即可。详见数据迁移\",\"4、对映射的操作\",\"1）创建索引并指定映射\",\"PUT /my_index { \\\"mappings\\\": { \\\"properties\\\": { \\\"age\\\": { \\\"type\\\": \\\"integer\\\" }, \\\"email\\\": { \\\"type\\\": \\\"keyword\\\" # 指定为keyword }, \\\"name\\\": { \\\"type\\\": \\\"text\\\" # 全文检索。保存时候分词，检索时候进行分词匹配 } } } }\",\"2）添加新的字段映射\",\"PUT /my_index/_mapping { \\\"properties\\\": { \\\"employee-id\\\": { \\\"type\\\": \\\"keyword\\\", \\\"index\\\": false # 字段不能被检索。检索 } } }\",\"3)更新映射\",\"对于已经存在的映射字段，我们不能更新。更新必须创建新的索引进行数据迁移\",\"4）数据迁移\",\"先创建new_twitter的正确映射，然后使用如下方式进行数据迁移。\",\"6.0以后写法 POST reindex { \\\"source\\\":{ \\\"index\\\":\\\"twitter\\\" }, \\\"dest\\\":{ \\\"index\\\":\\\"new_twitters\\\" } } 老版本写法 POST reindex { \\\"source\\\":{ \\\"index\\\":\\\"twitter\\\", \\\"twitter\\\":\\\"twitter\\\" }, \\\"dest\\\":{ \\\"index\\\":\\\"new_twitters\\\" } }\",\"示例：把bank/account下的文档迁移到newbank下\",\"创建newbank索引\",\"PUT /newbank { \\\"mappings\\\": { \\\"properties\\\": { \\\"account_number\\\": { \\\"type\\\": \\\"long\\\" }, \\\"address\\\": { \\\"type\\\": \\\"text\\\" }, \\\"age\\\": { \\\"type\\\": \\\"integer\\\" }, \\\"balance\\\": { \\\"type\\\": \\\"long\\\" }, \\\"city\\\": { \\\"type\\\": \\\"keyword\\\" }, \\\"email\\\": { \\\"type\\\": \\\"keyword\\\" }, \\\"employer\\\": { \\\"type\\\": \\\"keyword\\\" }, \\\"firstname\\\": { \\\"type\\\": \\\"text\\\" }, \\\"gender\\\": { \\\"type\\\": \\\"keyword\\\" }, \\\"lastname\\\": { \\\"type\\\": \\\"text\\\", \\\"fields\\\": { \\\"keyword\\\": { \\\"type\\\": \\\"keyword\\\", \\\"ignore_above\\\": 256 } } }, \\\"state\\\": { \\\"type\\\": \\\"keyword\\\" } } } }\",\"数据迁移\",\"POST _reindex { \\\"source\\\": { \\\"index\\\": \\\"bank\\\", \\\"type\\\": \\\"account\\\" }, \\\"dest\\\": { \\\"index\\\": \\\"newbank\\\" } }\",\"查看newbank中的数据\",\"GET /newbank/_search 输出 \\\"hits\\\" : { \\\"total\\\" : { \\\"value\\\" : 1000, \\\"relation\\\" : \\\"eq\\\" }, \\\"max_score\\\" : 1.0, \\\"hits\\\" : [ { \\\"_index\\\" : \\\"newbank\\\", \\\"_type\\\" : \\\"_doc\\\", # 没有了类型\"]},\"90\":{\"h\":\"4、分词\",\"t\":[\"一个tokenizer（分词器）接收一个字符流，将之分割为独立的tokens（词元，通常是独立的单词），然后输出tokens流。\",\"例如：whitespace tokenizer遇到空白字符时分割文本。它会将文本\\\"Quick brown fox!\\\"分割为[Quick,brown,fox!]\",\"该tokenizer（分词器）还负责记录各个terms(词条)的顺序或position位置（用于phrase短语和word proximity词近邻查询），以及term（词条）所代表的原始word（单词）的start（起始）和end（结束）的character offsets（字符串偏移量）（用于高亮显示搜索的内容）。\",\"elasticsearch提供了很多内置的分词器（标准分词器），可以用来构建custom analyzers（自定义分词器）\",\"示例：\",\"POST _analyze { \\\"analyzer\\\": \\\"standard\\\", \\\"text\\\": \\\"Quick brown fox!\\\" }\",\"分词结果：\",\"image-20211012154808341\",\"1、安装ik分词器\",\"所有的语言分词，默认使用的都是“Standard Analyzer”，但是这些分词器针对于中文的分词，并不友好。为此需要安装中文的分词器。\",\"下载地址：https://github.com/medcl/elasticsearch-analysis-ik/releases\",\"在前面安装的elasticsearch时，我们已经将elasticsearch容器的“/usr/share/elasticsearch/plugins”目录，映射到宿主机的“ /mydata/elasticsearch/plugins”目录下，所以比较方便的做法就是下载“/elasticsearch-analysis-ik-7.4.2.zip”文件，然后解压到该文件夹下即可。安装完毕后，需要重启elasticsearch容器。\",\"2、测试分词器\",\"1、ik_smart\",\"POST _analyze { \\\"analyzer\\\": \\\"ik_smart\\\", \\\"text\\\": \\\"我是中国人\\\" }\",\"返回结果\",\"{ \\\"tokens\\\" : [ { \\\"token\\\" : \\\"我\\\", \\\"start_offset\\\" : 0, \\\"end_offset\\\" : 1, \\\"type\\\" : \\\"CN_CHAR\\\", \\\"position\\\" : 0 }, { \\\"token\\\" : \\\"是\\\", \\\"start_offset\\\" : 1, \\\"end_offset\\\" : 2, \\\"type\\\" : \\\"CN_CHAR\\\", \\\"position\\\" : 1 }, { \\\"token\\\" : \\\"中国人\\\", \\\"start_offset\\\" : 2, \\\"end_offset\\\" : 5, \\\"type\\\" : \\\"CN_WORD\\\", \\\"position\\\" : 2 } ] }\",\"2、ik_max_word\",\"POST _analyze { \\\"analyzer\\\": \\\"ik_max_word\\\", \\\"text\\\": \\\"我是中国人\\\" }\",\"返回结果\",\"{ \\\"tokens\\\" : [ { \\\"token\\\" : \\\"我\\\", \\\"start_offset\\\" : 0, \\\"end_offset\\\" : 1, \\\"type\\\" : \\\"CN_CHAR\\\", \\\"position\\\" : 0 }, { \\\"token\\\" : \\\"是\\\", \\\"start_offset\\\" : 1, \\\"end_offset\\\" : 2, \\\"type\\\" : \\\"CN_CHAR\\\", \\\"position\\\" : 1 }, { \\\"token\\\" : \\\"中国人\\\", \\\"start_offset\\\" : 2, \\\"end_offset\\\" : 5, \\\"type\\\" : \\\"CN_WORD\\\", \\\"position\\\" : 2 }, { \\\"token\\\" : \\\"中国\\\", \\\"start_offset\\\" : 2, \\\"end_offset\\\" : 4, \\\"type\\\" : \\\"CN_WORD\\\", \\\"position\\\" : 3 }, { \\\"token\\\" : \\\"国人\\\", \\\"start_offset\\\" : 3, \\\"end_offset\\\" : 5, \\\"type\\\" : \\\"CN_WORD\\\", \\\"position\\\" : 4 } ] }\",\"3、自定义词库\",\"先安装nginx\",\"1）随便启动一个 nginx 实例，只是为了复制出配置\",\"docker run -p 80:80 --name nginx -d nginx:1.10\",\"2)将容器内的配置文件拷贝到当前目录\",\"docker container cp nginx:/etc/nginx .\",\"3）修改文件名称：mv nginx conf 把这个 conf 移动到/mydata/nginx 下\",\"4）终止原容器：docker stop nginx\",\"5）执行命令删除原容器：docker rm $ContainerId\",\"6）创建新的 nginx；执行以下命令\",\"docker run -p 80:80 --name nginx \\\\ -v /mydata/nginx/html:/usr/share/nginx/html \\\\ -v /mydata/nginx/logs:/var/log/nginx \\\\ -v /mydata/nginx/conf:/etc/nginx \\\\ -d nginx:1.10\",\"7)给 nginx 的 html 下面放的所有资源可以直接访问；\",\"8)在nginx/html/中创建一个es文件夹，在里面新建文件fenci.txt，用作分词表，写入：尚硅谷\",\"image-20211012192408901\",\"9）访问，由于访问nginx中资源，都在html文件夹下查找，所以直接访问/es/fenci.txt即可（乱码先不用管，访问到了即可）\",\"image-20211012192537189\",\"10）修改/usr/share/elasticsearch/plugins/ik/config中的IKAnalyzer.cfg.xml\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <!DOCTYPE properties SYSTEM \\\"http://java.sun.com/dtd/properties.dtd\\\"> <properties> <comment>IK Analyzer 扩展配置</comment> <!--用户可以在这里配置自己的扩展字典 --> <entry key=\\\"ext_dict\\\"></entry> <!--用户可以在这里配置自己的扩展停止词字典--> <entry key=\\\"ext_stopwords\\\"></entry> <!--用户可以在这里配置远程扩展字典 --> <entry key=\\\"remote_ext_dict\\\">http://192.168.56.10/es/fenci.txt</entry> <!--用户可以在这里配置远程扩展停止词字典--> <!-- <entry key=\\\"remote_ext_stopwords\\\">words_location</entry> --> </properties>\",\"11）重启es,验证分词效果\",\"POST _analyze { \\\"analyzer\\\": \\\"ik_max_word\\\", \\\"text\\\": \\\"尚硅谷不错\\\" }\",\"分词效果\",\"{ \\\"tokens\\\" : [ { \\\"token\\\" : \\\"尚硅谷\\\", \\\"start_offset\\\" : 0, \\\"end_offset\\\" : 3, \\\"type\\\" : \\\"CN_WORD\\\", \\\"position\\\" : 0 }, { \\\"token\\\" : \\\"硅谷\\\", \\\"start_offset\\\" : 1, \\\"end_offset\\\" : 3, \\\"type\\\" : \\\"CN_WORD\\\", \\\"position\\\" : 1 }, { \\\"token\\\" : \\\"不错\\\", \\\"start_offset\\\" : 3, \\\"end_offset\\\" : 5, \\\"type\\\" : \\\"CN_WORD\\\", \\\"position\\\" : 2 } ] }\",\"开始使用 |Elasticsearch Go 客户端 \",\"使用第三方组件步骤\",\"创建客户端，\",\"使用客户端操作相应API\",\"go提供了2种两种客户端，一种是低级api，一种是全类型API，下面提供了示例全是基于全类型的。具体的可以查看上方给出的官网。\",\"image-20240724174725467\",\"// ES 配置 cfg := elasticsearch.Config{ Addresses: []string{ \\\"http://localhost:9200\\\", }, } // 创建客户端连接 client, err := elasticsearch.NewTypedClient(cfg) if err != nil { fmt.Printf(\\\"elasticsearch.NewTypedClient failed, err:%v\\\\n\\\", err) return }\",\"看到该客户端有API\",\"image-20240724174902053\",\"typedClient.Indices.Create(\\\"my_index\\\").Do(context.TODO())\",\"document := struct { Name string `json:\\\"name\\\"` }{ \\\"go-elasticsearch\\\", } typedClient.Index(\\\"my_index\\\"). Id(\\\"1\\\"). Request(document). Do(context.TODO())\",\"typedClient.Get(\\\"my_index\\\", \\\"id\\\").Do(context.TODO())\",\"typedClient.Update(\\\"my_index\\\", \\\"id\\\"). Request(&update.Request{ Doc: json.RawMessage(`{ language: \\\"Go\\\" }`), }).Do(context.TODO())\",\"typedClient.Delete(\\\"my_index\\\", \\\"id\\\").Do(context.TODO())\",\"typedClient.Indices.Delete(\\\"my_index\\\").Do(context.TODO())\"]},\"91\":{\"h\":\"定义实体\",\"t\":[\"type Post struct { ID int64 `json:\\\"id,string\\\" db:\\\"post_id\\\"` // 帖子id AuthorID int64 `json:\\\"author_id\\\" db:\\\"author_id\\\"` // 作者id CommunityID int64 `json:\\\"community_id\\\" db:\\\"community_id\\\" binding:\\\"required\\\"` // 社区id Status int32 `json:\\\"status\\\" db:\\\"status\\\"` // 帖子状态 Title string `json:\\\"title\\\" db:\\\"title\\\" binding:\\\"required\\\"` // 帖子标题 Content string `json:\\\"content\\\" db:\\\"content\\\" binding:\\\"required\\\"` // 帖子内容 CreateTime time.Time `json:\\\"create_time\\\" db:\\\"create_time\\\"` // 帖子创建时间 }\"]},\"92\":{\"h\":\"创建索引\",\"t\":[\"// createIndex 创建索引 func createIndex(client *elasticsearch.TypedClient) { resp, err := client.Indices. Create(\\\"post\\\"). Do(context.Background()) if err != nil { fmt.Printf(\\\"create index failed, err:%v\\\\n\\\", err) return } fmt.Printf(\\\"index:%#v\\\\n\\\", resp.Index) }\"]},\"93\":{\"h\":\"增加文档\",\"t\":[\"// indexDocument 索引文档 func indexDocument(client *elasticsearch.TypedClient,post Post) { // 定义 document 结构体对象 //Post{ // ID: 1, // 帖子id // AuthorID: // 作者id // CommunityID: // 社区id // Status: // 帖子状态 // Title: // 帖子标题 // Content: // 帖子内容 // CreateTime: //帖子创建时间 // } // 添加文档 resp, err := client.Index(\\\"post\\\"). Id(strconv.FormatInt(post.ID, 10)). Document(post). Do(context.Background()) if err != nil { fmt.Printf(\\\"indexing document failed, err:%v\\\\n\\\", err) return } fmt.Printf(\\\"result:%#v\\\\n\\\", resp.Result) }\"]},\"94\":{\"h\":\"动态搜索文档\",\"t\":[\"import ( \\\"context\\\" \\\"fmt\\\" \\\"github.com/elastic/go-elasticsearch/v8\\\" \\\"github.com/elastic/go-elasticsearch/v8/typedapi/types\\\" ) // searchDocument 指定条件搜索文档 func searchDocument(client *elasticsearch.TypedClient,str string) data []string { // 搜索content中包含的文档 resp, err := client.Search(). Index(\\\"post\\\"). Query(&types.Query{ MatchPhrase: map[string]types.MatchPhraseQuery{ \\\"content\\\": {Query: str}, }, }). Do(context.Background()) if err != nil { fmt.Printf(\\\"search document failed, err:%v\\\\n\\\", err) return } //fmt.Printf(\\\"total: %d\\\\n\\\", resp.Hits.Total.Value) //// 遍历所有结果 for _, hit := range resp.Hits.Hits { fmt.Printf(\\\"%s\\\\n\\\", hit.Source_) // 这里假设hit.Source_是字符串类型，如果实际类型不同，需要做相应的转换 data = append(data, fmt.Sprintf(\\\"%v\\\", hit.Source_)) } return }\"]},\"95\":{\"c\":[\"Elasticsearch\"]},\"96\":{\"c\":[\"elasticsearch\",\"数据同步\"]},\"97\":{\"h\":\"go-简单使用elasticsearch\",\"t\":[\"go-简单使用elasticsearch\",\"go-es客户端：github.com/elastic/go-elasticsearch/v8\",\"执行以下命令安装v8版本的 go 客户端。\",\"go get github.com/elastic/go-elasticsearch/v8@latest\",\"导入依赖。\",\"import \\\"github.com/elastic/go-elasticsearch/v8\\\"\",\"可以根据实际需求导入不同的客户端版本，也支持在一个项目中导入不同的客户端版本。\",\"import ( elasticsearch7 \\\"github.com/elastic/go-elasticsearch/v7\\\" elasticsearch8 \\\"github.com/elastic/go-elasticsearch/v8\\\") // ... es7, _ := elasticsearch7.NewDefaultClient() es8, _ := elasticsearch8.NewDefaultClient()\"]},\"98\":{\"h\":\"连接 ES\",\"t\":[\"指定要连接 ES 的相关配置，并创建客户端连接。\",\"// ES 配置 cfg := elasticsearch.Config{ Addresses: []string{ \\\"http://localhost:9200\\\", }, } // 创建客户端连接 client, err := elasticsearch.NewTypedClient(cfg) if err != nil { fmt.Printf(\\\"elasticsearch.NewTypedClient failed, err:%v\\\\n\\\", err) return}\",\"创建索引：\",\"// createIndex 创建索引 func createIndex(client *elasticsearch.TypedClient) { resp, err := client.Indices.Create(\\\"my-review-1\\\").Do(context.Background()) if err != nil { fmt.Printf(\\\"create index failed, err:%v\\\\n\\\", err) return } fmt.Printf(\\\"index:%#v\\\\n\\\", resp.Index) }\",\"package es import ( \\\"bluebell/setting\\\" \\\"fmt\\\" \\\"github.com/elastic/go-elasticsearch/v8\\\" ) var Esdb *elasticsearch.TypedClient // Init 初始化ES连接 func Init(cfg *setting.ESConfig) (err error) { // 创建客户端连接 Esdb, err = elasticsearch.NewTypedClient(elasticsearch.Config{ Addresses: cfg.Adders, }) if err != nil { fmt.Printf(\\\"elasticsearch.NewTypedClient failed, err:%v\\\\n\\\", err) return } fmt.Printf(\\\"init es succss, Esdb:%v\\\\n\\\", Esdb) return } // ES连接没有关闭方法 // func Close() { // _ = esdb.() // }\",\"有同步，有异步，有中间件。这里讨论的都是增量同步，如果要全量同步，可以使用logstash-input-jdbc，go-mysql-elasticsearch，elasticsearch-jdbc等插件，实现对mysql的数据导入到es中。\",\"最为简单，在发表帖子时，直接写入es当中。\",\"//同步写es // CreatePostHandler 创建帖子的处理函数 func CreatePostHandler(c *gin.Context) { // 1. 获取参数及参数的校验 //c.ShouldBindJSON() // validator --> binding tag p := new(models.Post) if err := c.ShouldBindJSON(p); err != nil { zap.L().Debug(\\\"c.ShouldBindJSON(p) error\\\", zap.Any(\\\"err\\\", err)) zap.L().Error(\\\"create post with invalid param\\\") ResponseError(c, CodeInvalidParam) return } // 从 c 取到当前发请求的用户的ID userID, err := getCurrentUserID(c) if err != nil { ResponseError(c, CodeNeedLogin) return } p.AuthorID = userID // 2. 创建帖子 if err := logic.CreatePost(p); err != nil { zap.L().Error(\\\"logic.CreatePost(p) failed\\\", zap.Error(err)) ResponseError(c, CodeServerBusy) return } //es直接同步 // 2. 根据id取出帖子数据（查数据库） data, err := logic.GetPostById(p.ID) if err != nil { zap.L().Error(\\\"logic.GetPostById(pid) failed\\\", zap.Error(err)) ResponseError(c, CodeServerBusy) return } // 3.获取该用户的粉丝集合，从mysql获取，或者从redis中获取都可以，然后推送粉丝 data, err := logic.SelectFans(p.AuthorID) if err != nil { zap.L().Error(\\\"logic.SelectFans(p); failed\\\", zap.Error(err)) ResponseError(c, CodeServerBusy) return } // 4. 根据粉丝集合，进行推送 if err := logic.SendFeed(data, p.ID); err != nil { zap.L().Error(\\\"logic.SendFeed() failed\\\", zap.Error(err)) ResponseError(c, CodeServerBusy) return } // 5. 返回响应 ResponseSuccess(c, nil) }\"]},\"99\":{\"c\":[\"Go\"]},\"100\":{\"c\":[\"elasticsearch\"]},\"101\":{\"h\":\"gin使用rabbitMQ实现异步双写\",\"t\":[\"gin使用rabbitMQ实现异步双写\",\"go-es客户端：github.com/elastic/go-elasticsearch/v8\",\"执行以下命令安装v8版本的 go 客户端。\",\"go get github.com/elastic/go-elasticsearch/v8@latest\",\"导入依赖。\",\"import \\\"github.com/elastic/go-elasticsearch/v8\\\"\",\"可以根据实际需求导入不同的客户端版本，也支持在一个项目中导入不同的客户端版本。\",\"import ( elasticsearch7 \\\"github.com/elastic/go-elasticsearch/v7\\\" elasticsearch8 \\\"github.com/elastic/go-elasticsearch/v8\\\") // ... es7, _ := elasticsearch7.NewDefaultClient() es8, _ := elasticsearch8.NewDefaultClient()\"]},\"102\":{\"h\":\"连接 ES\",\"t\":[\"指定要连接 ES 的相关配置，并创建客户端连接。\",\"// ES 配置 cfg := elasticsearch.Config{ Addresses: []string{ \\\"http://localhost:9200\\\", }, } // 创建客户端连接 client, err := elasticsearch.NewTypedClient(cfg) if err != nil { fmt.Printf(\\\"elasticsearch.NewTypedClient failed, err:%v\\\\n\\\", err) return}\",\"创建索引：\",\"// createIndex 创建索引 func createIndex(client *elasticsearch.TypedClient) { resp, err := client.Indices.Create(\\\"my-review-1\\\").Do(context.Background()) if err != nil { fmt.Printf(\\\"create index failed, err:%v\\\\n\\\", err) return } fmt.Printf(\\\"index:%#v\\\\n\\\", resp.Index) }\",\"package es import ( \\\"bluebell/setting\\\" \\\"fmt\\\" \\\"github.com/elastic/go-elasticsearch/v8\\\" ) var Esdb *elasticsearch.TypedClient // Init 初始化ES连接 func Init(cfg *setting.ESConfig) (err error) { // 创建客户端连接 Esdb, err = elasticsearch.NewTypedClient(elasticsearch.Config{ Addresses: cfg.Adders, }) if err != nil { fmt.Printf(\\\"elasticsearch.NewTypedClient failed, err:%v\\\\n\\\", err) return } fmt.Printf(\\\"init es succss, Esdb:%v\\\\n\\\", Esdb) return } // ES连接没有关闭方法 // func Close() { // _ = esdb.() // }\",\"有同步，有异步，有中间件。这里讨论的都是增量同步，如果要全量同步，可以使用logstash-input-jdbc，go-mysql-elasticsearch，elasticsearch-jdbc等插件，实现对mysql的数据导入到es中。\",\"最为简单，在发表帖子时，直接写入es当中。\",\"//同步写es // CreatePostHandler 创建帖子的处理函数 func CreatePostHandler(c *gin.Context) { // 1. 获取参数及参数的校验 //c.ShouldBindJSON() // validator --> binding tag p := new(models.Post) if err := c.ShouldBindJSON(p); err != nil { zap.L().Debug(\\\"c.ShouldBindJSON(p) error\\\", zap.Any(\\\"err\\\", err)) zap.L().Error(\\\"create post with invalid param\\\") ResponseError(c, CodeInvalidParam) return } // 从 c 取到当前发请求的用户的ID userID, err := getCurrentUserID(c) if err != nil { ResponseError(c, CodeNeedLogin) return } p.AuthorID = userID // 2. 创建帖子 if err := logic.CreatePost(p); err != nil { zap.L().Error(\\\"logic.CreatePost(p) failed\\\", zap.Error(err)) ResponseError(c, CodeServerBusy) return } //es直接同步 // 根据id取出帖子数据（查数据库） data, err := logic.GetPostById(p.ID) if err != nil { zap.L().Error(\\\"logic.GetPostById(pid) failed\\\", zap.Error(err)) ResponseError(c, CodeServerBusy) return } // 3.获取该用户的粉丝集合，从mysql获取，或者从redis中获取都可以，然后推送粉丝 data, err := logic.SelectFans(p.AuthorID) if err != nil { zap.L().Error(\\\"logic.SelectFans(p); failed\\\", zap.Error(err)) ResponseError(c, CodeServerBusy) return } // 4. 根据粉丝集合，进行推送 if err := logic.SendFeed(data, p.ID); err != nil { zap.L().Error(\\\"logic.SendFeed() failed\\\", zap.Error(err)) ResponseError(c, CodeServerBusy) return } // 5. 返回响应 ResponseSuccess(c, nil) }\"]},\"103\":{\"c\":[\"gin使用rabbitMQ实现异步双写\",\"rabbitMQ\"]},\"104\":{\"c\":[\"rabbitMQ\"]},\"105\":{\"h\":\"gin使用redis实现共同关注\",\"t\":[\"gin使用redis实现共同关注\",\"可以使用mysql结合redis记录用户关注的关系，mysql和redis各存一份，之后可以使用set集合求交集，方便求得两个用户之间的共同关注，避免在mysql频繁查询。redis是键值数据库，键为业务前缀：userid，值为set集合，把该用户所关注的用户id加入set集合，set集合重复会加不进去，这样就简单实现了不可重复关注。\",\"先定义错误提示\",\"//定义错误提示 var ( ErrFollowRepeated = errors.New(\\\"查询不到信息\\\") ErrNotFollowRepeated = errors.New(\\\"不允许重复取消关注\\\") )\"]},\"106\":{\"h\":\"关注\",\"t\":[\"首先需要实现关注的方法，代码如下\",\"//关注的方法，key的格式：前缀+用户id func FollowOn(userId int64, followId int64) error { //1.生成Key followkey := getRedisKey(KeyFollowSetPF + strconv.Itoa(int(userId))) //2.关注，把被关注的id加入该用户的set集合。 _, err := client.SAdd(followkey, followId).Result() if err != nil { return err } return nil }\"]},\"107\":{\"h\":\"取关\",\"t\":[\"需要实现取关方法，代码如下\",\"func FollowOff(userId int64, followId int64) error { //1.生成Key followkey := getRedisKey(KeyFollowSetPF + strconv.Itoa(int(userId))) // 2.取关，删除set中元素 _, err := client.SRem(followkey, followId).Result() if err != nil { return err } return nil }\"]},\"108\":{\"h\":\"判断是否关注\",\"t\":[\"判断是否关注\",\" func GetIsFollow(p *models.Follow) bool { //1.生成Key followkey := getRedisKey(KeyFollowSetPF + strconv.Itoa(int(p.UserID))) isMember, _ := client.SIsMember(followkey, p.FollowUserID).Result() return isMember }\"]},\"109\":{\"h\":\"两用户求交集\",\"t\":[\"两用户求交集\",\" // GetFollowCommons 获取共同关注，求交集 func GetFollowCommons(userId, commonId int64) *[]string { // 1. 生成Key followkey1 := getRedisKey(KeyFollowSetPF + strconv.Itoa(int(userId))) followkey2 := getRedisKey(KeyFollowSetPF + strconv.Itoa(int(commonId))) // 2. 使用Redis客户端执行SInter操作 result, err := client.SInter(followkey1, followkey2).Result() if err != nil { // 3. 如果发生错误，返回nil return nil } // 5. 返回users切片 return &result }\"]},\"110\":{\"h\":\"关注\",\"t\":[\"var ( ErrFollowRepeated = errors.New(\\\"重复关注\\\") ) // InsertFollow 关注 func InsertFollow(p *models.Follow) (err error) { //先查询一下是否已关注 isFollow := redis.GetIsFollow(p) if isFollow { return ErrFollowRepeated } // 1. 保存到数据库 err = mysql.InsertFollow(p) if err != nil { return err } // err = redis.CreatePost(p.ID, p.CommunityID) //2.redis中插入set数据 //同时把数据放进redis，把关注用户的id，放入redis的set集合 sadd userId followerUserId if err := redis.FollowOn(p.UserID, p.FollowUserID); err != nil { return err } return // 3. 返回 }\"]},\"111\":{\"h\":\"取关\",\"t\":[\"// DeleteFollow 取消关注 func DeleteFollow(p *models.Follow) (err error) { // 1. 保存到数据库 err = mysql.DeleteFollow(p) if err != nil { return err } //取关则删除数据 //同时把数据放进redis，把关注用户的id，放入redis的set集合 sadd userId followerUserId redis.FollowOff(p.UserID, p.FollowUserID) return // 3. 返回 }\"]},\"112\":{\"h\":\"获取共同关注\",\"t\":[\"// GetFollowCommons 获取共同关注 func GetFollowCommons(userId, commonId int64) []*models.User { //3.redis中求set集合求交集 result := redis.GetFollowCommons(userId, commonId) // 4. 解析结果，并转换为models.User类型的切片 // 这里是分配了一个指针数组，并把这个指针数组返回。 users := make([]*models.User, len(*result)) for i, id := range *result { // 这里需要根据id查询对应的用户信息，并填充到users切片 // 假设有一个函数getUserByID，可以查询到对应的用户信息 idInt, err := strconv.ParseInt(id, 10, 64) if err != nil { break } user, err := mysql.GetUserById(idInt) if err != nil { break } //users[i]是指针，*users[i]是获取该地址的值。(*user)是因为其也是一个指针。 (*users[i]).UserID = (*user).UserID } return users }\"]},\"113\":{\"c\":[\"Go\"]},\"114\":{\"c\":[\"gin使用redis实现共同关注\",\"redis\"]},\"115\":{\"h\":\"gin使用redis实现简单关注推送\",\"t\":[\"go-简单使用redis，gin使用redis实现简单关注推送\",\"当我们关注了用户后，这个用户发了动态，那么我们应该把这些数据推送给用户，这个需求，其实我们又把他叫做Feed流，关注推送也叫做Feed流，直译为投喂。为用户持续的提供“沉浸式”的体验，通过无限下拉刷新获取新的信息。\",\"对于传统的模式的内容解锁：我们是需要用户去通过搜索引擎或者是其他的方式去解锁想要看的内容\",\"image-20240721000935042\",\"对于新型的Feed流的的效果：不需要我们用户再去推送信息，而是系统分析用户到底想要什么，然后直接把内容推送给用户，从而使用户能够更加的节约时间，不用主动去寻找。\",\"image-20240721000951669\",\"Feed流产品有两种常见模式： Timeline：不做内容筛选，简单的按照内容发布时间排序，常用于好友或关注。例如朋友圈\",\"优点：信息全面，不会有缺失。并且实现也相对简单\",\"缺点：信息噪音较多，用户不一定感兴趣，内容获取效率低\",\"智能排序：利用智能算法屏蔽掉违规的、用户不感兴趣的内容。推送用户感兴趣信息来吸引用户\",\"优点：投喂用户感兴趣信息，用户粘度很高，容易沉迷\",\"缺点：如果算法不精准，可能起到反作用 这里是关注后推送，是基于关注的好友来做Feed流，因此采用Timeline的模式。该模式的实现方案有三种：\",\"我们本次针对好友的操作，采用的就是Timeline的方式，只需要拿到我们关注用户的信息，然后按照时间排序即可\",\"，因此采用Timeline的模式。该模式的实现方案有三种：\",\"拉模式\",\"推模式\",\"推拉结合\",\"拉模式：也叫做读扩散\",\"该模式的核心含义就是：当张三和李四和王五发了消息后，都会保存在自己的邮箱中，假设赵六要读取信息，那么他会从读取他自己的收件箱，此时系统会从他关注的人群中，把他关注人的信息全部都进行拉取，然后在进行排序\",\"优点：比较节约空间，因为赵六在读信息时，并没有重复读取，而且读取完之后可以把他的收件箱进行清楚。\",\"缺点：比较延迟，当用户读取数据时才去关注的人里边去读取数据，假设用户关注了大量的用户，那么此时就会拉取海量的内容，对服务器压力巨大。\",\"推模式：也叫做写扩散。\",\"推模式是没有写邮箱的，当张三写了一个内容，此时会主动的把张三写的内容发送到他的粉丝收件箱中去，假设此时李四再来读取，就不用再去临时拉取了\",\"优点：时效快，不用临时拉取\",\"缺点：内存压力大，假设一个大V写信息，很多人关注他， 就会写很多分数据到粉丝那边去\",\"推拉结合模式：也叫做读写混合，兼具推和拉两种模式的优点。\",\"推拉模式是一个折中的方案，站在发件人这一段，如果是个普通的人，那么我们采用写扩散的方式，直接把数据写入到他的粉丝中去，因为普通的人他的粉丝关注量比较小，所以这样做没有压力，如果是大V，那么他是直接将数据先写入到一份到发件箱里边去，然后再直接写一份到活跃粉丝收件箱里边去，现在站在收件人这端来看，如果是活跃粉丝，那么大V和普通的人发的都会直接写入到自己收件箱里边来，而如果是普通的粉丝，由于他们上线不是很频繁，所以等他们上线时，再从发件箱里边去拉信息。\",\"Feed流中的数据会不断更新，所以数据的角标也在变化，因此不能采用传统的分页模式。\",\"传统了分页在feed流是不适用的，因为我们的数据会随时发生变化\",\"假设在t1 时刻，我们去读取第一页，此时page = 1 ，size = 5 ，那么我们拿到的就是10~6 这几条记录，假设现在t2时候又发布了一条记录，此时t3 时刻，我们来读取第二页，读取第二页传入的参数是page=2 ，size=5 ，那么此时读取到的第二页实际上是从6 开始，然后是6~2 ，那么我们就读取到了重复的数据，所以feed流的分页，不能采用原始方案来做。\",\"image-20240721031244857\",\"我们需要记录每次操作的最后一条，然后从这个位置开始去读取数据\",\"举个例子：我们从t1时刻开始，拿第一页数据，拿到了10~6，然后记录下当前最后一次拿取的记录，就是6，t2时刻发布了新的记录，此时这个11放到最顶上，但是不会影响我们之前记录的6，此时t3时刻来拿第二页，第二页这个时候拿数据，还是从6后一点的5去拿，就拿到了5-1的记录。我们这个地方可以采用sortedSet来做，可以进行范围查询，并且还可以记录当前获取数据时间戳最小值，就可以实现滚动分页了\",\"image-20240721031348904\",\"需求：在个人主页的“关注”卡片中，查询并展示推送的Blog信息：\",\"具体操作如下：\",\"1、每次查询完成后，我们要分析出查询出数据的最小时间戳，这个值会作为下一次查询的条件\",\"2、我们需要找到与上一次查询相同的查询个数作为偏移量，下次查询时，跳过这些查询过的数据，拿到我们需要的数据\",\"综上：我们的请求参数中就需要携带 lastId：上一次查询的最小时间戳 和偏移量这两个参数。\",\"这两个参数第一次会由前端来指定，以后的查询就根据后台结果作为条件，再次传递到后台。\",\"timeline：时间线，按时间浏览。\",\"推模式：推送到粉丝的信箱。\",\"拉模式：当点入主页时，才从该博主的信息拉取。\",\"如果粉丝量很多，退模式\",\"流程：\",\"创建帖子的同时，获取该作者的粉丝，往粉丝的信箱推送，粉丝点击我的关注时，去信箱中取。\",\"所以有 获取该作者粉丝，往信箱进行发送，从信箱中取消息，三个函数。\"]},\"116\":{\"h\":\"// 往信箱进行发送\",\"t\":[\"// 往信箱进行发送 func SendFeed(data []*int64, postId int64) error { //一次发送，减少rrt次数 pipeline := client.TxPipeline() for _, v := range data { //1.生成Key key := getRedisKey(KeySendFeedSetPF + strconv.Itoa(int(*v))) // 2. 使用Redis客户端执行SInter操作 //key:postId,2000-0-0 pipeline.ZAdd(key, redis.Z{ Score: float64(time.Now().Unix()), // 时间戳 Member: postId, //帖子ID }) } _, err := pipeline.Exec() return err }\"]},\"117\":{\"h\":\"// 从信箱中取消息\",\"t\":[\"// 从信箱中取消息 //函数解释： //userId int64,用户信箱 //lastIdStr,最后查询的帖子id //offSetStr，偏移量 //(idData []int64,返回查询到的结果 //newOffSet int64,新的偏移量 //minTime float64,本次查询的最小时间戳，作用和lastIdStr一样 func SelectMail(userId int64, lastIdStr, offSetStr string) (idData []int64, newOffSet int64, minTime float64, err error) { //1.查询该用户收件箱 ZREVRANGEBYSCORE key Max Min LIMIT offset count // ZREVRANGE 按分数从大到小的顺序查询指定数量的元素 // lastId, err := strconv.ParseInt(lastIdStr, 10, 64) // if err != nil { // return nil, err // } offSet, err := strconv.ParseInt(offSetStr, 10, 64) if err != nil { return nil, 0, 0, err } //ZRevRangeByScoreWithScores // cmd := client.ZRevRangeByScoreWithScores(getRedisKey(KeySendFeedSetPF+strconv.Itoa(int(userId))), redis.ZRangeBy{ Min: \\\"0\\\", Max: lastIdStr, Offset: offSet, Count: 3, }) minTime = 0 idData = make([]int64, 0, len(cmd.Val())) for _, v := range cmd.Val() { idInt64, err := strconv.ParseInt(v.Member.(string), 10, 64) if err != nil { // 处理错误 continue // 或者返回错误，或者执行其他逻辑 } idData = append(idData, idInt64) // 4.2.获取分数(时间戳） time := v.Score //如果有重复，需要计算偏移量，处理分数相同的情况 if time == minTime { newOffSet++ } else { //如果分数没有重复，偏移量就是1 minTime = time newOffSet = 1 } } return }\"]},\"118\":{\"h\":\"// Selectfans 查询用户的粉丝\",\"t\":[\"// Selectfans 查询用户的粉丝，返回 func Selectfans(id int64) (fans []*int64, err error) { sqlStr := `select user_id from follow where follow_user_id = ? group by user_id` fans = make([]*int64, 0, 2) // 不要写成make([]*models.Post, 2) err = db.Select(&fans, sqlStr, id) return }\"]},\"119\":{\"h\":\"// 从信箱中取消息\",\"t\":[\"// 从信箱中取消息 func SelctMail(userId int64, lastIdStr, offSetStr string) (idData []int64, newOffSet int64, minTime float64, err error) { //1.查询该用户收件箱 ZREVRANGEBYSCORE key Max Min LIMIT offset count return redis.SelectMail(userId, lastIdStr, offSetStr) }\"]},\"120\":{\"h\":\"// SelectFans 根据ID查询粉丝\",\"t\":[\"// SelectFans 根据ID查询粉丝 func SelectFans(id int64) ([]*int64, error) { return mysql.Selectfans(id) }\"]},\"121\":{\"h\":\"// CreatePostHandler 创建帖子的处理函数\",\"t\":[\"// CreatePostHandler 创建帖子的处理函数 func CreatePostHandler(c *gin.Context) { // 1. 获取参数及参数的校验 //c.ShouldBindJSON() // validator --> binding tag p := new(models.Post) if err := c.ShouldBindJSON(p); err != nil { zap.L().Debug(\\\"c.ShouldBindJSON(p) error\\\", zap.Any(\\\"err\\\", err)) zap.L().Error(\\\"create post with invalid param\\\") ResponseError(c, CodeInvalidParam) return } // 2. 从 c 取到当前发请求的用户的ID userID, err := getCurrentUserID(c) if err != nil { ResponseError(c, CodeNeedLogin) return } p.AuthorID = userID // 3. 创建帖子 if err := logic.CreatePost(p); err != nil { zap.L().Error(\\\"logic.CreatePost(p) failed\\\", zap.Error(err)) ResponseError(c, CodeServerBusy) return } // 4. 获取该用户的粉丝集合，从mysql获取，或者从redis中获取都可以，然后推送粉丝 data, err := logic.SelectFans(p.AuthorID) if err != nil { zap.L().Error(\\\"logic.SelectFans(p); failed\\\", zap.Error(err)) ResponseError(c, CodeServerBusy) return } // 5. 根据粉丝集合，进行推送 if err := logic.SendFeed(data, p.ID); err != nil { zap.L().Error(\\\"logic.SendFeed() failed\\\", zap.Error(err)) ResponseError(c, CodeServerBusy) return } // 6. 返回响应 ResponseSuccess(c, nil) }\"]},\"122\":{\"h\":\"// 查询分页数据\",\"t\":[\"// 查询分页数据 func GetPostFollowHandler(c *gin.Context) { //1.获取当前用户id userId, err := getCurrentUserID(c) if err != nil { ResponseError(c, CodeNeedLogin) return } //v1.GET(\\\"/post/of/follow/:lastid/:offset\\\", controller.GetPostFollowHandler) lastIdStr := c.Param(\\\"lastid\\\") offSetStr := c.Param(\\\"offset\\\") // 2.查询该用户收件箱 ZREVRANGEBYSCORE key Max Min LIMIT offset count idData, newOffSet, minTime, err := logic.SelctMail(userId, lastIdStr, offSetStr) if err != nil { ResponseError(c, CodeInvalidParam) return } //3.根据id查询post data, err := logic.GetFollowPostListByIds(&idData, newOffSet, int64(minTime)) if err != nil { ResponseError(c, CodeInvalidParam) return } // 6.封装并返回 ResponseSuccess(c, data) }\"]},\"123\":{\"c\":[\"Go\"]},\"124\":{\"c\":[\"gin使用redis\",\"redis\",\"关注推送\"]},\"125\":{\"h\":\"gin使用redis\",\"t\":[\"go-简单使用redis\",\"这种第三方中间件，都是先创建其客户端，然后使用客户端的api对数据进行操作。\",\"go-es客户端：github.com/go-redis/redis\",\"安装客户端。\",\"go get github.com/go-redis/redis\",\"导入依赖。\",\"import \\\"github.com/go-redis/redis\\\"\",\"可以根据实际需求导入不同的客户端版本，也支持在一个项目中导入不同的客户端版本。\",\"import ( elasticsearch7 \\\"github.com/elastic/go-elasticsearch/v7\\\" elasticsearch8 \\\"github.com/elastic/go-elasticsearch/v8\\\") // ... es7, _ := elasticsearch7.NewDefaultClient() es8, _ := elasticsearch8.NewDefaultClient()\"]},\"126\":{\"h\":\"连接 ES\",\"t\":[\"指定要连接 ES 的相关配置，并创建客户端连接。\",\"// ES 配置 cfg := elasticsearch.Config{ Addresses: []string{ \\\"http://localhost:9200\\\", }, } // 创建客户端连接 client, err := elasticsearch.NewTypedClient(cfg) if err != nil { fmt.Printf(\\\"elasticsearch.NewTypedClient failed, err:%v\\\\n\\\", err) return}\",\"创建索引：\",\"// createIndex 创建索引 func createIndex(client *elasticsearch.TypedClient) { resp, err := client.Indices.Create(\\\"my-review-1\\\").Do(context.Background()) if err != nil { fmt.Printf(\\\"create index failed, err:%v\\\\n\\\", err) return } fmt.Printf(\\\"index:%#v\\\\n\\\", resp.Index) }\"]},\"127\":{\"c\":[\"Go\"]},\"128\":{\"c\":[\"gin使用redis\",\"redis\"]},\"129\":{\"h\":\"go-简单使用elasticsearch\",\"t\":[\"go-简单使用elasticsearch\",\"go-es客户端：github.com/elastic/go-elasticsearch/v8\",\"执行以下命令安装v8版本的 go 客户端。\",\"go get github.com/elastic/go-elasticsearch/v8@latest\",\"导入依赖。\",\"import \\\"github.com/elastic/go-elasticsearch/v8\\\"\",\"可以根据实际需求导入不同的客户端版本，也支持在一个项目中导入不同的客户端版本。\",\"import ( elasticsearch7 \\\"github.com/elastic/go-elasticsearch/v7\\\" elasticsearch8 \\\"github.com/elastic/go-elasticsearch/v8\\\") // ... es7, _ := elasticsearch7.NewDefaultClient() es8, _ := elasticsearch8.NewDefaultClient()\"]},\"130\":{\"h\":\"连接 ES\",\"t\":[\"指定要连接 ES 的相关配置，并创建客户端连接。\",\"// ES 配置 cfg := elasticsearch.Config{ Addresses: []string{ \\\"http://localhost:9200\\\", }, } // 创建客户端连接 client, err := elasticsearch.NewTypedClient(cfg) if err != nil { fmt.Printf(\\\"elasticsearch.NewTypedClient failed, err:%v\\\\n\\\", err) return}\",\"创建索引：\",\"// createIndex 创建索引 func createIndex(client *elasticsearch.TypedClient) { resp, err := client.Indices.Create(\\\"my-review-1\\\").Do(context.Background()) if err != nil { fmt.Printf(\\\"create index failed, err:%v\\\\n\\\", err) return } fmt.Printf(\\\"index:%#v\\\\n\\\", resp.Index) }\"]},\"131\":{\"c\":[\"Go\"]},\"132\":{\"c\":[\"elasticsearch\"]},\"133\":{\"h\":\"go语法基础\",\"t\":[\"go-语法\",\"（1）源文件以\\\"go\\\"为扩展名。 （2）程序的执行入口是main()函数。 （3）严格区分大小写。 （4）方法由一条条语句构成，每个语句后不需要分号(Go语言会在每行后自动加分号)，这也体现出Golang的简洁性。 （5）Go编译器是一行行进行编译的，因此我们一行就写一条语句，不能把多条语句写在同一个，否则报错 （6）定义的变量或者import的包如果没有使用到，代码不能编译通过。 （7）大括号都是成对出现的，缺一不可\",\"Go语言提供了大量的标准库，因此 google 公司也为这些标准库提供了相应的API文档，用于告诉开发者如何使用这些标准库，以及标准库包含的方法。官方位置：https://golang.org\",\"Golang中文网在线标准库文档: https://studygolang.com/pkgdoc\",\"image-20240720193943393\",\"函数对应的源码查看：\",\"image-20240720193959648\",\"也可以使用离线API：\",\"变量的使用步骤： 1.声明 2.赋值 3.使用\"]},\"134\":{\"h\":\"1.1 声明变量\",\"t\":[\"var 名称 类型 是声明单个变量的语法。\",\"以字母或下划线开头，由一个或多个字母、数字、下划线组成\",\"声明一个变量\",\"第一种，指定变量类型，声明后若不赋值，使用默认值\",\"var name type name = value\",\"第二种，根据值自行判定变量类型(类型推断Type inference)\",\"如果一个变量有一个初始值，Go将自动能够使用初始值来推断该变量的类型。因此，如果变量具有初始值，则可以省略变量声明中的类型。\",\"var name = value\",\"第三种，省略var, 声明并赋值，请注意此处声明了变量，所以不能对已经声明的变量再次声明。这个方式不能用于全局变量，全局变量请使用var。\",\"name := value // 例如 var a int = 10 var b = 10 c : = 10 b: = 10 //前面已经声明了b变量，所以此处会报错。\",\"这种方式它只能被用在函数体内，而不可以用于全局变量的声明与赋值\",\"示例代码：\",\"package main var a = \\\"Hello\\\" var b string = \\\"World\\\" var c bool func main(){ println(a, b, c) }\",\"运行结果：\",\"Hello World false\"]},\"135\":{\"h\":\"1.2 多变量声明\",\"t\":[\"第一种，以逗号分隔，声明与赋值分开，若不赋值，存在默认值\",\"var name1, name2, name3 type name1, name2, name3 = v1, v2, v3\",\"第二种，直接赋值，下面的变量类型可以是不同的类型\",\"var name1, name2, name3 = v1, v2, v3\",\"第三种，集合类型\",\"var ( name1 type1 name2 type2 )\"]},\"136\":{\"h\":\"1.3 注意事项\",\"t\":[\"变量必须先定义才能使用\",\"go语言是静态语言，要求变量的类型和赋值的类型必须一致。\",\"变量名不能冲突。(同一个作用于域内不能冲突)\",\"简短定义方式，左边的变量名至少有一个是新的\",\"简短定义方式，不能定义全局变量。\",\"变量的零值。也叫默认值。\",\"变量定义了就要使用，否则无法通过编译。\",\"如果在相同的代码块中，我们不可以再次对于相同名称的变量使用初始化声明，例如：a := 20 就是不被允许的，编译器会提示错误 no new variables on left side of :=，但是 a = 20 是可以的，因为这是给相同的变量赋予一个新的值。\",\"如果你在定义变量 a 之前使用它，则会得到编译错误 undefined: a。如果你声明了一个局部变量却没有在相同的代码块中使用它，同样会得到编译错误，例如下面这个例子当中的变量 a：\",\"func main() { var a string = \\\"abc\\\" fmt.Println(\\\"hello, world\\\") }\",\"尝试编译这段代码将得到错误 a declared and not used\",\"此外，单纯地给 a 赋值也是不够的，这个值必须被使用，所以使用\",\"在同一个作用域中，已存在同名的变量，则之后的声明初始化，则退化为赋值操作。但这个前提是，最少要有一个新的变量被定义，且在同一作用域，例如，下面的y就是新定义的变量\",\"package main import ( \\\"fmt\\\" ) func main() { x := 140 fmt.Println(&x) x, y := 200, \\\"abc\\\" fmt.Println(&x, x) fmt.Print(y) }\",\"运行结果：\",\"0xc04200a2b0 0xc04200a2b0 200 abc\"]},\"137\":{\"h\":\"常量constant\"},\"138\":{\"h\":\"1.1 常量声明\",\"t\":[\"常量是一个简单值的标识符，在程序运行时，不会被修改的量。\",\"const identifier [type] = value 显式类型定义： const b string = \\\"abc\\\" 隐式类型定义： const b = \\\"abc\\\" package main import \\\"fmt\\\" func main() { const LENGTH int = 10 const WIDTH int = 5 var area int const a, b, c = 1, false, \\\"str\\\" //多重赋值 area = LENGTH * WIDTH fmt.Printf(\\\"面积为 : %d\\\", area) println() println(a, b, c) }\",\"运行结果：\",\"面积为 : 50 1 false str\",\"常量可以作为枚举，常量组\",\"const ( Unknown = 0 Female = 1 Male = 2 )\",\"常量组中如不指定类型和初始化值，则与上一行非空常量右值相同\",\"package main import ( \\\"fmt\\\" ) func main() { const ( x uint16 = 16 y s = \\\"abc\\\" z ) fmt.Printf(\\\"%T,%v\\\\n\\\", y, y) fmt.Printf(\\\"%T,%v\\\\n\\\", z, z) }\",\"运行结果：\",\"uint16,16 string,abc\",\"常量的注意事项：\",\"常量中的数据类型只可以是布尔型、数字型（整数型、浮点型和复数）和字符串型\",\"不曾使用的常量，在编译的时候，是不会报错的\",\"显示指定类型的时候，必须确保常量左右值类型一致，需要时可做显示类型转换。这与变量就不一样了，变量是可以是不同的类型值\"]},\"139\":{\"h\":\"1.2 iota\",\"t\":[\"iota，特殊常量，可以认为是一个可以被编译器修改的常量\",\"iota 可以被用作枚举值：\",\"const ( a = iota b = iota c = iota )\",\"第一个 iota 等于 0，每当 iota 在新的一行被使用时，它的值都会自动加 1；所以 a=0, b=1, c=2 可以简写为如下形式：\",\"const ( a = iota b c )\",\"iota 用法\",\"package main import \\\"fmt\\\" func main() { const ( a = iota //0 b //1 c //2 d = \\\"ha\\\" //独立值，iota += 1 e //\\\"ha\\\" iota += 1 f = 100 //iota +=1 g //100 iota +=1 h = iota //7,恢复计数 i //8 ) fmt.Println(a,b,c,d,e,f,g,h,i) }\",\"运行结果：\",\"0 1 2 ha ha 100 100 7 8\",\"如果中断iota自增，则必须显式恢复。且后续自增值按行序递增\",\"自增默认是int类型，可以自行进行显示指定类型\",\"数字常量不会分配存储空间，无须像变量那样通过内存寻址来取值，因此无法获取地址\",\"image-20240720205940115\",\"整数类型\",\"浮点类型\",\"字符类型\",\"布尔类型\",\"字符串类型\",\"基本数据类型的默认值\",\"基本数据类型之间的转换\",\"基本数据类型转为String\",\"string转为基本数据类型\",\"程序的流程控制结构一共有三种：顺序结构，选择结构，循环结构。\",\"顺序结构：从上向下，逐行执行。\",\"选择结构：条件满足，某些代码才会执行。0-1次\",\"分支语句：if，switch，select\",\"循环结构：条件满足，某些代码会被反复的执行多次。0-N次\",\"循环语句：for\"]},\"140\":{\"h\":\"2.1 if 语句\",\"t\":[\"语法格式：\",\"if 布尔表达式 { /* 在布尔表达式为 true 时执行 */ } if 布尔表达式 { /* 在布尔表达式为 true 时执行 */ } else { /* 在布尔表达式为 false 时执行 */ } if 布尔表达式1 { /* 在布尔表达式1为 true 时执行 */ } else if 布尔表达式2{ /* 在布尔表达式1为 false ,布尔表达式2为true时执行 */ } else{ /* 在上面两个布尔表达式都为false时，执行*/ }\",\"示例代码：\",\"package main import \\\"fmt\\\" func main() { /* 定义局部变量 */ var a int = 10 /* 使用 if 语句判断布尔表达式 */ if a < 20 { /* 如果条件为 true 则执行以下语句 */ fmt.Printf(\\\"a 小于 20\\\\n\\\" ) } fmt.Printf(\\\"a 的值为 : %d\\\\n\\\", a) }\"]},\"141\":{\"h\":\"2.2 if 变体\",\"t\":[\"如果其中包含一个可选的语句组件(在评估条件之前执行)，则还有一个变体。它的语法是\",\"if statement; condition { } if condition{ }\",\"示例代码：\",\"package main import ( \\\"fmt\\\" ) func main() { if num := 10; num % 2 == 0 { //checks if number is even fmt.Println(num,\\\"is even\\\") } else { fmt.Println(num,\\\"is odd\\\") } }\",\"需要注意的是，num的定义在if里，那么只能够在该if..else语句块中使用，否则编译器会报错的。\"]},\"142\":{\"h\":\"2.3 switch语句：“开关”\",\"t\":[\"switch是一个条件语句，它计算表达式并将其与可能匹配的列表进行比较，并根据匹配执行代码块。它可以被认为是一种惯用的方式来写多个if else子句。\",\"switch 语句用于基于不同条件执行不同动作，每一个 case 分支都是唯一的，从上直下逐一测试，直到匹配为止。 switch 语句执行的过程从上至下，直到找到匹配项，匹配项后面也不需要再加break。\",\"而如果switch没有表达式，它会匹配true\",\"Go里面switch默认相当于每个case最后带有break，匹配成功后不会自动向下执行其他case，而是跳出整个switch, 但是可以使用fallthrough强制执行后面的case代码。\",\"变量 var1 可以是任何类型，而 val1 和 val2 则可以是同类型的任意值。类型不被局限于常量或整数，但必须是相同的类型；或者最终结果为相同类型的表达式。 您可以同时测试多个可能符合条件的值，使用逗号分割它们，例如：case val1, val2, val3。\",\"switch var1 { case val1: ... case val2: ... default: ... }\",\"示例代码：\",\"package main import \\\"fmt\\\" func main() { /* 定义局部变量 */ var grade string = \\\"B\\\" var marks int = 90 switch marks { case 90: grade = \\\"A\\\" case 80: grade = \\\"B\\\" case 50,60,70 : grade = \\\"C\\\" //case 后可以由多个数值 default: grade = \\\"D\\\" } switch { case grade == \\\"A\\\" : fmt.Printf(\\\"优秀!\\\\n\\\" ) case grade == \\\"B\\\", grade == \\\"C\\\" : fmt.Printf(\\\"良好\\\\n\\\" ) case grade == \\\"D\\\" : fmt.Printf(\\\"及格\\\\n\\\" ) case grade == \\\"F\\\": fmt.Printf(\\\"不及格\\\\n\\\" ) default: fmt.Printf(\\\"差\\\\n\\\" ); } fmt.Printf(\\\"你的等级是 %s\\\\n\\\", grade ); }\"]},\"143\":{\"h\":\"2.4 fallthrough\",\"t\":[\"如需贯通后续的case，就添加fallthrough\",\"package main import ( \\\"fmt\\\" ) type data [2]int func main() { switch x := 5; x { default: fmt.Println(x) case 5: x += 10 fmt.Println(x) fallthrough case 6: x += 20 fmt.Println(x) } }\",\"运行结果：\",\"15 35\",\"case中的表达式是可选的，可以省略。如果该表达式被省略，则被认为是switch true，并且每个case表达式都被计算为true，并执行相应的代码块。\",\"示例代码：\",\"package main import ( \\\"fmt\\\" ) func main() { num := 75 switch { // expression is omitted case num >= 0 && num <= 50: fmt.Println(\\\"num is greater than 0 and less than 50\\\") case num >= 51 && num <= 100: fmt.Println(\\\"num is greater than 51 and less than 100\\\") case num >= 101: fmt.Println(\\\"num is greater than 100\\\") } }\",\"switch的注意事项\",\"case后的常量值不能重复\",\"case后可以有多个常量值\",\"fallthrough应该是某个case的最后一行。如果它出现在中间的某个地方，编译器就会抛出错误。\"]},\"144\":{\"h\":\"2.5 Type Switch\",\"t\":[\"switch 语句还可以被用于 type-switch 来判断某个 interface 变量中实际存储的变量类型。\",\"switch x.(type){ case type: statement(s); case type: statement(s); /* 你可以定义任意个数的case */ default: /* 可选 */ statement(s); } package main import \\\"fmt\\\" func main() { var x interface{} switch i := x.(type) { case nil: fmt.Printf(\\\" x 的类型 :%T\\\",i) case int: fmt.Printf(\\\"x 是 int 型\\\") case float64: fmt.Printf(\\\"x 是 float64 型\\\") case func(int) float64: fmt.Printf(\\\"x 是 func(int) 型\\\") case bool, string: fmt.Printf(\\\"x 是 bool 或 string 型\\\" ) default: fmt.Printf(\\\"未知型\\\") } }\",\"运行结果：\",\"x 的类型 :<nil>\"]},\"145\":{\"h\":\"一、打印输出\"},\"146\":{\"h\":\"1.1 fmt包\",\"t\":[\"fmt包实现了类似C语言printf和scanf的格式化I/O。格式化verb（'verb'）源自C语言但更简单。\",\"详见官网fmt的API：https://golang.google.cn/pkg/fmt/\",\"image-20240720210834530\"]},\"147\":{\"h\":\"1.2 导入包\",\"t\":[\"import \\\"fmt\\\"\"]},\"148\":{\"h\":\"1.3 常用打印函数\",\"t\":[\"打印：\",\"func Print(a ...interface{}) (n int, err error)\",\"格式化打印：\",\"func Printf(format string, a ...interface{}) (n int, err error)\",\"打印后换行\",\"func Println(a ...interface{}) (n int, err error)\",\"格式化打印中的常用占位符：\",\"格式化打印占位符： %v,原样输出 %T，打印类型 %t,bool类型 %s，字符串 %f，浮点 %d，10进制的整数 %b，2进制的整数 %o，8进制 %x，%X，16进制 %x：0-9，a-f %X：0-9，A-F %c，打印字符 %p，打印地址 。。。\",\"示例代码：\",\"package main import ( \\\"fmt\\\" ) func main() { a := 100 //int b := 3.14 //float64 c := true // bool d := \\\"Hello World\\\" //string e := `Ruby` //string f := 'A' fmt.Printf(\\\"%T,%b\\\\n\\\", a, a) fmt.Printf(\\\"%T,%f\\\\n\\\", b, b) fmt.Printf(\\\"%T,%t\\\\n\\\", c, c) fmt.Printf(\\\"%T,%s\\\\n\\\", d, d) fmt.Printf(\\\"%T,%s\\\\n\\\", e, e) fmt.Printf(\\\"%T,%d,%c\\\\n\\\", f, f, f) fmt.Println(\\\"-----------------------\\\") fmt.Printf(\\\"%v\\\\n\\\", a) fmt.Printf(\\\"%v\\\\n\\\", b) fmt.Printf(\\\"%v\\\\n\\\", c) fmt.Printf(\\\"%v\\\\n\\\", d) fmt.Printf(\\\"%v\\\\n\\\", e) fmt.Printf(\\\"%v\\\\n\\\", f) }\",\"运行结果：\",\"image-20240720210909087\"]},\"149\":{\"h\":\"二、键盘输入\"},\"150\":{\"h\":\"2.1 fmt包读取键盘输入\",\"t\":[\"常用方法：\",\"func Scan(a ...interface{}) (n int, err error)\",\"func Scanf(format string, a ...interface{}) (n int, err error)\",\"func Scanln(a ...interface{}) (n int, err error)\",\"package main import ( \\\"fmt\\\" ) func main() { var x int var y float64 fmt.Println(\\\"请输入一个整数，一个浮点类型：\\\") fmt.Scanln(&x,&y)//读取键盘的输入，通过操作地址，赋值给x和y 阻塞式 fmt.Printf(\\\"x的数值：%d，y的数值：%f\\\\n\\\",x,y) fmt.Scanf(\\\"%d,%f\\\",&x,&y) fmt.Printf(\\\"x:%d,y:%f\\\\n\\\",x,y) }\",\"运行结果：\",\"image-20240720210930091\"]},\"151\":{\"h\":\"2.2 bufio包读取\",\"t\":[\"https://golang.google.cn/pkg/bufio/\",\"bufio包中都是IO操作的方法：\",\"先创建Reader对象：\",\"image-20240720210942710\",\"然后就可以各种读取了：\",\"image-20240720211002113\",\"示例代码：\",\"package main import ( \\\"fmt\\\" \\\"os\\\" \\\"bufio\\\" ) func main() { fmt.Println(\\\"请输入一个字符串：\\\") reader := bufio.NewReader(os.Stdin) s1, _ := reader.ReadString('\\\\n') fmt.Println(\\\"读到的数据：\\\", s1) }\",\"运行效果：\",\"image-20240720211011947\"]},\"152\":{\"c\":[\"Go\"]},\"153\":{\"c\":[\"go语法基础\"]},\"154\":{\"h\":\"Java\"},\"155\":{\"c\":[\"Java\"]},\"156\":{\"h\":\"SpringSecurity\",\"t\":[\"SpringSecurity\",\"官方文档：\",\"https://docs.spring.io/spring-security/reference/index.html\",\"https://www.bilibili.com/video/BV14b4y1A7Wz\",\"功能：\",\"身份认证（authentication）\",\"授权（authorization）\",\"防御常见攻击（protection against common attacks）\",\"身份认证：\",\"身份认证是验证谁正在访问系统资源，判断用户是否为合法用户。认证用户的常见方式是要求用户输入用户名和密码。\",\"授权：\",\"用户进行身份认证后，系统会控制谁能访问哪些资源，这个过程叫做授权。用户无法访问没有权限的资源。\",\"防御常见攻击：\",\"CSRF\",\"HTTP Headers\",\"HTTP Requests\"]},\"157\":{\"h\":\"1、身份认证（authentication）\",\"t\":[\"官方代码示例：GitHub - spring-projects/spring-security-samples\"]},\"158\":{\"h\":\"1.1、创建Spring Boot项目\",\"t\":[\"项目名：security-demo\",\"JDK：17\",\"SpringBoot：3.2.0（依赖了Spring Security 6.2.0）\",\"Dependencies：Spring Web、Spring Security、Thymeleaf\"]},\"159\":{\"h\":\"1.2、创建IndexController\",\"t\":[\"package com.atguigu.securitydemo.controller; @Controller public class IndexController { @GetMapping(\\\"/\\\") public String index() { return \\\"index\\\"; } }\"]},\"160\":{\"h\":\"1.3、创建index.html\",\"t\":[\"在路径resources/templates中创建index.html\",\"<html xmlns:th=\\\"https://www.thymeleaf.org\\\"> <head> <title>Hello Security!</title> </head> <body> <h1>Hello Security</h1> <!--通过使用@{/logout}，Thymeleaf将自动处理生成正确的URL，以适应当前的上下文路径。 这样，无论应用程序部署在哪个上下文路径下，生成的URL都能正确地指向注销功能。--> <a th:href=\\\"@{/logout}\\\">Log Out</a> </body> </html>\"]},\"161\":{\"h\":\"1.4、启动项目测试Controller\",\"t\":[\"浏览器中访问：http://localhost:8080/\",\"**浏览器自动跳转到登录页面：**http://localhost:8080/login\",\"image-20230410140908841\",\"输入用户名：user\",\"输入密码：在控制台的启动日志中查找初始的默认密码\",\"点击\\\"Sign in\\\"进行登录，浏览器就跳转到了index页面\"]},\"162\":{\"h\":\"1.5、注意事项\"},\"163\":{\"h\":\"1.5.1、@{/logout}的作用\",\"t\":[\"通过使用@{/logout}，Thymeleaf将自动处理生成正确的URL，以适应当前的上下文路径。这样，无论应用程序部署在哪个上下文路径下，生成的URL都能正确地指向注销功能。\",\"例如：如果我们在配置文件中添加如下内容\",\"server.servlet.context-path=/demo\",\"那么@{/logout}可以自动处理url为正确的相对路径\",\"但是如果是普通的/logout，路径就会不正确\"]},\"164\":{\"h\":\"1.5.2、页面样式无法加载的问题\",\"t\":[\"页面样式bootstrap.min.css是一个CDN地址，需要通过科学上网的方式访问\",\"image-20231130152247055\",\"否则你的登录页会加载很久，并且看到的页面是这样的（登录按钮没有样式文件渲染，但是不影响登录功能的执行）\",\"image-20231130152345471\"]},\"165\":{\"h\":\"1.6、Spring Security默认做了什么\",\"t\":[\"保护应用程序URL，要求对应用程序的任何交互进行身份验证。\",\"程序启动时生成一个默认用户“user”。\",\"生成一个默认的随机密码，并将此密码记录在控制台上。\",\"生成默认的登录表单和注销页面。\",\"提供基于表单的登录和注销流程。\",\"对于Web请求，重定向到登录页面；\",\"对于服务请求，返回401未经授权。\",\"处理跨站请求伪造（CSRF）攻击。\",\"处理会话劫持攻击。\",\"写入Strict-Transport-Security以确保HTTPS。\",\"写入X-Content-Type-Options以处理嗅探攻击。\",\"写入Cache Control头来保护经过身份验证的资源。\",\"写入X-Frame-Options以处理点击劫持攻击。\"]},\"166\":{\"h\":\"2、Spring Security 的底层原理\",\"t\":[\"官方文档：Spring Security的底层原理\",\"Spring Security之所以默认帮助我们做了那么多事情，它的底层原理是传统的Servlet过滤器\"]},\"167\":{\"h\":\"2.1、Filter\",\"t\":[\"下图展示了处理一个Http请求时，过滤器和Servlet的工作流程：\",\"filterchain\",\"因此我们可以在过滤器中对请求进行修改或增强。\"]},\"168\":{\"h\":\"2.2、DelegatingFilterProxy\",\"t\":[\"DelegatingFilterProxy 是 Spring Security 提供的一个 Filter 实现，可以在 Servlet 容器和 Spring 容器之间建立桥梁。通过使用 DelegatingFilterProxy，这样就可以将Servlet容器中的 Filter 实例放在 Spring 容器中管理。\",\"delegatingfilterproxy\"]},\"169\":{\"h\":\"2.3、FilterChainProxy\",\"t\":[\"复杂的业务中不可能只有一个过滤器。因此FilterChainProxy是Spring Security提供的一个特殊的Filter，它允许通过SecurityFilterChain将过滤器的工作委托给多个Bean Filter实例。\",\"filterchainproxy\"]},\"170\":{\"h\":\"2.4、SecurityFilterChain\",\"t\":[\"SecurityFilterChain 被 FilterChainProxy 使用，负责查找当前的请求需要执行的Security Filter列表。\",\"securityfilterchain\"]},\"171\":{\"h\":\"2.5、Multiple SecurityFilterChain\",\"t\":[\"可以有多个SecurityFilterChain的配置，FilterChainProxy决定使用哪个SecurityFilterChain。如果请求的URL是/api/messages/，它首先匹配SecurityFilterChain0的模式/api/**，因此只调用SecurityFilterChain 0。假设没有其他SecurityFilterChain实例匹配，那么将调用SecurityFilterChain n。\",\"multi securityfilterchain\"]},\"172\":{\"h\":\"3、程序的启动和运行\"},\"173\":{\"h\":\"3.1、DefaultSecurityFilterChain\",\"t\":[\"SecurityFilterChain接口的实现，加载了默认的16个Filter\",\"image-20231204230216259\"]},\"174\":{\"h\":\"3.2、SecurityProperties\",\"t\":[\"默认情况下Spring Security将初始的用户名和密码存在了SecurityProperties类中。这个类中有一个静态内部类User，配置了默认的用户名（name = \\\"user\\\"）和密码（password = uuid）\",\"image-20231205164049257\",\"我们也可以将用户名、密码配置在SpringBoot的配置文件中：在application.properties中配置自定义用户名和密码\",\"spring.security.user.name=user spring.security.user.password=123\"]},\"175\":{\"h\":\"1、基于内存的用户认证\"},\"176\":{\"h\":\"1.1、创建自定义配置\",\"t\":[\"实际开发的过程中，我们需要应用程序更加灵活，可以在SpringSecurity中创建自定义配置文件\",\"官方文档：Java自定义配置\",\"UserDetailsService用来管理用户信息，InMemoryUserDetailsManager是UserDetailsService的一个实现，用来管理基于内存的用户信息。\",\"创建一个WebSecurityConfig文件：\",\"定义一个@Bean，类型是UserDetailsService，实现是InMemoryUserDetailsManager\",\"package com.atguigu.securitydemo.config; @Configuration //配置类 @EnableWebSecurity//Spring项目总需要添加此注解，SpringBoot项目中不需要 public class WebSecurityConfig { @Bean public UserDetailsService userDetailsService() { InMemoryUserDetailsManager manager = new InMemoryUserDetailsManager(); manager.createUser( //此行设置断点可以查看创建的user对象 User .withDefaultPasswordEncoder() .username(\\\"huan\\\") //自定义用户名 .password(\\\"password\\\") //自定义密码 .roles(\\\"USER\\\") //自定义角色 .build() ); return manager; } }\",\"**测试：**使用用户名huan，密码password登录\"]},\"177\":{\"h\":\"1.2、基于内存的用户认证流程\",\"t\":[\"程序启动时： \",\"创建InMemoryUserDetailsManager对象\",\"创建User对象，封装用户名密码\",\"使用InMemoryUserDetailsManager将User存入内存\",\"校验用户时： \",\"SpringSecurity自动使用InMemoryUserDetailsManager的loadUserByUsername方法从内存中获取User对象\",\"在UsernamePasswordAuthenticationFilter过滤器中的attemptAuthentication方法中将用户输入的用户名密码和从内存中获取到的用户信息进行比较，进行用户认证\"]},\"178\":{\"h\":\"2、基于数据库的数据源\"},\"179\":{\"h\":\"2.1、SQL\",\"t\":[\"创建三个数据库表并插入测试数据\",\"-- 创建数据库 CREATE DATABASE `security-demo`; USE `security-demo`; -- 创建用户表 CREATE TABLE `user`( `id` INT NOT NULL AUTO_INCREMENT PRIMARY KEY, `username` VARCHAR(50) DEFAULT NULL , `password` VARCHAR(500) DEFAULT NULL, `enabled` BOOLEAN NOT NULL ); -- 唯一索引 CREATE UNIQUE INDEX `user_username_uindex` ON `user`(`username`); -- 插入用户数据(密码是 \\\"abc\\\" ) INSERT INTO `user` (`username`, `password`, `enabled`) VALUES ('admin', '{bcrypt}$2a$10$GRLdNijSQMUvl/au9ofL.eDwmoohzzS7.rmNSJZ.0FxO/BTk76klW', TRUE), ('Helen', '{bcrypt}$2a$10$GRLdNijSQMUvl/au9ofL.eDwmoohzzS7.rmNSJZ.0FxO/BTk76klW', TRUE), ('Tom', '{bcrypt}$2a$10$GRLdNijSQMUvl/au9ofL.eDwmoohzzS7.rmNSJZ.0FxO/BTk76klW', TRUE);\"]},\"180\":{\"h\":\"2.2、引入依赖\",\"t\":[\"<dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> <version>8.0.30</version> </dependency> <dependency> <groupId>com.baomidou</groupId> <artifactId>mybatis-plus-boot-starter</artifactId> <version>3.5.4.1</version> <exclusions> <exclusion> <groupId>org.mybatis</groupId> <artifactId>mybatis-spring</artifactId> </exclusion> </exclusions> </dependency> <dependency> <groupId>org.mybatis</groupId> <artifactId>mybatis-spring</artifactId> <version>3.0.3</version> </dependency> <dependency> <groupId>org.projectlombok</groupId> <artifactId>lombok</artifactId> </dependency>\"]},\"181\":{\"h\":\"2.3、配置数据源\",\"t\":[\"#MySQL数据源 spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver spring.datasource.url=jdbc:mysql://localhost:3306/security-demo spring.datasource.username=root spring.datasource.password=123456 #SQL日志 mybatis-plus.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl\"]},\"182\":{\"h\":\"2.4、实体类\",\"t\":[\"package com.atguigu.securitydemo.entity; @Data public class User { @TableId(value = \\\"id\\\", type = IdType.AUTO) private Integer id; private String username; private String password; private Boolean enabled; }\"]},\"183\":{\"h\":\"2.5、Mapper\",\"t\":[\"接口\",\"package com.atguigu.securitydemo.mapper; @Mapper public interface UserMapper extends BaseMapper<User> { }\",\"xml\",\"resources/mapper/UserMapper.xml\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <!DOCTYPE mapper PUBLIC \\\"-//mybatis.org//DTD Mapper 3.0//EN\\\" \\\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\\\"> <mapper namespace=\\\"com.atguigu.securitydemo.mapper.UserMapper\\\"> </mapper>\"]},\"184\":{\"h\":\"2.6、Service\",\"t\":[\"接口\",\"package com.atguigu.securitydemo.service; public interface UserService extends IService<User> { }\",\"实现\",\"package com.atguigu.securitydemo.service.impl; @Service public class UserServiceImpl extends ServiceImpl<UserMapper, User> implements UserService { }\"]},\"185\":{\"h\":\"2.7、Controller\",\"t\":[\"package com.atguigu.securitydemo.controller; @RestController @RequestMapping(\\\"/user\\\") public class UserController { @Resource public UserService userService; @GetMapping(\\\"/list\\\") public List<User> getList(){ return userService.list(); } }\",\"测试：localhost:8080/demo/user/list\"]},\"186\":{\"h\":\"3、基于数据库的用户认证\"},\"187\":{\"h\":\"3.1、基于数据库的用户认证流程\",\"t\":[\"程序启动时： \",\"创建DBUserDetailsManager类，实现接口 UserDetailsManager, UserDetailsPasswordService\",\"在应用程序中初始化这个类的对象\",\"校验用户时： \",\"SpringSecurity自动使用DBUserDetailsManager的loadUserByUsername方法从数据库中获取User对象\",\"在UsernamePasswordAuthenticationFilter过滤器中的attemptAuthentication方法中将用户输入的用户名密码和从数据库中获取到的用户信息进行比较，进行用户认证\"]},\"188\":{\"h\":\"3.2、定义DBUserDetailsManager\",\"t\":[\"package com.atguigu.securitydemo.config; public class DBUserDetailsManager implements UserDetailsManager, UserDetailsPasswordService { @Resource private UserMapper userMapper; @Override public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException { QueryWrapper<User> queryWrapper = new QueryWrapper<>(); queryWrapper.eq(\\\"username\\\", username); User user = userMapper.selectOne(queryWrapper); if (user == null) { throw new UsernameNotFoundException(username); } else { Collection<GrantedAuthority> authorities = new ArrayList<>(); return new org.springframework.security.core.userdetails.User( user.getUsername(), user.getPassword(), user.getEnabled(), true, //用户账号是否过期 true, //用户凭证是否过期 true, //用户是否未被锁定 authorities); //权限列表 } } @Override public UserDetails updatePassword(UserDetails user, String newPassword) { return null; } @Override public void createUser(UserDetails user) { } @Override public void updateUser(UserDetails user) { } @Override public void deleteUser(String username) { } @Override public void changePassword(String oldPassword, String newPassword) { } @Override public boolean userExists(String username) { return false; } }\"]},\"189\":{\"h\":\"3.3、初始化UserDetailsService\",\"t\":[\"修改WebSecurityConfig中的userDetailsService方法如下\",\"@Bean public UserDetailsService userDetailsService() { DBUserDetailsManager manager = new DBUserDetailsManager(); return manager; }\",\"或者直接在DBUserDetailsManager类上添加@Component注解\",\"**测试：**使用数据库中配置的用户名和密码进行登录\"]},\"190\":{\"h\":\"4、SpringSecurity的默认配置\",\"t\":[\"在WebSecurityConfig中添加如下配置\",\"@Bean public SecurityFilterChain filterChain(HttpSecurity http) throws Exception { //authorizeRequests()：开启授权保护 //anyRequest()：对所有请求开启授权保护 //authenticated()：已认证请求会自动被授权 http .authorizeRequests(authorize -> authorize.anyRequest().authenticated()) .formLogin(withDefaults())//表单授权方式 .httpBasic(withDefaults());//基本授权方式 return http.build(); }\"]},\"191\":{\"h\":\"5、添加用户功能\"},\"192\":{\"h\":\"5.1、Controller\",\"t\":[\"UserController中添加方法\",\"@PostMapping(\\\"/add\\\") public void add(@RequestBody User user){ userService.saveUserDetails(user); }\"]},\"193\":{\"h\":\"5.2、Service\",\"t\":[\"UserService接口中添加方法\",\"void saveUserDetails(User user);\",\"UserServiceImpl实现中添加方法\",\"@Resource private DBUserDetailsManager dbUserDetailsManager; @Override public void saveUserDetails(User user) { UserDetails userDetails = org.springframework.security.core.userdetails.User .withDefaultPasswordEncoder() .username(user.getUsername()) //自定义用户名 .password(user.getPassword()) //自定义密码 .build(); dbUserDetailsManager.createUser(userDetails); }\"]},\"194\":{\"h\":\"5.3、修改配置\",\"t\":[\"DBUserDetailsManager中添加方法\",\"@Override public void createUser(UserDetails userDetails) { User user = new User(); user.setUsername(userDetails.getUsername()); user.setPassword(userDetails.getPassword()); user.setEnabled(true); userMapper.insert(user); }\"]},\"195\":{\"h\":\"5.4、使用Swagger测试\",\"t\":[\"pom中添加配置用于测试\",\"<!--swagger测试--> <dependency> <groupId>com.github.xiaoymin</groupId> <artifactId>knife4j-openapi3-jakarta-spring-boot-starter</artifactId> <version>4.1.0</version> </dependency>\",\"**Swagger测试地址：**http://localhost:8080/demo/doc.html\",\"image-20231206022701725\"]},\"196\":{\"h\":\"5.5、关闭csrf攻击防御\",\"t\":[\"默认情况下SpringSecurity开启了csrf攻击防御的功能，这要求请求参数中必须有一个隐藏的**_csrf**字段，如下：\",\"image-20231206023030864\",\"在filterChain方法中添加如下代码，关闭csrf攻击防御\",\"//关闭csrf攻击防御 http.csrf((csrf) -> { csrf.disable(); });\"]},\"197\":{\"h\":\"6、密码加密算法\",\"t\":[\"参考文档：Password Storage :: Spring Security\"]},\"198\":{\"h\":\"6.1、密码加密方式\",\"t\":[\"明文密码：\",\"最初，密码以明文形式存储在数据库中。但是恶意用户可能会通过SQL注入等手段获取到明文密码，或者程序员将数据库数据泄露的情况也可能发生。\",\"Hash算法：\",\"Spring Security的PasswordEncoder接口用于对密码进行单向转换，从而将密码安全地存储。对密码单向转换需要用到哈希算法，例如MD5、SHA-256、SHA-512等，哈希算法是单向的，只能加密，不能解密。\",\"因此，数据库中存储的是单向转换后的密码，Spring Security在进行用户身份验证时需要将用户输入的密码进行单向转换，然后与数据库的密码进行比较。\",\"因此，如果发生数据泄露，只有密码的单向哈希会被暴露。由于哈希是单向的，并且在给定哈希的情况下只能通过暴力破解的方式猜测密码。\",\"彩虹表：\",\"恶意用户创建称为彩虹表的查找表。\",\"彩虹表就是一个庞大的、针对各种可能的字母组合预先生成的哈希值集合，有了它可以快速破解各类密码。越是复杂的密码，需要的彩虹表就越大，主流的彩虹表都是100G以上，目前主要的算法有LM, NTLM, MD5, SHA1, MYSQLSHA1, HALFLMCHALL, NTLMCHALL, ORACLE-SYSTEM, MD5-HALF。\",\"加盐密码：\",\"为了减轻彩虹表的效果，开发人员开始使用加盐密码。不再只使用密码作为哈希函数的输入，而是为每个用户的密码生成随机字节（称为盐）。盐和用户的密码将一起经过哈希函数运算，生成一个唯一的哈希。盐将以明文形式与用户的密码一起存储。然后，当用户尝试进行身份验证时，盐和用户输入的密码一起经过哈希函数运算，再与存储的密码进行比较。唯一的盐意味着彩虹表不再有效，因为对于每个盐和密码的组合，哈希都是不同的。\",\"自适应单向函数：\",\"随着硬件的不断发展，加盐哈希也不再安全。原因是，计算机可以每秒执行数十亿次哈希计算。这意味着我们可以轻松地破解每个密码。\",\"现在，开发人员开始使用自适应单向函数来存储密码。使用自适应单向函数验证密码时，故意占用资源（故意使用大量的CPU、内存或其他资源）。自适应单向函数允许配置一个“工作因子”，随着硬件的改进而增加。我们建议将“工作因子”调整到系统中验证密码需要约一秒钟的时间。这种权衡是为了让攻击者难以破解密码。\",\"自适应单向函数包括bcrypt、PBKDF2、scrypt和argon2。\"]},\"199\":{\"h\":\"6.2、PasswordEncoder\",\"t\":[\"BCryptPasswordEncoder\",\"使用广泛支持的bcrypt算法来对密码进行哈希。为了增加对密码破解的抵抗力，bcrypt故意设计得较慢。和其他自适应单向函数一样，应该调整其参数，使其在您的系统上验证一个密码大约需要1秒的时间。BCryptPasswordEncoder的默认实现使用强度10。建议您在自己的系统上调整和测试强度参数，以便验证密码时大约需要1秒的时间。\",\"Argon2PasswordEncoder\",\"使用Argon2算法对密码进行哈希处理。Argon2是密码哈希比赛的获胜者。为了防止在自定义硬件上进行密码破解，Argon2是一种故意缓慢的算法，需要大量内存。与其他自适应单向函数一样，它应该在您的系统上调整为大约1秒来验证一个密码。当前的Argon2PasswordEncoder实现需要使用BouncyCastle库。\",\"Pbkdf2PasswordEncoder\",\"使用PBKDF2算法对密码进行哈希处理。为了防止密码破解，PBKDF2是一种故意缓慢的算法。与其他自适应单向函数一样，它应该在您的系统上调整为大约1秒来验证一个密码。当需要FIPS认证时，这种算法是一个很好的选择。\",\"image-20230421184645177\",\"SCryptPasswordEncoder\",\"使用scrypt算法对密码进行哈希处理。为了防止在自定义硬件上进行密码破解，scrypt是一种故意缓慢的算法，需要大量内存。与其他自适应单向函数一样，它应该在您的系统上调整为大约1秒来验证一个密码。\"]},\"200\":{\"h\":\"6.3、密码加密测试\",\"t\":[\"在测试类中编写一个测试方法\",\"@Test void testPassword() { // 工作因子，默认值是10，最小值是4，最大值是31，值越大运算速度越慢 PasswordEncoder encoder = new BCryptPasswordEncoder(4); //明文：\\\"password\\\" //密文：result，即使明文密码相同，每次生成的密文也不一致 String result = encoder.encode(\\\"password\\\"); System.out.println(result); //密码校验 Assert.isTrue(encoder.matches(\\\"password\\\", result), \\\"密码不一致\\\"); }\"]},\"201\":{\"h\":\"6.4、DelegatingPasswordEncoder\",\"t\":[\"表中存储的密码形式：{bcrypt}$2a$10$GRLdNijSQMUvl/au9ofL.eDwmoohzzS7.rmNSJZ.0FxO/BTk76klW\",\"通过如下源码可以知道：可以通过{bcrypt}前缀动态获取和密码的形式类型一致的PasswordEncoder对象\",\"目的：方便随时做密码策略的升级，兼容数据库中的老版本密码策略生成的密码\",\"image-20231209011827867\"]},\"202\":{\"h\":\"7、自定义登录页面\"},\"203\":{\"h\":\"7.1、创建登录Controller\",\"t\":[\"package com.atguigu.securitydemo.controller; @Controller public class LoginController { @GetMapping(\\\"/login\\\") public String login() { return \\\"login\\\"; } }\"]},\"204\":{\"h\":\"7.2、创建登录页面\",\"t\":[\"resources/templates/login.html\",\"<!DOCTYPE html> <html xmlns:th=\\\"https://www.thymeleaf.org\\\"> <head> <title>登录</title> </head> <body> <h1>登录</h1> <div th:if=\\\"${param.error}\\\"> 错误的用户名和密码.</div> <!--method必须为\\\"post\\\"--> <!--th:action=\\\"@{/login}\\\" ， 使用动态参数，表单中会自动生成_csrf隐藏字段，用于防止csrf攻击 login: 和登录页面保持一致即可，SpringSecurity自动进行登录认证--> <form th:action=\\\"@{/login}\\\" method=\\\"post\\\"> <div> <!--name必须为\\\"username\\\"--> <input type=\\\"text\\\" name=\\\"username\\\" placeholder=\\\"用户名\\\"/> </div> <div> <!--name必须为\\\"password\\\"--> <input type=\\\"password\\\" name=\\\"password\\\" placeholder=\\\"密码\\\"/> </div> <input type=\\\"submit\\\" value=\\\"登录\\\" /> </form> </body> </html>\"]},\"205\":{\"h\":\"7.3、配置SecurityFilterChain\",\"t\":[\"SecurityConfiguration：\",\".formLogin( form -> { form .loginPage(\\\"/login\\\").permitAll() //登录页面无需授权即可访问 .usernameParameter(\\\"username\\\") //自定义表单用户名参数，默认是username .passwordParameter(\\\"password\\\") //自定义表单密码参数，默认是password .failureUrl(\\\"/login?error\\\") //登录失败的返回地址 ; }); //使用表单授权方式\"]},\"206\":{\"h\":\"1、用户认证流程\",\"t\":[\"登录成功后调用：AuthenticationSuccessHandler\",\"登录失败后调用：AuthenticationFailureHandler\",\"usernamepasswordauthenticationfilter\"]},\"207\":{\"h\":\"2、引入fastjson\",\"t\":[\"<dependency> <groupId>com.alibaba.fastjson2</groupId> <artifactId>fastjson2</artifactId> <version>2.0.37</version> </dependency>\"]},\"208\":{\"h\":\"3、认证成功的响应\"},\"209\":{\"h\":\"3.1、成功结果处理\",\"t\":[\"package com.atguigu.securitydemo.config; public class MyAuthenticationSuccessHandler implements AuthenticationSuccessHandler { @Override public void onAuthenticationSuccess(HttpServletRequest request, HttpServletResponse response, Authentication authentication) throws IOException, ServletException { //获取用户身份信息 Object principal = authentication.getPrincipal(); //创建结果对象 HashMap result = new HashMap(); result.put(\\\"code\\\", 0); result.put(\\\"message\\\", \\\"登录成功\\\"); result.put(\\\"data\\\", principal); //转换成json字符串 String json = JSON.toJSONString(result); //返回响应 response.setContentType(\\\"application/json;charset=UTF-8\\\"); response.getWriter().println(json); } }\"]},\"210\":{\"h\":\"3.2、SecurityFilterChain配置\",\"t\":[\"form.successHandler(new MyAuthenticationSuccessHandler()) //认证成功时的处理\"]},\"211\":{\"h\":\"4、认证失败响应\"},\"212\":{\"h\":\"4.1、失败结果处理\",\"t\":[\"package com.atguigu.securitydemo.config; public class MyAuthenticationFailureHandler implements AuthenticationFailureHandler { @Override public void onAuthenticationFailure(HttpServletRequest request, HttpServletResponse response, AuthenticationException exception) throws IOException, ServletException { //获取错误信息 String localizedMessage = exception.getLocalizedMessage(); //创建结果对象 HashMap result = new HashMap(); result.put(\\\"code\\\", -1); result.put(\\\"message\\\", localizedMessage); //转换成json字符串 String json = JSON.toJSONString(result); //返回响应 response.setContentType(\\\"application/json;charset=UTF-8\\\"); response.getWriter().println(json); } }\"]},\"213\":{\"h\":\"4.2SecurityFilterChain配置\",\"t\":[\"form.failureHandler(new MyAuthenticationFailureHandler()) //认证失败时的处理\"]},\"214\":{\"h\":\"5、注销响应\"},\"215\":{\"h\":\"5.1、注销结果处理\",\"t\":[\"package com.atguigu.securitydemo.config; public class MyLogoutSuccessHandler implements LogoutSuccessHandler { @Override public void onLogoutSuccess(HttpServletRequest request, HttpServletResponse response, Authentication authentication) throws IOException, ServletException { //创建结果对象 HashMap result = new HashMap(); result.put(\\\"code\\\", 0); result.put(\\\"message\\\", \\\"注销成功\\\"); //转换成json字符串 String json = JSON.toJSONString(result); //返回响应 response.setContentType(\\\"application/json;charset=UTF-8\\\"); response.getWriter().println(json); } }\"]},\"216\":{\"h\":\"5.2、SecurityFilterChain配置\",\"t\":[\"http.logout(logout -> { logout.logoutSuccessHandler(new MyLogoutSuccessHandler()); //注销成功时的处理 });\"]},\"217\":{\"h\":\"6、请求未认证的接口\"},\"218\":{\"h\":\"6.1、实现AuthenticationEntryPoint接口\",\"t\":[\"Servlet Authentication Architecture :: Spring Security\",\"当访问一个需要认证之后才能访问的接口的时候，Spring Security会使用AuthenticationEntryPoint将用户请求跳转到登录页面，要求用户提供登录凭证。\",\"这里我们也希望系统返回json结果，因此我们定义类实现AuthenticationEntryPoint接口\",\"package com.atguigu.securitydemo.config; public class MyAuthenticationEntryPoint implements AuthenticationEntryPoint { @Override public void commence(HttpServletRequest request, HttpServletResponse response, AuthenticationException authException) throws IOException, ServletException { //获取错误信息 //String localizedMessage = authException.getLocalizedMessage(); //创建结果对象 HashMap result = new HashMap(); result.put(\\\"code\\\", -1); result.put(\\\"message\\\", \\\"需要登录\\\"); //转换成json字符串 String json = JSON.toJSONString(result); //返回响应 response.setContentType(\\\"application/json;charset=UTF-8\\\"); response.getWriter().println(json); } }\"]},\"219\":{\"h\":\"6.2、SecurityFilterChain配置\",\"t\":[\"//错误处理 http.exceptionHandling(exception -> { exception.authenticationEntryPoint(new MyAuthenticationEntryPoint());//请求未认证的接口 });\"]},\"220\":{\"h\":\"7、跨域\",\"t\":[\"跨域全称是跨域资源共享(Cross-Origin Resources Sharing,CORS)，它是浏览器的保护机制，只允许网页请求统一域名下的服务，同一域名指=>协议、域名、端口号都要保持一致，如果有一项不同，那么就是跨域请求。在前后端分离的项目中，需要解决跨域的问题。\",\"在SpringSecurity中解决跨域很简单，在配置文件中添加如下配置即可\",\"//跨域 http.cors(withDefaults());\"]},\"221\":{\"h\":\"1、用户认证信息\"},\"222\":{\"h\":\"1.1、基本概念\",\"t\":[\"securitycontextholder\",\"在Spring Security框架中，SecurityContextHolder、SecurityContext、Authentication、Principal和Credential是一些与身份验证和授权相关的重要概念。它们之间的关系如下：\",\"SecurityContextHolder：SecurityContextHolder 是 Spring Security 存储已认证用户详细信息的地方。\",\"SecurityContext：SecurityContext 是从 SecurityContextHolder 获取的内容，包含当前已认证用户的 Authentication 信息。\",\"Authentication：Authentication 表示用户的身份认证信息。它包含了用户的Principal、Credential和Authority信息。\",\"Principal：表示用户的身份标识。它通常是一个表示用户的实体对象，例如用户名。Principal可以通过Authentication对象的getPrincipal()方法获取。\",\"Credentials：表示用户的凭证信息，例如密码、证书或其他认证凭据。Credential可以通过Authentication对象的getCredentials()方法获取。\",\"GrantedAuthority：表示用户被授予的权限\",\"总结起来，SecurityContextHolder用于管理当前线程的安全上下文，存储已认证用户的详细信息，其中包含了SecurityContext对象，该对象包含了Authentication对象，后者表示用户的身份验证信息，包括Principal（用户的身份标识）和Credential（用户的凭证信息）。\"]},\"223\":{\"h\":\"1.2、在Controller中获取用户信息\",\"t\":[\"IndexController：\",\"package com.atguigu.securitydemo.controller; @RestController public class IndexController { @GetMapping(\\\"/\\\") public Map index(){ System.out.println(\\\"index controller\\\"); SecurityContext context = SecurityContextHolder.getContext();//存储认证对象的上下文 Authentication authentication = context.getAuthentication();//认证对象 String username = authentication.getName();//用户名 Object principal =authentication.getPrincipal();//身份 Object credentials = authentication.getCredentials();//凭证(脱敏) Collection<? extends GrantedAuthority> authorities = authentication.getAuthorities();//权限 System.out.println(username); System.out.println(principal); System.out.println(credentials); System.out.println(authorities); //创建结果对象 HashMap result = new HashMap(); result.put(\\\"code\\\", 0); result.put(\\\"data\\\", username); return result; } }\"]},\"224\":{\"h\":\"2、会话并发处理\",\"t\":[\"后登录的账号会使先登录的账号失效\"]},\"225\":{\"h\":\"2.1、实现处理器接口\",\"t\":[\"实现接口SessionInformationExpiredStrategy\",\"package com.atguigu.securitydemo.config; public class MySessionInformationExpiredStrategy implements SessionInformationExpiredStrategy { @Override public void onExpiredSessionDetected(SessionInformationExpiredEvent event) throws IOException, ServletException { //创建结果对象 HashMap result = new HashMap(); result.put(\\\"code\\\", -1); result.put(\\\"message\\\", \\\"该账号已从其他设备登录\\\"); //转换成json字符串 String json = JSON.toJSONString(result); HttpServletResponse response = event.getResponse(); //返回响应 response.setContentType(\\\"application/json;charset=UTF-8\\\"); response.getWriter().println(json); } }\"]},\"226\":{\"h\":\"2.2、SecurityFilterChain配置\",\"t\":[\"//会话管理 http.sessionManagement(session -> { session .maximumSessions(1) .expiredSessionStrategy(new MySessionInformationExpiredStrategy()); });\",\"授权管理的实现在SpringSecurity中非常灵活，可以帮助应用程序实现以下两种常见的授权需求：\",\"用户-权限-资源：例如张三的权限是添加用户、查看用户列表，李四的权限是查看用户列表\",\"用户-角色-权限-资源：例如 张三是角色是管理员、李四的角色是普通用户，管理员能做所有操作，普通用户只能查看信息\"]},\"227\":{\"h\":\"1、基于request的授权\"},\"228\":{\"h\":\"1.1、用户-权限-资源\",\"t\":[\"需求：\",\"具有USER_LIST权限的用户可以访问/user/list接口\",\"具有USER_ADD权限的用户可以访问/user/add接口\"]},\"229\":{\"h\":\"配置权限\",\"t\":[\"SecurityFilterChain\",\"//开启授权保护 http.authorizeRequests( authorize -> authorize //具有USER_LIST权限的用户可以访问/user/list .requestMatchers(\\\"/user/list\\\").hasAuthority(\\\"USER_LIST\\\") //具有USER_ADD权限的用户可以访问/user/add .requestMatchers(\\\"/user/add\\\").hasAuthority(\\\"USER_ADD\\\") //对所有请求开启授权保护 .anyRequest() //已认证的请求会被自动授权 .authenticated() );\"]},\"230\":{\"h\":\"授予权限\",\"t\":[\"DBUserDetailsManager中的loadUserByUsername方法：\",\"Collection<GrantedAuthority> authorities = new ArrayList<>(); authorities.add(()->\\\"USER_LIST\\\"); authorities.add(()->\\\"USER_ADD\\\"); /*authorities.add(new GrantedAuthority() { @Override public String getAuthority() { return \\\"USER_LIST\\\"; } }); authorities.add(new GrantedAuthority() { @Override public String getAuthority() { return \\\"USER_ADD\\\"; } });*/\"]},\"231\":{\"h\":\"请求未授权的接口\",\"t\":[\"SecurityFilterChain\",\"//错误处理 http.exceptionHandling(exception -> { exception.authenticationEntryPoint(new MyAuthenticationEntryPoint());//请求未认证的接口 exception.accessDeniedHandler((request, response, e)->{ //请求未授权的接口 //创建结果对象 HashMap result = new HashMap(); result.put(\\\"code\\\", -1); result.put(\\\"message\\\", \\\"没有权限\\\"); //转换成json字符串 String json = JSON.toJSONString(result); //返回响应 response.setContentType(\\\"application/json;charset=UTF-8\\\"); response.getWriter().println(json); }); });\",\"更多的例子：Authorize HttpServletRequests :: Spring Security\"]},\"232\":{\"h\":\"1.2、用户-角色-资源\",\"t\":[\"**需求：**角色为ADMIN的用户才可以访问/user/**路径下的资源\"]},\"233\":{\"h\":\"配置角色\",\"t\":[\"SecurityFilterChain\",\"//开启授权保护 http.authorizeRequests( authorize -> authorize //具有管理员角色的用户可以访问/user/** .requestMatchers(\\\"/user/**\\\").hasRole(\\\"ADMIN\\\") //对所有请求开启授权保护 .anyRequest() //已认证的请求会被自动授权 .authenticated() );\"]},\"234\":{\"h\":\"授予角色\",\"t\":[\"DBUserDetailsManager中的loadUserByUsername方法：\",\"return org.springframework.security.core.userdetails.User .withUsername(user.getUsername()) .password(user.getPassword()) .roles(\\\"ADMIN\\\") .build();\"]},\"235\":{\"h\":\"1.3、用户-角色-权限-资源\",\"t\":[\"RBAC（Role-Based Access Control，基于角色的访问控制）是一种常用的数据库设计方案，它将用户的权限分配和管理与角色相关联。以下是一个基本的RBAC数据库设计方案的示例：\",\"用户表（User table）：包含用户的基本信息，例如用户名、密码和其他身份验证信息。\",\"列名\",\"数据类型\",\"描述\",\"user_id\",\"int\",\"用户ID\",\"username\",\"varchar\",\"用户名\",\"password\",\"varchar\",\"密码\",\"email\",\"varchar\",\"电子邮件地址\",\"...\",\"...\",\"...\",\"角色表（Role table）：存储所有可能的角色及其描述。\",\"列名\",\"数据类型\",\"描述\",\"role_id\",\"int\",\"角色ID\",\"role_name\",\"varchar\",\"角色名称\",\"description\",\"varchar\",\"角色描述\",\"...\",\"...\",\"...\",\"权限表（Permission table）：定义系统中所有可能的权限。\",\"列名\",\"数据类型\",\"描述\",\"permission_id\",\"int\",\"权限ID\",\"permission_name\",\"varchar\",\"权限名称\",\"description\",\"varchar\",\"权限描述\",\"...\",\"...\",\"...\",\"用户角色关联表（User-Role table）：将用户与角色关联起来。\",\"列名\",\"数据类型\",\"描述\",\"user_role_id\",\"int\",\"用户角色关联ID\",\"user_id\",\"int\",\"用户ID\",\"role_id\",\"int\",\"角色ID\",\"...\",\"...\",\"...\",\"角色权限关联表（Role-Permission table）：将角色与权限关联起来。\",\"列名\",\"数据类型\",\"描述\",\"role_permission_id\",\"int\",\"角色权限关联ID\",\"role_id\",\"int\",\"角色ID\",\"permission_id\",\"int\",\"权限ID\",\"...\",\"...\",\"...\",\"在这个设计方案中，用户可以被分配一个或多个角色，而每个角色又可以具有一个或多个权限。通过对用户角色关联和角色权限关联表进行操作，可以实现灵活的权限管理和访问控制。\",\"当用户尝试访问系统资源时，系统可以根据用户的角色和权限决定是否允许访问。这样的设计方案使得权限管理更加简单和可维护，因为只需调整角色和权限的分配即可，而不需要针对每个用户进行单独的设置。\"]},\"236\":{\"h\":\"2、基于方法的授权\"},\"237\":{\"h\":\"2.1、开启方法授权\",\"t\":[\"在配置文件中添加如下注解\",\"@EnableMethodSecurity\"]},\"238\":{\"h\":\"2.2、给用户授予角色和权限\",\"t\":[\"DBUserDetailsManager中的loadUserByUsername方法：\",\"return org.springframework.security.core.userdetails.User .withUsername(user.getUsername()) .password(user.getPassword()) .roles(\\\"ADMIN\\\") .authorities(\\\"USER_ADD\\\", \\\"USER_UPDATE\\\") .build();\"]},\"239\":{\"h\":\"2.2、常用授权注解\",\"t\":[\"//用户必须有 ADMIN 角色 并且 用户名是 admin 才能访问此方法 @PreAuthorize(\\\"hasRole('ADMIN') and authentication.name == 'admim'\\\") @GetMapping(\\\"/list\\\") public List<User> getList(){ return userService.list(); } //用户必须有 USER_ADD 权限 才能访问此方法 @PreAuthorize(\\\"hasAuthority('USER_ADD')\\\") @PostMapping(\\\"/add\\\") public void add(@RequestBody User user){ userService.saveUserDetails(user); }\",\"更多的例子：Method Security :: Spring Security\"]},\"240\":{\"h\":\"1、OAuth2简介\"},\"241\":{\"h\":\"1.1、OAuth2是什么\",\"t\":[\"“Auth” 表示 “授权” Authorization\",\"“O” 是 Open 的简称，表示 “开放”\",\"连在一起就表示 “开放授权”，OAuth2是一种开放授权协议。\",\"OAuth2最简向导：The Simplest Guide To OAuth 2.0\"]},\"242\":{\"h\":\"1.2、OAuth2的角色\",\"t\":[\"OAuth 2协议包含以下角色：\",\"资源所有者（Resource Owner）：即用户，资源的拥有人，想要通过客户应用访问资源服务器上的资源。\",\"客户应用（Client）：通常是一个Web或者无线应用，它需要访问用户的受保护资源。\",\"资源服务器（Resource Server）：存储受保护资源的服务器或定义了可以访问到资源的API，接收并验证客户端的访问令牌，以决定是否授权访问资源。\",\"授权服务器（Authorization Server）：负责验证资源所有者的身份并向客户端颁发访问令牌。\",\"image-20231222124053994\"]},\"243\":{\"h\":\"1.3、OAuth2的使用场景\"},\"244\":{\"h\":\"开放系统间授权\"},\"245\":{\"h\":\"社交登录\",\"t\":[\"在传统的身份验证中，用户需要提供用户名和密码，还有很多网站登录时，允许使用第三方网站的身份，这称为\\\"第三方登录\\\"。所谓第三方登录，实质就是 OAuth 授权。用户想要登录 A 网站，A 网站让用户提供第三方网站的数据，证明自己的身份。获取第三方网站的身份数据，就需要 OAuth 授权。\",\"image-20231222131233025\"]},\"246\":{\"h\":\"开放API\",\"t\":[\"例如云冲印服务的实现\",\"image-20231222131118611\"]},\"247\":{\"h\":\"现代微服务安全\"},\"248\":{\"h\":\"单块应用安全\",\"t\":[\"image-20231222152734546\"]},\"249\":{\"h\":\"微服务安全\",\"t\":[\"image-20231222152557861\"]},\"250\":{\"h\":\"企业内部应用认证授权\",\"t\":[\"SSO：Single Sign On 单点登录\",\"IAM：Identity and Access Management 身份识别与访问管理\"]},\"251\":{\"h\":\"1.4、OAuth2的四种授权模式\",\"t\":[\"RFC6749：\",\"RFC 6749 - The OAuth 2.0 Authorization Framework (ietf.org)\",\"阮一峰：\",\"OAuth 2.0 的四种方式 - 阮一峰的网络日志 (ruanyifeng.com)\",\"四种模式：\",\"授权码（authorization-code）\",\"隐藏式（implicit）\",\"密码式（password）\",\"客户端凭证（client credentials）\"]},\"252\":{\"h\":\"第一种方式：授权码\",\"t\":[\"授权码（authorization code），指的是第三方应用先申请一个授权码，然后再用该码获取令牌。\",\"这种方式是最常用，最复杂，也是最安全的，它适用于那些有后端的 Web 应用。授权码通过前端传送，令牌则是储存在后端，而且所有与资源服务器的通信都在后端完成。这样的前后端分离，可以避免令牌泄漏。\",\"image-20231220180422742\",\"注册客户应用：客户应用如果想要访问资源服务器需要有凭证，需要在授权服务器上注册客户应用。注册后会获取到一个ClientID和ClientSecrets\",\"image-20231222203153125\"]},\"253\":{\"h\":\"第二种方式：隐藏式\",\"t\":[\"隐藏式（implicit），也叫简化模式，有些 Web 应用是纯前端应用，没有后端。这时就不能用上面的方式了，必须将令牌储存在前端。\",\"RFC 6749 规定了这种方式，允许直接向前端颁发令牌。这种方式没有授权码这个中间步骤，所以称为隐藏式。这种方式把令牌直接传给前端，是很不安全的。因此，只能用于一些安全要求不高的场景，并且令牌的有效期必须非常短，通常就是会话期间（session）有效，浏览器关掉，令牌就失效了。\",\"​ \",\"image-20231222203218334\",\"https://a.com/callback#token=ACCESS_TOKEN 将访问令牌包含在URL锚点中的好处：锚点在HTTP请求中不会发送到服务器，减少了泄漏令牌的风险。\"]},\"254\":{\"h\":\"第三种方式：密码式\",\"t\":[\"密码式（Resource Owner Password Credentials）：如果你高度信任某个应用，RFC 6749 也允许用户把用户名和密码，直接告诉该应用。该应用就使用你的密码，申请令牌。\",\"这种方式需要用户给出自己的用户名/密码，显然风险很大，因此只适用于其他授权方式都无法采用的情况，而且必须是用户高度信任的应用。\",\"image-20231220190152888\",\"image-20231222203240921\"]},\"255\":{\"h\":\"第四种方式：凭证式\",\"t\":[\"凭证式（client credentials）：也叫客户端模式，适用于没有前端的命令行应用，即在命令行下请求令牌。\",\"这种方式给出的令牌，是针对第三方应用的，而不是针对用户的，即有可能多个用户共享同一个令牌。\",\"image-20231220185958063\",\"image-20231222203259785\"]},\"256\":{\"h\":\"1.5、授权类型的选择\",\"t\":[\"image-20231223020052999\"]},\"257\":{\"h\":\"2、Spring中的OAuth2\"},\"258\":{\"h\":\"2.1、相关角色\",\"t\":[\"**回顾：**OAuth 2中的角色\",\"资源所有者（Resource Owner）\",\"客户应用（Client）\",\"资源服务器（Resource Server）\",\"授权服务器（Authorization Server）\"]},\"259\":{\"h\":\"2.2、Spring中的实现\",\"t\":[\"OAuth2 :: Spring Security\",\"Spring Security\",\"客户应用（OAuth2 Client）：OAuth2客户端功能中包含OAuth2 Login\",\"资源服务器（OAuth2 Resource Server）\",\"Spring\",\"授权服务器（Spring Authorization Server）：它是在Spring Security之上的一个单独的项目。\"]},\"260\":{\"h\":\"2.3、相关依赖\",\"t\":[\"<!-- 资源服务器 --> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-oauth2-resource-server</artifactId> </dependency> <!-- 客户应用 --> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-oauth2-client</artifactId> </dependency> <!-- 授权服务器 --> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-oauth2-authorization-server</artifactId> </dependency>\"]},\"261\":{\"h\":\"2.4、授权登录的实现思路\",\"t\":[\"使用OAuth2 Login\",\"image-20231223164128030\"]},\"262\":{\"h\":\"3、GiuHub社交登录案例\"},\"263\":{\"h\":\"3.1、创建应用\",\"t\":[\"注册客户应用：\",\"登录GitHub，在开发者设置中找到OAuth Apps，创建一个application，为客户应用创建访问GitHub的凭据：\",\"image-20230510154255157\",\"填写应用信息：默认的重定向URI模板为{baseUrl}/login/oauth2/code/{registrationId}。registrationId是ClientRegistration的唯一标识符。\",\"image-20231221000906168\",\"获取应用程序id，生成应用程序密钥：\",\"image-20230510163101376\"]},\"264\":{\"h\":\"3.2、创建测试项目\",\"t\":[\"创建一个springboot项目oauth2-login-demo，创建时引入如下依赖\",\"image-20230510165314829\",\"示例代码参考：spring-security-samples/servlet/spring-boot/java/oauth2/login at 6.2.x · spring-projects/spring-security-samples (github.com)\"]},\"265\":{\"h\":\"3.3、配置OAuth客户端属性\",\"t\":[\"application.yml：\",\"spring: security: oauth2: client: registration: github: client-id: 7807cc3bb1534abce9f2 client-secret: 008dc141879134433f4db7f62b693c4a5361771b # redirectUri: http://localhost:8200/login/oauth2/code/github\"]},\"266\":{\"h\":\"3.4、创建Controller\",\"t\":[\"package com.atguigu.oauthdemo.controller; @Controller public class IndexController { @GetMapping(\\\"/\\\") public String index( Model model, @RegisteredOAuth2AuthorizedClient OAuth2AuthorizedClient authorizedClient, @AuthenticationPrincipal OAuth2User oauth2User) { model.addAttribute(\\\"userName\\\", oauth2User.getName()); model.addAttribute(\\\"clientName\\\", authorizedClient.getClientRegistration().getClientName()); model.addAttribute(\\\"userAttributes\\\", oauth2User.getAttributes()); return \\\"index\\\"; } }\"]},\"267\":{\"h\":\"3.5、创建html页面\",\"t\":[\"resources/templates/index.html\",\"<!DOCTYPE html> <html xmlns=\\\"http://www.w3.org/1999/xhtml\\\" xmlns:th=\\\"https://www.thymeleaf.org\\\" xmlns:sec=\\\"https://www.thymeleaf.org/thymeleaf-extras-springsecurity5\\\"> <head> <title>Spring Security - OAuth 2.0 Login</title> <meta charset=\\\"utf-8\\\" /> </head> <body> <div style=\\\"float: right\\\" th:fragment=\\\"logout\\\" sec:authorize=\\\"isAuthenticated()\\\"> <div style=\\\"float:left\\\"> <span style=\\\"font-weight:bold\\\">User: </span><span sec:authentication=\\\"name\\\"></span> </div> <div style=\\\"float:none\\\">&nbsp;</div> <div style=\\\"float:right\\\"> <form action=\\\"#\\\" th:action=\\\"@{/logout}\\\" method=\\\"post\\\"> <input type=\\\"submit\\\" value=\\\"Logout\\\" /> </form> </div> </div> <h1>OAuth 2.0 Login with Spring Security</h1> <div> You are successfully logged in <span style=\\\"font-weight:bold\\\" th:text=\\\"${userName}\\\"></span> via the OAuth 2.0 Client <span style=\\\"font-weight:bold\\\" th:text=\\\"${clientName}\\\"></span> </div> <div>&nbsp;</div> <div> <span style=\\\"font-weight:bold\\\">User Attributes:</span> <ul> <li th:each=\\\"userAttribute : ${userAttributes}\\\"> <span style=\\\"font-weight:bold\\\" th:text=\\\"${userAttribute.key}\\\"></span>: <span th:text=\\\"${userAttribute.value}\\\"></span> </li> </ul> </div> </body> </html>\"]},\"268\":{\"h\":\"3.6、启动应用程序\",\"t\":[\"启动程序并访问localhost:8080。浏览器将被重定向到默认的自动生成的登录页面，该页面显示了一个用于GitHub登录的链接。\",\"点击GitHub链接，浏览器将被重定向到GitHub进行身份验证。\",\"使用GitHub账户凭据进行身份验证后，用户会看到授权页面，询问用户是否允许或拒绝客户应用访问GitHub上的用户数据。点击允许以授权OAuth客户端访问用户的基本个人资料信息。\",\"此时，OAuth客户端访问GitHub的获取用户信息的接口获取基本个人资料信息，并建立一个已认证的会话。\"]},\"269\":{\"h\":\"4、案例分析\"},\"270\":{\"h\":\"4.1、登录流程\",\"t\":[\"A 网站让用户跳转到 GitHub，并携带参数ClientID 以及 Redirection URI。\",\"GitHub 要求用户登录，然后询问用户\\\"A 网站要求获取用户信息的权限，你是否同意？\\\"\",\"用户同意，GitHub 就会重定向回 A 网站，同时发回一个授权码。\",\"A 网站使用授权码，向 GitHub 请求令牌。\",\"GitHub 返回令牌.\",\"A 网站使用令牌，向 GitHub 请求用户数据。\",\"GitHub返回用户数据\",\"A 网站使用 GitHub用户数据登录\",\"image-20231223203225688\"]},\"271\":{\"h\":\"4.2、CommonOAuth2Provider\",\"t\":[\"CommonOAuth2Provider是一个预定义的通用OAuth2Provider，为一些知名资源服务API提供商（如Google、GitHub、Facebook）预定义了一组默认的属性。\",\"例如，授权URI、令牌URI和用户信息URI通常不经常变化。因此，提供默认值以减少所需的配置。\",\"因此，当我们配置GitHub客户端时，只需要提供client-id和client-secret属性。\",\"GITHUB { public ClientRegistration.Builder getBuilder(String registrationId) { ClientRegistration.Builder builder = this.getBuilder( registrationId, ClientAuthenticationMethod.CLIENT_SECRET_BASIC, //授权回调地址(GitHub向客户应用发送回调请求，并携带授权码) \\\"{baseUrl}/{action}/oauth2/code/{registrationId}\\\"); builder.scope(new String[]{\\\"read:user\\\"}); //授权页面 builder.authorizationUri(\\\"https://github.com/login/oauth/authorize\\\"); //客户应用使用授权码，向 GitHub 请求令牌 builder.tokenUri(\\\"https://github.com/login/oauth/access_token\\\"); //客户应用使用令牌向GitHub请求用户数据 builder.userInfoUri(\\\"https://api.github.com/user\\\"); //username属性显示GitHub中获取的哪个属性的信息 builder.userNameAttributeName(\\\"id\\\"); //登录页面超链接的文本 builder.clientName(\\\"GitHub\\\"); return builder; } },\"]},\"272\":{\"c\":[\"Java\",\"Spring\"]},\"273\":{\"c\":[\"SpringSecurity\"]},\"274\":{\"h\":\"布局与功能禁用\",\"t\":[\"你可以通过设置页面的 Frontmatter，在页面禁用功能与布局。\",\"本页面就是一个示例，禁用了如下功能:\",\"导航栏\",\"侧边栏\",\"路径导航\",\"页面信息\",\"贡献者\",\"编辑此页链接\",\"更新时间\",\"上一篇/下一篇 链接\",\"评论\",\"页脚\",\"返回顶部按钮\"]},\"275\":{\"c\":[\"使用指南\"]},\"276\":{\"c\":[\"禁用\"]},\"277\":{\"h\":\"Java并发包\",\"t\":[\"Java 并发包\",\"JUC是指package java.util.concurrent;这个并发包。\",\"img\",\"这个包是为了解决并发问题的。有atomic子包，locks子包，Semaphore，Threadlocal，ThreadPoolExecutor，Excutor，CyclicBarrier，Future，\",\"讲到并发，那要先提一下线程间是如何通信的，简单来说线程有两种通信方式，一种是基于共享内存的，一种是基于消息传递的。Java里面是基于内存共享来进行线程间的通信，golang里面的协程（类似于操作系统的线程，线程是CPU调度的最小单位，协程是在线程的基础上再细分出来的一个调度的最小单位）可以通过管道进行消息传递来实现协程间的通信。\",\"线程同步是一种机制，用于控制多个线程访问共享资源（如内存、文件、数据库等）的方式，以避免数据不一致或竞态条件的问题。在 Java 中，线程同步通常通过以下几种方式实现：\",\"互斥锁**（Mutexes）**：通过 synchronized 关键字或 java.util.concurrent.locks.Lock 接口的实现（如 ReentrantLock）来保证同一时间只有一个线程可以访问特定的代码块或资源。\",\"原子操作：使用 java.util.concurrent.atomic 包中的原子类（如 AtomicInteger、AtomicReference 等）来执行不可中断的操作。\",\"volatile 关键字：确保对变量的读写操作直接在主内存中进行，而不是在各个线程的缓存中，以此保证变量的一致性。\",\"final 关键字：确保对象的引用在构造之后不会改变，保证对象初始化的安全性。\",\"线程同步的目的是确保当一个线程正在使用某个资源时，其他线程不会同时修改这个资源，从而防止数据竞争和不一致。\",\"线程通信是指线程之间相互发送信号和交换数据的过程。线程通信通常用于以下场景：\",\"协调任务执行：线程可能需要等待其他线程完成某些操作后才能继续执行。\",\"数据共享：线程可能需要向其他线程提供数据或者从其他线程接收数据。\",\"在 Java 中，线程通信通常通过以下几种方式实现：\",\"等待/通知机制：通过 Object 类的 wait()、notify() 和 notifyAll() 方法实现。一个线程可以调用 wait() 方法暂停执行并等待其他线程通过 notify() 或 notifyAll() 方法唤醒它。\",\"条件变量：通过 java.util.concurrent.locks.Condition 接口实现，与 ReentrantLock 结合使用，提供了更灵活的线程通信方式。\",\"**CountDownLatch、CyclicBarrier、**Semaphore 等同步器：提供更高级的线程通信和同步机制。\"]},\"278\":{\"h\":\"Wait notify原理\",\"t\":[\"img\",\"Owner 线程发现条件不满足，调用 wait 方法，即可进入 WaitSet 变为 WAITING 状态\",\"BLOCKED 和 WAITING 的线程都处于阻塞状态，不占用 CPU 时间片\",\"BLOCKED 线程会在 Owner 线程释放锁时唤醒\",\"WAITING 线程会在 Owner 线程调用 notify 或 notifyAll 时唤醒，但唤醒后并不意味者立刻获得锁，仍需进入\",\"EntryList 重新竞争\"]},\"279\":{\"h\":\"join原理\",\"t\":[\"//是调用者轮询检查线程 alive 状态 t1.join(); 等价于下面的代码 synchronized (t1) { // 调用者线程进入 t1 的 waitSet 等待, 直到 t1 运行结束 while (t1.isAlive()) { t1.wait(0); } }\",\"注意join 体现的是【保护性暂停】模式，请参考之\"]},\"280\":{\"h\":\"Park unpark原理\",\"t\":[\"// 暂停当前线程 LockSupport.park(); // 恢复某个线程的运行 LockSupport.unpark(暂停线程对象);\",\"每个线程都有自己的一个 Parker 对象，由三部分组成 _counter ， _cond 和 _mutex 打个比喻\",\"_counter 理解成订单，_cond 理解成停车场，_mutex是互斥锁。\",\"把Park 理解成泊车，把unpark理解成出车。跟现实的司机很像，这里代入一下。\",\"可以先Park 后unpark，也可以先unpark后Park 。\"]},\"281\":{\"h\":\"先Park 后unpark\",\"t\":[\"执行Park ，司机在停车场停车休息，阻塞等待订单。\",\"执行unpark，下了个订单，司机那边收到就开始工作。\"]},\"282\":{\"h\":\"先unpark后Park\",\"t\":[\"执行unpark，先下个单，等司机来接。\",\"执行Park ，开车不能玩手机，司机停车的时候发现有个订单，立马处理，不用阻塞等待。这里跟现实不一样，这里必须是司机停车的时候才能接单。\"]},\"283\":{\"h\":\"与 Object 的 wait & notify相比\",\"t\":[\"wait, notify 和 notifyAll 必须配合 Object Monitor 一起使用,而 park, unpark不必\",\"park & unpark是以线程为单位来【阻塞】和【唤醒】线程，而 notify 只能随机唤醒一个等待线程， notifyAll 是唤醒所有等待线程，就不那么【精确】\",\"park & unpark可以先 unpark, 而 wait & notify 不能先 notify\",\"线程同步和线程通信虽然密切相关，但它们的关注点不同。线程同步关注的是如何避免并发导致的问题，而线程通信关注的是线程之间如何协作完成任务。在并发编程中，这两者通常是相辅相成的。\",\"是一种抽象的模型，被定义出来屏蔽各种硬件和操作系统的内存访问差异。\",\"JMM定义了线程和主内存之间的抽象关系：线程之间的共享变量存储在主内存（Main Memory）中，每个线程都有一个私有的 本地内存 （Local Memory），本地内存中存储了该线程以读/写共享变量的副本。\",\"img\",\"原子性、有序性、可见性是并发编程中非常重要的基础概念，用于描述多线程环境下的内存访问行为，它们是 Java 内存模型（Java Memory Model, JMM）的基础。\",\"原子性（Atomicity）：\",\"原子性是指一个操作或者一系列操作要么全部执行并且在执行过程中不会被任何其他操作中断，要么就全部都不执行。\",\"在多线程环境中，原子性确保了当多个线程尝试同时修改同一变量时，这些修改不会相互干扰。\",\"Java 提供了一些原子类（如 AtomicInteger、AtomicLong 等），它们利用底层硬件的原子指令来保证操作的原子性。\",\"可见性（Visibility）：\",\"可见性是指当一个线程修改了共享变量的值，其他线程能够立即看到这个修改。\",\"在没有同步机制的情况下，一个线程对共享变量的修改可能对其他线程不可见，因为变量的值可能被缓存在寄存器或者线程私有内存中。\",\"Java 通过 volatile 关键字、synchronized 块以及 Lock 机制来保证可见性。\",\"有序性（Ordering）：\",\"有序性是指程序执行的顺序按照代码的先后顺序进行。\",\"在多线程环境中，由于编译器优化、处理器乱序执行等原因，指令可能会以不同于编写代码时的顺序执行。\",\"JMM 规定了 happens-before 关系，确保在并发环境中程序的执行结果与按序执行时的结果一致。\",\"使用 synchronized 和 volatile 可以禁止某些重排序，保证操作的有序性。\",\"JMM 定义了这些概念来规范多线程程序的内存一致性行为，确保在不同的线程、处理器和编译器优化下，程序的行为符合预期。理解并正确使用这些概念对于编写正确、高效的并发程序至关重要。\",\"volatile关键字有两个作用，保证可见性和有序性，但是不保证原子性。\"]},\"284\":{\"h\":\"含义\",\"t\":[\"volatile关键字用来修饰变量，告诉JVM编译器和处理器，这个变量可能会被不同的线程同时访问和修改。这意味着，任何线程对volatile变量的修改，都将立即反映到主内存中，而且其他线程可以从主内存中读取最新的值。\"]},\"285\":{\"h\":\"作用\",\"t\":[\"保证可见性：volatile变量的写操作会强制将数据写入主内存，读操作会从主内存中读取数据。这样，一旦某个线程修改了volatile变量，其他线程可以立即看到这个变化。\",\"禁止指令重排序：变量的写操作在执行时不能被编译器或处理器重排序到之前的任何时刻。这确保了在 volatile 变量写操作之前的所有操作都将在写操作之前完成，读操作也是如此。\",\"尽管 volatile 保证了可见性和禁止指令重排序，但它并不保证复合操作的原子性。例如，递增操作 i++（即 i = i + 1）不是一个原子操作，即使 i 被声明为 volatile，也不能保证线程安全。\",\"1public class VolatileCounter { 2 private volatile int count = 0; 34 public void increment() { 5 count++; // 这个操作在多线程环境下不是原子的 6 } 7}\"]},\"286\":{\"h\":\"使用场景及原理\",\"t\":[\"使用场景：\",\"volatile 适用于状态标记，例如，一个线程需要知道另一个线程是否已经初始化了某些资源或者是否正在执行特定的任务。\",\"示例：\",\"public class Example { private volatile boolean running = true; public void start() { while (running) { // 执行任务 } } public void stop() { running = false; } }\",\"在这个例子中，running 变量被声明为 volatile，以确保当调用 stop() 方法修改 running 为 false 时，start() 方法中的线程能够立即看到这个变化。\",\"内存****屏障：\",\"在读取 volatile 变量时，JVM 会插入一个内存屏障来防止指令重排序，确保在该屏障之前的所有读/写操作在该屏障之后的所有读/写操作之前执行。\",\"volatile 是一种比 synchronized 更轻量级的同步机制，但它的使用场景有限，主要用于保证变量的可见性。在需要更复杂的同步操作时，通常需要使用其他同步机制，如 synchronized 或 java.util.concurrent 包中的并发工具。\",\"原子操作。\"]},\"287\":{\"h\":\"Synchronized\"},\"288\":{\"h\":\"Monitor 被翻译为监视器或管程\",\"t\":[\"每个 Java 对象都可以关联一个 Monitor 对象，如果使用 synchronized 给对象上锁（重量级）之后，该对象头的Mark Word 中就被设置指向 Monitor 对象的指针。\"]},\"289\":{\"h\":\"关联流程\",\"t\":[\"img\",\"刚开始 Monitor 中 Owner 为 null\",\"当 Thread-2 执行 synchronized(obj) 就会将 Monitor 的所有者 Owner 置为 Thread-2，Monitor中只能有一个 Owner\",\"在 Thread-2 上锁的过程中，如果 Thread-3，Thread-4，Thread-5 也来执行 synchronized(obj)，就会进入EntryList BLOCKED\",\"Thread-2 执行完同步代码块的内容，然后唤醒 EntryList 中等待的线程来竞争锁，竞争的时是非公平的\",\"图中 WaitSet 中的 Thread-0，Thread-1 是之前获得过锁，但条件不满足进入 WAITING 状态的线程\",\"注意：\",\"synchronized 必须是进入同一个对象的 monitor 才有上述的效果\",\"不加 synchronized 的对象不会关联监视器，不遵从以上规则\",\"static final Object lock = new Object(); static int counter = 0; public static void main(String[] args) { synchronized (lock) { counter++; } } Code: stack=2, locals=3, args_size=1 0: getstatic #2 // <- lock引用 （synchronized开始） 3: dup 4: astore_1 // lock引用 -> slot 1 5: monitorenter // 将 lock对象 MarkWord 置为 Monitor 指针 6: getstatic #3 // <- i 9: iconst_1 // 准备常数 1 10: iadd // +1 11: putstatic #3 // -> i 14: aload_1 // <- lock引用 15: monitorexit // 将 lock对象 MarkWord 重置, 唤醒 EntryList 16: goto 24 19: astore_2 // e -> slot 2 20: aload_1 // <- lock引用 21: monitorexit // 将 lock对象 MarkWord 重置, 唤醒 EntryList 22: aload_2 // <- slot 2 (e) 23: athrow // throw e 24: return Exception table: from to target type 6 16 19 any 19 22 19 any LineNumberTable: line 8: 0 line 9: 6 line 10: 14 line 11: 24 LocalVariableTable: Start Length Slot Name Signature 0 25 0 args [Ljava/lang/String; StackMapTable: number_of_entries = 2 frame_type = 255 /* full_frame*/ offset_delta = 19 locals = [ class \\\"[Ljava/lang/String;\\\", class java/lang/Object ] stack = [ class java/lang/Throwable ] * frame_type = 250 /* chop */ offset_delta = 4\",\"锁住的是对象实例或类对象\"]},\"290\":{\"h\":\"对象头\",\"t\":[\"对象头由以下三部分组成：\",\"1，Mark Word\",\"2，指向类的指针\",\"3，数组长度（只有数组对象才有）\"]},\"291\":{\"h\":\"\",\"t\":[\"img\",\"img\"]},\"292\":{\"h\":\"\",\"t\":[\"该指针在32位JVM中的长度是32bit，在64位JVM中长度是64bit。\",\"Java对象的类数据保存在方法区。\"]},\"293\":{\"h\":\"\",\"t\":[\"只有数组对象保存了这部分数据。\",\"该数据在32位和64位JVM中长度都是32bit。\"]},\"294\":{\"h\":\"偏向锁\",\"t\":[\"轻量级锁在没有竞争时（就自己这个线程），每次重入仍然需要执行 CAS 操作。\",\"Java 6 中引入了偏向锁来做进一步优化：只有第一次使用 CAS 将线程 ID 设置到对象的 Mark Word 头，之后检查\",\"这个线程 ID 是自己的就表示没有竞争，不用重新 CAS。以后只要不发生竞争，这个对象就归该线程所有。\",\"static final Object obj = new Object(); public static void m1() { synchronized( obj ) { // 同步块 A m2(); } } public static void m2() { synchronized( obj ) { // 同步块 B m3(); } } public static void m3() { synchronized( obj ) { // 同步块 C } }\"]},\"295\":{\"h\":\"偏向状态\",\"t\":[\"|--------------------------------------------------------------------|--------------------| | Mark Word (64 bits) | State | |--------------------------------------------------------------------|--------------------| | unused:25 | hashcode:31 | unused:1 | age:4 | biased_lock:0 | 01 | Normal | |--------------------------------------------------------------------|--------------------| | thread:54 | epoch:2 | unused:1 | age:4 | biased_lock:1 | 01 | Biased | |--------------------------------------------------------------------|--------------------| | ptr_to_lock_record:62 | 00 | Lightweight Locked | |--------------------------------------------------------------------|--------------------| | ptr_to_heavyweight_monitor:62 | 10 | Heavyweight Locked | |--------------------------------------------------------------------|--------------------| | | 11 | Marked for GC | |--------------------------------------------------------------------|--------------------|\"]},\"296\":{\"h\":\"撤销 - 调用对象 hashCode - 升级为轻量级锁。\",\"t\":[\"调用了对象的 hashCode，但偏向锁的对象 MarkWord 中存储的是线程 id，如果调用 hashCode 会导致偏向锁被撤销，升级为轻量级锁。\",\"轻量级锁会在锁记录中记录 hashCode\",\"重量级锁会在 Monitor 中记录 hashCode\",\"在调用 hashCode 后使用偏向锁，记得去掉 -XX:-UseBiasedLocking\"]},\"297\":{\"h\":\"撤销 - 其它线程使用对象 - 升级为轻量级锁\",\"t\":[\"当有其它线程使用偏向锁对象时，会将偏向锁升级为轻量级锁\",\"private static void test2() throws InterruptedException { Dog d = new Dog(); Thread t1 = new Thread(() -> { synchronized (d) { log.debug(ClassLayout.parseInstance(d).toPrintableSimple(true)); } synchronized (TestBiased.class) { TestBiased.class.notify(); } // 如果不用 wait/notify 使用 join 必须打开下面的注释 // 因为：t1 线程不能结束，否则底层线程可能被 jvm 重用作为 t2 线程，底层线程 id 是一样的 /*try { System.in.read(); } catch (IOException e) { e.printStackTrace(); }*/ }, \\\"t1\\\"); t1.start(); Thread t2 = new Thread(() -> { synchronized (TestBiased.class) { try { TestBiased.class.wait(); } catch (InterruptedException e) { e.printStackTrace(); } } log.debug(ClassLayout.parseInstance(d).toPrintableSimple(true)); synchronized (d) { log.debug(ClassLayout.parseInstance(d).toPrintableSimple(true)); } log.debug(ClassLayout.parseInstance(d).toPrintableSimple(true)); }, \\\"t2\\\"); t2.start(); }\",\"输出\",\"[t1] - 00000000 00000000 00000000 00000000 00011111 01000001 00010000 00000101 [t2] - 00000000 00000000 00000000 00000000 00011111 01000001 00010000 00000101 [t2] - 00000000 00000000 00000000 00000000 00011111 10110101 11110000 01000000 [t2] - 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001\"]},\"298\":{\"h\":\"撤销 - 调用 wait/notify - 升级为重量级锁\",\"t\":[\"Object类里看到的wait() notify() 方法，其实是objectMonitor对象的方法。所以当你使用了wait() 或 notify() 后，必定会创建并进入重量级锁，这也是为什么这两个方法必须要放在synchronized代码块里的原因。\",\"public static void main(String[] args) throws InterruptedException { Dog d = new Dog(); Thread t1 = new Thread(() -> { log.debug(ClassLayout.parseInstance(d).toPrintableSimple(true)); synchronized (d) { log.debug(ClassLayout.parseInstance(d).toPrintableSimple(true)); try { d.wait(); } catch (InterruptedException e) { e.printStackTrace(); } log.debug(ClassLayout.parseInstance(d).toPrintableSimple(true)); } }, \\\"t1\\\"); t1.start(); new Thread(() -> { try { Thread.sleep(6000); } catch (InterruptedException e) { e.printStackTrace(); } synchronized (d) { log.debug(\\\"notify\\\"); d.notify(); } }, \\\"t2\\\").start(); }\",\"输出\",\"[t1] - 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000101 [t1] - 00000000 00000000 00000000 00000000 00011111 10110011 11111000 00000101 [t2] - notify [t1] - 00000000 00000000 00000000 00000000 00011100 11010100 00001101 11001010\"]},\"299\":{\"h\":\"批量重偏向\",\"t\":[\"如果对象虽然被多个线程访问，但没有竞争，这时偏向了线程 T1 的对象仍有机会重新偏向 T2，重偏向会重置对象\",\"的 Thread ID\",\"当撤销偏向锁阈值超过 20 次后，jvm 会这样觉得，我是不是偏向错了呢，于是会在给这些对象加锁时重新偏向至\",\"加锁线程\",\"private static void test3() throws InterruptedException { Vector<Dog> list = new Vector<>(); Thread t1 = new Thread(() -> { for (int i = 0; i < 30; i++) { Dog d = new Dog(); list.add(d); synchronized (d) { log.debug(i + \\\"\\\\t\\\" + ClassLayout.parseInstance(d).toPrintableSimple(true)); } } synchronized (list) { list.notify(); } }, \\\"t1\\\"); t1.start(); Thread t2 = new Thread(() -> { synchronized (list) { try { list.wait(); } catch (InterruptedException e) { e.printStackTrace(); } } log.debug(\\\"===============> \\\"); for (int i = 0; i < 30; i++) { Dog d = list.get(i); log.debug(i + \\\"\\\\t\\\" + ClassLayout.parseInstance(d).toPrintableSimple(true)); synchronized (d) { log.debug(i + \\\"\\\\t\\\" + ClassLayout.parseInstance(d).toPrintableSimple(true)); } log.debug(i + \\\"\\\\t\\\" + ClassLayout.parseInstance(d).toPrintableSimple(true)); } }, \\\"t2\\\"); t2.start(); }\",\"输出\",\"[t1] - 0 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 [t1] - 1 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 [t1] - 2 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 [t1] - 3 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 [t1] - 4 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 [t1] - 5 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 [t1] - 6 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 [t1] - 7 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 [t1] - 8 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 [t1] - 9 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 [t1] - 10 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 [t1] - 11 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 [t1] - 12 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 [t1] - 13 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 [t1] - 14 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 [t1] - 15 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 [t1] - 16 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 [t1] - 17 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 [t1] - 18 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 [t1] - 19 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 [t1] - 20 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 [t1] - 21 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 [t1] - 22 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 [t1] - 23 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 [t1] - 24 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 [t1] - 25 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 [t1] - 26 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 [t1] - 27 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 [t1] - 28 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 [t1] - 29 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 [t2] - ===============> [t2] - 0 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 [t2] - 0 00000000 00000000 00000000 00000000 00100000 01011000 11110111 00000000 [t2] - 0 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 [t2] - 1 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 [t2] - 1 00000000 00000000 00000000 00000000 00100000 01011000 11110111 00000000 [t2] - 1 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 [t2] - 2 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 [t2] - 2 00000000 00000000 00000000 00000000 00100000 01011000 11110111 00000000 [t2] - 2 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 [t2] - 3 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 [t2] - 3 00000000 00000000 00000000 00000000 00100000 01011000 11110111 00000000 [t2] - 3 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 [t2] - 4 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 [t2] - 4 00000000 00000000 00000000 00000000 00100000 01011000 11110111 00000000 [t2] - 4 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 [t2] - 5 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 [t2] - 5 00000000 00000000 00000000 00000000 00100000 01011000 11110111 00000000 [t2] - 5 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 [t2] - 6 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 [t2] - 6 00000000 00000000 00000000 00000000 00100000 01011000 11110111 00000000 [t2] - 6 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 [t2] - 7 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 [t2] - 7 00000000 00000000 00000000 00000000 00100000 01011000 11110111 00000000 [t2] - 7 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 [t2] - 8 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 [t2] - 8 00000000 00000000 00000000 00000000 00100000 01011000 11110111 00000000 [t2] - 8 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 [t2] - 9 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 [t2] - 9 00000000 00000000 00000000 00000000 00100000 01011000 11110111 00000000 [t2] - 9 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 [t2] - 10 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 [t2] - 10 00000000 00000000 00000000 00000000 00100000 01011000 11110111 00000000 [t2] - 10 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 [t2] - 11 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 [t2] - 11 00000000 00000000 00000000 00000000 00100000 01011000 11110111 00000000 [t2] - 11 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 [t2] - 12 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 [t2] - 12 00000000 00000000 00000000 00000000 00100000 01011000 11110111 00000000 [t2] - 12 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 [t2] - 13 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 [t2] - 13 00000000 00000000 00000000 00000000 00100000 01011000 11110111 00000000 [t2] - 13 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 [t2] - 14 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 [t2] - 14 00000000 00000000 00000000 00000000 00100000 01011000 11110111 00000000 [t2] - 14 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 [t2] - 15 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 [t2] - 15 00000000 00000000 00000000 00000000 00100000 01011000 11110111 00000000 [t2] - 15 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 [t2] - 16 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 [t2] - 16 00000000 00000000 00000000 00000000 00100000 01011000 11110111 00000000 [t2] - 16 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 [t2] - 17 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 [t2] - 17 00000000 00000000 00000000 00000000 00100000 01011000 11110111 00000000 [t2] - 17 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 [t2] - 18 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 [t2] - 18 00000000 00000000 00000000 00000000 00100000 01011000 11110111 00000000 [t2] - 18 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 [t2] - 19 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 [t2] - 19 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101 [t2] - 19 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101 [t2] - 20 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 [t2] - 20 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101 [t2] - 20 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101 [t2] - 21 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 [t2] - 21 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101 [t2] - 21 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101 [t2] - 22 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 [t2] - 22 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101 [t2] - 22 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101 [t2] - 23 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 [t2] - 23 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101 [t2] - 23 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101 [t2] - 24 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 [t2] - 24 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101 [t2] - 24 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101 [t2] - 25 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 [t2] - 25 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101 [t2] - 25 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101 [t2] - 26 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 [t2] - 26 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101 [t2] - 26 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101 [t2] - 27 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 [t2] - 27 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101 [t2] - 27 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101 [t2] - 28 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 [t2] - 28 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101 [t2] - 28 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101 [t2] - 29 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 [t2] - 29 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101 [t2] - 29 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101\"]},\"300\":{\"h\":\"批量撤销\",\"t\":[\"当撤销偏向锁阈值超过 40 次后，jvm 会这样觉得，自己确实偏向错了，根本就不该偏向。于是整个类的所有对象\",\"都会变为不可偏向的，新建的对象也是不可偏向的\",\"static Thread t1,t2,t3; private static void test4() throws InterruptedException { Vector<Dog> list = new Vector<>(); int loopNumber = 39; t1 = new Thread(() -> { for (int i = 0; i < loopNumber; i++) { Dog d = new Dog(); list.add(d); synchronized (d) { log.debug(i + \\\"\\\\t\\\" + ClassLayout.parseInstance(d).toPrintableSimple(true)); } } LockSupport.unpark(t2); }, \\\"t1\\\"); t1.start(); t2 = new Thread(() -> { LockSupport.park(); log.debug(\\\"===============> \\\"); for (int i = 0; i < loopNumber; i++) { Dog d = list.get(i); log.debug(i + \\\"\\\\t\\\" + ClassLayout.parseInstance(d).toPrintableSimple(true)); synchronized (d) { log.debug(i + \\\"\\\\t\\\" + ClassLayout.parseInstance(d).toPrintableSimple(true)); } log.debug(i + \\\"\\\\t\\\" + ClassLayout.parseInstance(d).toPrintableSimple(true)); } LockSupport.unpark(t3); }, \\\"t2\\\"); t2.start(); t3 = new Thread(() -> { LockSupport.park(); log.debug(\\\"===============> \\\"); for (int i = 0; i < loopNumber; i++) { Dog d = list.get(i); log.debug(i + \\\"\\\\t\\\" + ClassLayout.parseInstance(d).toPrintableSimple(true)); synchronized (d) { log.debug(i + \\\"\\\\t\\\" + ClassLayout.parseInstance(d).toPrintableSimple(true)); } log.debug(i + \\\"\\\\t\\\" + ClassLayout.parseInstance(d).toPrintableSimple(true)); } }, \\\"t3\\\"); t3.start(); t3.join(); log.debug(ClassLayout.parseInstance(new Dog()).toPrintableSimple(true)); }\"]},\"301\":{\"h\":\"轻量级锁\",\"t\":[\"轻量级锁的使用场景：如果一个对象虽然有多线程要加锁，但加锁的时间是错开的（也就是没有竞争），那么可以使用轻量级锁来优化。\",\"轻量级锁对使用者是透明的，即语法仍然是 synchronized。\",\"img\",\"创建锁记录（Lock Record）对象，每个线程都的栈帧都会包含一个锁记录的结构，内部可以存储锁定对象的Mark Word\",\"让锁记录中 Object reference 指向锁对象，并尝试用 cas 替换 Object 的 Mark Word，将 Mark Word 的值存入锁记录\",\"如果 cas 替换成功，对象头中存储了 锁记录地址和状态 00 ，表示由该线程给对象加锁\",\"如果 cas 失败，有两种情况 \",\"如果是其它线程已经持有了该 Object 的轻量级锁，这时表明有竞争，进入锁膨胀过程\",\"如果是自己执行了 synchronized 锁重入，那么再添加一条 Lock Record 作为重入的计数\",\"img\",\"当退出 synchronized 代码块（解锁时）如果有取值为 null 的锁记录，表示有重入，这时重置锁记录，表示重入计数减一\",\"img\",\"当退出 synchronized 代码块（解锁时）锁记录的值不为 null，这时使用 cas 将 Mark Word 的值恢复给对象头 \",\"成功，则解锁成功\",\"失败，说明轻量级锁进行了锁膨胀或已经升级为重量级锁，进入重量级锁解锁流程\"]},\"302\":{\"h\":\"锁膨胀\",\"t\":[\"如果在尝试加轻量级锁的过程中，CAS 操作无法成功，这时一种情况就是有其它线程为此对象加上了轻量级锁（有竞争），这时需要进行锁膨胀，将轻量级锁变为重量级锁。\",\"static Object obj = new Object(); public static void method1() { synchronized( obj ) { // 同步块 } }\",\"当 Thread-1 进行轻量级加锁时，Thread-0 已经对该对象加了轻量级锁\",\"img\",\"这时 Thread-1 加轻量级锁CAS失败，进入锁膨胀流程 \",\"即为 Object 对象申请 Monitor 锁，让 Object 指向重量级锁地址\",\"然后自己进入 Monitor 的 EntryList BLOCKED\",\"img\",\"当 Thread-0 退出同步块解锁时，使用 cas 将 Mark Word 的值恢复给对象头，失败。这时会进入重量级解锁流程，即按照 Monitor 地址找到 Monitor 对象，设置 Owner 为 null，唤醒 EntryList 中 BLOCKED 线程\"]},\"303\":{\"h\":\"锁消除\",\"t\":[\"锁消除是指JVM在编译过程中通过静态分析技术检测到一些不可能存在竞争条件的锁，从而将其消除的优化过程。当JVM确定某个锁对象不会发生竞争时，就可以安全地消除对该锁的获取和释放操作，从而减少了锁操作的开销。\",\"来分析如下代码：\",\"StringBuffer sBuffer = new StringBuffer(); sBuffer.append(\\\"a\\\"); sBuffer.append(\\\"b\\\"); sBuffer.append(\\\"c\\\"); sBuffer.append(\\\"d\\\");\",\"此时由于StringBuffer对象是线程安全的，但是在单线程运行环境下，这些加锁解锁操作完全没有必要，因此编译器就会帮我们省去这些锁\",\"注意：synchronized消除锁的策略是比较保守的，明显不会发生线程安全问题的代码才会消除锁，例如：\",\"变量只涉及局部变量，没有全局变量\",\"多个线程只对变量做读取操作，不涉及修改操作\",\"@Fork(1) @BenchmarkMode(Mode.AverageTime) @Warmup(iterations=3) @Measurement(iterations=5) @OutputTimeUnit(TimeUnit.NANOSECONDS) public class MyBenchmark { static int x = 0; @Benchmark public void a() throws Exception { x++; } @Benchmark public void b() throws Exception { Object o = new Object(); synchronized (o) { x++; } } }\",\"java -jar benchmarks.jar\",\"Benchmark Mode Samples Score Score error Units c.i.MyBenchmark.a avgt 5 1.542 0.056 ns/op c.i.MyBenchmark.b avgt 5 1.518 0.091 ns/op\",\"java -XX:-EliminateLocks -jar benchmarks.jar\",\"Benchmark Mode Samples Score Score error Units c.i.MyBenchmark.a avgt 5 1.507 0.108 ns/op c.i.MyBenchmark.b avgt 5 16.976 1.572 ns/op\"]},\"304\":{\"h\":\"锁粗化\",\"t\":[\"对相同对象多次加锁，导致线程发生多次重入，可以使用锁粗化方式来优化，这不同于之前讲的细分锁的粒度。\",\"如果在同一段代码逻辑中，多次频繁的加锁解锁操作，编译器和JVM会帮助我们将其合并为一次加锁解锁操作。\"]},\"305\":{\"h\":\"Synchronized 的四种锁状态\",\"t\":[\"无锁：\",\"偏向锁：偏向某个线程使用，如果有其他线程尝试获取偏向锁，则会撤销偏向模式，升级为轻量级锁。\",\"轻量级锁：多个线程交替使用，轻量级锁使用CAS（Compare And Swap）操作来尝试获取锁。如果CAS操作成功，线程就获得了锁；如果失败，证明有多个线程同时使用，即发生竞争，达到次数升级重量级锁\",\"重量级锁：重量级锁是 synchronized 的最终状态，当锁处于这个状态时，所有等待获取锁的线程都会被挂起，直到锁被释放。\"]},\"306\":{\"h\":\"ReentrantLock\",\"t\":[\"是类，基于AQS实现，具有原子性，有序性，可见性，可重入性。\",\"公平锁\",\"非公平锁\"]},\"307\":{\"h\":\"Synchronized和ReentrantLock对比\"},\"308\":{\"h\":\"ReentrantReadWriteLock\"},\"309\":{\"h\":\"CAS：ABA问题，自旋问题，单个变量操作\",\"t\":[\"CAS（Compare And Swap）是一种原子操作，用于实现多线程环境下的同步操作。CAS 操作包含三个操作数：内存位置（V）、旧的预期值（A）和新值（B）。当且仅当预期值 A 和内存位置 V 的值相同时，CAS 会将内存位置 V 的值更新为新值B。\"]},\"310\":{\"h\":\"AQS\",\"t\":[\"AbstractQueuedSynchronizer（AQS）是Java中用于实现锁和同步器的基础框架。它提供了一种队列同步器的实现方式，可以用于构建各种同步器，如ReentrantLock、Semaphore、CountDownLatch等。AQS的核心思想是使用一个FIFO的等待队列来管理线程的获取和释放锁的顺序，同时使用一个volatile变量来表示锁的状态。AQS的实现方式是通过继承来扩展，子类需要实现tryAcquire和tryRelease等方法来控制锁的获取和释放。AQS是Java并发编程中的重要概念，也是Java并发包中的核心组件之一。\",\"image-20240715233123923\",\"Executor：执行线程的顶级接口。\",\"Executors：工厂类，用于创建不同类型的线程池。\",\"ExecutorService：管理任务提交和线程池的接口。\",\"ThreadPoolExecutor：可扩展的线程池类。\",\"ScheduledExecutorService：用于定时任务的线程池接口。\"]},\"311\":{\"h\":\"Semaphore\",\"t\":[\"在Java中，Semaphore是一个同步辅助类，它提供了一种更为复杂的方式来控制同时访问某些资源的线程数量。Semaphore本质上是一个计数信号量，用来限制对某些资源的并发访问。\"]},\"312\":{\"h\":\"Semaphore 原理\",\"t\":[\"Semaphore 有点像一个停车场，permits 就好像停车位数量，当线程获得了 permits 就像是获得了停车位，然后\",\"停车场显示空余车位减一\",\"刚开始，permits（state）为 3，这时 5 个线程来获取资源\",\"img\",\"假设其中 Thread-1，Thread-2，Thread-4 cas 竞争成功，而 Thread-0 和 Thread-3 竞争失败，进入 AQS 队列\",\"park 阻塞\",\"img\",\"这时 Thread-4 释放了 permits，状态如下\",\"img\",\"接下来 Thread-0 竞争成功，permits 再次设置为 0，设置自己为 head 节点，断开原来的 head 节点，unpark 接\",\"下来的 Thread-3 节点，但由于 permits 是 0，因此 Thread-3 在尝试不成功后再次进入 park 状态\",\"img\"]},\"313\":{\"h\":\"的主要特点包括\",\"t\":[\"计数器：Semaphore内部有一个计数器，表示同时允许访问资源的线程数量。\",\"获取（Acquire）：线程调用Semaphore的acquire()方法来获取一个许可。如果计数器大于0，计数器减1，线程成功获取许可；如果计数器为0，则线程会被阻塞，直到其他线程释放许可。\",\"释放（Release）：线程完成资源使用后，调用release()方法来释放一个许可，此时计数器加1，可能会唤醒等待的线程。\",\"公平性（Fairness）：可以创建一个公平的Semaphore，它按照线程请求资源的顺序来分配许可，而非公平的Semaphore则可能允许线程饥饿。\",\"尝试获取（Try Acquire）：Semaphore提供了tryAcquire()方法，允许线程尝试获取许可而不被阻塞。如果获取成功，返回true；如果失败（即没有可用的许可），则返回false。 1.\"]},\"314\":{\"h\":\"使用 的一个简单例子：\",\"t\":[\"// 创建一个计数为1的Semaphore，表示一次只允许一个线程访问资源 Semaphore semaphore = new Semaphore(1); // 线程尝试获取许可 semaphore.acquire(); // 线程使用资源 // ... // 线程使用完资源后释放许可 semaphore.release();\",\"Semaphore可以用于多种同步场景，比如限制数据库连接池的大小、控制线程池中的线程数量等。它比synchronized关键字和ReentrantLock提供了更多的灵活性。\"]},\"315\":{\"h\":\"CountDownLatch\",\"t\":[\"允许一个或多个线程等待一组操作在其他线程中完成。用来进行线程同步协作，等待所有线程完成倒计时。\",\"其中构造参数用来初始化等待计数值，await() 用来等待计数归零，countDown() 用来让计数减一。\",\"public static void main(String[] args) throws InterruptedException { CountDownLatch latch = new CountDownLatch(3); new Thread(() -> { log.debug(\\\"begin...\\\"); sleep(1); latch.countDown(); log.debug(\\\"end...{}\\\", latch.getCount()); }).start(); new Thread(() -> { log.debug(\\\"begin...\\\"); sleep(2); latch.countDown(); log.debug(\\\"end...{}\\\", latch.getCount()); }).start(); new Thread(() -> { log.debug(\\\"begin...\\\"); sleep(1.5); latch.countDown(); log.debug(\\\"end...{}\\\", latch.getCount()); }).start(); log.debug(\\\"waiting...\\\"); latch.await(); log.debug(\\\"wait end...\\\"); }\"]},\"316\":{\"h\":\"CyclicBarrier 类\",\"t\":[\"使一组线程到达某个点后继续执行。循环栅栏，用来进行线程协作，等待线程满足某个计数。构造时设置『计数个数』，每个线程执行到某个需要“同步”的时刻调用 await() 方法进行等待，当等待的线程数满足『计数个数』时，继续执行。\",\"CyclicBarrier cb = new CyclicBarrier(2); // 个数为2时才会继续执行 new Thread(()->{ System.out.println(\\\"线程1开始..\\\"+new Date()); try { cb.await(); // 当个数不足时，等待 } catch (InterruptedException | BrokenBarrierException e) { e.printStackTrace(); } System.out.println(\\\"线程1继续向下运行...\\\"+new Date()); }).start(); new Thread(()->{ System.out.println(\\\"线程2开始..\\\"+new Date()); try { Thread.sleep(2000); } catch (InterruptedException e) { } try { cb.await(); // 2 秒后，线程个数够2，继续运行 } catch (InterruptedException | BrokenBarrierException e) { e.printStackTrace(); } System.out.println(\\\"线程2继续向下运行...\\\"+new Date()); }).start();\",\"注意 CyclicBarrier 与 CountDownLatch 的主要区别在于 CyclicBarrier 是可以重用的 CyclicBarrier 可以被比\",\"喻为『人满发车』\"]},\"317\":{\"h\":\"Exchanger\",\"t\":[\"允许在并发线程之间交换数据。\"]},\"318\":{\"h\":\"CompletableFuture\",\"t\":[\"CompletableFuture是Java 8引入的一个异步编程工具类，用于处理异步任务的结果和执行流程。它提供了一种简洁而强大的方式来处理异步操作，包括任务的串行执行、并行执行、组合以及异常处理等。\"]},\"319\":{\"h\":\"LockSupport\",\"t\":[\"提供线程阻塞和唤醒操作的工具类。\",\"在Java中，park方法属java.util.concurrent.locks.LockSupport工具类。LockSupport提供了一些静态方法，用于线程之间的线程阻塞和唤醒操作，park方法就是其中之一。\",\"park方法的作用是阻塞当前线程，直到它被其他线程通过调用LockSupport.unpark(Thread thread)方法唤醒。这通常用于实现锁和其他同步器的框架，以及那些需要更细粒度控制线程阻塞和唤醒的高级并发应用程序。\",\"park方法的用法非常简单，它没有参数，调用后当前线程就会挂起。以下是park方法的一个基本示例：\",\"LockSupport.park();\",\"这行代码会使当前线程进入等待状态，直到另一个线程调用LockSupport.unpark(Thread thread)，其中thread是当前线程的引用，来唤醒它。\",\"LockSupport还提供了一些变体的park方法，允许你指定一个阻塞时间：\",\"LockSupport.parkNanos(long nanos)：阻塞当前线程，直到另一个线程唤醒它或者超过指定的纳秒时间。\",\"LockSupport.parkUntil(long deadline)：阻塞当前线程，直到另一个线程唤醒它或者当前时间超过了指定的截止时间。\",\"使用park和unpark的方法可以在没有使用锁的情况下实现线程间的协作，这在某些情况下可以提高性能，因为它们避免了使用重量级的锁机制。然而，它们也要求开发者更仔细地管理线程的生命周期和状态，以避免常见的并发问题，如死锁。\",\"下面是一个使用park和unpark的简单示例：\",\"public class ParkUnparkExample { public static void main(String[] args) { Thread thread = new Thread(() -> { System.out.println(\\\"Thread is running and will park now.\\\"); LockSupport.park(); System.out.println(\\\"Thread was unparked and is now running again.\\\"); }); thread.start(); // 稍等一下，确保线程已经进入park状态 try { Thread.sleep(1000); } catch (InterruptedException e) { e.printStackTrace(); } // 唤醒线程 LockSupport.unpark(thread); } }\",\"在这个例子中，新线程启动后会打印一条消息，然后调用park方法进入等待状态。主线程稍等一秒钟后调用unpark方法唤醒等待的线程，线程被唤醒后继续执行并打印另一条消息。\"]},\"320\":{\"c\":[\"JVM\"]},\"321\":{\"c\":[\"jvm\"]},\"322\":{\"h\":\"Java虚拟机\",\"t\":[\"Java 虚拟机\",\"img\",\"Java Class\",\"ClassLoader\"]},\"323\":{\"h\":\"1.程序计数器\"},\"324\":{\"h\":\"1.1定义\",\"t\":[\"Program Counter Register 程序计数器（寄存器） 作用：是记录下一条 jvm 指令的执行地址行号。 特点：\",\"是线程私有的\",\"不会存在内存溢出\",\"0: getstatic #20 // PrintStream out = System.out; 3: astore_1 // -- 4: aload_1 // out.println(1); 5: iconst_1 // -- 6: invokevirtual #26 // -- 9: aload_1 // out.println(2); 10: iconst_2 // -- 11: invokevirtual #26 // -- 14: aload_1 // out.println(3); 15: iconst_3 // -- 16: invokevirtual #26 // -- 19: aload_1 // out.println(4); 20: iconst_4 // -- 21: invokevirtual #26 // -- 24: aload_1 // out.println(5); 25: iconst_5 // -- 26: invokevirtual #26 // -- 29: return\",\"解释器会解释指令为机器码交给 cpu 执行，程序计数器会记录下一条指令的地址行号，这样下一次解释器会从程序计数器拿到指令然后进行解释执行。\",\"多线程的环境下，如果两个线程发生了上下文切换，那么程序计数器会记录线程下一行指令的地址行号，以便于接着往下执行。\"]},\"325\":{\"h\":\"2.虚拟机栈\",\"t\":[\"img\"]},\"326\":{\"h\":\"2.1 定义\",\"t\":[\"每个线程运行需要的内存空间，称为虚拟机栈\",\"每个栈由多个栈帧（Frame）组成，对应着每次调用方法时所占用的内存\",\"每个线程只能有一个活动栈帧，对应着当前正在执行的方法\",\"public class main1 { public static void main(String[] args) { method1(); } public static void method1() { method2(1, 2); } public static int method2(int a, int b) { int c = a + b; return c; } }\",\"img\",\"问题辨析：\",\"垃圾回收是否涉及栈内存？ 不会。栈内存是方法调用产生的，方法调用结束后会弹出栈。\",\"栈内存分配越大越好吗？ 不是。因为物理内存是一定的，栈内存越大，可以支持更多的递归调用，但是可执行的线程数就会越少。\",\"方法呢的局部变量是否线程安全 \",\"如果方法内部的变量没有逃离方法的作用范围，它是线程安全的\",\"如果是局部变量引用了对象，并逃离了方法的范围，那就要考虑线程安全问题。\",\"public class main1 { public static void main(String[] args) { } //下面各个方法会不会造成线程安全问题？ //不会 public static void m1() { StringBuilder sb = new StringBuilder(); sb.append(1); sb.append(2); sb.append(3); System.out.println(sb.toString()); } //会，可能会有其他线程使用这个对象 public static void m2(StringBuilder sb) { sb.append(1); sb.append(2); sb.append(3); System.out.println(sb.toString()); } //会，其他线程可能会拿到这个线程的引用 public static StringBuilder m3() { StringBuilder sb = new StringBuilder(); sb.append(1); sb.append(2); sb.append(3); return sb; } }\"]},\"327\":{\"h\":\"2.2 栈内存溢出\",\"t\":[\"Java.lang.stackOverflowError 栈内存溢出\",\"导致栈内存溢出的情况：\",\"栈帧****过多导致栈内存溢出\",\"栈帧****过大导致栈内存溢出\",\"栈帧过大、过多、或者第三方类库操作，都有可能造成栈内存溢出 java.lang.stackOverflowError ，使用 -Xss256k 指定栈内存大小！\",\"img\",\"设置虚拟机栈内存大小：\",\"img\"]},\"328\":{\"h\":\"2.3 线程运行诊断\",\"t\":[\"案例：CPU占用过高\",\"Linux环境下运行某些程序的时候，可能导致CPU的占用过高，这时需要定位占用CPU过高的线程\",\"用top定位哪个进程对cpu的占用过高\",\"ps H -eo pid,tid,%cpu | grep 进程id ，刚才通过top查到的进程号，用ps命令进一步定位是哪个线程引起的cpu占用过高\",\"jstack 进程id，通过查看进程中的线程的nid，刚才通过ps命令看到的tid来对比定位，注意jstack查找出的线程id是16进制的，需要转换\"]},\"329\":{\"h\":\"3.本地方法栈\",\"t\":[\"一些带有native关键字的方法就是需要JAVA去调用本地的C或者C++方法，因为JAVA有时候没法直接和操作系统底层交互，所以需要用到本地方法。\"]},\"330\":{\"h\":\"4.堆\"},\"331\":{\"h\":\"4.1 定义\",\"t\":[\"通过new关键字创建的对象都会使用堆内存\"]},\"332\":{\"h\":\"4.2特点\",\"t\":[\"它是线程共享的，堆中对象都需要考虑线程安全的问题\",\"有垃圾回收机制\"]},\"333\":{\"h\":\"4.3堆内存溢出\",\"t\":[\"java.lang.OutofMemoryError ：java heap space 堆内存溢出\",\"案例：\",\"/** * 演示堆内存溢出 java.lang.OutOfMemoryError: Java heap space * -Xmx8m ，最大堆空间的jvm虚拟机参数，默认是4g */ public class main1 { public static void main(String[] args) { int i = 0; try { ArrayList<String> list = new ArrayList<>();// new 一个list 存入堆中 String a = \\\"hello\\\"; while (true) { list.add(a);// 不断地向list 中添加 a a = a + a; i++; } } catch (Throwable e) {// list 使用结束，被jc 垃圾回收 e.printStackTrace(); System.out.println(i); } } }\",\"结果：\",\"java.lang.OutOfMemoryError: Java heap space at java.util.Arrays.copyOf(Arrays.java:3332) at java.lang.AbstractStringBuilder.ensureCapacityInternal(AbstractStringBuilder.java:124) at java.lang.AbstractStringBuilder.append(AbstractStringBuilder.java:448) at java.lang.StringBuilder.append(StringBuilder.java:136) at com.itcast.itheima.xpp.main1.main(main1.java:14) 22\"]},\"334\":{\"h\":\"4.4堆内存诊断\",\"t\":[\"jps工具\",\"查看当前系统中有哪些 java 进程\",\"jmap 工具\",\"查看堆内存占用情况 jmap - heap 进程id\",\"jconsole 工具\",\"图形界面的，多功能的监测工具，可以连续监测\",\"jvisualvm 工具\"]},\"335\":{\"h\":\"5.方法区\"},\"336\":{\"h\":\"5.1 定义\",\"t\":[\"Java 虚拟机有一个在所有 Java 虚拟机线程之间共享的方法区域。方法区域类似于用于传统语言的编译代码的存储区域，或者类似于操作系统进程中的“文本”段。它存储每个类的结构，例如运行时常量池、字段和方法数据，以及方法和构造函数的代码，包括特殊方法，用于类和实例初始化以及接口初始化方法区域是在虚拟机启动时创建的。尽管方法区域在逻辑上是堆的一部分，但简单的实现可能不会选择垃圾收集或压缩它。此规范不强制指定方法区的位置或用于管理已编译代码的策略。方法区域可以具有固定的大小，或者可以根据计算的需要进行扩展，并且如果不需要更大的方法区域，则可以收缩。方法区域的内存不需要是连续的！\"]},\"337\":{\"h\":\"5.2 组成\",\"t\":[\"永久代用的堆内存\",\"元空间用的本地****内存\",\"Hotspot 虚拟机 jdk1.6 1.7 1.8 内存结构图\",\"img\"]},\"338\":{\"h\":\"5.3 方法区内存溢出\",\"t\":[\"1.8以前会导致永久代内存溢出java.lang.OutOfMemoryError: PermGen space\",\"1.8以后会导致元空间内存溢出java.lang.OutOfMemoryError: Metaspace\",\"1.8 之前会导致永久代内存溢出 \",\"使用 -XX:MaxPermSize=8m 指定永久代内存大小\",\"1.8 之后会导致元空间内存溢出 \",\"使用 -XX:MaxMetaspaceSize=8m 指定元空间大小\",\"/** * 演示元空间内存溢出:java.lang.OutOfMemoryError: Metaspace * -XX:MaxMetaspaceSize=8m */ public class main1 extends ClassLoader {//可以用来加载类的二进制字节码 public static void main(String[] args) { int j = 0; try { main1 test = new main1(); for (int i = 0; i < 10000; i++,j++) { //ClassWriter 作用是生产类的二进制字节码 ClassWriter cw = new ClassWriter(0); //版本号，public，类名 cw.visit(Opcodes.V1_8, Opcodes.ACC_PUBLIC, \\\"Class\\\" + i, null, \\\"java/lang/Object\\\", null); //返回 byte[] byte[] code = cw.toByteArray(); //执行类的加载 test.defineClass(\\\"Class\\\" + i, code, 0, code.length); } } finally { System.out.println(j); } } } Exception in thread \\\"main\\\" java.lang.OutOfMemoryError: Metaspace at java.lang.ClassLoader.defineClass1(Native Method) at java.lang.ClassLoader.defineClass(ClassLoader.java:763) at java.lang.ClassLoader.defineClass(ClassLoader.java:642) at com.itcast.itheima.xpp.main1.main(main1.java:26) 4865 Process finished with exit code 1\"]},\"339\":{\"h\":\"5.4 通过反编译来查看类的信息\",\"t\":[\"获得对应类的.class文件，javac xxx.java\",\"在JDK对应的bin目录下运行cmd，也可以在IDEA控制台输入\",\"img\",\"输入 javac对应类的绝对路径\",\"F:\\\\JAVA\\\\JDK8.0\\\\bin>javac F:\\\\Thread_study\\\\src\\\\com\\\\nyima\\\\JVM\\\\day01\\\\Main.java\",\"输入完成后，对应的目录下就会出现类的.class文件\",\"在控制台输入 javap -v 类的绝对路径\",\"javap -v F:\\\\Thread_study\\\\src\\\\com\\\\nyima\\\\JVM\\\\day01\\\\Main.class\",\"然后能在控制台看到反编译以后类的信息了 \",\"类的基本信息\",\"img\",\"常量池\",\"img\",\"虚拟机中执行编译的方法（框内的是真正编译执行的内容，#号的内容需要在常量池中查找）\",\"img\"]},\"340\":{\"h\":\"5.5 运行时常量池\",\"t\":[\"常量池：就是一张表，虚拟机指令根据这张常量表找到要执行的类名、方法名、参数类型、字面量等信息\",\"运行时常量池：常量池是 *.class 文件中的，当该类被加载，它的常量池信息就会放入运行时常量池，并把里面的符号地址变为真实地址\"]},\"341\":{\"h\":\"5.6 常量池与串池StringTable的关系\",\"t\":[\"StringTable 特性\",\"常量池中的字符串仅是符号，只有在被用到时才会转化为对象\",\"利用串池的机制，来避免重复创建字符串对象\",\"字符串变量拼接的原理是StringBuilder\",\"字符串常量拼接的原理是编译器优化\",\"可以使用intern方法，主动将串池中还没有的字符串对象放入串池中 \",\"1.8 将这个字符串对象尝试放入串池，如果有则并不会放入，如果没有则放入串池，会把串池中的对象返回\",\"1.6 将这个字符串对象尝试放入串池，如果有则并不会放入，如果没有会把此对象复制一份，放入串池，会把串池中的对象返回\",\"栗子1：\",\"public class StringTableStudy { public static void main(String[] args) { String a = \\\"a\\\"; String b = \\\"b\\\"; String ab = \\\"ab\\\"; } }\",\"常量池中的信息，都会被加载到运行时常量池中，但这是a b ab 仅是常量池中的符号，还没有成为java字符串\",\"0: ldc #2 // String a 2: astore_1 3: ldc #3 // String b 5: astore_2 6: ldc #4 // String ab 8: astore_3 9: return\",\"当执行到 ldc #2 时，会把符号 a 变为 “a” 字符串对象，并放入串池中（hashtable结构 不可扩容）\",\"当执行到 ldc #3 时，会把符号 b 变为 “b” 字符串对象，并放入串池中\",\"当执行到 ldc #4 时，会把符号 ab 变为 “ab” 字符串对象，并放入串池中\",\"最终StringTable [“a”, “b”, “ab”]\",\"注意：字符串对象的创建都是懒惰的，只有当运行到那一行字符串且在串池中不存在的时候（如 ldc #2）时，该字符串才会被创建并放入串池中。\",\"栗子2：使用拼接字符串****变量对象创建字符串的过程\",\"public class HelloWorld { public static void main(String[] args) { String s1 = \\\"a\\\"; String s2 = \\\"b\\\"; String s3 = \\\"ab\\\"; String s4=s1+s2;//new StringBuilder().append(\\\"a\\\").append(\\\"2\\\").toString() new String(\\\"ab\\\") System.out.println(s3==s4);//false //结果为false,因为s3是存在于串池之中，s4是由StringBuffer的toString方法所返回的一个对象，存在于堆内存之中 } }\",\"反编译后的结果\",\" Code: stack=2, locals=5, args_size=1 0: ldc #2 // String a 2: astore_1 3: ldc #3 // String b 5: astore_2 6: ldc #4 // String ab 8: astore_3 9: new #5 // class java/lang/StringBuilder 12: dup 13: invokespecial #6 // Method java/lang/StringBuilder.\\\"<init>\\\":()V 16: aload_1 17: invokevirtual #7 // Method java/lang/StringBuilder.append:(Ljava/lang/String ;)Ljava/lang/StringBuilder; 20: aload_2 21: invokevirtual #7 // Method java/lang/StringBuilder.append:(Ljava/lang/String ;)Ljava/lang/StringBuilder; 24: invokevirtual #8 // Method java/lang/StringBuilder.toString:()Ljava/lang/Str ing; 27: astore 4 29: return\",\"通过拼接的方式来创建字符串的过程是：StringBuilder().append(“a”).append(“b”).toString()\",\"最后的toString方法的返回值是一个新的字符串，但字符串的值和拼接的字符串一致，但是两个不同的字符串，一个存在于串池之中，一个存在于堆内存之中\",\"栗子3：使用拼接字符串常量对象的方法创建字符串\",\"public class HelloWorld { public static void main(String[] args) { String s1 = \\\"a\\\"; String s2 = \\\"b\\\"; String s3 = \\\"ab\\\"; String s4=s1+s2;//new StringBuilder().a|ppend(\\\"a\\\").append(\\\"2\\\").toString() new String(\\\"ab\\\") String s5=\\\"a\\\"+\\\"b\\\"; System.out.println(s5==s3);//true } }\",\"反编译后的结果\",\" Code: stack=2, locals=6, args_size=1 0: ldc #2 // String a 2: astore_1 3: ldc #3 // String b 5: astore_2 6: ldc #4 // String ab 8: astore_3 9: new #5 // class java/lang/StringBuilder 12: dup 13: invokespecial #6 // Method java/lang/StringBuilder.\\\"<init>\\\":()V 16: aload_1 17: invokevirtual #7 // Method java/lang/StringBuilder.append:(Ljava/lang/String ;)Ljava/lang/StringBuilder; 20: aload_2 21: invokevirtual #7 // Method java/lang/StringBuilder.append:(Ljava/lang/String ;)Ljava/lang/StringBuilder; 24: invokevirtual #8 // Method java/lang/StringBuilder.toString:()Ljava/lang/Str ing; 27: astore 4 //ab3初始化时直接从串池中获取字符串 29: ldc #4 // String ab 31: astore 5 33: return\",\"使用拼接字符串常量的方法来创建新的字符串时，因为内容是常量，javac在编译期会进行优化，结果已在编译期确定为ab，而创建ab的时候已经在串池中放入了“ab”，所以s5直接从串池中获取值，所以进行的操作和 s3= “ab” 一致。\",\"使用拼接字符串变量的方法来创建新的字符串时，因为内容是变量，只能在运行期确定它的值，所以需要使用StringBuilder来创建\",\"intern方法 1.8：\",\"调用字符串对象的intern方法，会将该字符串对象尝试放入到串池中\",\"如果串池中没有该字符串对象，则放入成功\",\"如果有该字符串对象，则放入失败\",\"无论放入是否成功，都会返回串池中的字符串对象\",\"public class HelloWorld { public static void main(String[] args) { String x = \\\"ab\\\"; String s = new String(\\\"a\\\") + new String(\\\"b\\\"); String s2 = s.intern();//将这个字符串对象尝试放入串池，如果有则并不会放入，如果没有则放入串池，这两种情况都会把串池中的对象返回 System.out.println(s2 == x);//true System.out.println(s == x);//false } }\"]},\"342\":{\"h\":\"\",\"t\":[\"答：编译器在编译期间会把abc作为常量放在常量池中，这两个语句都会去字符串常量池中检查是否已经存在 “abc”，区别在于new会在堆中创建一个新的对象，String str2 = \\\"abc\\\" 返回字符串常量池的引用。\"]},\"343\":{\"h\":\"\",\"t\":[\"String s3 = \\\"ab\\\";String s4=s1+s2; //newStringBuilder**().a|ppend(\\\"a\\\").append(\\\"2\\\").toString() new String(\\\"ab\\\")** String s5=\\\"a\\\"+\\\"b\\\";\",\"这类题记住编译器在编译期间会把字符字面量作为常量放在常量池中，如果操作的是对象和变量是不会放入常量池中的。\",\"intern方法 1.6：\",\"调用字符串对象的intern方法，会将该字符串对象尝试放入到串池中\",\"如果串池中没有该字符串对象，会将该字符串对象复制一份，再放入到串池中\",\"如果有该字符串对象，则放入失败\",\"无论放入是否成功，都会返回串池中的字符串对象\",\"面试题（1.8）：\",\"package com.itcast.itheima.xpp; public class main { public static void main(String[] args) { String s1=\\\"a\\\"; String s2=\\\"b\\\"; String s3=\\\"a\\\"+\\\"b\\\"; String s4=s1+s2; String s5=\\\"ab\\\"; String s6=s4.intern(); System.out.println(s3==s4);//false System.out.println(s3==s5);//true System.out.println(s3==s6);//true String x2=new String(\\\"c\\\")+new String(\\\"d\\\"); String x1=\\\"cd\\\"; x2.intern(); System.out.println(x1==x2);//false String x4=new String(\\\"e\\\")+new String(\\\"f\\\"); x4.intern(); String x3=\\\"ef\\\"; System.out.println(x3==x4);//true } }\"]},\"344\":{\"h\":\"5.7 StringTable 位置\",\"t\":[\"img\",\"JDK1.6 时，StringTable是属于常量池的一部分。\",\"JDK1.8 以后，StringTable是放在堆中的。\"]},\"345\":{\"h\":\"5.8 StringTable 垃圾回收\",\"t\":[\"StringTable在内存紧张时，会发生垃圾回收\",\"-Xmx10m 指定堆内存大小 -XX:+PrintStringTableStatistics 打印字符串常量池信息 -XX:+PrintGCDetails -verbose:gc 打印 gc 的次数，耗费时间等信息\",\"/** * 演示 StringTable 垃圾回收 * -Xmx10m -XX:+PrintStringTableStatistics -XX:+PrintGCDetails -verbose:gc */ public class Code_05_StringTableTest { public static void main(String[] args) { int i = 0; try { for(int j = 0; j < 10000; j++) { // j = 100, j = 10000 String.valueOf(j).intern(); i++; } }catch (Exception e) { e.printStackTrace(); }finally { System.out.println(i); } } }\"]},\"346\":{\"h\":\"5.9 StringTable 性能调优\",\"t\":[\"因为StringTable是由HashTable实现的，所以可以适当增加HashTable桶的个数，来减少字符串放入串池所需要的时间\",\"-XX:StringTableSize=桶个数（最少设置为 1009 以上）\",\"考虑是否需要将字符串对象入池 可以通过 intern 方法减少重复入池\"]},\"347\":{\"h\":\"6.直接内存\"},\"348\":{\"h\":\"6.1 定义\",\"t\":[\"属于操作系统，常见于NIO操作时，用于数据缓冲区\",\"分配回收成本较高，但读写性能高\",\"不受JVM内存回收管理\"]},\"349\":{\"h\":\"6.2 使用直接内存的好处\",\"t\":[\"文件读写流程：\",\"img\",\"因为 java 不能直接操作文件管理，需要切换到内核态，使用本地方法进行操作，然后读取磁盘文件，会在系统内存中创建一个缓冲区，将数据读到系统缓冲区， 然后在将系统缓冲区数据，复制到 java 堆内存中。缺点是数据存储了两份，在系统内存中有一份，java 堆中有一份，造成了不必要的复制。\",\"使用了 DirectBuffer 文件读取流程\",\"img\",\"直接内存是操作系统和 Java 代码都可以访问的一块区域，无需将代码从系统内存复制到 Java 堆内存，从而提高了效率。\"]},\"350\":{\"h\":\"\",\"t\":[\"public class Main { static int _100MB = 1024 * 1024 * 100; public static void main(String[] args) throws IOException { List<ByteBuffer> list = new ArrayList<>(); int i = 0; try { while (true) { ByteBuffer byteBuffer = ByteBuffer.allocateDirect(_100MB); list.add(byteBuffer); i++; } } finally { System.out.println(i); } } } //输出： 2 Exception in thread \\\"main\\\" java.lang.OutOfMemoryError: Direct buffer memory at java.nio.Bits.reserveMemory(Bits.java:694) at java.nio.DirectByteBuffer.<init>(DirectByteBuffer.java:123) at java.nio.ByteBuffer.allocateDirect(ByteBuffer.java:311) at main.Main.main(Main.java:19)\",\"直接内存释放原理：\",\"直接内存的回收不是通过JVM的垃圾回收来释放的，而是通过unsafe.freeMemory来手动释放\",\"通过申请直接内存，但JVM并不能回收直接内存中的内容，它是如何实现回收的呢？\",\"//通过ByteBuffer申请1M的直接内存ByteBuffer byteBuffer = ByteBuffer.allocateDirect(_1M);\",\"allocateDirect的实现：\",\"public static ByteBuffer allocateDirect(int capacity) {return new DirectByteBuffer(capacity);}\",\"DirectByteBuffer类：\",\"DirectByteBuffer(int cap) { // package-private super(-1, 0, cap, cap); boolean pa = VM.isDirectMemoryPageAligned(); int ps = Bits.pageSize(); long size = Math.max(1L, (long)cap + (pa ? ps : 0)); Bits.reserveMemory(size, cap); long base = 0; try { base = unsafe.allocateMemory(size); //申请内存 } catch (OutOfMemoryError x) { Bits.unreserveMemory(size, cap); throw x; } unsafe.setMemory(base, size, (byte) 0); if (pa && (base % ps != 0)) { // Round up to page boundary address = base + ps - (base & (ps - 1)); } else { address = base; } cleaner = Cleaner.create(this, new Deallocator(base, size, cap)); //通过虚引用，来实现直接内存的释放，this为虚引用的实际对象 att = null; }\",\"这里调用了一个Cleaner的create方法，且后台线程还会对虚引用的对象监测，如果虚引用的实际对象（这里是DirectByteBuffer）被回收以后，就会调用Cleaner的clean方法，来清除直接内存中占用的内存\",\"public void clean() { if (remove(this)) { try { this.thunk.run(); //调用run方法 } catch (final Throwable var2) { AccessController.doPrivileged(new PrivilegedAction<Void>() { public Void run() { if (System.err != null) { (new Error(\\\"Cleaner terminated abnormally\\\", var2)).printStackTrace(); } System.exit(1); return null; } }); }\",\"run方法：\",\"public void run() { if (address == 0) { // Paranoia return; } unsafe.freeMemory(address); //释放直接内存中占用的内存 address = 0; Bits.unreserveMemory(size, capacity); }\",\"直接内存的回收机制总结：\",\"使用了 Unsafe 对象完成直接内存的分配回收，并且回收需要主动调用 freeMemory 方法\",\"ByteBuffer 的实现类内部，使用了 Cleaner （虚引用）来监测 ByteBuffer 对象，一旦 ByteBuffer 对象被垃圾回收，那么就会由 ReferenceHandler 线程通过 Cleaner 的 clean 方法调 用 freeMemory 来释放直接内存\"]},\"351\":{\"h\":\"6.3 直接内存回收原理\",\"t\":[\"public class Code_06_DirectMemoryTest { public static int _1GB = 1024 * 1024 * 1024; public static void main(String[] args) throws IOException, NoSuchFieldException, IllegalAccessException { // method(); method1(); } // 演示 直接内存 是被 unsafe 创建与回收 private static void method1() throws IOException, NoSuchFieldException, IllegalAccessException { Field field = Unsafe.class.getDeclaredField(\\\"theUnsafe\\\"); field.setAccessible(true); Unsafe unsafe = (Unsafe)field.get(Unsafe.class); long base = unsafe.allocateMemory(_1GB); unsafe.setMemory(base,_1GB, (byte)0); System.in.read(); unsafe.freeMemory(base); System.in.read(); } // 演示 直接内存被 释放 private static void method() throws IOException { ByteBuffer byteBuffer = ByteBuffer.allocateDirect(_1GB); System.out.println(\\\"分配完毕\\\"); System.in.read(); System.out.println(\\\"开始释放\\\"); byteBuffer = null; System.gc(); // 手动 gc System.in.read(); } } /** * -XX:+DisableExplicitGC 显示的 */ private static void method() throws IOException { ByteBuffer byteBuffer = ByteBuffer.allocateDirect(_1GB); System.out.println(\\\"分配完毕\\\"); System.in.read(); System.out.println(\\\"开始释放\\\"); byteBuffer = null; System.gc(); // 手动 gc 失效 System.in.read(); }\",\"一般用 jvm 调优时，会加上下面的参数：\",\"-XX:+DisableExplicitGC // 静止显示的 GC\",\"意思就是禁止我们手动的 GC，比如手动 System.gc() 无效，它是一种 full gc，会回收新生代、老年代，会造成程序执行的时间比较长。所以我们就通过 unsafe 对象调用 freeMemory 的方式释放内存。\"]},\"352\":{\"h\":\"1.如何判断对象可以回收\"},\"353\":{\"h\":\"1.1 引用计数法\",\"t\":[\"当一个对象被其他变量引用，该对象计数加一，当某个变量不在引用该对象，其计数减一\",\"当一个对象引用没有被其他变量引用时，即计数变为0时，该对象就可以被回收\"]},\"354\":{\"h\":\"：循环引用时，两个对象的计数都为1，导致两个对象都无法被释放\",\"t\":[\"img\"]},\"355\":{\"h\":\"1.2 可达性分析算法\",\"t\":[\"JVM中的垃圾回收器通过可达性分析来探索所有存活的对象\",\"扫描堆中的对象，看能否沿着GCRoot对象为起点的引用链找到该对象，如果找不到，则表示可以回收\"]},\"356\":{\"h\":\"可以作为 的对象\",\"t\":[\"虚拟机栈（栈帧中的本地变量表）中引用的对象。\",\"方法区中类静态属性引用的对象\",\"方法区中常量引用的对象\",\"本地方法栈中JNI（即一般说的Native方法）引用的对象\",\"所有被同步锁（synchronized关键字）持有的对象。\"]},\"357\":{\"h\":\"使用Memory Analyzer (MAT)分析。\",\"t\":[\"public static void main(String[] args) throws IOException { ArrayList<Object> list = new ArrayList<>(); list.add(\\\"a\\\"); list.add(\\\"b\\\"); list.add(1); System.out.println(1); System.in.read(); list = null; System.out.println(2); System.in.read(); System.out.println(\\\"end\\\"); }\",\"对于以上代码，可以使用如下命令将堆内存信息转储成一个文件，然后使用 Eclipse Memory Analyzer 工具进行分析。 第一步： 使用 jps 命令，查看程序的进程\",\"img\",\"第二步：\",\"img\",\"使用 jmap -dump:format=b,live,file=1.bin 16104 命令转储文件 dump：转储文件 format=b：二进制文件 file：文件名 16104：进程的id 第三步：打开 Eclipse Memory Analyzer 对 1.bin 文件进行分析。\",\"img\",\"分析的 gc root，找到了 ArrayList 对象，然后将 list 置为null，再次转储，那么 list 对象就会被回收。\"]},\"358\":{\"h\":\"1.3 五种引用\",\"t\":[\"img\"]},\"359\":{\"h\":\"\",\"t\":[\"只有所有 GC Roots 对象都不通过【强引用】引用该对象，该对象才能被垃圾回收\"]},\"360\":{\"h\":\"\",\"t\":[\"仅有【软引用】引用该对象时，在垃圾回收后，内存****仍不足时会再次出发垃圾回收，回收软引用对象\",\"可以配合【引用队列】来释放软引用自身\"]},\"361\":{\"h\":\"\",\"t\":[\"仅有【弱引用】引用该对象时，在垃圾回收时，无论内存是否充足，都会回收弱引用对象\",\"可以配合【引用队列】来释放弱引用自身\"]},\"362\":{\"h\":\"\",\"t\":[\"必须配合【引用队列】使用，主要配合 ByteBuffer 使用，被引用对象回收时，会将【虚引用】入队， 由 Reference Handler 线程调用虚引用相关方法释放【直接内存】\",\"如上图，B对象不再引用ByteBuffer对象，ByteBuffer就会被回收。但是直接内存中的内存还未被回收。这时需要将虚引用对象Cleaner放入引用队列中，然后调用它的clean方法来释放直接内存\"]},\"363\":{\"h\":\"\",\"t\":[\"无需手动编码，但其内部配合【引用队列】使用，在垃圾回收时，【终结器引用】入队（被引用对象暂时没有被回收），再由 Finalizer 线程通过【终结器引用】找到被引用对象并调用它的 finalize 方法，第二次 GC 时才能回收被引用对象\",\"如上图，B对象不再引用A4对象。这时终结器对象就会被放入引用队列中，引用队列会根据它，找到它所引用的对象。然后调用被引用对象的finalize方法。调用以后，该对象就可以被垃圾回收了\"]},\"364\":{\"h\":\"\",\"t\":[\"public class Demo1 { public static void main(String[] args) { final int _4M = 4*1024*1024; //使用软引用对象 list和SoftReference是强引用，而SoftReference和byte数组则是软引用 List<SoftReference<byte[]>> list = new ArrayList<>(); SoftReference<byte[]> ref= new SoftReference<>(new byte[_4M]); } } /** * 演示 软引用 * -Xmx20m -XX:+PrintGCDetails -verbose:gc */ public class Code_08_SoftReferenceTest { public static int _4MB = 4 * 1024 * 1024; public static void main(String[] args) throws IOException { method2(); } // 设置 -Xmx20m , 演示堆内存不足, public static void method1() throws IOException { ArrayList<byte[]> list = new ArrayList<>(); for(int i = 0; i < 5; i++) { list.add(new byte[_4MB]); } System.in.read(); } // 演示 软引用 public static void method2() throws IOException { ArrayList<SoftReference<byte[]>> list = new ArrayList<>(); for(int i = 0; i < 5; i++) { SoftReference<byte[]> ref = new SoftReference<>(new byte[_4MB]); System.out.println(ref.get()); list.add(ref); System.out.println(list.size()); } System.out.println(\\\"循环结束：\\\" + list.size()); for(SoftReference<byte[]> ref : list) { System.out.println(ref.get()); } } }\",\"method1 方法解析： 首先会设置一个堆内存的大小为 20m，然后运行 mehtod1 方法，会抛异常，堆内存不足，因为 mehtod1 中的 list 都是强引用。\",\"img\",\"method2 方法解析： 在 list 集合中存放了 软引用对象，当内存不足时，会触发 full gc，将软引用的对象回收。细节如图：\",\"img\",\"上面的代码中，当软引用引用的对象被回收了，但是软引用还存在，所以，一般软引用需要搭配一个引用队列一起使用。\",\"修改 method2 如下：\",\"// 演示 软引用 搭配引用队列 public static void method3() throws IOException { //使用软引用对象 list和SoftReference是强引用，而SoftReference和byte数组则是软引用 ArrayList<SoftReference<byte[]>> list = new ArrayList<>(); ///使用引用队列，用于移除引用为空的软引用对象 ReferenceQueue<byte[]> queue = new ReferenceQueue<>(); for(int i = 0; i < 5; i++) { // 关联了引用队列，当软引用所关联的 byte[] 被回收时，软引用自己会加入到 queue 中去 SoftReference<byte[]> ref = new SoftReference<>(new byte[_4MB], queue); System.out.println(ref.get()); list.add(ref); System.out.println(list.size()); } // 从队列中获取无用的 软引用对象，并移除 Reference<? extends byte[]> poll = queue.poll(); //遍历引用队列，如果有元素，则移除 while(poll != null) { list.remove(poll); poll = queue.poll(); } System.out.println(\\\"=====================\\\"); for(SoftReference<byte[]> ref : list) { System.out.println(ref.get()); } }\",\"img\"]},\"365\":{\"h\":\"\",\"t\":[\"弱引用的使用和软引用类似，只是将 SoftReference 换为了 WeakReference\",\"public class Code_09_WeakReferenceTest { public static void main(String[] args) { // method1(); method2(); } public static int _4MB = 4 * 1024 *1024; // 演示 弱引用 public static void method1() { List<WeakReference<byte[]>> list = new ArrayList<>(); for(int i = 0; i < 10; i++) { WeakReference<byte[]> weakReference = new WeakReference<>(new byte[_4MB]); list.add(weakReference); for(WeakReference<byte[]> wake : list) { System.out.print(wake.get() + \\\",\\\"); } System.out.println(); } } // 演示 弱引用搭配 引用队列 public static void method2() { List<WeakReference<byte[]>> list = new ArrayList<>(); ReferenceQueue<byte[]> queue = new ReferenceQueue<>(); for(int i = 0; i < 9; i++) { WeakReference<byte[]> weakReference = new WeakReference<>(new byte[_4MB], queue); list.add(weakReference); for(WeakReference<byte[]> wake : list) { System.out.print(wake.get() + \\\",\\\"); } System.out.println(); } System.out.println(\\\"===========================================\\\"); Reference<? extends byte[]> poll = queue.poll(); while (poll != null) { list.remove(poll); poll = queue.poll(); } for(WeakReference<byte[]> wake : list) { System.out.print(wake.get() + \\\",\\\"); } } }\"]},\"366\":{\"h\":\"2. 垃圾回收算法\"},\"367\":{\"h\":\"2.1 标记清除\",\"t\":[\"img\",\"定义：在虚拟机执行垃圾回收的过程中，先采用标记算法确定可回收对象，然后垃圾收集器根据标识清除相应的内容，给堆内存腾出相应的空间\",\"注意：这里的清除并不是将内存空间字节清零，而是记录这段内存的起始地址，下次分配内存的时候，会直接覆盖这段内存。\",\"优点：速度快\",\"缺点：容易产生内存碎片。一旦分配较大内存的对象，由于内存不连续，导致无法分配，最后就会造成内存溢出问题\"]},\"368\":{\"h\":\"2.2 标记整理\",\"t\":[\"img\",\"定义：在虚拟机执行垃圾回收的过程中，先采用标记算法确定可回收对象，然后整理剩余的对象，将可用的对象移动到一起，使内存更加紧凑，连续的空间就更多。\",\"优点：不会有内存碎片\",\"缺点：整理时需要重新处理引用关系，速度慢\"]},\"369\":{\"h\":\"2.3 复制\",\"t\":[\"img\",\"定义：将内存分为等大小的两个区域，FROM和TO（TO中为空）。将被GC Root引用的对象从FROM放入TO中，再回收不被GC Root引用的对象。然后交换FROM和TO。这样也可以避免内存碎片的问题，但是会占用双倍的内存空间。\",\"优点：不会有内存碎片\",\"缺点：会占用双倍的内存空间。\"]},\"370\":{\"h\":\"3. 分代垃圾回收\",\"t\":[\"将堆内存分为新生代和老年代，新生代有划分为伊甸园，幸存区To，幸存区From。\",\"img\"]},\"371\":{\"h\":\"3.1 回收流程\",\"t\":[\"对象首先分配在伊甸园区域\",\"img\",\"新生代空间不足时，触发 MinorGC，伊甸园和 from 存活的对象使用 copy 复制到 to 中，存活的对象年龄加 1并且交换 from to\",\"img\",\"img\",\"img\",\"再次创建对象，若新生代的伊甸园又满了，则会再次触发 MinorGC（minor gc 会引发 stop the world（可以看下go语言的垃圾三色标记机制，减少STW），暂停其它用户的线程，等垃圾回收结束，用户线程才恢复运行），这时不仅会回收伊甸园中的垃圾，还会回收幸存区中的垃圾，再将活跃对象复制到幸存区TO中。回收以后会交换两个幸存区，并让幸存区中的对象寿命加1\",\"img\",\"当对象寿命超过阈值时，会晋升至老年代，最大寿命是15（4bit），因为java对象头只用4个bit来表示，最大表示2进制1111。\",\"img\",\"当老年代空间不足，会先尝试触发MinorGC，如果之后空间仍不足，那么触发 Full GC，stop the world的时间更长\"]},\"372\":{\"h\":\"3.2 GC 分析\"},\"373\":{\"h\":\"\",\"t\":[\"含义参数堆初始大小-Xms堆最大大小-Xmx 或 -XX:MaxHeapSize=size新生代大小-Xmn 或 (-XX:NewSize=size + -XX:MaxNewSize=size )幸存区比例（动态）-XX:InitialSurvivorRatio=ratio 和 -XX:+UseAdaptiveSizePolicy幸存区比例-XX:SurvivorRatio=ratio晋升阈值-XX:MaxTenuringThreshold=threshold晋升详情-XX:+PrintTenuringDistributionGC详情-XX:+PrintGCDetails -verbose:gcFullGC 前 MinorGCXX:+ScavengeBeforeFullGC\",\"public class Code_10_GCTest { private static final int _512KB = 512 * 1024; private static final int _1MB = 1024 * 1024; private static final int _6MB = 6 * 1024 * 1024; private static final int _7MB = 7 * 1024 * 1024; private static final int _8MB = 8 * 1024 * 1024; // -Xms20m -Xmx20m -Xmn10m -XX:+UseSerialGC -XX:+PrintGCDetails -verbose:gc public static void main(String[] args) { List<byte[]> list = new ArrayList<>(); list.add(new byte[_6MB]); list.add(new byte[_512KB]); list.add(new byte[_6MB]); list.add(new byte[_512KB]); list.add(new byte[_6MB]); } }\",\"通过上面的代码，给 list 分配内存，来观察 新生代和老年代的情况，什么时候触发 minor gc，什么时候触发 full gc 等情况，使用前需要设置 jvm 参数。\"]},\"374\":{\"h\":\"\",\"t\":[\"遇到一个较大的对象时，就算新生代的伊甸园为空，也无法容纳该对象时，会将该对象直接晋升为老年代\",\"/** * 演示内存的分配策略 */ public class Main { private static final int _512KB = 512 * 1024; private static final int _1MB = 1024 * 1024; private static final int _6MB = 6 * 1024 * 1024; private static final int _7MB = 7 * 1024 * 1024; private static final int _8MB = 8 * 1024 * 1024; // -Xms20M -Xmx20M -Xmn10M -XX:+UseSerialGC -XX:+PrintGCDetails -verbose:gc -XX:-ScavengeBeforeFullGC public static void main(String[] args) throws InterruptedException { ArrayList<byte[]> list=new ArrayList<>(); list.add(new byte[_8MB]); } }\",\"img\"]},\"375\":{\"h\":\"\",\"t\":[\"某个线程的内存溢出了而抛异常（out of memory），不会让其他的线程结束运行。这是因为当一个线程抛出OOM异常后，它所占据的内存资源会全部被释放掉，从而不会影响其他线程的运行，进程依然正常\",\"/** * 演示内存的分配策略 */ public class Main { private static final int _512KB = 512 * 1024; private static final int _1MB = 1024 * 1024; private static final int _6MB = 6 * 1024 * 1024; private static final int _7MB = 7 * 1024 * 1024; private static final int _8MB = 8 * 1024 * 1024; // -Xms20M -Xmx20M -Xmn10M -XX:+UseSerialGC -XX:+PrintGCDetails -verbose:gc -XX:-ScavengeBeforeFullGC public static void main(String[] args) throws InterruptedException { new Thread(() -> { ArrayList<byte[]> list = new ArrayList<>(); list.add(new byte[_8MB]); list.add(new byte[_8MB]); }).start(); //主线程还是会正常执行 System.out.println(\\\"sleep....\\\"); Thread.sleep(1000L); } }\",\"img\"]},\"376\":{\"h\":\"4. 垃圾回收器\",\"t\":[\"img\",\"垃圾收集器特点算法适用场景优点缺点Serial最基本、历史最悠久的单线程垃圾收集器。新生代采用标记-复制算法运行在 Client 模式下的虚拟机简单、高效垃圾回收时必须暂停其他所有的工作线程ParNewSerial 收集器的多线程版本新生代采用标记-复制算法运行在 Server 模式下的虚拟机并行，效率高 Parallel Scavenge使用标记-复制算法的多线程收集器，关注吞吐量新生代采用标记-复制算法JDK1.8 默认收集器在注重吞吐量及CPU资源的场合吞吐量高 Serial OldSerial 收集器的老年代版本标记-整理算法在 JDK<1.5与 Parallel Scavenge 收集器搭配使用作为CMS收集器的后备方案简单、高效垃圾回收时必须暂停其他所有的工作线程Parallel OldParallel Scavenge 收集器的老年代标记-整理算法在注重吞吐量及CPU资源的场合吞吐量高 CMS多线程的垃圾收集器（用户线程和垃圾回收线程可以同时进行）标记-清除算法希望系统停顿时间最短，注重服务的响应速度的场景并发收集、低停顿对 CPU 资源敏感，无法处理浮动垃圾，产生垃圾碎片G1一款面向服务器的垃圾收集器，并行并发，空间整合，可预测的停顿时间标记-复制算法服务端应用、针对具有大内存多处理器的机器停顿时间可控、基本无空间碎片可能存在空间浪费、程序运行时的额外执行负载高\",\"相关概念：\",\"并行****收集：指多条垃圾收集线程并行工作，但此时用户线程****仍处于等待状态\",\"并发收集：指用户线程与垃圾收集线程同时工作（不一定是并行的可能会交替执行）。用户程序在继续运行，而垃圾收集程序运行在另一个CPU上\",\"吞吐量：即CPU用于运行用户代码的时间与CPU总消耗时间的比值（吞吐量 = 运行用户代码时间 / ( 运行用户代码时间 + 垃圾收集时间 )），也就是。例如：虚拟机共运行100分钟，垃圾收集器花掉1分钟，那么吞吐量就是99%\"]},\"377\":{\"h\":\"4.1 串行（Serial + SerialOld，新生代复制，老年代标记整理）\",\"t\":[\"单线程\",\"堆内存小，适合个人电脑\",\"img\",\"开启串行回收器：\",\"XX:+UseSerialGC = Serial + SerialOld，新生代Serial ，老年代SerialOld\",\"安全点：让其他线程都在这个点停下来，以免垃圾回收时移动对象地址，使得其他线程找不到被移动的对象。\",\"阻塞：因为是串行的，所以只有一个垃圾回收线程。且在该线程执行回收工作时，其他线程进入阻塞状态\",\"Serial 收集器：\",\"定义：Serial收集器是最基本的、发展历史最悠久的收集器\",\"特点：单线程收集器。采用复制算法。工作在新生代\",\"Serial 收集器是最基本的、发展历史最悠久的收集器 特点：单线程、简单高效（与其他收集器的单线程相比），采用复制算法。对于限定单个 CPU 的环境来说，Serial 收集器由于没有线程交互的开销，专心做垃圾收集自然可以获得最高的单线程收集效率。收集器进行垃圾回收时，必须暂停其他所有的工作线程，直到它结束（Stop The World）！\",\"Serial Old收集器：\",\"定义：Serial Old是Serial收集器的老年代版本\",\"特点：单线程收集器。采用标记-整理算法。工作在老年代\",\"同样是单线程收集器，采用标记-整理算法\",\"ParNew 收集器 ParNew 收集器其实就是 Serial 收集器的多线程版本 特点：多线程、ParNew 收集器默认开启的收集线程数与CPU的数量相同，在 CPU 非常多的环境中，可以使用 -XX:ParallelGCThreads 参数来限制垃圾收集的线程数。和 Serial 收集器一样存在 Stop The World 问题\"]},\"378\":{\"h\":\"4.2 吞吐量优先\",\"t\":[\"多线程\",\"堆内存较大，多核cpu\",\"让单位时间****内暂停时间（STW）最短\",\"JDK1.8默认使用的垃圾回收器\",\"img\",\"-XX:+UseParallelGC ~ -XX:+UsePrallerOldGC -XX:+UseAdaptiveSizePolicy -XX:GCTimeRatio=ratio // 1/(1+radio) -XX:MaxGCPauseMillis=ms // 200ms -XX:ParallelGCThreads=n\",\"Parallel 收集器：\",\"定义：与吞吐量关系密切，故也称为吞吐量优先收集器\",\"特点：并行****的，工作于新生代，采用复制算法\",\"与吞吐量关系密切，故也称为吞吐量优先收集器 特点：属于新生代收集器也是采用复制算法的收集器（用到了新生代的幸存区），又是并行的多线程收集器（与 ParNew 收集器类似）\",\"该收集器的目标是达到一个可控制的吞吐量。还有一个值得关注的点是：GC自适应调节策略（与 ParNew 收集器最重要的一个区别）\",\"GC自适应调节策略： Parallel Scavenge 收集器可设置 -XX:+UseAdptiveSizePolicy 参数。 当开关打开时不需要手动指定新生代的大小（-Xmn）、Eden 与 Survivor 区的比例（-XX:SurvivorRation）、 晋升老年代的对象年龄（-XX:PretenureSizeThreshold）等，虚拟机会根据系统的运行状况收集性能监控信息，动态设置这些参数以提供最优的停顿时间和最高的吞吐量，这种调节方式称为 GC 的自适应调节策略。\",\"Parallel Scavenge 收集器使用两个参数控制吞吐量：\",\"XX:MaxGCPauseMillis=ms 控制最大的垃圾收集停顿时间（默认200ms）\",\"XX:GCTimeRatio=rario 直接设置吞吐量的大小\",\"Parallel Old 收集器：\",\"定义：是Parallel 收集器的老年代版本\",\"特点：并行****的，工作与老年代，采用标记-整理算法\",\"是 Parallel Scavenge 收集器的老年代版本 特点：多线程，采用标记-整理算法（老年代没有幸存区）\"]},\"379\":{\"h\":\"4.3 响应时间优先\",\"t\":[\"多线程\",\"堆内存较大，多核cpu\",\"尽可能让单次的暂停时间（STW）最短\",\"img\",\"-XX:+UseConcMarkSweepGC ~ -XX:+UseParNewGC ~ SerialOld -XX:ParallelGCThreads=n ~ -XX:ConcGCThreads=threads -XX:CMSInitiatingOccupancyFraction=percent -XX:+CMSScavengeBeforeRemark\",\"CMS****收集器：\",\"定义：Concurrent Mark Sweep（并发，标记，清除）\",\"特点：基于标记-清除算法的垃圾回收器。是并发的。工作在老年代。\",\"Concurrent Mark Sweep，一种以获取最短回收停顿时间为目标的老年代收集器特点：基于标记-清除算法实现。并发收集、低停顿，但是会产生内存碎片 应用场景：适用于注重服务的响应速度，希望系统停顿时间最短，给用户带来更好的体验等场景下。如 web 程序、b/s 服务\",\"CMS收集器的运行过程分为下列4步：\",\"初始标记：标记 GC Roots 能直接到的对象。速度很快但是仍存在 Stop The World 问题。\",\"并发标记：进行 GC Roots Tracing 的过程，找出存活对象且用户线程可并发执行。\",\"重新标记：为了修正并发标记期间因用户程序继续运行而导致标记产生变动的那一部分对象的标记记录。仍然存在 Stop The World 问题\",\"并发清除：对标记的对象进行清除回收，清除的过程中，可能任然会有新的垃圾产生，这些垃圾就叫浮动垃圾，如果当用户需要存入一个很大的对象时，新生代放不下去，老年代由于浮动垃圾过多，就会退化为 serial Old 收集器，将老年代垃圾进行标记-整理，当然这也是很耗费时间的！\",\"CMS 收集器的内存回收过程是与用户线程一起并发执行的，可以搭配 ParNew 收集器（多线程，新生代，复制算法）与 Serial Old 收集器（单线程，老年代，标记-整理算法）使用。\",\"ParNew 收集器：\",\"定义：ParNew收集器其实就是Serial收集器的多线程版本\",\"特点：工作在新生代，基于复制算法的垃圾回收器。\"]},\"380\":{\"h\":\"4.4 Garbage First\",\"t\":[\"JDK 9以后默认使用，而且替代了CMS 收集器\",\"适用场景：\",\"同时注重吞吐量****（Throughput）和****低延迟（Low latency），默认的暂停目标是 200 ms\",\"超大堆内存，会将堆划分为多个大小相等的 Region\",\"整体上是 标记+整理 算法，两个区域之间是 复制 算法\",\"相关参数： JDK8 并不是默认开启的，所需要参数开启\",\"-XX:+UseG1GC -XX:G1HeapRegionSize=size -XX:MaxGCPauseMillis=time\",\"垃圾回收****阶段：\",\"img\",\"新生代伊甸园垃圾回收—–>内存不足，新生代回收+并发标记—–>混合收集，回收新生代伊甸园、幸存区、老年代内存——>新生代伊甸园垃圾回收（重新开始）\",\"Young Collection：对新生代垃圾收集 Young Collection + Concurrent Mark：如果老年代内存到达一定的阈值了，新生代垃圾收集同时会执行一些并发的标记。 Mixed Collection：会对新生代 + 老年代 + 幸存区等进行混合收集，然后收集结束，会重新进入新生代收集。\"]},\"381\":{\"h\":\"Young Collection\",\"t\":[\"新生代存在 STW： 分代是按对象的生命周期划分，分区则是将堆空间划分连续几个不同小区间，每一个小区间独立回收，可以控制一次回收多少个小区间，方便控制 GC 产生的停顿时间！ E：eden，S：幸存区，O：老年代 新生代收集会产生 STW ！\",\"E：伊甸园 S：幸存区 O：老年代\",\"img\",\"img\",\"img\"]},\"382\":{\"h\":\"：\",\"t\":[\"CM：并发标记\",\"在 Young GC 时会对 GC Root 进行初始标记\",\"在老年代占用堆内存的比例达到阈值时，对进行并发标记（不会STW），阈值可以根据用户来进行设定，由下面的 JVM 参数决定 -XX:InitiatingHeapOccupancyPercent=percent （默认45%）\",\"img\"]},\"383\":{\"h\":\"\",\"t\":[\"会对E S O 进行全面的回收\",\"最终标记（Remark）会STW\",\"拷贝存活（Evacuation）会STW\",\"-XX:MaxGCPauseMills:xxx ：用于指定最长的停顿时间\",\"img\",\"问：为什么有的老年代被拷贝了，有的没拷贝？\",\"因为指定了最大停顿时间，如果对所有老年代都进行回收，耗时可能过高。为了保证时间不超过设定的停顿时间，会回收最有价值的老年代（回收后，能够得到更多内存）\"]},\"384\":{\"h\":\"\",\"t\":[\"SerialGC\",\"新生代内存不足发生的垃圾收集 - minor gc\",\"老年代内存不足发生的垃圾收集 - full gc\",\"ParallelGC\",\"新生代内存不足发生的垃圾收集 - minor gc\",\"老年代内存不足发生的垃圾收集 - full gc\",\"CMS\",\"新生代内存不足发生的垃圾收集 - minor gc\",\"老年代内存不足\",\"G1\",\"新生代内存不足发生的垃圾收集 - minor gc\",\"老年代内存不足（老年代所占内存超过阈值） \",\"如果垃圾产生速度慢于垃圾回收速度，不会触发Full GC，还是并发地进行清理\",\"如果垃圾产生速度快于垃圾回收速度，便会触发Full GC，然后退化成 serial Old 收集器串行的收集，就会导致停顿的时候长。\"]},\"385\":{\"h\":\"Young Collection 跨代引用\",\"t\":[\"新生代回收的跨代引用（老年代引用新生代）问题\",\"img\",\"卡表：老年代被划为一个个卡表\",\"Remembered Set：Remembered Set 存在于E（新生代）中，用于保存新生代对象对应的脏卡\",\"脏卡：O被划分为多个区域（一个区域512K），如果该区域引用了新生代对象，则该区域被称为脏卡\",\"在引用变更时通过post-write barried + dirty card queue\",\"concurrent refinement threads 更新 Remembered Set\",\"img\"]},\"386\":{\"h\":\"\",\"t\":[\"重新标记阶段 在垃圾回收时，收集器处理对象的过程中\",\"黑色：已被处理，需要保留的\",\"灰色：正在处理中的\",\"白色：还未处理的\",\"img\",\"img\",\"img\",\"但是在并发标记过程中，有可能黑色A被处理了以后未引用C，后面又引用了C，这时就会用到remark\",\"之前C未被引用，这时A引用了C，就会给C加一个写屏障，写屏障的指令会被执行，将C放入一个队列当中，并将C变为 处理中 状态\",\"在并发标记阶段结束以后，重新标记阶段会STW，然后将放在该队列中的对象重新处理，发现有强引用引用它，就会处理它\",\"img\",\"img\"]},\"387\":{\"h\":\"：\",\"t\":[\"优点：节省大量内存\",\"缺点：略微多占用了 cpu 时间，新生代回收时间略微增加\",\"例如：\",\"String s1 = new String(\\\"hello\\\"); // char[]{'h','e','l','l','o'} String s2 = new String(\\\"hello\\\"); // char[]{'h','e','l','l','o'}\",\"将所有新分配的字符串（底层是char[]）放入一个队列\",\"当新生代回收时，G1并发检查是否有重复的字符串\",\"如果字符串的值一样，就让他们引用同一个字符串对象\",\"注意，其与String.intern的区别 \",\"intern关注的是字符串对象\",\"字符串去重关注的是char[]\",\"在JVM内部，使用了不同的字符串表\",\"-XX:+UseStringDeduplication\"]},\"388\":{\"h\":\"\",\"t\":[\"所有对象都经过并发标记后，就能知道哪些类不再被使用，当一个类加载器的所有类都不再使用，则卸载它所加载的所有类\",\"-XX:+ClassUnloadingWithConcurrentMark 默认启用\"]},\"389\":{\"h\":\"JDK 8u60 回收巨型对象\",\"t\":[\"一个对象大于region的一半时，就称为巨型对象\",\"G1不会对巨型对象进行拷贝\",\"回收时被优先考虑\",\"G1会跟踪老年代所有incoming引用，如果老年代incoming引用为0的巨型对象就可以在新生代垃圾回收时处理掉\",\"img\",\"JDK 9 并发标记起始时间的调整：\",\"并发标记必须在堆空间占满前完成，否则退化为 FullGC\",\"JDK 9 之前需要使用 -XX:InitiatingHeapOccupancyPercent\",\"JDK 9 可以动态调整 \",\"-XX:InitiatingHeapOccupancyPercent 用来设置初始值\",\"进行数据采样并动态调整\",\"总会添加一个安全的空档空间\"]},\"390\":{\"h\":\"5. 垃圾回收调优\",\"t\":[\"查看虚拟机参数命令\",\"D:\\\\JavaJDK1.8\\\\bin\\\\java -XX:+PrintFlagsFinal -version | findstr \\\"GC\\\"\",\"可以根据参数去查询具体的信息\"]},\"391\":{\"h\":\"5.1 调优领域\",\"t\":[\"内存\",\"锁竞争\",\"cpu 占用\",\"io\",\"gc\"]},\"392\":{\"h\":\"5.2 确定目标\",\"t\":[\"低延迟/高吞吐量？ 选择合适的GC，科学运算注重吞吐量，互联网注重低延迟。\",\"CMS G1 ZGC，低延迟\",\"ParallelGC，高吞吐量\",\"Zing\"]},\"393\":{\"h\":\"5.3 最快的 GC是不发生GC\",\"t\":[\"首先排除减少因为自身编写的代码而引发的内存问题\",\"查看 Full GC 前后的内存占用，考虑以下几个问题 \",\"数据是不是太多？ \",\"resultSet = statement.executeQuery(“select * from 大表 limit n”)\",\"数据表示是否太臃肿 \",\"对象图\",\"对象大小 16 Integer 24 int 4\",\"是否存在内存泄漏 \",\"static Map map …\",\"软\",\"弱\",\"第三方缓存实现 redis......\"]},\"394\":{\"h\":\"5.4 新生代调优\",\"t\":[\"新生代的特点 \",\"所有的 new 操作分配内存都是非常廉价的 \",\"TLAB thread-local allocation buffer（可防止多个线程创建对象时的干扰）\",\"死亡对象回收零代价\",\"大部分对象用过即死（朝生夕死）\",\"Minor GC 所用时间远小于 Full GC\",\"新生代内存越大越好么？ \",\"不是 \",\"新生代内存太小：频繁触发 Minor GC ，会 STW ，会使得吞吐量下降\",\"新生代内存太大：老年代内存占比有所降低，会更频繁地触发 Full GC。而且触发 Minor GC 时，清理新生代所花费的时间会更长\",\"新生代内存设置为内容纳[并发量*(请求-响应)]的数据为宜\",\"img\",\"幸存区需要能够保存 当前活跃对象+需要晋升的对象\",\"晋升阈值配置得当，让长时间存活的对象尽快晋升\",\"-XX:MaxTenuringThreshold=threshold -XX:+PrintTenuringDistrubution\"]},\"395\":{\"h\":\"5.5 老年代调优\",\"t\":[\"以 CMS 为例：\",\"CMS 的老年代内存越大越好\",\"先尝试不做调优，如果没有 Full GC 那么已经，否者先尝试调优新生代。\",\"观察发现 Full GC 时老年代内存占用，将老年代内存预设调大 1/4 ~ 1/3\",\"-XX:CMSInitiatingOccupancyFraction=percent\"]},\"396\":{\"h\":\"5.6 案例\",\"t\":[\"案例1：Full GC 和 Minor GC 频繁 案例2：请求高峰期发生 Full GC，单次暂停时间特别长（CMS） 案例3：老年代充裕情况下，发生 Full GC（jdk1.7）\",\"img\"]},\"397\":{\"h\":\"1. 类文件结构\",\"t\":[\"一个简单的 HelloWorld.java\",\"// HelloWorld 示例 public class HelloWorld { public static void main(String[] args) { System.out.println(\\\"hello world\\\"); } }\",\"执行 javac -parameters -d . HellowWorld.java\",\"Linux 为：od -t xC HelloWorld.class\",\"编译为 HelloWorld.class 得到的字节码文件是这个样子的：\",\"0000000 ca fe ba be 00 00 00 34 00 23 0a 00 06 00 15 09 0000020 00 16 00 17 08 00 18 0a 00 19 00 1a 07 00 1b 07 0000040 00 1c 01 00 06 3c 69 6e 69 74 3e 01 00 03 28 29 0000060 56 01 00 04 43 6f 64 65 01 00 0f 4c 69 6e 65 4e 0000100 75 6d 62 65 72 54 61 62 6c 65 01 00 12 4c 6f 63 0000120 61 6c 56 61 72 69 61 62 6c 65 54 61 62 6c 65 01 0000140 00 04 74 68 69 73 01 00 1d 4c 63 6e 2f 69 74 63 0000160 61 73 74 2f 6a 76 6d 2f 74 35 2f 48 65 6c 6c 6f 0000200 57 6f 72 6c 64 3b 01 00 04 6d 61 69 6e 01 00 16 0000220 28 5b 4c 6a 61 76 61 2f 6c 61 6e 67 2f 53 74 72 0000240 69 6e 67 3b 29 56 01 00 04 61 72 67 73 01 00 13 0000260 5b 4c 6a 61 76 61 2f 6c 61 6e 67 2f 53 74 72 69 0000300 6e 67 3b 01 00 10 4d 65 74 68 6f 64 50 61 72 61 0000320 6d 65 74 65 72 73 01 00 0a 53 6f 75 72 63 65 46 0000340 69 6c 65 01 00 0f 48 65 6c 6c 6f 57 6f 72 6c 64 0000360 2e 6a 61 76 61 0c 00 07 00 08 07 00 1d 0c 00 1e 0000400 00 1f 01 00 0b 68 65 6c 6c 6f 20 77 6f 72 6c 64 0000420 07 00 20 0c 00 21 00 22 01 00 1b 63 6e 2f 69 74 0000440 63 61 73 74 2f 6a 76 6d 2f 74 35 2f 48 65 6c 6c 0000460 6f 57 6f 72 6c 64 01 00 10 6a 61 76 61 2f 6c 61 0000500 6e 67 2f 4f 62 6a 65 63 74 01 00 10 6a 61 76 61 0000520 2f 6c 61 6e 67 2f 53 79 73 74 65 6d 01 00 03 6f 0000540 75 74 01 00 15 4c 6a 61 76 61 2f 69 6f 2f 50 72 0000560 69 6e 74 53 74 72 65 61 6d 3b 01 00 13 6a 61 76 0000600 61 2f 69 6f 2f 50 72 69 6e 74 53 74 72 65 61 6d 0000620 01 00 07 70 72 69 6e 74 6c 6e 01 00 15 28 4c 6a 0000640 61 76 61 2f 6c 61 6e 67 2f 53 74 72 69 6e 67 3b 0000660 29 56 00 21 00 05 00 06 00 00 00 00 00 02 00 01 0000700 00 07 00 08 00 01 00 09 00 00 00 2f 00 01 00 01 0000720 00 00 00 05 2a b7 00 01 b1 00 00 00 02 00 0a 00 0000740 00 00 06 00 01 00 00 00 04 00 0b 00 00 00 0c 00 0000760 01 00 00 00 05 00 0c 00 0d 00 00 00 09 00 0e 00 0001000 0f 00 02 00 09 00 00 00 37 00 02 00 01 00 00 00 0001020 09 b2 00 02 12 03 b6 00 04 b1 00 00 00 02 00 0a 0001040 00 00 00 0a 00 02 00 00 00 06 00 08 00 07 00 0b 0001060 00 00 00 0c 00 01 00 00 00 09 00 10 00 11 00 00 0001100 00 12 00 00 00 05 01 00 10 00 00 00 01 00 13 00 0001120 00 00 02 00 14\",\"根据 JVM 规范，类文件结构如下\",\"u4 magic; u2 minor_version; u2 major_version; u2 constant_pool_count; cp_info constant_pool[constant_pool_count-1]; u2 access_flags; u2 this_class; u2 super_class; u2 interfaces_count; u2 interfaces[interfaces_count]; u2 fields_count; field_info fields[fields_count]; u2 methods_count; method_info methods[methods_count]; u2 attributes_count; attribute_info attributes[attributes_count];\"]},\"398\":{\"h\":\"1.1 魔数\",\"t\":[\"u4 magic\",\"对应字节码文件 0~3 字节，表示它是否是【class】类型的文件\",\"0000000 ca fe ba be 00 00 00 34 00 23 0a 00 06 00 15 09\",\"ca fe ba be ：意思是 .class 文件，不同的东西有不同的魔数，比如 jpg、png 图片等！\"]},\"399\":{\"h\":\"1.2 版本\",\"t\":[\"u2 minor_version; u2 major_version; 0000000 ca fe ba be 00 00 00 34 00 23 0a 00 06 00 15 09 00 00 00 34：34H（16进制） = 52（10进制），代表JDK8\",\"对应字节码文件 4~7 字节，表示类的版本 00 34（52） 表示是 Java 8\",\"0000000 ca fe ba be 00 00 00 34 00 23 0a 00 06 00 15 09\"]},\"400\":{\"h\":\"1.3 常量池\",\"t\":[\"参考文档 传送门\",\"Constant Type\",\"Value\",\"CONSTANT_Class\",\"7\",\"CONSTANT_Fieldref\",\"9\",\"CONSTANT_Methodref\",\"10\",\"CONSTANT_InterfaceMethodref\",\"11\",\"CONSTANT_String\",\"8\",\"CONSTANT_Integer\",\"3\",\"CONSTANT_Float\",\"4\",\"CONSTANT_Long\",\"5\",\"CONSTANT_Double\",\"6\",\"CONSTANT_NameAndType\",\"12\",\"CONSTANT_Utf8\",\"1\",\"CONSTANT_MethodHandle\",\"15\",\"CONSTANT_MethodType\",\"16\",\"CONSTANT_InvokeDynamic\",\"18\",\"8~9 字节，表示常量池长度，00 23 （35） 表示常量池有 #1~#34项，注意 #0 项不计入，也没有值，\",\"分析过程，碰到属于Constant Type的值就去表中找类型，\",\"比如第一项0a是CONSTANT_Methodref，00 06 00 15引用了常量池中 #6 和 #21 项，后面09是CONSTANT_Fieldref，00 16 00 17表示它引用了常量池中 #22 和 # 23 项，依次类推，另外utf-8的串用2个字节来表示长度，后面是数据。\",\"0000000 ca fe ba be 00 00 00 34 00 23 0a 00 06 00 15 09\",\"第#1项 0a 表示一个 Method 信息，00 06 和 00 15（21） 表示它引用了常量池中 #6 和 #21 项来获得这个方法的【所属类】和【方法名】\",\"0000000 ca fe ba be 00 00 00 34 00 23 0a 00 06 00 15 09\",\"第#2项 09 表示一个 Field 信息，00 16（22）和 00 17（23） 表示它引用了常量池中 #22 和 # 23 项来获得这个成员变量的【所属类】和【成员变量名】 \",\"0000000 ca fe ba be 00 00 00 34 00 23 0a 00 06 00 15 09\",\"0000020 00 16 00 17 08 00 18 0a 00 19 00 1a 07 00 1b 07\",\"第#3项 08 表示一个字符串常量名称，00 18（24）表示它引用了常量池中 #24 项\",\"0000020 00 16 00 17 08 00 18 0a 00 19 00 1a 07 00 1b 07\",\"第#4项 0a 表示一个 Method 信息，00 19（25） 和 00 1a（26） 表示它引用了常量池中 #25 和 #26\",\"项来获得这个方法的【所属类】和【方法名】\",\"0000020 00 16 00 17 08 00 18 0a 00 19 00 1a 07 00 1b 07\",\"第#5项 07 表示一个 Class 信息，00 1b（27） 表示它引用了常量池中 #27 项\",\"0000020 00 16 00 17 08 00 18 0a 00 19 00 1a 07 00 1b 07\",\"第#6项 07 表示一个 Class 信息，00 1c（28） 表示它引用了常量池中 #28 项 \",\"0000020 00 16 00 17 08 00 18 0a 00 19 00 1a 07 00 1b 07\",\"0000040 00 1c 01 00 06 3c 69 6e 69 74 3e 01 00 03 28 29\",\"第#7项 01 表示一个 utf8 串，00 06 表示长度，3c 69 6e 69 74 3e 是【 <init> 】\",\"0000040 00 1c 01 00 06 3c 69 6e 69 74 3e 01 00 03 28 29\",\"第#8项 01 表示一个 utf8 串，00 03 表示长度，28 29 56 是【()V】其实就是表示无参、无返回值\",\"0000040 00 1c 01 00 06 3c 69 6e 69 74 3e 01 00 03 28 29\",\"0000060 56 01 00 04 43 6f 64 65 01 00 0f 4c 69 6e 65 4e\",\"第#9项 01 表示一个 utf8 串，00 04 表示长度，43 6f 64 65 是【Code】\",\"0000060 56 01 00 04 43 6f 64 65 01 00 0f 4c 69 6e 65 4e\",\"第#10项 01 表示一个 utf8 串，00 0f（15） 表示长度，4c 69 6e 65 4e 75 6d 62 65 72 54 61 62 6c 65是【LineNumberTable】 \",\"0000060 56 01 00 04 43 6f 64 65 01 00 0f 4c 69 6e 65 4e\",\"0000100 75 6d 62 65 72 54 61 62 6c 65 01 00 12 4c 6f 63\",\"第#11项 01 表示一个 utf8 串，00 12（18） 表示长度，4c 6f 63 61 6c 56 61 72 69 61 62 6c 65 54 61 62 6c 65是【LocalVariableTable】 \",\"0000100 75 6d 62 65 72 54 61 62 6c 65 01 00 12 4c 6f 63\",\"0000120 61 6c 56 61 72 69 61 62 6c 65 54 61 62 6c 65 01\",\"第#12项 01 表示一个 utf8 串，00 04 表示长度，74 68 69 73 是【this】 \",\"0000120 61 6c 56 61 72 69 61 62 6c 65 54 61 62 6c 65 01\",\"0000140 00 04 74 68 69 73 01 00 1d 4c 63 6e 2f 69 74 63\",\"第#13项 01 表示一个 utf8 串，00 1d（29） 表示长度，是【Lcn/itcast/jvm/t5/HelloWorld;】 \",\"0000140 00 04 74 68 69 73 01 00 1d 4c 63 6e 2f 69 74 63\",\"0000160 61 73 74 2f 6a 76 6d 2f 74 35 2f 48 65 6c 6c 6f\",\"0000200 57 6f 72 6c 64 3b 01 00 04 6d 61 69 6e 01 00 16\",\"第#14项 01 表示一个 utf8 串，00 04 表示长度，74 68 69 73 是【main】\",\"0000200 57 6f 72 6c 64 3b 01 00 04 6d 61 69 6e 01 00 16\",\"第#15项 01 表示一个 utf8 串，00 16（22） 表示长度，是【([Ljava/lang/String;)V】其实就是参数为字符串数组，无返回值\",\"0000200 57 6f 72 6c 64 3b 01 00 04 6d 61 69 6e 01 00 16\",\"0000220 28 5b 4c 6a 61 76 61 2f 6c 61 6e 67 2f 53 74 72\",\"0000240 69 6e 67 3b 29 56 01 00 04 61 72 67 73 01 00 13\",\"第#16项 01 表示一个 utf8 串，00 04 表示长度，是【args】\",\"0000240 69 6e 67 3b 29 56 01 00 04 61 72 67 73 01 00 13\",\"第#17项 01 表示一个 utf8 串，00 13（19） 表示长度，是【[Ljava/lang/String;】 \",\"0000240 69 6e 67 3b 29 56 01 00 04 61 72 67 73 01 00 13\",\"0000260 5b 4c 6a 61 76 61 2f 6c 61 6e 67 2f 53 74 72 69\",\"0000300 6e 67 3b 01 00 10 4d 65 74 68 6f 64 50 61 72 61\",\"第#18项 01 表示一个 utf8 串，00 10（16） 表示长度，是【MethodParameters】 \",\"0000300 6e 67 3b 01 00 10 4d 65 74 68 6f 64 50 61 72 61\",\"0000320 6d 65 74 65 72 73 01 00 0a 53 6f 75 72 63 65 46\",\"第#19项 01 表示一个 utf8 串，00 0a（10） 表示长度，是【SourceFile】 \",\"0000320 6d 65 74 65 72 73 01 00 0a 53 6f 75 72 63 65 46\",\"0000340 69 6c 65 01 00 0f 48 65 6c 6c 6f 57 6f 72 6c 64\",\"第#20项 01 表示一个 utf8 串，00 0f（15） 表示长度，是【HelloWorld.java】 \",\"0000340 69 6c 65 01 00 0f 48 65 6c 6c 6f 57 6f 72 6c 64\",\"0000360 2e 6a 61 76 61 0c 00 07 00 08 07 00 1d 0c 00 1e\",\"第#21项 0c 表示一个 【名+类型】，00 07 00 08 引用了常量池中 #7 #8 两项\",\"0000360 2e 6a 61 76 61 0c 00 07 00 08 07 00 1d 0c 00 1e\",\"第#22项 07 表示一个 Class 信息，00 1d（29） 引用了常量池中 #29 项\",\"0000360 2e 6a 61 76 61 0c 00 07 00 08 07 00 1d 0c 00 1e\",\"第#23项 0c 表示一个 【名+类型】，00 1e（30） 00 1f （31）引用了常量池中 #30 #31 两项 \",\"0000360 2e 6a 61 76 61 0c 00 07 00 08 07 00 1d 0c 00 1e\",\"0000400 00 1f 01 00 0b 68 65 6c 6c 6f 20 77 6f 72 6c 64\",\"第#24项 01 表示一个 utf8 串，00 0f（15） 表示长度，是【hello world】\",\"0000400 00 1f 01 00 0b 68 65 6c 6c 6f 20 77 6f 72 6c 64\",\"第#25项 07 表示一个 Class 信息，00 20（32） 引用了常量池中 #32 项\",\"0000420 07 00 20 0c 00 21 00 22 01 00 1b 63 6e 2f 69 74\",\"第#26项 0c 表示一个 【名+类型】，00 21（33） 00 22（34）引用了常量池中 #33 #34 两项\",\"0000420 07 00 20 0c 00 21 00 22 01 00 1b 63 6e 2f 69 74\",\"第#27项 01 表示一个 utf8 串，00 1b（27） 表示长度，是【cn/itcast/jvm/t5/HelloWorld】 \",\"0000420 07 00 20 0c 00 21 00 22 01 00 1b 63 6e 2f 69 74\",\"0000440 63 61 73 74 2f 6a 76 6d 2f 74 35 2f 48 65 6c 6c\",\"0000460 6f 57 6f 72 6c 64 01 00 10 6a 61 76 61 2f 6c 61\",\"第#28项 01 表示一个 utf8 串，00 10（16） 表示长度，是【java/lang/Object】 \",\"0000460 6f 57 6f 72 6c 64 01 00 10 6a 61 76 61 2f 6c 61\",\"0000500 6e 67 2f 4f 62 6a 65 63 74 01 00 10 6a 61 76 61\",\"第#29项 01 表示一个 utf8 串，00 10（16） 表示长度，是【java/lang/System】 \",\"0000500 6e 67 2f 4f 62 6a 65 63 74 01 00 10 6a 61 76 61\",\"0000520 2f 6c 61 6e 67 2f 53 79 73 74 65 6d 01 00 03 6f\",\"第#30项 01 表示一个 utf8 串，00 03 表示长度，是【out】 \",\"0000520 2f 6c 61 6e 67 2f 53 79 73 74 65 6d 01 00 03 6f\",\"0000540 75 74 01 00 15 4c 6a 61 76 61 2f 69 6f 2f 50 72\",\"第#31项 01 表示一个 utf8 串，00 15（21） 表示长度，是【Ljava/io/PrintStream;】 \",\"0000540 75 74 01 00 15 4c 6a 61 76 61 2f 69 6f 2f 50 72\",\"0000560 69 6e 74 53 74 72 65 61 6d 3b 01 00 13 6a 61 76\",\"Flag Name Value Interpretation\",\"ACC_PUBLIC 0x0001\",\"Declared public ; may be accessed from outside its\",\"package.\",\"ACC_FINAL 0x0010 Declared final ; no subclasses allowed.\",\"ACC_SUPER 0x0020\",\"Treat superclass methods specially when invoked by the\",\"invokespecial instruction.\",\"ACC_INTERFACE 0x0200 Is an interface, not a class.\",\"ACC_ABSTRACT 0x0400 Declared abstract ; must not be instantiated.\",\"ACC_SYNTHETIC 0x1000 Declared synthetic; not present in the source code.\",\"ACC_ANNOTATION 0x2000 Declared as an annotation type.\",\"ACC_ENUM 0x4000 Declared as an enum type.\",\"第#32项 01 表示一个 utf8 串，00 13（19） 表示长度，是【java/io/PrintStream】 \",\"0000560 69 6e 74 53 74 72 65 61 6d 3b 01 00 13 6a 61 76\",\"0000600 61 2f 69 6f 2f 50 72 69 6e 74 53 74 72 65 61 6d\",\"第#33项 01 表示一个 utf8 串，00 07 表示长度，是【println】\",\"0000620 01 00 07 70 72 69 6e 74 6c 6e 01 00 15 28 4c 6a\",\"第#34项 01 表示一个 utf8 串，00 15（21） 表示长度，是【(Ljava/lang/String;)V】 \",\"0000620 01 00 07 70 72 69 6e 74 6c 6e 01 00 15 28 4c 6a\",\"0000640 61 76 61 2f 6c 61 6e 67 2f 53 74 72 69 6e 67 3b\",\"0000660 29 56 00 21 00 05 00 06 00 00 00 00 00 02 00 01\"]},\"401\":{\"h\":\"1.4 访问标识与继承信息\",\"t\":[\"21 表示该 class 是一个类，公共的\",\"0000660 29 56 00 21 00 05 00 06 00 00 00 00 00 02 00 01\",\"05 表示根据常量池中 #5 找到本类全限定名\",\"0000660 29 56 00 21 00 05 00 06 00 00 00 00 00 02 00 01\",\"06 表示根据常量池中 #6 找到父类全限定名\",\"0000660 29 56 00 21 00 05 00 06 00 00 00 00 00 02 00 01\",\"表示接口的数量，本类为 0\",\"0000660 29 56 00 21 00 05 00 06 00 00 00 00 00 02 00 01\"]},\"402\":{\"h\":\"2. 字节码指令\",\"t\":[\"可参考： 字节码指令\",\"img\",\"img\"]},\"403\":{\"h\":\"2.1 javap工具\",\"t\":[\"Oracle 提供了 javap 工具来反编译 class 文件，还有其他的idea插件可以直接查看。\",\"javap -v 类名.class\"]},\"404\":{\"h\":\"2.2 图解方法执行流程\"},\"405\":{\"h\":\"（1）\",\"t\":[\"public class Demo3_1 { public static void main(String[] args) { int a = 10; int b = Short.MAX_VALUE + 1; int c = a + b; System.out.println(c); } }\"]},\"406\":{\"h\":\"（2）编译后的字节码文件\",\"t\":[\"C:\\\\Users\\\\30287\\\\IdeaProjects\\\\paiXppLL\\\\src\\\\main>javap -v Main.class Classfile /C:/Users/30287/IdeaProjects/paiXppLL/src/main/Main.class Last modified 2021-10-14; size 419 bytes MD5 checksum eda2e7897356a975438fe5899c0b4a6c Compiled from \\\"Main.java\\\" public class main.Main minor version: 0 major version: 52 flags: ACC_PUBLIC, ACC_SUPER Constant pool: #1 = Methodref #6.#15 // java/lang/Object.\\\"<init>\\\":()V #2 = Fieldref #16.#17 // java/lang/System.out:Ljava/io/PrintStream; #3 = String #18 // hello world! #4 = Methodref #19.#20 // java/io/PrintStream.println:(Ljava/lang/String;)V #5 = Class #21 // main/Main #6 = Class #22 // java/lang/Object #7 = Utf8 <init> #8 = Utf8 ()V #9 = Utf8 Code #10 = Utf8 LineNumberTable #11 = Utf8 main #12 = Utf8 ([Ljava/lang/String;)V #13 = Utf8 SourceFile #14 = Utf8 Main.java #15 = NameAndType #7:#8 // \\\"<init>\\\":()V #16 = Class #23 // java/lang/System #17 = NameAndType #24:#25 // out:Ljava/io/PrintStream; #18 = Utf8 hello world! #19 = Class #26 // java/io/PrintStream #20 = NameAndType #27:#28 // println:(Ljava/lang/String;)V #21 = Utf8 main/Main #22 = Utf8 java/lang/Object #23 = Utf8 java/lang/System #24 = Utf8 out #25 = Utf8 Ljava/io/PrintStream; #26 = Utf8 java/io/PrintStream #27 = Utf8 println #28 = Utf8 (Ljava/lang/String;)V { public main.Main(); descriptor: ()V flags: ACC_PUBLIC Code: stack=1, locals=1, args_size=1 0: aload_0 1: invokespecial #1 // Method java/lang/Object.\\\"<init>\\\":()V 4: return LineNumberTable: line 13: 0 public static void main(java.lang.String[]); descriptor: ([Ljava/lang/String;)V flags: ACC_PUBLIC, ACC_STATIC Code: stack=2, locals=1, args_size=1 0: getstatic #2 // Field java/lang/System.out:Ljava/io/PrintStream; 3: ldc #3 // String hello world! 5: invokevirtual #4 // Method java/io/PrintStream.println:(Ljava/lang/String;)V 8: return LineNumberTable: line 15: 0 line 16: 8 }\"]},\"407\":{\"h\":\"（3）常量池载入运行时常量池\",\"t\":[\"常量池也属于方法区，只不过这里单独提出来了\",\"img\"]},\"408\":{\"h\":\"（4）\",\"t\":[\"img\"]},\"409\":{\"h\":\"（5）main 线程开始运行，分配栈帧内存\",\"t\":[\"stack=2，locals=4） 对应操作数栈有2个空间（每个空间4个字节），局部变量表中有4个槽位\",\"img\"]},\"410\":{\"h\":\"\",\"t\":[\"将一个 byte 压入操作数栈（其长度会补齐 4 个字节），类似的指令还有\",\"sipush 将一个 short 压入操作数栈（其长度会补齐 4 个字节）\",\"ldc 将一个 int 压入操作数栈\",\"ldc2_w 将一个 long 压入操作数栈（分两次压入，因为 long 是 8 个字节）\",\"这里小的数字都是和字节码指令存在一起，超过 short 范围的数字存入了****常量池\",\"img\",\"istore 1 将操作数栈栈顶元素弹出，放入局部变量表的 slot 1 中 对应代码中的 a = 10\",\"img\",\"img\",\"ldc #3\",\"读取运行时常量池中 #3 ，即 32768 (超过 short 最大值范围的数会被放到运行时常量池中)，将其加载到操作数栈中\",\"注意 Short.MAX_VALUE 是 32767，所以 32768 = Short.MAX_VALUE + 1 实际是在编译期间计算好的。\",\"img\",\"istore 2 将操作数栈中的元素弹出，放到局部变量表的 2 号位置\",\"img\",\"iload1 iload2 将局部变量表中 1 号位置和 2 号位置的元素放入操作数栈中。因为只能在操作数栈中执行运算操作\",\"img\",\"img\",\"iadd 将操作数栈中的两个元素弹出栈并相加，结果在压入操作数栈中。\",\"img\",\"img\",\"istore 3 将操作数栈中的元素弹出，放入局部变量表的3号位置。\",\"img\",\"getstatic #4 在运行时常量池中找到 #4 ，发现是一个对象，在堆内存中找到该对象，并将其引用放入操作数栈中\",\"img\",\"img\",\"iload 3 将局部变量表中 3 号位置的元素压入操作数栈中。\",\"img\",\"img\",\"invokevirtual #5\",\"找到常量池 #5 项，\",\"定位到方法区 java/io/PrintStream.println:(I)V 方法\",\"生成新的栈帧（分配 locals、stack等）\",\"传递参数，执行新栈帧中的字节码\",\"img\",\"执行完毕，弹出栈帧 清除 main 操作数栈内容\",\"img\",\"return 完成 main 方法调用，弹出 main 栈帧，程序结束\"]},\"411\":{\"h\":\"2.3 练习 - 分析 i++\",\"t\":[\"代码\",\"package cn.itcast.jvm.t3.bytecode; /** * 从字节码角度分析 a++ 相关题目 */ public class Demo3_2 { public static void main(String[] args) { int a = 10; int b = a++ + ++a + a--; System.out.println(a); System.out.println(b); } } public static void main(java.lang.String[]); descriptor: ([Ljava/lang/String;)V flags: (0x0009) ACC_PUBLIC, ACC_STATIC Code: stack=2, locals=3, args_size=1 0: bipush 10 2: istore_1 3: iload_1 4: iinc 1, 1 7: iinc 1, 1 10: iload_1 11: iadd 12: iload_1 13: iinc 1, -1 16: iadd 17: istore_2 18: getstatic #2 // Field java/lang/System.out:Ljava/io/PrintStream; 21: iload_1 22: invokevirtual #3 // Method java/io/PrintStream.println:(I)V 25: getstatic #2 // Field java/lang/System.out:Ljava/io/PrintStream; 28: iload_2 29: invokevirtual #3 // Method java/io/PrintStream.println:(I)V 32: return LineNumberTable: line 8: 0 line 9: 3 line 10: 18 line 11: 25 line 12: 32 LocalVariableTable: Start Length Slot Name Signature 0 33 0 args [Ljava/lang/String; 3 30 1 a I 18 15 2 b I\",\"分析：\",\"注意 iinc 指令是直接在局部变量 slot 上进行运算\",\"a++ 和 ++a 的区别是先执行 iload 还是 先执行 iinc\",\"img\",\"img\",\"img\",\"img\",\"img\",\"img\",\"img\",\"img\",\"img\",\"img\",\"img\"]},\"412\":{\"h\":\"2.4 条件判断指令\",\"t\":[\"指令\",\"助记符\",\"含义\",\"0x99\",\"ifeq\",\"判断是否 == 0\",\"0x9a\",\"ifne\",\"判断是否 != 0\",\"0x9b\",\"iflt\",\"判断是否 < 0\",\"几点说明：\",\"byte，short，char 都会按 int 比较，因为操作数栈都是 4 字节\",\"goto 用来进行跳转到指定行号的字节码\",\"public class Demo3_3 { public static void main(String[] args) { int a = 0; if(a == 0) { a = 10; } else { a = 20; } } } 0: iconst_0 1: istore_1 2: iload_1 3: ifne 12 6: bipush 10 8: istore_1 9: goto 15 12: bipush 20 14: istore_1 15: return\",\"思考\",\"细心的同学应当注意到，以上比较指令中没有 long，float，double 的比较，那么它们要比较怎么办？\",\"参考 https://docs.oracle.com/javase/specs/jvms/se7/html/jvms-6.html#jvms-6.5.lcmp\"]},\"413\":{\"h\":\"2.5 循环控制指令\",\"t\":[\"其实循环控制还是前面介绍的那些指令，例如 while 循环：\",\"public class Demo3_4 { public static void main(String[] args) { int a = 0; while (a < 10) { a++; } } } 0: iconst_0 1: istore_1 2: iload_1 3: bipush 10 5: if_icmpge 14 8: iinc 1, 1 11: goto 2 14: return\",\"再比如 do while 循环：\",\"public class Demo3_5 { public static void main(String[] args) { int a = 0; do { a++; } while (a < 10); } } 字节码是： 0: iconst_0 1: istore_1 2: iinc 1, 1 5: iload_1 6: bipush 10 8: if_icmplt 2 11: return\",\"最后再看看 for 循环：\",\"public class Demo3_6 { public static void main(String[] args) { for (int i = 0; i < 10; i++) { } } } 0: iconst_0 1: istore_1 2: iload_1 3: bipush 10 5: if_icmpge 14 8: iinc 1, 1 11: goto 2 14: return\",\"注意\",\"比较 while 和 for 的字节码，你发现它们是一模一样的，殊途也能同归😊\"]},\"414\":{\"h\":\"2.6 练习-判断结果\",\"t\":[\"public class Code_11_ByteCodeTest { public static void main(String[] args) { int i = 0; int x = 0; while (i < 10) { x = x++; i++; } System.out.println(x); // 0 } }\",\"img\",\"为什么最终的 x 结果为 0 呢？ 通过分析字节码指令即可知晓\",\"Code: stack=2, locals=3, args_size=1 // 操作数栈分配2个空间，局部变量表分配 3 个空间 0: iconst_0 // 准备一个常数 0 1: istore_1 // 将常数 0 放入局部变量表的 1 号槽位 i = 0 2: iconst_0 // 准备一个常数 0 3: istore_2 // 将常数 0 放入局部变量的 2 号槽位 x = 0 4: iload_1 // 将局部变量表 1 号槽位的数放入操作数栈中 5: bipush 10 // 将数字 10 放入操作数栈中，此时操作数栈中有 2 个数 7: if_icmpge 21 // 比较操作数栈中的两个数，如果下面的数大于上面的数，就跳转到 21 。这里的比较是将两个数做减法。因为涉及运算操作，所以会将两个数弹出操作数栈来进行运算。运算结束后操作数栈为空 10: iload_2 // 将局部变量 2 号槽位的数放入操作数栈中，放入的值是 0 11: iinc 2, 1 // 将局部变量 2 号槽位的数加 1 ，自增后，槽位中的值为 1 14: istore_2 //将操作数栈中的数放入到局部变量表的 2 号槽位，2 号槽位的值又变为了0 15: iinc 1, 1 // 1 号槽位的值自增 1 18: goto 4 // 跳转到第4条指令 21: getstatic #2 // Field java/lang/System.out:Ljava/io/PrintStream; 24: iload_2 25: invokevirtual #3 // Method java/io/PrintStream.println:(I)V 28: return\"]},\"415\":{\"h\":\"2.7 构造方法\",\"t\":[\"cinit()V\",\"public class Code_12_CinitTest { static int i = 10; static { i = 20; } static { i = 30; } public static void main(String[] args) { System.out.println(i); // 30 } }\",\"编译器会按从上至下的顺序，收集所有 static 静态代码块和静态成员赋值的代码，合并为一个特殊的方法 cinit()V ：\",\"stack=1, locals=0, args_size=0 0: bipush 10 2: putstatic #3 // Field i:I 5: bipush 20 7: putstatic #3 // Field i:I 10: bipush 30 12: putstatic #3 // Field i:I 15: return\",\"cinit()V 方法会在类加载的初始化阶段被调用\",\"init()V\",\"public class Main { private String a = \\\"s1\\\"; { b = 20; } private int b = 10; { a = \\\"s2\\\"; } public Main(String a, int b) { this.a = a; this.b = b; } public static void main(String[] args) { Main d = new Main(\\\"s3\\\", 30); System.out.println(d.a);//s3 System.out.println(d.b);//30 } }\",\"编译器会按从上至下的顺序，收集所有 {} 代码块和成员变量赋值的代码，形成新的构造方法，但原始构造方法内的代码总是在后\",\"Code: stack=2, locals=3, args_size=3 0: aload_0 1: invokespecial #1 // super.<init>()V 4: aload_0 5: ldc #2 // <- \\\"s1\\\" 7: putfield #3 // -> this.a 10: aload_0 11: bipush 20 // <- 20 13: putfield #4 // -> this.b 16: aload_0 17: bipush 10 // <- 10 19: putfield #4 // -> this.b 22: aload_0 23: ldc #5 // <- \\\"s2\\\" 25: putfield #3 // -> this.a 28: aload_0 // ------------------------------ 29: aload_1 // <- slot 1(a) \\\"s3\\\" | 30: putfield #3 // -> this.a | 33: aload_0 | 34: iload_2 // <- slot 2(b) 30 | 35: putfield #4 // -> this.b -------------------- 38: return\"]},\"416\":{\"h\":\"2.8 方法调用\",\"t\":[\"看一下几种不同的方法调用对应的字节码指令\",\"package main; public class Main { public Main() { } private void test1() { } private final void test2() { } public void test3() { } public static void test4() { } public static void main(String[] args) { Main m = new Main(); m.test1(); m.test2(); m.test3(); Main.test4(); } }\",\"不同方法在调用时，对应的虚拟机指令有所区别：\",\"私有、构造、被final修饰的方法，在调用时都使用invokespecial指令，属于静态绑定\",\"普通成员方法在调用时，使用invokevirtual指令。因为编译期间无法确定该方法的内容，只有在运行期间才能确定，属于动态绑定，即支持多态\",\"静态方法在调用时使用invokestatic指令\",\"对应的字节码文件：\",\" Code: stack=2, locals=2, args_size=1 0: new #2 // class main/Main 3: dup 4: invokespecial #3 // Method \\\"<init>\\\":()V 7: astore_1 8: aload_1 9: invokespecial #4 // Method test1:()V 12: aload_1 13: invokespecial #5 // Method test2:()V 16: aload_1 17: invokevirtual #6 // Method test3:()V 20: invokestatic #7 // Method test4:()V 23: return\",\"new 是创建【对象】，给对象分配堆内存，执行成功会将【对象引用】压入操作数栈\",\"dup 是复制操作数栈栈顶的内容，本例即为【对象引用】，为什么需要两份引用呢，一个是要配合 invokespecial 调用该对象的构造方法 \\\"<init>\\\":()V （会消耗掉栈顶一个引用），另一个要配合 astore_1 赋值给局部变量\",\"终方法（ﬁnal），私有方法（private），构造方法都是由 invokespecial 指令来调用，属于静态绑定\",\"普通成员方法是由 invokevirtual 调用，属于动态绑定，即支持多态，成员方法与静态方法调用的另一个区别是，执行方法前是否需要【对象引用】\",\"比较有意思的是 d.test4(); 是通过【对象引用】调用一个静态方法，可以看到在调用invokestatic 之前执行了 pop 指令，把【对象引用】从操作数栈弹掉了😂\",\"还有一个执行 invokespecial 的情况是通过 super 调用父类方法\"]},\"417\":{\"h\":\"2.9 多态的原理\",\"t\":[\"因为普通成员方法需要在运行时才能确定具体的内容，所以虚拟机需要调用invokevirtual指令\",\"在执行invokevirtual指令时，经历了以下几个步骤\",\"先通过栈帧中对象的引用找到对象\",\"分析对象头，找到对象实际的Class\",\"Class结构中有vtable，它在类加载的链接阶段就已经根据方法的重写规则生成好了\",\"查询vtable找到方法的具体地址\",\"执行方法的字节码\",\"package cn.itcast.jvm.t3.bytecode; import java.io.IOException; /** * 演示多态原理，注意加上下面的 JVM 参数，禁用指针压缩 * -XX:-UseCompressedOops -XX:-UseCompressedClassPointers */ public class Demo3_10 { public static void test(Animal animal) { animal.eat(); System.out.println(animal.toString()); } public static void main(String[] args) throws IOException { test(new Cat()); test(new Dog()); System.in.read(); } } abstract class Animal { public abstract void eat(); @Override public String toString() { return \\\"我是\\\" + this.getClass().getSimpleName(); } } class Dog extends Animal { @Override public void eat() { System.out.println(\\\"啃骨头\\\"); } } class Cat extends Animal { @Override public void eat() { System.out.println(\\\"吃鱼\\\"); } }\"]},\"418\":{\"h\":\"1）运行代码\",\"t\":[\"停在 System.in.read() 方法上，这时运行 jps 获取进程 id\"]},\"419\":{\"h\":\"2）运行 HSDB 工具\",\"t\":[\"进入 JDK 安装目录，执行\",\"java -cp ./lib/sa-jdi.jar sun.jvm.hotspot.HSDB\",\"进入图形界面 attach 进程 id\"]},\"420\":{\"h\":\"3）查找某个对象\",\"t\":[\"打开 Tools -> Find Object By Query\",\"输入\",\"select d from cn.itcast.jvm.t3.bytecode.Dog d\",\"点击 Execute 执行\",\"img\"]},\"421\":{\"h\":\"4）查看对象内存结构\",\"t\":[\"点击超链接可以看到对象的内存结构，此对象没有任何属性，因此只有对象头的 16 字节，前 8 字节是\",\"MarkWord，后 8 字节就是对象的 Class 指针\",\"但目前看不到它的实际地址\",\"img\"]},\"422\":{\"h\":\"5）查看对象 Class 的内存地址\",\"t\":[\"可以通过 Windows -> Console 进入命令行模式，执行\",\"mem 0x00000001299b4978 2\",\"mem 有两个参数，参数 1 是对象地址，参数 2 是查看 2 行（即 16 字节）\",\"结果中第二行 0x000000001b7d4028 即为 Class 的内存地址\",\"img\"]},\"423\":{\"h\":\"6）查看类的 vtable\",\"t\":[\"方法1：Alt+R 进入 Inspector 工具，输入刚才的 Class 内存地址，看到如下界面\",\"img\",\"方法2：或者 Tools -> Class Browser 输入 Dog 查找，可以得到相同的结果\",\"img\",\"无论通过哪种方法，都可以找到 Dog Class 的 vtable 长度为 6，意思就是 Dog 类有 6 个虚方法（多态相关的，final，static 不会列入）\",\"那么这 6 个方法都是谁呢？从 Class 的起始地址开始算，偏移 0x1b8 就是 vtable 的起始地址，进行计算得到：\",\"0x000000001b7d4028 1b8 + --------------------- 0x000000001b7d41e0\",\"通过 Windows -> Console 进入命令行模式，执行\",\"mem 0x000000001b7d41e0 6 0x000000001b7d41e0: 0x000000001b3d1b10 0x000000001b7d41e8: 0x000000001b3d15e8 0x000000001b7d41f0: 0x000000001b7d35e8 0x000000001b7d41f8: 0x000000001b3d1540 0x000000001b7d4200: 0x000000001b3d1678 0x000000001b7d4208: 0x000000001b7d3fa8\",\"就得到了 6 个虚方法的入口地址\"]},\"424\":{\"h\":\"7）验证方法地址\",\"t\":[\"通过 Tools -> Class Browser 查看每个类的方法定义，比较可知\",\"img\",\"Dog - public void eat() @0x000000001b7d3fa8 Animal - public java.lang.String toString() @0x000000001b7d35e8; Object - protected void finalize() @0x000000001b3d1b10; Object - public boolean equals(java.lang.Object) @0x000000001b3d15e8; Object - public native int hashCode() @0x000000001b3d1540; Object - protected native java.lang.Object clone() @0x000000001b3d1678;\",\"对号入座，发现\",\"eat() 方法是 Dog 类自己的\",\"toString() 方法是继承 String 类的\",\"finalize() ，equals()，hashCode()，clone() 都是继承 Object 类的\"]},\"425\":{\"h\":\"8）小结\",\"t\":[\"当执行 invokevirtual 指令时，\",\"先通过栈帧中的对象引用找到对象\",\"分析对象头，找到对象的实际 Class\",\"Class 结构中有 vtable，它在类加载的链接阶段就已经根据方法的重写规则生成好了\",\"查表得到方法的具体地址\",\"执行方法的字节码\"]},\"426\":{\"h\":\"2.10 异常处理\"},\"427\":{\"h\":\"（1）try-catch\",\"t\":[\"public class Main { public static void main(String[] args) { int i = 0; try { i = 10; } catch (Exception e) { i = 20; } } }\",\"对应的字节码文件（为了抓住重点，下面的字节码省略了不重要的部分）：\",\" Code: stack=1, locals=3, args_size=1 0: iconst_0 1: istore_1 2: bipush 10 4: istore_1 5: goto 12 8: astore_2 9: bipush 20 11: istore_1 12: return Exception table: from to target type 2 5 8 Class java/lang/Exception\",\"可以看到多出来一个 Exception table 的结构，[from, to) 是前闭后开（也就是检测2~4行）的检测范围，一旦这个范围内的字节码执行出现异常，则通过 type 匹配异常类型，如果一致，进入 target 所指示行号\",\"8行的字节码指令 astore_2 是将异常对象引用存入局部变量表的2号位置（为e）\"]},\"428\":{\"h\":\"（2）多个 single-catch 块的情况\",\"t\":[\"public class Demo3_11_2 { public static void main(String[] args) { int i = 0; try { i = 10; } catch (ArithmeticException e) { i = 30; } catch (NullPointerException e) { i = 40; } catch (Exception e) { i = 50; } } }\",\"对应的字节码文件：\",\"public static void main(java.lang.String[]); descriptor: ([Ljava/lang/String;)V flags: ACC_PUBLIC, ACC_STATIC Code: stack=1, locals=3, args_size=1 0: iconst_0 1: istore_1 2: bipush 10 4: istore_1 5: goto 26 8: astore_2 9: bipush 30 11: istore_1 12: goto 26 15: astore_2 16: bipush 40 18: istore_1 19: goto 26 22: astore_2 23: bipush 50 25: istore_1 26: return Exception table: from to target type 2 5 8 Class java/lang/ArithmeticException 2 5 15 Class java/lang/NullPointerException 2 5 22 Class java/lang/Exception LineNumberTable: ... LocalVariableTable: Start Length Slot Name Signature 9 3 2 e Ljava/lang/ArithmeticException; 16 3 2 e Ljava/lang/NullPointerException; 23 3 2 e Ljava/lang/Exception; 0 27 0 args [Ljava/lang/String; 2 25 1 i I StackMapTable: ... MethodParameters: ...\",\"因为异常出现时，只能进入 Exception table 中一个分支，所以局部变量表 slot 2 位置被共用\"]},\"429\":{\"h\":\"（3）multi-catch 的情况\",\"t\":[\"public class Demo3_11_3 { public static void main(String[] args) { try { Method test = Demo3_11_3.class.getMethod(\\\"test\\\"); test.invoke(null); } catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException e) { e.printStackTrace(); } } public static void test() { System.out.println(\\\"ok\\\"); } } public static void main(java.lang.String[]); descriptor: ([Ljava/lang/String;)V flags: ACC_PUBLIC, ACC_STATIC Code: stack=3, locals=2, args_size=1 0: ldc #2 2: ldc #3 4: iconst_0 5: anewarray #4 8: invokevirtual #5 11: astore_1 12: aload_1 13: aconst_null 14: iconst_0 15: anewarray #6 18: invokevirtual #7 21: pop 22: goto 30 25: astore_1 26: aload_1 27: invokevirtual #11 // e.printStackTrace:()V 30: return Exception table: from to target type 0 22 25 Class java/lang/NoSuchMethodException 0 22 25 Class java/lang/IllegalAccessException 0 22 25 Class java/lang/reflect/InvocationTargetException LineNumberTable: ... LocalVariableTable: Start Length Slot Name Signature 12 10 1 test Ljava/lang/reflect/Method; 26 4 1 e Ljava/lang/ReflectiveOperationException; 0 31 0 args [Ljava/lang/String; StackMapTable: ... MethodParameters: ...\"]},\"430\":{\"h\":\"（4）finally\",\"t\":[\"public class Main { public static void main(String[] args) { int i = 0; try { i = 10; } catch (Exception e) { i = 20; } finally { i = 30; } } }\",\"对应的字节码文件：\",\" Code: stack=1, locals=4, args_size=1 0: iconst_0 1: istore_1 //try块 2: bipush 10 4: istore_1 5: bipush 30 //try块执行完后，会执行finally 7: istore_1 8: goto 27 //catch块 11: astore_2 12: bipush 20 14: istore_1 //catch块执行完，会执行finally 15: bipush 30 17: istore_1 18: goto 27 //出现异常，但未被Exception捕获，会抛出其他异常，这时也需要执行finally块中的代码 21: astore_3 22: bipush 30 24: istore_1 25: aload_3 26: athrow //抛出异常 27: return Exception table: from to target type 2 5 11 Class java/lang/Exception 2 5 21 any //剩余的异常类型，比如 Error 11 15 21 any //剩余的异常类型，比如 Erro\",\"可以看到 finally 中的代码被复制了 3 份，分别放入 try 流程，catch 流程以及 catch 剩余的异常类型流程\",\"注意：\",\"虽然从字节码指令看来，每个块中都有finally块，但是finally块中的代码只会被执行一次\"]},\"431\":{\"h\":\"（5）finally中的return\",\"t\":[\"public class Main { public static void main(String[] args) { int result = test(); System.out.println(result);//20 } public static int test() { try { return 10; } finally { return 20; } } }\",\"对应的字节码文件：\",\"Code: stack=1, locals=3, args_size=0 0: bipush 10 2: istore_0 3: iload_0 4: istore_1 // 暂存返回值 5: bipush 20 7: istore_0 8: iload_0 9: ireturn // ireturn 会返回操作数栈顶的整型值 20 // 如果出现异常，还是会执行finally 块中的内容，没有抛出异常 10: astore_2 11: bipush 20 13: istore_0 14: iload_0 15: ireturn // 这里没有 athrow 了，也就是如果在 finally 块中如果有返回操作的话，且 try 块中出现异常，会吞掉异常！ Exception table: from to target type 0 5 10 any\",\"由于 finally 中的 ireturn 被插入了所有可能的流程，因此返回结果肯定以 finally 的为准\",\"跟前一个中的 finally 相比，发现没有 athrow 了，这告诉我们：如果在 finally 中出现了 return，会吞掉异常\",\"所以不要在finally中进行返回操作\",\"运行下面的代码，不会抛出异常：\",\"public class Main { public static void main(String[] args) { int result = test(); System.out.println(result); } public static int test() { try { int i = 1 / 0; return 10; } finally { return 20; } } }\"]},\"432\":{\"h\":\"（6）finally不带return\",\"t\":[\"public class Main { public static void main(String[] args) { int i = Main.test(); System.out.println(i);//输出为10 } public static int test() { int i = 10; try { return i; } finally { i = 20; } } }\",\"对应的字节码文件：\",\"Code: stack=1, locals=3, args_size=0 0: bipush 10 2: istore_0 //赋值给i 10 3: iload_0 //加载到操作数栈顶 4: istore_1 //加载到局部变量表的1号位置 5: bipush 20 7: istore_0 //赋值给i 20 8: iload_1 //加载局部变量表1号位置的数10到操作数栈 9: ireturn //返回操作数栈顶元素 10 10: astore_2 11: bipush 20 13: istore_0 14: aload_2 //加载异常 15: athrow //抛出异常 Exception table: from to target type 3 5 10 any\"]},\"433\":{\"h\":\"2.11 synchronized\",\"t\":[\"public class Code_19_SyncTest { public static void main(String[] args) { Object lock = new Object(); synchronized (lock) { System.out.println(\\\"ok\\\"); } } } Code: stack=2, locals=4, args_size=1 0: new #2 // class java/lang/Object 3: dup // 复制一份栈顶，然后压入栈中。用于函数消耗 4: invokespecial #1 // Method java/lang/Object.\\\"<init>\\\":()V 7: astore_1 // 将栈顶的对象地址方法 局部变量表中 1 中 8: aload_1 // 加载到操作数栈 9: dup // 复制一份，放到操作数栈，用于加锁时消耗 10: astore_2 // 将操作数栈顶元素弹出，暂存到局部变量表的 2 号槽位。这时操作数栈中有一份对象的引用 11: monitorenter // 加锁 12: getstatic #3 // Field java/lang/System.out:Ljava/io/PrintStream; 15: ldc #4 // String ok 17: invokevirtual #5 // Method java/io/PrintStream.println:(Ljava/lang/String;)V 20: aload_2 // 加载对象到栈顶 21: monitorexit // 释放锁 22: goto 30 // 异常情况的解决方案 释放锁！ 25: astore_3 26: aload_2 27: monitorexit 28: aload_3 29: athrow 30: return // 异常表！ Exception table: from to target type 12 22 25 any 25 28 25 any\"]},\"434\":{\"h\":\"3. 编译器处理\",\"t\":[\"所谓的 语法糖 ，其实就是指 java 编译器把 .java 源码编译为 .class 字节码的过程中，自动生成和转换的一些代码，主要是为了减轻程序员的负担，算是 java 编译器给我们的一个额外福利 注意，以下代码的分析，借助了 javap 工具，idea 的反编译功能，idea 插件 jclasslib 等工具。另外， 编译器转换的结果直接就是 class 字节码，只是为了便于阅读，给出了 几乎等价 的 java 源码方式，并不是编译器还会转换出中间的 java 源码，切记。\"]},\"435\":{\"h\":\"3.1 默认构造器\",\"t\":[\"public class Candy1 {}\",\"编译成class后的代码：\",\"public class Candy1 { // 这个无参构造器是java编译器帮我们加上的 public Candy1() { // 即调用父类 Object 的无参构造方法，即调用 java/lang/Object.\\\" <init>\\\":()V super(); } }\"]},\"436\":{\"h\":\"3.2 自动拆装箱\",\"t\":[\"基本类型和其包装类型的相互转换过程，称为拆装箱 在 JDK 5 以后，它们的转换可以在编译期自动完成\",\"这个特性是 JDK 5 开始加入的， 如下代码 ：\",\"public class Candy2 { public static void main(String[] args) { Integer x = 1; int y = x; } }\",\"这段代码在 JDK 5 之前是无法编译通过的，必须改写下面这样 :\",\"public class Candy2 { public static void main(String[] args) { //基本类型转包装类型→装箱 Integer x = Integer.valueOf(1); //包装类型转基本类型→拆箱 int y = x.intValue(); } }\",\"转换过程如下\",\"public class Candy2 { public static void main(String[] args) { // 基本类型赋值给包装类型，称为装箱 Integer x = Integer.valueOf(1); // 包装类型赋值给基本类型，称谓拆箱 int y = x.intValue(); } }\"]},\"437\":{\"h\":\"3.3 泛型集合取值\",\"t\":[\"泛型也是在 JDK 5 开始加入的特性，但 java 在编译泛型代码后会执行泛型擦除 的动作，即泛型信息在编译为字节码之后就丢失了（实际上有一些类信息没被擦除，为了反射使用），实际的类型都当做了 Object 类型来处理：\",\"public class Candy3 { public static void main(String[] args) { List<Integer> list = new ArrayList<>(); list.add(10); // 实际调用的是 List.add(Object e) Integer x = list.get(0); // 实际调用的是 Object obj = List.get(int index); } }\",\"所以在取值时，编译器真正生成的字节码中，还要额外做一个类型转换的操作：\",\"// 需要将 Object 转为 Integer Integer x = (Integer)list.get(0);\",\"如果前面的 x 变量类型修改为 int 基本类型那么最终生成的字节码是：\",\"// 需要将 Object 转为 Integer, 并执行拆箱操作 int x = ((Integer)list.get(0)).intValue();\",\"对应字节码：\",\"Code: stack=2, locals=3, args_size=1 0: new #2 // class java/util/ArrayList 3: dup 4: invokespecial #3 // Method java/util/ArrayList.\\\"<init>\\\":()V 7: astore_1 8: aload_1 9: bipush 10 11: invokestatic #4 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer; //这里进行了泛型擦除，实际调用的是add(Objcet o) 14: invokeinterface #5, 2 // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z 19: pop 20: aload_1 21: iconst_0 //这里也进行了泛型擦除，实际调用的是get(Object o) 22: invokeinterface #6, 2 // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object; //这里进行了类型转换，将Object转换成了Integer 27: checkcast #7 // class java/lang/Integer 30: astore_2 31: return\",\"所以调用 get 函数取值时，有一个类型转换的操作。\",\"Integer x = (Integer) list.get(0);\",\"如果要将返回结果赋值给一个 int 类型的变量，则还有自动拆箱的操作\",\"int x = (Integer) list.get(0).intValue();\"]},\"438\":{\"h\":\"3.4反射获取泛型信息\",\"t\":[\"擦除的是字节码上的泛型信息，可以看到 LocalVariableTypeTable 仍然保留了方法参数泛型的信息\",\"public cn.itcast.jvm.t3.candy.Candy3(); descriptor: ()V flags: ACC_PUBLIC Code: stack=1, locals=1, args_size=1 0: aload_0 1: invokespecial #1 // Method java/lang/Object.\\\" <init>\\\":()V 4: return LineNumberTable: line 6: 0 LocalVariableTable: Start Length Slot Name Signature 0 5 0 this Lcn/itcast/jvm/t3/candy/Candy3; public static void main(java.lang.String[]); descriptor: ([Ljava/lang/String;)V flags: ACC_PUBLIC, ACC_STATIC Code: stack=2, locals=3, args_size=1 0: new #2 // class java/util/ArrayList 3: dup 4: invokespecial #3 // Method java/util/ArrayList.\\\" <init>\\\":()V 7: astore_1 8: aload_1 9: bipush 10 11: invokestatic #4 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer; 14: invokeinterface #5, 2 // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z 19: pop 20: aload_1 21: iconst_0 22: invokeinterface #6, 2 // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object; 27: checkcast #7 // class java/lang/Integer 30: astore_2 31: return LineNumberTable: line 8: 0 line 9: 8 line 10: 20 line 11: 31 LocalVariableTable: Start Length Slot Name Signature 0 32 0 args [Ljava/lang/String; 8 24 1 list Ljava/util/List; LocalVariableTypeTable: Start Length Slot Name Signature 8 24 1 list Ljava/util/List<Ljava/lang/Integer;>;\",\"使用反射可以得到，参数的类型以及泛型类型。泛型反射代码如下：\",\" public static void main(String[] args) throws NoSuchMethodException { // 1. 拿到方法 Method method = Code_20_ReflectTest.class.getMethod(\\\"test\\\", List.class, Map.class); // 2. 得到泛型参数的类型信息 Type[] types = method.getGenericParameterTypes(); for(Type type : types) { // 3. 判断参数类型是否，带泛型的类型。 if(type instanceof ParameterizedType) { ParameterizedType parameterizedType = (ParameterizedType) type; // 4. 得到原始类型 System.out.println(\\\"原始类型 - \\\" + parameterizedType.getRawType()); // 5. 拿到泛型类型 Type[] arguments = parameterizedType.getActualTypeArguments(); for(int i = 0; i < arguments.length; i++) { System.out.printf(\\\"泛型参数[%d] - %s\\\\n\\\", i, arguments[i]); } } } } public Set<Integer> test(List<String> list, Map<Integer, Object> map) { return null; } 原始类型 - interface java.util.List 泛型参数[0] - class java.lang.String 原始类型 - interface java.util.Map 泛型参数[0] - class java.lang.Integer 泛型参数[1] - class java.lang.Object\"]},\"439\":{\"h\":\"3.5 可变参数\",\"t\":[\"可变参数也是 JDK 5 开始加入的新特性： 例如：\",\"public class Candy4 { public static void foo(String... args) { // 将 args 赋值给 arr ，可以看出 String... 实际就是 String[] String[] arr = args; System.out.println(arr.length); } public static void main(String[] args) { foo(\\\"hello\\\", \\\"world\\\"); } }\",\"可变参数 String... args 其实是一个 String[] args ，从代码中的赋值语句中就可以看出来。 同 样 java 编译器会在编译期间将上述代码变换为：\",\"public class Candy4 { public Candy4 {} public static void foo(String[] args) { String[] arr = args; System.out.println(arr.length); } public static void main(String[] args) { foo(new String[]); } }\",\"注意，如果调用的是 foo() ，即未传递参数时，等价代码为 foo(new String[]{}) ，创建了一个空数组，而不是直接传递的 null .\"]},\"440\":{\"h\":\"3.6 foreach 循环\",\"t\":[\"仍是 JDK 5 开始引入的语法糖，数组的循环：\",\"public class Candy5_1 { public static void main(String[] args) { int[] array = {1, 2, 3, 4, 5}; // 数组赋初值的简化写法也是语法糖哦 for (int e : array) { System.out.println(e); } } }\",\"编译器会帮我们转换为\",\"public class Candy5_1 { public Candy5_1() { } public static void main(String[] args) { int[] array = new int[]{1, 2, 3, 4, 5}; for(int i = 0; i < array.length; ++i) { int e = array[i]; System.out.println(e); } } }\",\"如果是集合使用 foreach\",\"public class Candy5_2 { public static void main(String[] args) { List<Integer> list = Arrays.asList(1,2,3,4,5); for (Integer i : list) { System.out.println(i); } } }\",\"集合要使用 foreach ，需要该集合类实现了 Iterable 接口，因为集合的遍历需要用到迭代器 Iterator.\",\"public class Candy5 { public Candy5(){} public static void main(String[] args) { List<Integer> list = Arrays.asList(1, 2, 3, 4, 5); // 获得该集合的迭代器 Iterator<Integer> iterator = list.iterator(); while(iterator.hasNext()) { Integer x = iterator.next(); System.out.println(x); } } }\",\"注意 ：foreach 循环写法，能够配合数组，以及所有实现了 Iterable 接口的集合类一起使用，其 中 Iterable 用来获取集合的迭代器（ Iterator ）\"]},\"441\":{\"h\":\"3.7 switch 字符串\",\"t\":[\"从 JDK 7 开始，switch 可以作用于字符串和枚举类，这个功能其实也是语法糖，例如：\",\"public class Cnady6 { public static void main(String[] args) { String str = \\\"hello\\\"; switch (str) { case \\\"hello\\\" : System.out.println(\\\"h\\\"); break; case \\\"world\\\" : System.out.println(\\\"w\\\"); break; default: break; } } }\",\"注意： switch 配合 String 和枚举使用时，变量不能为null，原因分析完语法糖转换后的代码应当自然清楚\",\"会被编译器转换为：\",\"public class Candy6 { public Candy6() { } public static void main(String[] args) { String str = \\\"hello\\\"; int x = -1; // 通过字符串的 hashCode + value 来判断是否匹配 switch (str.hashCode()) { // hello 的 hashCode case 99162322 : // 再次比较，因为字符串的 hashCode 有可能相等 if(str.equals(\\\"hello\\\")) { x = 0; } break; // world 的 hashCode case 11331880 : if(str.equals(\\\"world\\\")) { x = 1; } break; default: break; } // 用第二个 switch 在进行输出判断 switch (x) { case 0: System.out.println(\\\"h\\\"); break; case 1: System.out.println(\\\"w\\\"); break; default: break; } } }\",\"过程说明：\",\"在编译期间，单个的 switch 被分为了两个 \",\"第一个用来匹配字符串，并给 x 赋值 \",\"字符串的匹配用到了字符串的 hashCode ，还用到了 equals 方法\",\"使用 hashCode 是为了提高比较效率，使用 equals 是防止有 hashCode 冲突（如 BM 和 C .）\",\"第二个用来根据x的值来决定输出语句\",\"以看到，执行了两遍 switch，第一遍是根据字符串的 hashCode 和 equals 将字符串的转换为相应 byte 类型，第二遍才是利用 byte 执行进行比较。\",\"问：为什么第一遍时必须既比较 hashCode，又利用 equals 比较呢？hashCode 是为了提高效率，减少可能的比较；而 equals 是为了防止 hashCode 冲突。\",\"例如 BM 和 C. 这两个字符串的hashCode值都是 2123 ，如果有如下代码：\",\"public class Candy6_1 { public static void choose(String str) { switch (str) { case \\\"BM\\\": { System.out.println(\\\"h\\\"); break; } case \\\"C.\\\": { System.out.println(\\\"w\\\"); break; } } } }\",\"会被编译器转换为：\",\"public class Candy6_1 { public Candy6_1() { } public static void choose(String var0) { byte var2 = -1; switch(var0.hashCode()) { case 2123: if (var0.equals(\\\"C.\\\")) { var2 = 1; } else if (var0.equals(\\\"BM\\\")) { var2 = 0; } default: switch(var2) { case 0: System.out.println(\\\"h\\\"); break; case 1: System.out.println(\\\"w\\\"); } } } }\"]},\"442\":{\"h\":\"3.8 switch 枚举\",\"t\":[\"enum SEX { MALE, FEMALE; } public class Candy7 { public static void main(String[] args) { SEX sex = SEX.MALE; switch (sex) { case MALE: System.out.println(\\\"man\\\"); break; case FEMALE: System.out.println(\\\"woman\\\"); break; default: break; } } } enum SEX { MALE, FEMALE; } public class Candy7 { /** * 定义一个合成类（仅 jvm 使用，对我们不可见） * 用来映射枚举的 ordinal 与数组元素的关系 * 枚举的 ordinal 表示枚举对象的序号，从 0 开始 * 即 MALE 的 ordinal()=0，FEMALE 的 ordinal()=1 */ static class $MAP { // 数组大小即为枚举元素个数，里面存放了 case 用于比较的数字 static int[] map = new int[2]; static { // ordinal 即枚举元素对应所在的位置，MALE 为 0 ，FEMALE 为 1 map[SEX.MALE.ordinal()] = 1; map[SEX.FEMALE.ordinal()] = 2; } } public static void main(String[] args) { SEX sex = SEX.MALE; // 将对应位置枚举元素的值赋给 x ，用于 case 操作 int x = $MAP.map[sex.ordinal()]; switch (x) { case 1: System.out.println(\\\"man\\\"); break; case 2: System.out.println(\\\"woman\\\"); break; default: break; } } }\"]},\"443\":{\"h\":\"3.9 枚举类\",\"t\":[\"JDK 7 新增了枚举类，以前面的性别枚举为例：\",\"public enum Sex { MALE,FEMALE }\",\"转换后的代码\",\"public final class Sex extends Enum<Sex> { // 对应枚举类中的元素 public static final Sex MALE; public static final Sex FEMALE; private static final Sex[] $VALUES; static { // 调用构造函数，传入枚举元素的值及 ordinal MALE = new Sex(\\\"MALE\\\", 0); FEMALE = new Sex(\\\"FEMALE\\\", 1); $VALUES = new Sex[]{MALE, FEMALE}; } // 调用父类中的方法 private Sex(String name, int ordinal) { super(name, ordinal); } public static Sex[] values() { return $VALUES.clone(); } public static Sex valueOf(String name) { return Enum.valueOf(Sex.class, name); } }\"]},\"444\":{\"h\":\"3.10 try-with-resources\",\"t\":[\"JDK 7 开始新增了对需要关闭的资源处理的特殊语法，‘try-with-resources’\",\"try(资源变量 = 创建资源对象) { } catch() { }\",\"其中资源对象需要实现 AutoCloseable 接口，例如 InputStream 、 OutputStream 、 Connection 、 Statement 、 ResultSet 等接口都实现了 AutoCloseable ，使用 try-with- resources 可以不用写 finally 语句块，编译器会帮助生成关闭资源代码，例如：\",\"public class Candy9 { public static void main(String[] args) { try(InputStream is = new FileInputStream(\\\"d:\\\\\\\\1.txt\\\")){ System.out.println(is); } catch (IOException e) { e.printStackTrace(); } } }\",\"会被转换为：\",\"public class Candy9 { public Candy9() { } public static void main(String[] args) { try { InputStream is = new FileInputStream(\\\"d:\\\\\\\\1.txt\\\"); Throwable t = null; try { System.out.println(is); } catch (Throwable e1) { // t 是我们代码出现的异常 t = e1; throw e1; } finally { // 判断了资源不为空 if (is != null) { // 如果我们代码有异常 if (t != null) { try { is.close(); } catch (Throwable e2) { // 如果 close 出现异常，作为被压制异常添加 t.addSuppressed(e2); } } else { // 如果我们代码没有异常，close 出现的异常就是最后 catch 块中的 e is.close(); } } } } catch (IOException e) { e.printStackTrace(); } } }\",\"为什么要设计一个 addSuppressed(Throwable e) （添加被压制异常）的方法呢？是为了防止异常信息的丢失（想想 try-with-resources 生成的 fianlly 中如果抛出了异常）：\",\"public class Test6 { public static void main(String[] args) { try (MyResource resource = new MyResource()) { int i = 1/0; } catch (Exception e) { e.printStackTrace(); } } } class MyResource implements AutoCloseable { public void close() throws Exception { throw new Exception(\\\"close 异常\\\"); } }\",\"输出：\",\"java.lang.ArithmeticException: / by zero at test.Test6.main(Test6.java:7) Suppressed: java.lang.Exception: close 异常 at test.MyResource.close(Test6.java:18) at test.Test6.main(Test6.java:6)\"]},\"445\":{\"h\":\"3.11 方法重写时的桥接方法\",\"t\":[\"我们都知道，方法重写时对返回值分两种情况： 父子类的返回值完全一致 子类返回值可以是父类返回值的子类（比较绕口，见下面的例子）\",\"class A { public Number m() { return 1; } } class B extends A { @Override // 子类 m 方法的返回值是 Integer 是父类 m 方法返回值 Number 的子类 public Integer m() { return 2; } }\",\"对于子类，java 编译器会做如下处理：\",\"class B extends A { public Integer m() { return 2; } // 此方法才是真正重写了父类 public Number m() 方法 public synthetic bridge Number m() { // 调用 public Integer m() return m(); } }\",\"其中桥接方法比较特殊，仅对 java 虚拟机可见，并且与原来的 public Integer m() 没有命名冲突，可以 用下面反射代码来验证：\",\"public static void main(String[] args) { for(Method m : B.class.getDeclaredMethods()) { System.out.println(m); } }\",\"结果：\",\"public java.lang.Integer cn.ali.jvm.test.B.m() public java.lang.Number cn.ali.jvm.test.B.m()\"]},\"446\":{\"h\":\"3.12 匿名内部类\",\"t\":[\"public class Candy10 { public static void main(String[] args) { Runnable runnable = new Runnable() { @Override public void run() { System.out.println(\\\"running...\\\"); } }; } }\",\"转换后的代码\",\"public class Candy10 { public static void main(String[] args) { // 用额外创建的类来创建匿名内部类对象 Runnable runnable = new Candy10$1(); } } // 创建了一个额外的类，实现了 Runnable 接口 final class Candy10$1 implements Runnable { public Demo8$1() {} @Override public void run() { System.out.println(\\\"running...\\\"); } }\",\"引用局部变量的匿名内部类，源代码：\",\"public class Candy11 { public static void test(final int x) { Runnable runnable = new Runnable() { @Override public void run() { System.out.println(\\\"ok:\\\" + x); } }; } }\",\"转换后代码：\",\"// 额外生成的类 final class Candy11$1 implements Runnable { int val$x; Candy11$1(int x) { this.val$x = x; } public void run() { System.out.println(\\\"ok:\\\" + this.val$x); } } public class Candy11 { public static void test(final int x) { Runnable runnable = new Candy11$1(x); } }\",\"注意：这同时解释了为什么匿名内部类引用局部变量时，局部变量必须是 final 的：因为在创建 Candy11$1 对象时，将 x 的值赋值给了 Candy11$1 对象的 值后，如果不是 final 声明的 x 值发生了改变，匿名内部类则值不一致。\",\"这同时解释了为什么匿名内部类引用局部变量时，局部变量必须是final的：因为在创建Candy11$1对象时，将x的值赋值给了Candy11$1对象的vala属性，所以x不应该再发生变化了，如果变化，那么ualx属性没有机会再跟着一起变化\"]},\"447\":{\"h\":\"4. 类加载阶段\"},\"448\":{\"h\":\"4.1 加载\",\"t\":[\"将类的字节码载入方法区（1.8后为元空间，在本地内存中）中，内部采用 C++ 的 instanceKlass 描述 java 类，它的重要 ﬁeld 有： \",\"_java_mirror 即 java 的类镜像，例如对 String 来说，它的镜像类就是 String.class，作用是把 klass 暴露给 java 使用\",\"_super 即父类\",\"_ﬁelds 即成员变量\",\"_methods 即方法\",\"_constants 即常量池\",\"_class_loader 即类加载器\",\"_vtable 虚方法表\",\"_itable 接口方法\",\"如果这个类还有父类没有加载，先加载父类\",\"加载和链接可能是交替运行的\",\"instanceKlass 这样的【元数据】是存储在方法区（1.8 后的元空间内），但 _java_mirror 是存储在堆中，可以通过HSDB工具查看。\",\"instanceKlass和_java_mirror（java镜像类）互相保存了对方的地址\",\"类的对象在对象头中保存了 *.class 的地址。让对象可以通过其找到方法区中的instanceKlass，从而获取类的各种信息\",\"img\",\"注意\",\"instanceKlass 这样的【元数据】是存储在方法区（1.8 后的元空间内），但 _java_mirror 是存储在堆中\",\"可以通过前面介绍的 HSDB 工具查看\"]},\"449\":{\"h\":\"4.2 链接\"},\"450\":{\"h\":\"（1）验证\",\"t\":[\"验证类是否符合 JVM规范，安全性检查 用 UE 等支持二进制的编辑器修改 HelloWorld.class 的魔数，在控制台运行\"]},\"451\":{\"h\":\"（2）准备\",\"t\":[\"为 static 变量分配空间，设置默认值\",\"static变量在JDK 7以前是存储与instanceKlass末尾。但在JDK 7以后就存储在_java_mirror末尾了\",\"static变量在分配空间和赋值是在两个阶段完成的。分配空间在准备阶段完成，赋值在初始化阶段完成\",\"如果 static 变量是 ﬁnal 的基本类型，以及字符串常量，那么编译阶段值就确定了，赋值在准备阶段完成\",\"如果 static 变量是 ﬁnal 的，但属于引用类型，那么赋值也会在初始化阶段完成\",\"public class Code_22_AnalysisTest { public static void main(String[] args) throws ClassNotFoundException, IOException { ClassLoader classLoader = Code_22_AnalysisTest.class.getClassLoader(); Class<?> c = classLoader.loadClass(\\\"cn.ali.jvm.test.C\\\"); // new C(); System.in.read(); } } class C { D d = new D(); } class D { }\"]},\"452\":{\"h\":\"（3）解析\",\"t\":[\"将常量池中的符号引用解析为直接引用\",\"package cn.itcast.jvm.t3.load; /** * 解析的含义 */ public class Load2 { public static void main(String[] args) throws ClassNotFoundException, IOException { ClassLoader classloader = Load2.class.getClassLoader(); // loadClass 方法不会导致类的解析和初始化 Class<?> c = classloader.loadClass(\\\"cn.itcast.jvm.t3.load.C\\\"); // new C(); System.in.read(); } } class C { D d = new D(); } class D { }\"]},\"453\":{\"h\":\"4-3 初始化\"},\"454\":{\"h\":\"（1）<cinit>()v 方法\",\"t\":[\"初始化即调用 \\\\<cinit>()V，虚拟机会保证这个类的【构造方法】的线程安全\"]},\"455\":{\"h\":\"（2）发生的时机\",\"t\":[\"类的初始化的懒惰的，以下情况会初始化：\",\"main 方法所在的类，总会被首先初始化\",\"首次访问这个类的静态变量或静态方法时\",\"子类初始化，如果父类还没初始化，会引发\",\"子类访问父类的静态变量，只会触发父类的初始化\",\"Class.forName\",\"new 会导致初始化\",\"以下情况不会初始化：\",\"访问类的 static ﬁnal 静态常量（基本类型和字符串）\",\"类对象.class 不会触发初始化\",\"创建该类对象的数组\",\"类加载器的.loadClass方法\",\"Class.forName的参数2为false时\",\"验证类是否被初始化，可以看改类的静态代码块是否被执行\",\"这里一个例子来验证：（实验时请先全部注释，每次只执行其中一个）\",\"public class Load3 { static { System.out.println(\\\"main init\\\"); } public static void main(String[] args) throws ClassNotFoundException { // 1. 静态常量（基本类型和字符串）不会触发初始化 System.out.println(B.b); // 2. 类对象.class 不会触发初始化 System.out.println(B.class); // 3. 创建该类的数组不会触发初始化 System.out.println(new B[0]); // 4. 不会初始化类 B，但会加载 B、A ClassLoader cl = Thread.currentThread().getContextClassLoader(); cl.loadClass(\\\"cn.itcast.jvm.t3.B\\\"); // 5. 不会初始化类 B，但会加载 B、A ClassLoader c2 = Thread.currentThread().getContextClassLoader(); Class.forName(\\\"cn.itcast.jvm.t3.B\\\", false, c2); // 1. 首次访问这个类的静态变量或静态方法时 System.out.println(A.a); // 2. 子类初始化，如果父类还没初始化，会引发 System.out.println(B.c); // 3. 子类访问父类静态变量，只触发父类初始化 System.out.println(B.a); // 4. 会初始化类 B，并先初始化类 A Class.forName(\\\"cn.itcast.jvm.t3.B\\\"); } } class A { static int a = 0; static { System.out.println(\\\"a init\\\"); } } class B extends A { final static double b = 5.0; static boolean c = false; static { System.out.println(\\\"b init\\\"); } }\"]},\"456\":{\"h\":\"4）练习\",\"t\":[\"从字节码分析，使用 a，b，c 这三个常量是否会导致 E 初始化\",\"public class Load2 { public static void main(String[] args) { System.out.println(E.a); System.out.println(E.b); // 会导致 E 类初始化，因为 Integer 是包装类 System.out.println(E.c); } } class E { public static final int a = 10; public static final String b = \\\"hello\\\"; public static final Integer c = 20; static { System.out.println(\\\"E cinit\\\"); } }\",\"典型应用 - 完成懒惰初始化单例模式\",\"public class Singleton { private Singleton() { } // 内部类中保存单例 private static class LazyHolder { static final Singleton INSTANCE = new Singleton(); } // 第一次调用 getInstance 方法，才会导致内部类加载和初始化其静态成员 public static Singleton getInstance() { return LazyHolder.INSTANCE; } }\",\"以上的实现特点是：\",\"懒惰实例化\",\"初始化时的线程安全是有保障的\"]},\"457\":{\"h\":\"5.类加载器\",\"t\":[\"类加载器虽然只用于实现类的加载动作，但它在Java程序中起到的作用却远超类加载阶段 对于任意一个类，都必须由加载它的类加载器和这个类本身一起共同确立其在 Java 虚拟机中的唯一性，每一个类加载器，都拥有一个独立的类名称空间。这句话可以表达得更通俗一些：比较两个类是否“相等”，只有在这两个类是由同一个类加载器加载的前提下才有意义，否则，即使这两个类来源于同一个 Class 文件，被同一个 Java 虚拟机加载，只要加载它们的类加载器不同，那这两个类就必定不相等！\",\"以 JDK 8 为例：\",\"名称加载的类说明\",\"名称\",\"加载的类\",\"说明\",\"Bootstrap ClassLoader（启动类加载器）\",\"JAVA_HOME/jre/lib\",\"无法直接访问\",\"Extension ClassLoader(拓展类加载器)\",\"JAVA_HOME/jre/lib/ext\",\"上级为Bootstrap，显示为null\",\"Application ClassLoader(应用程序类加载器)\",\"classpath\",\"上级为Extension\",\"自定义类加载器\",\"自定义\",\"上级为Application\"]},\"458\":{\"h\":\"5.1 启动类的加载器\",\"t\":[\"可通过在控制台输入指令，使得类被启动类加器加载\",\"用 Bootstrap 类加载器加载类：\",\"package cn.itcast.jvm.t3.load; public class F { static { System.out.println(\\\"bootstrap F init\\\"); } } package cn.itcast.jvm.t3.load; public class Load5_1 { public static void main(String[] args) throws ClassNotFoundException { Class<?> aClass = Class.forName(\\\"cn.itcast.jvm.t3.load.F\\\"); System.out.println(aClass.getClassLoader()); } } E:\\\\git\\\\jvm\\\\out\\\\production\\\\jvm>java -Xbootclasspath/a:. cn.itcast.jvm.t3.load.Load5 bootstrap F init null\",\"-Xbootclasspath 表示设置 bootclasspath\",\"其中 /a:. 表示将当前目录追加至 bootclasspath 之后\",\"可以用这个办法替换核心类 \",\"java -Xbootclasspath:<new bootclasspath>\",\"也可以追加 \",\"java -Xbootclasspath/a:<追加路径>（后追加）\",\"java -Xbootclasspath/p:<追加路径>（前追加）\"]},\"459\":{\"h\":\"5.2 扩展类的加载器\",\"t\":[\"如果 classpath 和 JAVA_HOME/jre/lib/ext 下有同名类，加载时会使用拓展类加载器加载。当应用程序类加载器发现拓展类加载器已将该同名类加载过了，则不会再次加载。\",\"package cn.itcast.jvm.t3.load; public class G { static { System.out.println(\\\"classpath G init\\\"); } } classpath G init sun.misc.Launcher$AppClassLoader@18b4aac2 package cn.itcast.jvm.t3.load; public class G { static { System.out.println(\\\"ext G init\\\"); } } E:\\\\git\\\\jvm\\\\out\\\\production\\\\jvm>jar -cvf my.jar cn/itcast/jvm/t3/load/G.class 已添加清单 正在添加: cn/itcast/jvm/t3/load/G.class(输入 = 481) (输出 = 322)(压缩了 33%)\",\"将 jar 包拷贝到 JAVA_HOME/jre/lib/ext\",\"重新执行 Load5_2\",\"输出\",\"ext G init sun.misc.Launcher$ExtClassLoader@29453f44\"]},\"460\":{\"h\":\"5.3 双亲委派模式\",\"t\":[\"当AppClassLoader加载一个class时，它首先不会自己去尝试加载这个类，而是把类加载请求委派给父类加载器ExtClassLoader去完成。\",\"当ExtClassLoader加载一个class时，它首先也不会自己去尝试加载这个类，而是把类加载请求委派给BootStrapClassLoader去完成。\",\"如果BootStrapClassLoader加载失败(例如在$JAVA_HOME/jre/lib里未查找到该class)，会使用ExtClassLoader来尝试加载；\",\"若ExtClassLoader也加载失败，则会使用AppClassLoader来加载，如果AppClassLoader也加载失败，则会报出异常ClassNotFoundException。\",\"所谓的双亲委派，就是指调用类加载器的 loadClass 方法时，查找类的规则\",\"loadClass源码\",\"protected Class<?> loadClass(String name, boolean resolve) throws ClassNotFoundException { synchronized (getClassLoadingLock(name)) { // 首先查找该类是否已经被该类加载器加载过了 Class<?> c = findLoadedClass(name); // 如果没有被加载过 if (c == null) { long t0 = System.nanoTime(); try { // 看是否被它的上级加载器加载过了 Extension 的上级是Bootstarp，但它显示为null if (parent != null) { c = parent.loadClass(name, false); } else { // 看是否被启动类加载器加载过 c = findBootstrapClassOrNull(name); } } catch (ClassNotFoundException e) { // ClassNotFoundException thrown if class not found // from the non-null parent class loader //捕获异常，但不做任何处理 } if (c == null) { // 如果还是没有找到，先让拓展类加载器调用 findClass 方法去找到该类，如果还是没找到，就抛出异常 // 然后让应用类加载器去找 classpath 下找该类 long t1 = System.nanoTime(); c = findClass(name); // 记录时间 sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0); sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1); sun.misc.PerfCounter.getFindClasses().increment(); } } if (resolve) { resolveClass(c); } return c; } }\"]},\"461\":{\"h\":\"5.4 自定义类加载器\",\"t\":[\"使用场景\",\"想加载非 classpath 随意路径中的类文件\",\"通过接口来使用实现，希望解耦时，常用在框架设计\",\"这些类希望予以隔离，不同应用的同名类都可以加载，不冲突，常见于 tomcat 容器\",\"步骤\",\"继承 ClassLoader 父类\",\"要遵从双亲委派机制，重写 ﬁndClass 方法 不是重写 loadClass 方法，否则不会走双亲委派机制\",\"读取类文件的字节码\",\"调用父类的 deﬁneClass 方法来加载类\",\"使用者调用该类加载器的 loadClass 方法\",\"破坏双亲委派模式\",\"双亲委派模型的第一次“被破坏”其实发生在双亲委派模型出现之前——即JDK1.2面世以前的“远古”时代 \",\"建议用户重写findClass()方法，在类加载器中的loadClass()方法中也会调用该方法\",\"双亲委派模型的第二次“被破坏”是由这个模型自身的缺陷导致的 \",\"如果有基础类型又要调用回用户的代码，此时也会破坏双亲委派模式\",\"双亲委派模型的第三次“被破坏”是由于用户对程序动态性的追求而导致的 \",\"这里所说的“动态性”指的是一些非常“热”门的名词：代码热替换（Hot Swap）、模块热部署（Hot Deployment）等\"]},\"462\":{\"h\":\"5.5 线程上下文类加载器\"},\"463\":{\"h\":\"背景\",\"t\":[\"我们在使用 JDBC 时，都需要加载 Driver 驱动，不知道你注意到没有，不写\",\"Class.forName(\\\"com.mysql.jdbc.Driver\\\")\",\"也是可以让 com.mysql.jdbc.Driver 正确加载的，你知道是怎么做的吗？ 让我们追踪一下源码：\",\"public class DriverManager { // 注册驱动的集合 private final static CopyOnWriteArrayList<DriverInfo> registeredDrivers = new CopyOnWriteArrayList<>(); // 初始化驱动 static { loadInitialDrivers(); println(\\\"JDBC DriverManager initialized\\\"); }\",\"先不看别的，看看 DriverManager 的类加载器：\",\"System.out.println(DriverManager.class.getClassLoader());\",\"打印 null，表示它的类加载器是 Bootstrap ClassLoader，会到 JAVA_HOME/jre/lib 下搜索类，但 JAVA_HOME/jre/lib 下显然没有 mysql-connector-java-5.1.47.jar 包，这样问题来了，在 DriverManager 的静态代码块中，怎么能正确加载 com.mysql.jdbc.Driver 呢？\"]},\"464\":{\"h\":\"SPI 服务提供接口\",\"t\":[\"继续看 loadInitialDrivers() 方法：\",\"private static void loadInitialDrivers() { String drivers; try { drivers = AccessController.doPrivileged(new PrivilegedAction<String> () { public String run() { return System.getProperty(\\\"jdbc.drivers\\\"); } }); } catch (Exception ex) { drivers = null; } // 1）使用 ServiceLoader 机制加载驱动，即 SPI AccessController.doPrivileged(new PrivilegedAction<Void>() { public Void run() { ServiceLoader<Driver> loadedDrivers = ServiceLoader.load(Driver.class); Iterator<Driver> driversIterator = loadedDrivers.iterator(); try{ while(driversIterator.hasNext()) { driversIterator.next(); } } catch(Throwable t) { // Do nothing } return null; } }); println(\\\"DriverManager.initialize: jdbc.drivers = \\\" + drivers); // 2）使用 jdbc.drivers 定义的驱动名加载驱动 if (drivers == null || drivers.equals(\\\"\\\")) { return; } String[] driversList = drivers.split(\\\":\\\"); println(\\\"number of Drivers:\\\" + driversList.length); for (String aDriver : driversList) { try { println(\\\"DriverManager.Initialize: loading \\\" + aDriver); // 这里的 ClassLoader.getSystemClassLoader() 就是应用程序类加载器 Class.forName(aDriver, true, ClassLoader.getSystemClassLoader()); } catch (Exception ex) { println(\\\"DriverManager.Initialize: load failed: \\\" + ex); } } }\",\"先看 2）发现它最后是使用 Class.forName 完成类的加载和初始化，关联的是应用程序类加载器，因此 可以顺利完成类加载 再看 1）它就是大名鼎鼎的 Service Provider Interface （SPI） 约定如下，在 jar 包的 META-INF/services 包下，以接口全限定名名为文件，文件内容是实现类名称\",\"image-20240715200831758\"]},\"465\":{\"h\":\"使用\",\"t\":[\"这样就可以使用\",\"ServiceLoader<接口类型> allImpls = ServiceLoader.load(接口类型.class); Iterator<接口类型> iter = allImpls.iterator(); while(iter.hasNext()) { iter.next(); }\",\"来得到实现类，体现的是【面向接口编程+解耦】的思想，在下面一些框架中都运用了此思想：\",\"JDBC\",\"Servlet 初始化器\",\"Spring 容器\",\"Dubbo（对 SPI 进行了扩展）\"]},\"466\":{\"h\":\"原理\",\"t\":[\"接着看 ServiceLoader.load 方法:\",\"public static <S> ServiceLoader<S> load(Class<S> service) { // 获取线程上下文类加载器 ClassLoader cl = Thread.currentThread().getContextClassLoader(); return ServiceLoader.load(service, cl); }\",\"线程上下文类加载器是当前线程使用的类加载器，默认就是应用程序类加载器，它内部又是由 Class.forName 调用了线程上下文类加载器完成类加载，具体代码在 ServiceLoader 的内部类 LazyIterator 中：\",\"private S nextService() { if (!hasNextService()) throw new NoSuchElementException(); String cn = nextName; nextName = null; Class<?> c = null; try { c = Class.forName(cn, false, loader); } catch (ClassNotFoundException x) { fail(service, \\\"Provider \\\" + cn + \\\" not found\\\"); } if (!service.isAssignableFrom(c)) { fail(service, \\\"Provider \\\" + cn + \\\" not a subtype\\\"); } try { S p = service.cast(c.newInstance()); providers.put(cn, p); return p; } catch (Throwable x) { fail(service, \\\"Provider \\\" + cn + \\\" could not be instantiated\\\", x); } throw new Error(); // This cannot happen }\"]},\"467\":{\"h\":\"6、运行期优化\"},\"468\":{\"h\":\"6.1 即时编译\"},\"469\":{\"h\":\"（1）分层编译\",\"t\":[\"JVM 将执行状态分成了 5 个层次：\",\"0层：解释执行，用解释器将字节码翻译为机器码\",\"1层：使用 C1 即时编译器编译执行（不带 proﬁling）\",\"2层：使用 C1 即时编译器编译执行（带基本的profiling）\",\"3层：使用 C1 即时编译器编译执行（带完全的profiling）\",\"4层：使用 C2 即时编译器编译执行\",\"proﬁling 是指在运行过程中收集一些程序执行状态的数据，例如【方法的调用次数】，【循环的 回边次数】等\",\"public class JIT1 { public static void main(String[] args) { for (int i = 0; i < 200; i++) { long start = System.nanoTime(); for (int j = 0; j < 1000; j++) { new Object(); } long end = System.nanoTime(); System.out.printf(\\\"%d\\\\t%d\\\\n\\\",i,(end - start)); } } }\",\"即时编译器（JIT）与解释器的区别：\",\"解释器 \",\"将字节码解释为机器码，下次即使遇到相同的字节码，仍会执行重复的解释\",\"是将字节码解释为针对所有平台都通用的机器码\",\"即时编译器 \",\"将一些字节码编译为机器码，并存入 Code Cache，下次遇到相同的代码，直接执行，无需再编译\",\"根据平台类型，生成平台特定的机器码\",\"对于大部分的不常用的代码，我们无需耗费时间将其编译成机器码，而是采取解释执行的方式运行；另一方面，对于仅占据小部分的热点代码，我们则可以将其编译成机器码，以达到理想的运行速度。 执行效率上简单比较一下 Interpreter < C1 < C2，总的目标是发现热点代码（hotspot名称的由 来），并优化这些热点代码\",\"逃逸分析：\",\"发现新建的对象是否逃逸。可以使用 -XX:- DoEscapeAnalysis 关闭逃逸分析\"]},\"470\":{\"h\":\"（2）方法内联\",\"t\":[\"举个栗子：\",\"private static int square(final int i) { return i * i; }\",\"System.out.println(square(9));\",\"如果发现 square 是热点方法，并且长度不太长时，会进行内联，所谓的内联就是把方法内代码拷贝、 粘贴到调用者的位置：\",\"System.out.println(9 * 9);\",\"还能够进行常量折叠（constant folding）的优化\",\"System.out.println(8);\",\"public class JIT2 { // -XX:+UnlockDiagnosticVMOptions -XX:+PrintInlining （解锁隐藏参数）打印 inlining 信息 // -XX:CompileCommand=dontinline,*JIT2.square 禁止某个方法 inlining // -XX:+PrintCompilation 打印编译信息 public static void main(String[] args) { int x = 0; for (int i = 0; i < 500; i++) { long start = System.nanoTime(); for (int j = 0; j < 1000; j++) { x = square(9); } long end = System.nanoTime(); System.out.printf(\\\"%d\\\\t%d\\\\t%d\\\\n\\\",i,x,(end - start)); } } private static int square(final int i) { return i * i; } }\"]},\"471\":{\"h\":\"（3）字段优化\",\"t\":[\"JMH 基准测试请参考：http://openjdk.java.net/projects/code-tools/jmh/ 创建 maven 工程，添加依赖如下\",\"<dependency> <groupId>org.openjdk.jmh</groupId> <artifactId>jmh-core</artifactId> <version>${jmh.version}</version> </dependency> <dependency> <groupId>org.openjdk.jmh</groupId> <artifactId>jmh-generator-annprocess</artifactId> <version>${jmh.version}</version> <scope>provided</scope> </dependency>\",\"package test; import org.openjdk.jmh.annotations.*; import org.openjdk.jmh.runner.Runner; import org.openjdk.jmh.runner.RunnerException; import org.openjdk.jmh.runner.options.Options; import org.openjdk.jmh.runner.options.OptionsBuilder; import java.util.Random; import java.util.concurrent.ThreadLocalRandom; @Warmup(iterations = 2, time = 1) @Measurement(iterations = 5, time = 1) @State(Scope.Benchmark) public class Benchmark1 { int[] elements = randomInts(1_000); private static int[] randomInts(int size) { Random random = ThreadLocalRandom.current(); int[] values = new int[size]; for (int i = 0; i < size; i++) { values[i] = random.nextInt(); } return values; } @Benchmark public void test1() { for (int i = 0; i < elements.length; i++) { doSum(elements[i]); } } @Benchmark public void test2() { int[] local = this.elements; for (int i = 0; i < local.length; i++) { doSum(local[i]); } } @Benchmark public void test3() { for (int element : elements) { doSum(element); } } static int sum = 0; @CompilerControl(CompilerControl.Mode.INLINE) static void doSum(int x) { sum += x; } public static void main(String[] args) throws RunnerException { Options opt = new OptionsBuilder() .include(Benchmark1.class.getSimpleName()) .forks(1) .build(); new Runner(opt).run(); } }\",\"首先启用 doSum 的方法内联，测试结果如下（每秒吞吐量，分数越高的更好）：\",\"Benchmark Mode Samples Score Score error Units t.Benchmark1.test1 thrpt 5 2420286.539 390747.467 ops/s t.Benchmark1.test2 thrpt 5 2544313.594 91304.136 ops/s t.Benchmark1.test3 thrpt 5 2469176.697 450570.647 ops/s\",\"接下来禁用 doSum 方法内联\",\"@CompilerControl(CompilerControl.Mode.DONT_INLINE) static void doSum(int x) { sum += x; }\",\"测试结果如下：\",\"Benchmark Mode Samples Score Score error Units t.Benchmark1.test1 thrpt 5 296141.478 63649.220 ops/s t.Benchmark1.test2 thrpt 5 371262.351 83890.984 ops/s t.Benchmark1.test3 thrpt 5 368960.847 60163.391 ops/s\",\"分析： 在刚才的示例中，doSum 方法是否内联会影响 elements 成员变量读取的优化： 如果 doSum 方法内联了，刚才的 test1 方法会被优化成下面的样子（伪代码）：\",\"@Benchmark public void test1() { // elements.length 首次读取会缓存起来 -> int[] local for (int i = 0; i < elements.length; i++) { // 后续 999 次 求长度 <- local sum += elements[i]; // 1000 次取下标 i 的元素 <- local } }\",\"可以节省 1999 次 Field 读取操作 但如果 doSum 方法没有内联，则不会进行上面的优化 练习：在内联情况下将 elements 添加 volatile 修饰符，观察测试结果\"]},\"472\":{\"h\":\"6.2 反射优化\",\"t\":[\"public class Reflect1 { public static void foo() { System.out.println(\\\"foo...\\\"); } public static void main(String[] args) throws NoSuchMethodException, InvocationTargetException, IllegalAccessException { Method foo = Demo3.class.getMethod(\\\"foo\\\"); for(int i = 0; i<=16; i++) { foo.invoke(null); } } }\",\"foo.invoke 前面 0 ~ 15 次调用使用的是 MethodAccessor 的 NativeMethodAccessorImpl 实现 invoke 方法源码\",\"import java.lang.reflect.Method; import sun.reflect.misc.ReflectUtil; class NativeMethodAccessorImpl extends MethodAccessorImpl { private final Method method; private DelegatingMethodAccessorImpl parent; private int numInvocations; NativeMethodAccessorImpl(Method method) { this.method = method; } public Object invoke(Object target, Object[] args) throws IllegalArgumentException, InvocationTargetException { // inflationThreshold 膨胀阈值，默认 15 if (++this.numInvocations > ReflectionFactory.inflationThreshold() && !ReflectUtil.isVMAnonymousClass(this.method.getDeclaringClass())) { // 使用 ASM 动态生成的新实现代替本地实现，速度较本地实现快 20 倍左右 MethodAccessorImpl generatedMethodAccessor = (MethodAccessorImpl) (new MethodAccessorGenerator()) .generateMethod( this.method.getDeclaringClass(), this.method.getName(), this.method.getParameterTypes(), this.method.getReturnType(), this.method.getExceptionTypes(), this.method.getModifiers() ); this.parent.setDelegate(generatedMethodAccessor); } // 调用本地实现 return invoke0(this.method, target, args); } void setParent(DelegatingMethodAccessorImpl parent) { this.parent = parent; } private static native Object invoke0(Method method, Object target, Object[] args); }\",\"当调用到第 16 次（从0开始算）时，会采用运行时生成的类代替掉最初的实现，可以通过 debug 得到 类名为 sun.reflect.GeneratedMethodAccessor1 可以使用阿里的 arthas 工具查看：\",\"java -jar arthas-boot.jar\",\"很多人将【java 内存结构】与【java 内存模型】傻傻分不清，【java 内存模型】是 Java Memory Model（JMM）的意思。\",\"简单的说，JMM 定义了一套在多线程读写共享数据时（成员变量、数组）时，对数据的可见性、有序性、和原子性的规则和保障\",\"JMM 即 Java Memory Model，它定义了主存（共享内存）、工作内存（线程私有）抽象概念，底层对应着 CPU 寄存器、缓存、硬件内存、 CPU 指令优化等。 JMM 体现在以下几个方面 \",\"原子性 - 保证指令不会受到线程上下文切换的影响\",\"可见性 - 保证指令不会受 cpu 缓存的影响\",\"有序性 - 保证指令不会受 cpu 指令并行优化的影响\"]},\"473\":{\"h\":\"1. 原子性\"},\"474\":{\"h\":\"1-1 问题解析\",\"t\":[\"提出问题：两个线程对初始值为 0 的静态变量一个做自增，一个做自减，各做 5000 次，结果是 0 吗？\",\"public class Demo1 { static int i = 0; public static void main(String[] args) throws InterruptedException { Thread t1 = new Thread(() -> { for (int j = 0; j < 50000; j++) { i++; } }); Thread t2 = new Thread(() -> { for (int j = 0; j < 50000; j++) { i--; } }); t1.start(); t2.start(); t1.join(); t2.join(); System.out.println(i); } }\",\"以上的结果可能是正数、负数、零。为什么呢？因为 Java 中对静态变量的自增，自减并不是原子操作。\",\"例如对于 i++ 而言（i 为静态变量），实际会产生如下的 JVM 字节码指令：\",\"getstatic i // 获取静态变量i的值 iconst_1 // 准备常量1 iadd // 加法 putstatic i // 将修改后的值存入静态变量i\",\"而对应 i-- 也是类似：\",\"getstatic i // 获取静态变量i的值 iconst_1 // 准备常量1 isub // 减法 putstatic i // 将修改后的值存入静态变量i\",\"而 Java 的内存模型如下，完成静态变量的自增，自减需要在主存和线程内存中进行数据交换：\",\"image-20240715213034845\",\"如果是单线程以上 8 行代码是顺序执行（不会交错）没有问题：\",\"// 假设i的初始值为0 getstatic i // 线程1-获取静态变量i的值 线程内i=0 iconst_1 // 线程1-准备常量1 iadd // 线程1-自增 线程内i=1 putstatic i // 线程1-将修改后的值存入静态变量i 静态变量i=1 getstatic i // 线程1-获取静态变量i的值 线程内i=1 iconst_1 // 线程1-准备常量1 isub // 线程1-自减 线程内i=0 putstatic i // 线程1-将修改后的值存入静态变量i 静态变量i=0\",\"但多线程下这 8 行代码可能交错运行（为什么会交错？思考一下）： 出现负数的情况：\",\"// 假设i的初始值为0 getstatic i // 线程1-获取静态变量i的值 线程内i=0 getstatic i // 线程2-获取静态变量i的值 线程内i=0 iconst_1 // 线程1-准备常量1 iadd // 线程1-自增 线程内i=1 putstatic i // 线程1-将修改后的值存入静态变量i 静态变量i=1 iconst_1 // 线程2-准备常量1 isub // 线程2-自减 线程内i=-1 putstatic i // 线程2-将修改后的值存入静态变量i 静态变量i=-1\",\"出现正数的情况：\",\"// 假设i的初始值为0 getstatic i // 线程1-获取静态变量i的值 线程内i=0 getstatic i // 线程2-获取静态变量i的值 线程内i=0 iconst_1 // 线程1-准备常量1 iadd // 线程1-自增 线程内i=1 iconst_1 // 线程2-准备常量1 isub // 线程2-自减 线程内i=-1 putstatic i // 线程2-将修改后的值存入静态变量i 静态变量i=-1 putstatic i // 线程1-将修改后的值存入静态变量i 静态变量i=1\"]},\"475\":{\"h\":\"1-2 解决方法 -加锁\"},\"476\":{\"h\":\"（1）synchronized（同步关键字）\",\"t\":[\"语法：\",\"synchronized( 对象 ) { 要作为原子操作代码 }\",\"用 synchronized 解决并发问题：\",\"public class Demo1 { static int i = 0; static Object obj = new Object(); public static void main(String[] args) throws InterruptedException { Thread t1 = new Thread(() -> { for (int j = 0; j < 50000; j++) { synchronized (obj) { i++; } } }); Thread t2 = new Thread(() -> { for (int j = 0; j < 50000; j++) { synchronized (obj) { i--; } } }); t1.start(); t2.start(); t1.join(); t2.join(); System.out.println(i);//输出为0 } }\",\"为什么需要这里的 obj 对象呢？\",\"我们可以这样理解：可以把 obj 想象成一个房间，线程 t1，t2 想象成两个人。\",\"当线程 t1 执行到 synchronized(obj) 时就好比 t1 进入了这个房间，并反手锁住了门，在门内执行 count++ 代码。\",\"这时候如果 t2 也运行到了 synchronized(obj) 时，它发现门被锁住了，只能在门外等待。\",\"当 t1 执行完 synchronized{} 块内的代码，这时候才会解开门上的锁，从 obj 房间出来。t2 线程这时才可以进入 obj 房间，反锁住门，执行它的 count-- 代码。\",\"怎么从JVM角度理解呢？（这里引用《Java并发编程的艺术》里的一段话）\",\"从JVM规范中可以看到Synchonized在JVM里的实现原理，JVM基于进入和退出Monitor对象来实现方法同步和代码块同步，但两者的实现细节不一样。代码块同步是使用monitorenter 和monitorexit指令实现的。 monitorenter指令是在编译后插入到同步代码块的开始位置，而monitorexit是插入到方法结束处和异常处，JVM要保证每个monitorenter必须有对应的monitorexit与之配对。任何对象都有一个monitor与之关联，当且一个monitor被持有后，它将处于锁定状态。线程执行到monitorenter 指令时，将会尝试获取对象所对应的monitor的所有权，即尝试获得对象的锁。\"]},\"477\":{\"h\":\"2.可见性\"},\"478\":{\"h\":\"2-1 退不出的循环\",\"t\":[\"先来看一个现象，main 线程对 run 变量的修改对于 t 线程不可见，导致了 t 线程无法停止：\",\"static boolean run = true; public static void main(String[] args) throws InterruptedException { Thread t = new Thread(()->{ while(run){ // .... } }); t.start(); Thread.sleep(1000); run = false; // 线程t不会如预想的停下来 }\",\"为什么会这样？\",\"初始状态， t 线程刚开始从主内存读取了 run 的值到工作内存。\",\"image-20240715222147607\",\"因为 t 线程要频繁从主内存中读取 run 的值，JIT 编译器会将 run 的值缓存至自己工作内存中的高速缓存中，减少对主存中 run 的访问，提高效率\",\"image-20240715222337696\",\"1 秒之后，main 线程修改了 run 的值，并同步至主存，而 t 是从自己工作内存中的高速缓存中读取这个变量的值，结果永远是旧值\",\"image-20240715222432570\"]},\"479\":{\"h\":\"2-2 解决办法\"},\"480\":{\"h\":\"（1）volatile（易变关键字）\",\"t\":[\"它可以用来修饰成员变量和静态成员变量，他可以避免线程从自己的工作缓存中查找变量的值，必须到主存中获取它的值，线程操作 volatile 变量都是直接操作主存，保证了共享变量的可见性，但不能保证原子性\",\"public class Demo1 { volatile static boolean run = true; public static void main(String[] args) throws InterruptedException { Thread t = new Thread(() -> { while (run) { // .... } }); t.start(); Thread.sleep(1000); run = false; // 线程t如预想的停下来 } }\",\"注意：\",\"synchronized 语句块既可以保证代码块的原子性，也同时保证代码块内变量的可见性。但 缺点是synchronized是属于重量级操作，性能相对更低\",\"如果在前面示例的死循环中加入 System.out.println() 会发现即使不加 volatile 修饰符，线程 t 也 能正确看到对 run 变量的修改了，想一想为什么？\",\"进入println源码：\",\"public void println(int x) { synchronized (this) { print(x); newLine(); } }\",\"可以看出加了synchronized，保证了每次run变量都会从主存中获取\"]},\"481\":{\"h\":\"2-3 可见性\",\"t\":[\"前面例子体现的实际就是可见性，它保证的是在多个线程之间，一个线程对 volatile 变量的修改对另一 个线程可见， 不能保证原子性，仅用在一个写线程，多个读线程的情况： 上例从字节码理解是这样的：\",\"getstatic run // 线程 t 获取 run true getstatic run // 线程 t 获取 run true getstatic run // 线程 t 获取 run true getstatic run // 线程 t 获取 run true putstatic run // 线程 main 修改 run 为 false， 仅此一次 getstatic run // 线程 t 获取 run false\",\"比较一下之前我们将线程安全时举的例子：两个线程一个 i++ 一个 i-- ，只能保证看到最新值，不能解 决指令交错\",\"// 假设i的初始值为0 getstatic i // 线程1-获取静态变量i的值 线程内i=0 getstatic i // 线程2-获取静态变量i的值 线程内i=0 iconst_1 // 线程1-准备常量1 iadd // 线程1-自增 线程内i=1 putstatic i // 线程1-将修改后的值存入静态变量i 静态变量i=1 iconst_1 // 线程2-准备常量1 isub // 线程2-自减 线程内i=-1 putstatic i // 线程2-将修改后的值存入静态变量i 静态变量i=-1\",\"虚拟机调优\",\"参考文章：https://blog.csdn.net/qq_45966440/article/details/120824295?spm=1001.2014.3001.5502\",\"参考文章：https://blog.csdn.net/weixin_50280576/article/details/113742011\",\"参考视频：https://www.bilibili.com/video/BV1yE411Z7AP?p=19&spm_id_from=pageDriver&vd_source=cd81f8812505504b960957155cd81114\"]},\"482\":{\"c\":[\"JVM\"]},\"483\":{\"c\":[\"jvm\"]},\"484\":{\"h\":\"kafka概念\",\"t\":[\"kafka概念\",\"kafka是一款消息队列，消息队列有三个作用，削峰，解耦，异步。\",\"kafka常用的组件\",\"点对点模型（P2P）：P2P模型是基于队列的，消息生产者将数据发送到消息队列中，消息消费者从消息队列中接收消息。因为队列的存在，消息的异步传输成为可能。P2P模型的规定就是每一个消息数据，只有一个消费者，当发送者发送消息以后，不管接收者有没有运行都不影响消息发布到队列中。接收者在成功接收消息后会向发送者发送接收成功的消息。\",\"发布/订阅模型（PS）：所谓得发布订阅模型就是事先将传输的数据进行分类，我们管这个数据的分类称之为主题（Topic）。也就是说，生产者发送消息时，会根据主题进行发送。比如咱们的消息中有一个分类是NBA，那么生产者在生产消息时，就可以将NBA篮球消息数据发送到NBA主题中，这样，对NBA消息主题感兴趣的消费者就可以申请订阅NBA主题，然后从该主题中获取消息。这样，也就是说一个消息，是允许被多个消费者同时消费的。这里生产者发送消息，我们称之为发布消息，而消费者从主题中获取消息，我们就称之为订阅消息。Kafka采用就是这种模型。\",\"生产者-消费者模式是通过一个容器来解决生产者和消费者的强耦合问题。生产者和消费者彼此之间不直接通信，而通过阻塞队列来进行通信，所以生产者生产完数据之后不用等待消费者处理，直接扔给阻塞队列，消费者不找生产者要数据，而是直接从阻塞队列里取，阻塞队列就相当于一个消息缓冲区，平衡了生产者和消费者的处理能力。在数据传输过程中，起到了一个削弱峰值的作用，也就是我们经常说到的削峰。\",\"主题\",\"生产者 - 生产消息\",\"消费者 - 消费消息\",\"可靠性 - ACK应答机制\",\"重复消费 - 业务幂等和消息去重\",\"Producer消息重复和消息丢失的原因，主要就是kafka为了提高数据可靠性所提供的重试机制，如果禁用重试机制，那么一旦数据发送失败，数据就丢失了。而数据重复，恰恰是因为开启重试机制后，如果因为网络阻塞或不稳定，导致数据重新发送。那么数据就有可能是重复的。所以kafka提供了幂等性操作解决数据重复，并且幂等性操作要求必须开启重试功能和ACK取值为-1，这样，数据就不会丢失了。\",\"kafka提供的幂等性操作只能保证同一个生产者会话中同一个分区中的数据不会重复，一旦数据发送过程中，生产者对象重启，那么幂等性操作就会失效。那么此时就需要使用Kafka的事务功能来解决跨会话的幂等性操作。但是跨分区的幂等性操作是无法实现的。\",\"有序性 - 全局顺序 局部顺序\",\"积压 - 消费者扩容\",\"集群\",\"主从同步\",\"分片存储（副本机制）\",\"选举（故障自动转移）\"]},\"485\":{\"c\":[\"kafka概念\"]},\"486\":{\"c\":[\"kafka概念\",\"消息队列\"]},\"487\":{\"h\":\"go-简单使用elasticsearch\",\"t\":[\"go-简单使用elasticsearch\",\"go-es客户端：github.com/elastic/go-elasticsearch/v8\",\"执行以下命令安装v8版本的 go 客户端。\",\"go get github.com/elastic/go-elasticsearch/v8@latest\",\"导入依赖。\",\"import \\\"github.com/elastic/go-elasticsearch/v8\\\"\",\"可以根据实际需求导入不同的客户端版本，也支持在一个项目中导入不同的客户端版本。\",\"import ( elasticsearch7 \\\"github.com/elastic/go-elasticsearch/v7\\\" elasticsearch8 \\\"github.com/elastic/go-elasticsearch/v8\\\") // ... es7, _ := elasticsearch7.NewDefaultClient() es8, _ := elasticsearch8.NewDefaultClient()\"]},\"488\":{\"h\":\"连接 ES\",\"t\":[\"指定要连接 ES 的相关配置，并创建客户端连接。\",\"// ES 配置 cfg := elasticsearch.Config{ Addresses: []string{ \\\"http://localhost:9200\\\", }, } // 创建客户端连接 client, err := elasticsearch.NewTypedClient(cfg) if err != nil { fmt.Printf(\\\"elasticsearch.NewTypedClient failed, err:%v\\\\n\\\", err) return}\",\"创建索引：\",\"// createIndex 创建索引 func createIndex(client *elasticsearch.TypedClient) { resp, err := client.Indices.Create(\\\"my-review-1\\\").Do(context.Background()) if err != nil { fmt.Printf(\\\"create index failed, err:%v\\\\n\\\", err) return } fmt.Printf(\\\"index:%#v\\\\n\\\", resp.Index) }\"]},\"489\":{\"c\":[\"Go\"]},\"490\":{\"c\":[\"elasticsearch\"]},\"491\":{\"h\":\"go-简单使用elasticsearch\",\"t\":[\"go-简单使用elasticsearch\",\"go-es客户端：github.com/elastic/go-elasticsearch/v8\",\"执行以下命令安装v8版本的 go 客户端。\",\"go get github.com/elastic/go-elasticsearch/v8@latest\",\"导入依赖。\",\"import \\\"github.com/elastic/go-elasticsearch/v8\\\"\",\"可以根据实际需求导入不同的客户端版本，也支持在一个项目中导入不同的客户端版本。\",\"import ( elasticsearch7 \\\"github.com/elastic/go-elasticsearch/v7\\\" elasticsearch8 \\\"github.com/elastic/go-elasticsearch/v8\\\") // ... es7, _ := elasticsearch7.NewDefaultClient() es8, _ := elasticsearch8.NewDefaultClient()\"]},\"492\":{\"h\":\"连接 ES\",\"t\":[\"指定要连接 ES 的相关配置，并创建客户端连接。\",\"// ES 配置 cfg := elasticsearch.Config{ Addresses: []string{ \\\"http://localhost:9200\\\", }, } // 创建客户端连接 client, err := elasticsearch.NewTypedClient(cfg) if err != nil { fmt.Printf(\\\"elasticsearch.NewTypedClient failed, err:%v\\\\n\\\", err) return}\",\"创建索引：\",\"// createIndex 创建索引 func createIndex(client *elasticsearch.TypedClient) { resp, err := client.Indices.Create(\\\"my-review-1\\\").Do(context.Background()) if err != nil { fmt.Printf(\\\"create index failed, err:%v\\\\n\\\", err) return } fmt.Printf(\\\"index:%#v\\\\n\\\", resp.Index) }\"]},\"493\":{\"c\":[\"Go\"]},\"494\":{\"c\":[\"elasticsearch\"]},\"495\":{\"h\":\"go-简单使用elasticsearch\",\"t\":[\"go-简单使用elasticsearch\",\"go-es客户端：github.com/elastic/go-elasticsearch/v8\",\"执行以下命令安装v8版本的 go 客户端。\",\"go get github.com/elastic/go-elasticsearch/v8@latest\",\"导入依赖。\",\"import \\\"github.com/elastic/go-elasticsearch/v8\\\"\",\"可以根据实际需求导入不同的客户端版本，也支持在一个项目中导入不同的客户端版本。\",\"import ( elasticsearch7 \\\"github.com/elastic/go-elasticsearch/v7\\\" elasticsearch8 \\\"github.com/elastic/go-elasticsearch/v8\\\") // ... es7, _ := elasticsearch7.NewDefaultClient() es8, _ := elasticsearch8.NewDefaultClient()\"]},\"496\":{\"h\":\"连接 ES\",\"t\":[\"指定要连接 ES 的相关配置，并创建客户端连接。\",\"// ES 配置 cfg := elasticsearch.Config{ Addresses: []string{ \\\"http://localhost:9200\\\", }, } // 创建客户端连接 client, err := elasticsearch.NewTypedClient(cfg) if err != nil { fmt.Printf(\\\"elasticsearch.NewTypedClient failed, err:%v\\\\n\\\", err) return}\",\"创建索引：\",\"// createIndex 创建索引 func createIndex(client *elasticsearch.TypedClient) { resp, err := client.Indices.Create(\\\"my-review-1\\\").Do(context.Background()) if err != nil { fmt.Printf(\\\"create index failed, err:%v\\\\n\\\", err) return } fmt.Printf(\\\"index:%#v\\\\n\\\", resp.Index) }\"]},\"497\":{\"c\":[\"Go\"]},\"498\":{\"c\":[\"elasticsearch\"]},\"499\":{\"h\":\"go-简单使用elasticsearch\",\"t\":[\"go-简单使用elasticsearch\",\"go-es客户端：github.com/elastic/go-elasticsearch/v8\",\"执行以下命令安装v8版本的 go 客户端。\",\"go get github.com/elastic/go-elasticsearch/v8@latest\",\"导入依赖。\",\"import \\\"github.com/elastic/go-elasticsearch/v8\\\"\",\"可以根据实际需求导入不同的客户端版本，也支持在一个项目中导入不同的客户端版本。\",\"import ( elasticsearch7 \\\"github.com/elastic/go-elasticsearch/v7\\\" elasticsearch8 \\\"github.com/elastic/go-elasticsearch/v8\\\") // ... es7, _ := elasticsearch7.NewDefaultClient() es8, _ := elasticsearch8.NewDefaultClient()\"]},\"500\":{\"h\":\"连接 ES\",\"t\":[\"指定要连接 ES 的相关配置，并创建客户端连接。\",\"// ES 配置 cfg := elasticsearch.Config{ Addresses: []string{ \\\"http://localhost:9200\\\", }, } // 创建客户端连接 client, err := elasticsearch.NewTypedClient(cfg) if err != nil { fmt.Printf(\\\"elasticsearch.NewTypedClient failed, err:%v\\\\n\\\", err) return}\",\"创建索引：\",\"// createIndex 创建索引 func createIndex(client *elasticsearch.TypedClient) { resp, err := client.Indices.Create(\\\"my-review-1\\\").Do(context.Background()) if err != nil { fmt.Printf(\\\"create index failed, err:%v\\\\n\\\", err) return } fmt.Printf(\\\"index:%#v\\\\n\\\", resp.Index) }\"]},\"501\":{\"c\":[\"Go\"]},\"502\":{\"c\":[\"elasticsearch\"]},\"503\":{\"h\":\"go-简单使用elasticsearch\",\"t\":[\"go-简单使用elasticsearch\",\"go-es客户端：github.com/elastic/go-elasticsearch/v8\",\"执行以下命令安装v8版本的 go 客户端。\",\"go get github.com/elastic/go-elasticsearch/v8@latest\",\"导入依赖。\",\"import \\\"github.com/elastic/go-elasticsearch/v8\\\"\",\"可以根据实际需求导入不同的客户端版本，也支持在一个项目中导入不同的客户端版本。\",\"import ( elasticsearch7 \\\"github.com/elastic/go-elasticsearch/v7\\\" elasticsearch8 \\\"github.com/elastic/go-elasticsearch/v8\\\") // ... es7, _ := elasticsearch7.NewDefaultClient() es8, _ := elasticsearch8.NewDefaultClient()\"]},\"504\":{\"h\":\"连接 ES\",\"t\":[\"指定要连接 ES 的相关配置，并创建客户端连接。\",\"// ES 配置 cfg := elasticsearch.Config{ Addresses: []string{ \\\"http://localhost:9200\\\", }, } // 创建客户端连接 client, err := elasticsearch.NewTypedClient(cfg) if err != nil { fmt.Printf(\\\"elasticsearch.NewTypedClient failed, err:%v\\\\n\\\", err) return}\",\"创建索引：\",\"// createIndex 创建索引 func createIndex(client *elasticsearch.TypedClient) { resp, err := client.Indices.Create(\\\"my-review-1\\\").Do(context.Background()) if err != nil { fmt.Printf(\\\"create index failed, err:%v\\\\n\\\", err) return } fmt.Printf(\\\"index:%#v\\\\n\\\", resp.Index) }\"]},\"505\":{\"c\":[\"Go\"]},\"506\":{\"c\":[\"elasticsearch\"]},\"507\":{\"h\":\"go-简单使用elasticsearch\",\"t\":[\"go-简单使用elasticsearch\",\"go-es客户端：github.com/elastic/go-elasticsearch/v8\",\"执行以下命令安装v8版本的 go 客户端。\",\"go get github.com/elastic/go-elasticsearch/v8@latest\",\"导入依赖。\",\"import \\\"github.com/elastic/go-elasticsearch/v8\\\"\",\"可以根据实际需求导入不同的客户端版本，也支持在一个项目中导入不同的客户端版本。\",\"import ( elasticsearch7 \\\"github.com/elastic/go-elasticsearch/v7\\\" elasticsearch8 \\\"github.com/elastic/go-elasticsearch/v8\\\") // ... es7, _ := elasticsearch7.NewDefaultClient() es8, _ := elasticsearch8.NewDefaultClient()\"]},\"508\":{\"h\":\"连接 ES\",\"t\":[\"指定要连接 ES 的相关配置，并创建客户端连接。\",\"// ES 配置 cfg := elasticsearch.Config{ Addresses: []string{ \\\"http://localhost:9200\\\", }, } // 创建客户端连接 client, err := elasticsearch.NewTypedClient(cfg) if err != nil { fmt.Printf(\\\"elasticsearch.NewTypedClient failed, err:%v\\\\n\\\", err) return}\",\"创建索引：\",\"// createIndex 创建索引 func createIndex(client *elasticsearch.TypedClient) { resp, err := client.Indices.Create(\\\"my-review-1\\\").Do(context.Background()) if err != nil { fmt.Printf(\\\"create index failed, err:%v\\\\n\\\", err) return } fmt.Printf(\\\"index:%#v\\\\n\\\", resp.Index) }\"]},\"509\":{\"c\":[\"Go\"]},\"510\":{\"c\":[\"elasticsearch\"]},\"511\":{\"h\":\"Redis简介\",\"t\":[\"Redis入门，了解Redis是什么。\",\"Redis（Remote Dictionary Server）是一个开源的、基于内存的键值存储数据库。它支持多种类型的数据结构，如字符串、哈希、列表、集合、有序集合等。\"]},\"512\":{\"h\":\"已经有了MySQL数据库，为什么还需要Redis\",\"t\":[\"刚开始学习的时候，以为在MySQL和SQLserver中任选一种就可以了，到后面才知道不同场景需要选用不同的数据库。\",\"MySQL是关系型数据库，存储在磁盘，从这些特点就知道MySQL肯定有它处理不了的场景。比如它无法处理非关系型的数据，存储在磁盘影响存取速度。这样就需要用上其他的数据库了，比如Redis数据库。\",\"Redis（Remote Dictionary Server）是一个开源的、基于内存的键值存储数据库。它支持多种类型的数据结构，如字符串、哈希、列表、集合、有序集合等。\",\"从字面上来看，基于内存，键值对，支持多种数据类型数据库，从这些特点就可以知道Redis应该应用在哪里场景\",\"基于内存能够提供非常高的读写速度，用在需要高速读取的场景。\",\"键值存储，就是key-value存储\",\"支持多种类型的数据结构\",\"在学习的过程，应该多看看官方文档再结合其他人的理解来学。\",\"官网地址：https://redis.io/\",\"数据类型：https://redis.io/docs/latest/develop/data-types/\",\"image-20240716184046490\",\"从官网的文档来看，有Strings，JSON，Lists，Sets，Hashes，Sorted sets，Streams，Geospatial，BitMaps，Bitfields，Probablistic，Time series类型。\"]},\"513\":{\"h\":\"String 类型\",\"t\":[\"缓存对象：可以将序列化后的对象存储为字符串，用于快速检索。\",\"常规计数：如网站访问量、用户点赞数等，通过原子操作实现计数。\",\"分布式锁：使用Redis的SETNX命令实现分布式锁，确保在分布式系统中某个操作只执行一次。\",\"共享 session 信息：在分布式系统中，可以用String类型存储用户会话信息。\"]},\"514\":{\"h\":\"List 类型\",\"t\":[\"消息队列\",\"：利用List的LPUSH和RPOP操作实现消息队列。但确实存在以下问题：\",\"生产者需要自行实现全局唯一 ID：因为没有内置的唯一ID生成机制。\",\"不能以消费组形式消费数据：所有消费者共享一个消息队列，不支持多消费者消费同一消息的不同副本。\"]},\"515\":{\"h\":\"Set 类型\",\"t\":[\"聚合计算：利用Set的集合操作实现并集、交集、差集等计算，适用于以下场景： \",\"点赞：存储点赞用户集合，计算共同点赞。\",\"共同关注：存储用户关注集合，计算共同关注。\",\"抽奖活动：存储参与用户集合，进行抽奖。\"]},\"516\":{\"h\":\"Hash 类型\",\"t\":[\"缓存对象：将对象的字段映射到哈希表的字段，方便检索和更新。\",\"购物车：存储用户购物车中的商品信息，每个商品作为一个字段。\"]},\"517\":{\"h\":\"Zset 类型Sorted sets\",\"t\":[\"排序场景：利用有序集合的排序功能，适用于以下场景： \",\"排行榜：根据用户分数进行排序。\",\"电话和姓名排序：根据特定字段排序。\"]},\"518\":{\"h\":\"\",\"t\":[\"消息队列：相比于List，Stream提供了以下特性： \",\"自动生成全局唯一消息ID：简化了生产者的ID生成工作。\",\"支持以消费组形式消费数据：允许不同的消费者组消费相同消息的不同副本，提高了消息队列的可用性和灵活性。\"]},\"519\":{\"h\":\"\",\"t\":[\"存储地理位置信息：如打车软件中记录司机和乘客的位置。\",\"命令 \",\"GEOADD：添加一个地理空间信息，包含：经度（longitude）、纬度（latitude）、值（member）\",\"GEODIST：计算指定的两个点之间的距离并返回\",\"GEOHASH：将指定member的坐标转为hash字符串形式并返回\",\"GEOPOS：返回指定member的坐标\",\"GEORADIUS：指定圆心、半径，找到该圆内包含的所有member，并按照与圆心之间的距离排序后返回。6.以后已废弃\",\"GEOSEARCH：在指定范围内搜索member，并按照与指定点之间的距离排序后返回。范围可以是圆形或矩形。6.2.新功能\",\"GEOSEARCHSTORE：与GEOSEARCH功能一致，不过可以把结果存储到一个指定的key。 6.2.新功能\"]},\"520\":{\"h\":\"\",\"t\":[\"二值状态统计的场景 \",\"签到：记录用户每天的签到状态。\",\"判断用户登录状态：记录用户登录情况。\",\"连续签到用户总数：统计连续签到的用户数量。\"]},\"521\":{\"h\":\"\",\"t\":[\"是Redis 3.2版本引入的一个功能，它允许用户在同一个二进制位序列中存储多个整数和位字段，并对它们进行操作。\",\"应用场景：\",\"紧凑存储：当需要存储多个布尔值或小的整数时，Bitfields可以非常紧凑地存储这些信息，节省空间。\",\"状态标志：可以用单个位来表示对象的状态，如在线/离线、激活/未激活等。\",\"权限控制：存储用户或角色的权限位字段，通过位运算快速检查权限。\",\"计数器：用于有限的计数场景，如每日访问次数限制。\"]},\"522\":{\"h\":\"Probabilistic\",\"t\":[\"HyperLogLog HyperLogLog 是一种估计集合基数的概率数据结构。\",\"Bloom filters 布隆过滤器是一种概率数据结构，用于检查集合中某个元素的存在\",\"Cuckoo filters Cuckoo过滤器是一种概率数据结构，用于检查集合中元素的存在\",\"t-digest t-digest 是一种概率数据结构，可让您估计数据流的百分位数。\",\"Top-K Top-K 是一种概率数据结构，可让您找到数据流中最常见的项目。\",\"Count-min sketch Count-min sketch 是一种概率数据结构，用于估计数据流中元素的频率。\",\"configuration parameters RedisBloom支持多个模块配置参数。所有这些参数只能在加载时设置。\",\"Redis支持几种概率性数据结构，如HyperLogLog和布隆过滤器（Bloom Filter）。\",\"应用场景：\",\"HyperLogLog： \",\"基数统计：用于估计集合中不同元素的个数，如网页的独立访客数（UV）。\",\"大数据去重：在处理大量数据时，使用HyperLogLog进行高效的去重。\",\"Bloom Filter（通常通过Redis模块如RedisBloom实现）： \",\"快速存在性检查：用于检查一个元素是否可能存在于集合中，适用于大量数据的快速查询。\",\"缓存穿透防止：防止查询不存在的数据导致的缓存穿透问题。\"]},\"523\":{\"h\":\"Time Series\",\"t\":[\"虽然Redis本身不直接支持时间序列数据结构，但是可以通过Redis的数据结构和一些模块来实现时间序列数据的存储和分析。\",\"应用场景：\",\"时间序列数据存储：使用Redis的Sorted Sets或Lists来存储时间戳和相关数据，如股票价格、传感器读数。\",\"实时分析：利用Redis的高速读取特性，进行实时数据分析，如实时监控和报警系统。\",\"数据聚合：通过Lua脚本在Redis中执行数据聚合操作，如计算时间窗口内的平均值、最大值、最小值。\",\"要使用第三方中间件时，都要使用客户端，比如ES，MySQL，MQ，然后用客户端去操作。各种语言都有封装好的客户端库。java有Jedis，Lettuce。\",\"使用步骤：创建客户端，连接，使用。其中创建客户端时可以指定连接参数。\"]},\"524\":{\"h\":\"java\"},\"525\":{\"h\":\"Jedis\",\"t\":[\"要将 Jedis 其作为依赖项包含在应用程序中，请编辑依赖项文件，如下所示。\",\"如果你使用Maven：\",\"<dependency> <groupId>redis.clients</groupId> <artifactId>jedis</artifactId> <version>5.1.2</version> </dependency>\",\"JedisPooled jedis = new JedisPooled(\\\"localhost\\\", 6379); jedis.set(\\\"foo\\\", \\\"bar\\\"); System.out.println(jedis.get(\\\"foo\\\")); // prints \\\"bar\\\"\"]},\"526\":{\"h\":\"Lettuce\",\"t\":[\"要将 Lettuce 作为依赖项包含在您的应用程序中，请编辑相应的依赖项文件，如下所示。\",\"如果您使用 Maven，请将以下依赖项添加到您的pom.xml：\",\"<dependency> <groupId>io.lettuce</groupId> <artifactId>lettuce-core</artifactId> <version>6.3.2.RELEASE</version> <!-- Check for the latest version on Maven Central --> </dependency>\",\" RedisClient redisClient = RedisClient.create(\\\"redis://localhost:6379\\\"); try (StatefulRedisConnection<String, String> connection = redisClient.connect()) { RedisAsyncCommands<String, String> asyncCommands = connection.async(); // Asynchronously store & retrieve a simple string asyncCommands.set(\\\"foo\\\", \\\"bar\\\").get(); System.out.println(asyncCommands.get(\\\"foo\\\").get()); // prints bar\"]},\"527\":{\"h\":\"达人探店-发布探店笔记\",\"t\":[\"发布探店笔记\",\"探店笔记类似点评网站的评价，往往是图文结合。对应的表有两个： tb_blog：探店笔记表，包含笔记中的标题、文字、图片等 tb_blog_comments：其他用户对探店笔记的评价\",\"具体发布流程\",\"1653578992639\",\"上传接口\",\"@Slf4j @RestController @RequestMapping(\\\"upload\\\") public class UploadController { @PostMapping(\\\"blog\\\") public Result uploadImage(@RequestParam(\\\"file\\\") MultipartFile image) { try { // 获取原始文件名称 String originalFilename = image.getOriginalFilename(); // 生成新文件名 String fileName = createNewFileName(originalFilename); // 保存文件 image.transferTo(new File(SystemConstants.IMAGE_UPLOAD_DIR, fileName)); // 返回结果 log.debug(\\\"文件上传成功，{}\\\", fileName); return Result.ok(fileName); } catch (IOException e) { throw new RuntimeException(\\\"文件上传失败\\\", e); } } }\",\"注意：同学们在操作时，需要修改SystemConstants.IMAGE_UPLOAD_DIR 自己图片所在的地址，在实际开发中图片一般会放在nginx上或者是云存储上。\",\"BlogController\",\"@RestController @RequestMapping(\\\"/blog\\\") public class BlogController { @Resource private IBlogService blogService; @PostMapping public Result saveBlog(@RequestBody Blog blog) { //获取登录用户 UserDTO user = UserHolder.getUser(); blog.setUpdateTime(user.getId()); //保存探店博文 blogService.saveBlog(blog); //返回id return Result.ok(blog.getId()); } }\"]},\"528\":{\"h\":\"达人探店-查看探店笔记\",\"t\":[\"实现查看发布探店笔记的接口\",\"1653579931626\",\"实现代码：\",\"BlogServiceImpl\",\"@Override public Result queryBlogById(Long id) { // 1.查询blog Blog blog = getById(id); if (blog == null) { return Result.fail(\\\"笔记不存在！\\\"); } // 2.查询blog有关的用户 queryBlogUser(blog); return Result.ok(blog); }\"]},\"529\":{\"h\":\"达人探店-点赞功能\",\"t\":[\"初始代码\",\"@GetMapping(\\\"/likes/{id}\\\") public Result queryBlogLikes(@PathVariable(\\\"id\\\") Long id) { //修改点赞数量 blogService.update().setSql(\\\"liked = liked +1 \\\").eq(\\\"id\\\",id).update(); return Result.ok(); }\",\"问题分析：这种方式会导致一个用户无限点赞，明显是不合理的\",\"造成这个问题的原因是，我们现在的逻辑，发起请求只是给数据库+1，所以才会出现这个问题\",\"1653581590453\",\"完善点赞功能\",\"需求：\",\"同一个用户只能点赞一次，再次点击则取消点赞\",\"如果当前用户已经点赞，则点赞按钮高亮显示（前端已实现，判断字段Blog类的isLike属性）\",\"实现步骤：\",\"给Blog类中添加一个isLike字段，标示是否被当前用户点赞\",\"修改点赞功能，利用Redis的set集合判断是否点赞过，未点赞过则点赞数+1，已点赞过则点赞数-1\",\"修改根据id查询Blog的业务，判断当前登录用户是否点赞过，赋值给isLike字段\",\"修改分页查询Blog业务，判断当前登录用户是否点赞过，赋值给isLike字段\",\"为什么采用set集合：\",\"因为我们的数据是不能重复的，当用户操作过之后，无论他怎么操作，都是\",\"具体步骤：\",\"1、在Blog 添加一个字段\",\"@TableField(exist = false) private Boolean isLike;\",\"2、修改代码\",\" @Override public Result likeBlog(Long id){ // 1.获取登录用户 Long userId = UserHolder.getUser().getId(); // 2.判断当前登录用户是否已经点赞 String key = BLOG_LIKED_KEY + id; Boolean isMember = stringRedisTemplate.opsForSet().isMember(key, userId.toString()); if(BooleanUtil.isFalse(isMember)){ //3.如果未点赞，可以点赞 //3.1 数据库点赞数+1 boolean isSuccess = update().setSql(\\\"liked = liked + 1\\\").eq(\\\"id\\\", id).update(); //3.2 保存用户到Redis的set集合 if(isSuccess){ stringRedisTemplate.opsForSet().add(key,userId.toString()); } }else{ //4.如果已点赞，取消点赞 //4.1 数据库点赞数-1 boolean isSuccess = update().setSql(\\\"liked = liked - 1\\\").eq(\\\"id\\\", id).update(); //4.2 把用户从Redis的set集合移除 if(isSuccess){ stringRedisTemplate.opsForSet().remove(key,userId.toString()); } }\"]},\"530\":{\"h\":\"达人探店-点赞排行榜\",\"t\":[\"在探店笔记的详情页面，应该把给该笔记点赞的人显示出来，比如最早点赞的TOP5，形成点赞排行榜：\",\"之前的点赞是放到set集合，但是set集合是不能排序的，所以这个时候，咱们可以采用一个可以排序的set集合，就是咱们的sortedSet\",\"1653805077118\",\"我们接下来来对比一下这些集合的区别是什么\",\"所有点赞的人，需要是唯一的，所以我们应当使用set或者是sortedSet\",\"其次我们需要排序，就可以直接锁定使用sortedSet啦\",\"1653805203758\",\"修改代码\",\"BlogServiceImpl\",\"点赞逻辑代码\",\" @Override public Result likeBlog(Long id) { // 1.获取登录用户 Long userId = UserHolder.getUser().getId(); // 2.判断当前登录用户是否已经点赞 String key = BLOG_LIKED_KEY + id; Double score = stringRedisTemplate.opsForZSet().score(key, userId.toString()); if (score == null) { // 3.如果未点赞，可以点赞 // 3.1.数据库点赞数 + 1 boolean isSuccess = update().setSql(\\\"liked = liked + 1\\\").eq(\\\"id\\\", id).update(); // 3.2.保存用户到Redis的set集合 zadd key value score if (isSuccess) { stringRedisTemplate.opsForZSet().add(key, userId.toString(), System.currentTimeMillis()); } } else { // 4.如果已点赞，取消点赞 // 4.1.数据库点赞数 -1 boolean isSuccess = update().setSql(\\\"liked = liked - 1\\\").eq(\\\"id\\\", id).update(); // 4.2.把用户从Redis的set集合移除 if (isSuccess) { stringRedisTemplate.opsForZSet().remove(key, userId.toString()); } } return Result.ok(); } private void isBlogLiked(Blog blog) { // 1.获取登录用户 UserDTO user = UserHolder.getUser(); if (user == null) { // 用户未登录，无需查询是否点赞 return; } Long userId = user.getId(); // 2.判断当前登录用户是否已经点赞 String key = \\\"blog:liked:\\\" + blog.getId(); Double score = stringRedisTemplate.opsForZSet().score(key, userId.toString()); blog.setIsLike(score != null); }\",\"点赞列表查询列表\",\"BlogController\",\"@GetMapping(\\\"/likes/{id}\\\") public Result queryBlogLikes(@PathVariable(\\\"id\\\") Long id) { return blogService.queryBlogLikes(id); }\",\"BlogService\",\"@Override public Result queryBlogLikes(Long id) { String key = BLOG_LIKED_KEY + id; // 1.查询top5的点赞用户 zrange key 0 4 Set<String> top5 = stringRedisTemplate.opsForZSet().range(key, 0, 4); if (top5 == null || top5.isEmpty()) { return Result.ok(Collections.emptyList()); } // 2.解析出其中的用户id List<Long> ids = top5.stream().map(Long::valueOf).collect(Collectors.toList()); String idStr = StrUtil.join(\\\",\\\", ids); // 3.根据用户id查询用户 WHERE id IN ( 5 , 1 ) ORDER BY FIELD(id, 5, 1) List<UserDTO> userDTOS = userService.query() .in(\\\"id\\\", ids).last(\\\"ORDER BY FIELD(id,\\\" + idStr + \\\")\\\").list() .stream() .map(user -> BeanUtil.copyProperties(user, UserDTO.class)) .collect(Collectors.toList()); // 4.返回 return Result.ok(userDTOS); }\"]},\"531\":{\"h\":\"好友关注-关注和取消关注\",\"t\":[\"针对用户的操作：可以对用户进行关注和取消关注功能。\",\"1653806140822\",\"实现思路：\",\"需求：基于该表数据结构，实现两个接口：\",\"关注和取关接口\",\"判断是否关注的接口\",\"关注是User之间的关系，是博主与粉丝的关系，数据库中有一张tb_follow表来标示：\",\"1653806253817\",\"注意: 这里需要把主键修改为自增长，简化开发。\",\"FollowController\",\"//关注 @PutMapping(\\\"/{id}/{isFollow}\\\") public Result follow(@PathVariable(\\\"id\\\") Long followUserId, @PathVariable(\\\"isFollow\\\") Boolean isFollow) { return followService.follow(followUserId, isFollow); } //取消关注 @GetMapping(\\\"/or/not/{id}\\\") public Result isFollow(@PathVariable(\\\"id\\\") Long followUserId) { return followService.isFollow(followUserId); }\",\"FollowService\",\"取消关注service @Override public Result isFollow(Long followUserId) { // 1.获取登录用户 Long userId = UserHolder.getUser().getId(); // 2.查询是否关注 select count(*) from tb_follow where user_id = ? and follow_user_id = ? Integer count = query().eq(\\\"user_id\\\", userId).eq(\\\"follow_user_id\\\", followUserId).count(); // 3.判断 return Result.ok(count > 0); } 关注service @Override public Result follow(Long followUserId, Boolean isFollow) { // 1.获取登录用户 Long userId = UserHolder.getUser().getId(); String key = \\\"follows:\\\" + userId; // 1.判断到底是关注还是取关 if (isFollow) { // 2.关注，新增数据 Follow follow = new Follow(); follow.setUserId(userId); follow.setFollowUserId(followUserId); boolean isSuccess = save(follow); } else { // 3.取关，删除 delete from tb_follow where user_id = ? and follow_user_id = ? remove(new QueryWrapper<Follow>() .eq(\\\"user_id\\\", userId).eq(\\\"follow_user_id\\\", followUserId)); } return Result.ok(); }\"]},\"532\":{\"h\":\"好友关注-共同关注\",\"t\":[\"想要去看共同关注的好友，需要首先进入到这个页面，这个页面会发起两个请求\",\"1、去查询用户的详情\",\"2、去查询用户的笔记\",\"以上两个功能和共同关注没有什么关系，大家可以自行将笔记中的代码拷贝到idea中就可以实现这两个功能了，我们的重点在于共同关注功能。\",\"1653806706296\",\"// UserController 根据id查询用户 @GetMapping(\\\"/{id}\\\") public Result queryUserById(@PathVariable(\\\"id\\\") Long userId){ // 查询详情 User user = userService.getById(userId); if (user == null) { return Result.ok(); } UserDTO userDTO = BeanUtil.copyProperties(user, UserDTO.class); // 返回 return Result.ok(userDTO); } // BlogController 根据id查询博主的探店笔记 @GetMapping(\\\"/of/user\\\") public Result queryBlogByUserId( @RequestParam(value = \\\"current\\\", defaultValue = \\\"1\\\") Integer current, @RequestParam(\\\"id\\\") Long id) { // 根据用户查询 Page<Blog> page = blogService.query() .eq(\\\"user_id\\\", id).page(new Page<>(current, SystemConstants.MAX_PAGE_SIZE)); // 获取当前页数据 List<Blog> records = page.getRecords(); return Result.ok(records); }\",\"接下来我们来看看共同关注如何实现：\",\"需求：利用Redis中恰当的数据结构，实现共同关注功能。在博主个人页面展示出当前用户与博主的共同关注呢。\",\"当然是使用我们之前学习过的set集合咯，在set集合中，有交集并集补集的api，我们可以把两人的关注的人分别放入到一个set集合中，然后再通过api去查看这两个set集合中的交集数据。\",\"1653806973212\",\"我们先来改造当前的关注列表\",\"改造原因是因为我们需要在用户关注了某位用户后，需要将数据放入到set集合中，方便后续进行共同关注，同时当取消关注时，也需要从set集合中进行删除\",\"FollowServiceImpl\",\"@Override public Result follow(Long followUserId, Boolean isFollow) { // 1.获取登录用户 Long userId = UserHolder.getUser().getId(); String key = \\\"follows:\\\" + userId; // 1.判断到底是关注还是取关 if (isFollow) { // 2.关注，新增数据 Follow follow = new Follow(); follow.setUserId(userId); follow.setFollowUserId(followUserId); boolean isSuccess = save(follow); if (isSuccess) { // 把关注用户的id，放入redis的set集合 sadd userId followerUserId stringRedisTemplate.opsForSet().add(key, followUserId.toString()); } } else { // 3.取关，删除 delete from tb_follow where user_id = ? and follow_user_id = ? boolean isSuccess = remove(new QueryWrapper<Follow>() .eq(\\\"user_id\\\", userId).eq(\\\"follow_user_id\\\", followUserId)); if (isSuccess) { // 把关注用户的id从Redis集合中移除 stringRedisTemplate.opsForSet().remove(key, followUserId.toString()); } } return Result.ok(); }\",\"具体的关注代码：\",\"FollowServiceImpl\",\"@Override public Result followCommons(Long id) { // 1.获取当前用户 Long userId = UserHolder.getUser().getId(); String key = \\\"follows:\\\" + userId; // 2.求交集 String key2 = \\\"follows:\\\" + id; Set<String> intersect = stringRedisTemplate.opsForSet().intersect(key, key2); if (intersect == null || intersect.isEmpty()) { // 无交集 return Result.ok(Collections.emptyList()); } // 3.解析id集合 List<Long> ids = intersect.stream().map(Long::valueOf).collect(Collectors.toList()); // 4.查询用户 List<UserDTO> users = userService.listByIds(ids) .stream() .map(user -> BeanUtil.copyProperties(user, UserDTO.class)) .collect(Collectors.toList()); return Result.ok(users); }\"]},\"533\":{\"h\":\"好友关注-Feed流实现方案\",\"t\":[\"当我们关注了用户后，这个用户发了动态，那么我们应该把这些数据推送给用户，这个需求，其实我们又把他叫做Feed流，关注推送也叫做Feed流，直译为投喂。为用户持续的提供“沉浸式”的体验，通过无限下拉刷新获取新的信息。\",\"对于传统的模式的内容解锁：我们是需要用户去通过搜索引擎或者是其他的方式去解锁想要看的内容\",\"1653808641260\",\"对于新型的Feed流的的效果：不需要我们用户再去推送信息，而是系统分析用户到底想要什么，然后直接把内容推送给用户，从而使用户能够更加的节约时间，不用主动去寻找。\",\"1653808993693\",\"Feed流的实现有两种模式：\",\"Feed流产品有两种常见模式： Timeline：不做内容筛选，简单的按照内容发布时间排序，常用于好友或关注。例如朋友圈\",\"优点：信息全面，不会有缺失。并且实现也相对简单\",\"缺点：信息噪音较多，用户不一定感兴趣，内容获取效率低\",\"智能排序：利用智能算法屏蔽掉违规的、用户不感兴趣的内容。推送用户感兴趣信息来吸引用户\",\"优点：投喂用户感兴趣信息，用户粘度很高，容易沉迷\",\"缺点：如果算法不精准，可能起到反作用 本例中的个人页面，是基于关注的好友来做Feed流，因此采用Timeline的模式。该模式的实现方案有三种：\",\"我们本次针对好友的操作，采用的就是Timeline的方式，只需要拿到我们关注用户的信息，然后按照时间排序即可\",\"，因此采用Timeline的模式。该模式的实现方案有三种：\",\"拉模式\",\"推模式\",\"推拉结合\",\"拉模式：也叫做读扩散\",\"该模式的核心含义就是：当张三和李四和王五发了消息后，都会保存在自己的邮箱中，假设赵六要读取信息，那么他会从读取他自己的收件箱，此时系统会从他关注的人群中，把他关注人的信息全部都进行拉取，然后在进行排序\",\"优点：比较节约空间，因为赵六在读信息时，并没有重复读取，而且读取完之后可以把他的收件箱进行清楚。\",\"缺点：比较延迟，当用户读取数据时才去关注的人里边去读取数据，假设用户关注了大量的用户，那么此时就会拉取海量的内容，对服务器压力巨大。\",\"1653809450816\",\"推模式：也叫做写扩散。\",\"推模式是没有写邮箱的，当张三写了一个内容，此时会主动的把张三写的内容发送到他的粉丝收件箱中去，假设此时李四再来读取，就不用再去临时拉取了\",\"优点：时效快，不用临时拉取\",\"缺点：内存压力大，假设一个大V写信息，很多人关注他， 就会写很多分数据到粉丝那边去\",\"1653809875208\",\"推拉结合模式：也叫做读写混合，兼具推和拉两种模式的优点。\",\"推拉模式是一个折中的方案，站在发件人这一段，如果是个普通的人，那么我们采用写扩散的方式，直接把数据写入到他的粉丝中去，因为普通的人他的粉丝关注量比较小，所以这样做没有压力，如果是大V，那么他是直接将数据先写入到一份到发件箱里边去，然后再直接写一份到活跃粉丝收件箱里边去，现在站在收件人这端来看，如果是活跃粉丝，那么大V和普通的人发的都会直接写入到自己收件箱里边来，而如果是普通的粉丝，由于他们上线不是很频繁，所以等他们上线时，再从发件箱里边去拉信息。\",\"1653812346852\"]},\"534\":{\"h\":\"好友关注-推送到粉丝收件箱-滚动查看\",\"t\":[\"需求：\",\"修改新增探店笔记的业务，在保存blog到数据库的同时，推送到粉丝的收件箱\",\"收件箱满足可以根据时间戳排序，必须用Redis的数据结构实现\",\"查询收件箱数据时，可以实现分页查询\",\"Feed流中的数据会不断更新，所以数据的角标也在变化，因此不能采用传统的分页模式。\",\"传统了分页在feed流是不适用的，因为我们的数据会随时发生变化\",\"假设在t1 时刻，我们去读取第一页，此时page = 1 ，size = 5 ，那么我们拿到的就是10~6 这几条记录，假设现在t2时候又发布了一条记录，此时t3 时刻，我们来读取第二页，读取第二页传入的参数是page=2 ，size=5 ，那么此时读取到的第二页实际上是从6 开始，然后是6~2 ，那么我们就读取到了重复的数据，所以feed流的分页，不能采用原始方案来做。\",\"1653813047671\",\"Feed流的滚动分页\",\"我们需要记录每次操作的最后一条，然后从这个位置开始去读取数据\",\"举个例子：我们从t1时刻开始，拿第一页数据，拿到了10~6，然后记录下当前最后一次拿取的记录，就是6，t2时刻发布了新的记录，此时这个11放到最顶上，但是不会影响我们之前记录的6，此时t3时刻来拿第二页，第二页这个时候拿数据，还是从6后一点的5去拿，就拿到了5-1的记录。我们这个地方可以采用sortedSet来做，可以进行范围查询，并且还可以记录当前获取数据时间戳最小值，就可以实现滚动分页了\",\"1653813462834\",\"核心的意思：就是我们在保存完探店笔记后，获得到当前笔记的粉丝，然后把数据推送到粉丝的redis中去。\",\"@Override public Result saveBlog(Blog blog) { // 1.获取登录用户 UserDTO user = UserHolder.getUser(); blog.setUserId(user.getId()); // 2.保存探店笔记 boolean isSuccess = save(blog); if(!isSuccess){ return Result.fail(\\\"新增笔记失败!\\\"); } // 3.查询笔记作者的所有粉丝 select * from tb_follow where follow_user_id = ? List<Follow> follows = followService.query().eq(\\\"follow_user_id\\\", user.getId()).list(); // 4.推送笔记id给所有粉丝 for (Follow follow : follows) { // 4.1.获取粉丝id Long userId = follow.getUserId(); // 4.2.推送 String key = FEED_KEY + userId; stringRedisTemplate.opsForZSet().add(key, blog.getId().toString(), System.currentTimeMillis()); } // 5.返回id return Result.ok(blog.getId()); }\"]},\"535\":{\"h\":\"好友关注-实现分页查询收邮箱\",\"t\":[\"需求：在个人主页的“关注”卡片中，查询并展示推送的Blog信息：\",\"具体操作如下：\",\"1、每次查询完成后，我们要分析出查询出数据的最小时间戳，这个值会作为下一次查询的条件\",\"2、我们需要找到与上一次查询相同的查询个数作为偏移量，下次查询时，跳过这些查询过的数据，拿到我们需要的数据\",\"综上：我们的请求参数中就需要携带 lastId：上一次查询的最小时间戳 和偏移量这两个参数。\",\"这两个参数第一次会由前端来指定，以后的查询就根据后台结果作为条件，再次传递到后台。\",\"1653819821591\",\"一、定义出来具体的返回值实体类\",\"@Data public class ScrollResult { private List<?> list; private Long minTime; private Integer offset; }\",\"BlogController\",\"注意：RequestParam 表示接受url地址栏传参的注解，当方法上参数的名称和url地址栏不相同时，可以通过RequestParam 来进行指定\",\"@GetMapping(\\\"/of/follow\\\") public Result queryBlogOfFollow( @RequestParam(\\\"lastId\\\") Long max, @RequestParam(value = \\\"offset\\\", defaultValue = \\\"0\\\") Integer offset){ return blogService.queryBlogOfFollow(max, offset); }\",\"BlogServiceImpl\",\"@Override public Result queryBlogOfFollow(Long max, Integer offset) { // 1.获取当前用户 Long userId = UserHolder.getUser().getId(); // 2.查询收件箱 ZREVRANGEBYSCORE key Max Min LIMIT offset count String key = FEED_KEY + userId; Set<ZSetOperations.TypedTuple<String>> typedTuples = stringRedisTemplate.opsForZSet() .reverseRangeByScoreWithScores(key, 0, max, offset, 2); // 3.非空判断 if (typedTuples == null || typedTuples.isEmpty()) { return Result.ok(); } // 4.解析数据：blogId、minTime（时间戳）、offset List<Long> ids = new ArrayList<>(typedTuples.size()); long minTime = 0; // 2 int os = 1; // 2 for (ZSetOperations.TypedTuple<String> tuple : typedTuples) { // 5 4 4 2 2 // 4.1.获取id ids.add(Long.valueOf(tuple.getValue())); // 4.2.获取分数(时间戳） long time = tuple.getScore().longValue(); if(time == minTime){ os++; }else{ minTime = time; os = 1; } } os = minTime == max ? os : os + offset; // 5.根据id查询blog String idStr = StrUtil.join(\\\",\\\", ids); List<Blog> blogs = query().in(\\\"id\\\", ids).last(\\\"ORDER BY FIELD(id,\\\" + idStr + \\\")\\\").list(); for (Blog blog : blogs) { // 5.1.查询blog有关的用户 queryBlogUser(blog); // 5.2.查询blog是否被点赞 isBlogLiked(blog); } // 6.封装并返回 ScrollResult r = new ScrollResult(); r.setList(blogs); r.setOffset(os); r.setMinTime(minTime); return Result.ok(r); }\",\"GEO就是Geolocation的简写形式，代表地理坐标。Redis在3.2版本中加入了对GEO的支持，允许存储地理坐标信息，帮助我们根据经纬度来检索数据。常见的命令有：\",\"GEOADD：添加一个地理空间信息，包含：经度（longitude）、纬度（latitude）、值（member）\",\"GEODIST：计算指定的两个点之间的距离并返回\",\"GEOHASH：将指定member的坐标转为hash字符串形式并返回\",\"GEOPOS：返回指定member的坐标\",\"GEORADIUS：指定圆心、半径，找到该圆内包含的所有member，并按照与圆心之间的距离排序后返回。6.以后已废弃\",\"GEOSEARCH：在指定范围内搜索member，并按照与指定点之间的距离排序后返回。范围可以是圆形或矩形。6.2.新功能\",\"GEOSEARCHSTORE：与GEOSEARCH功能一致，不过可以把结果存储到一个指定的key。 6.2.新功能\"]},\"536\":{\"h\":\"附近商户-导入店铺数据到GEO\",\"t\":[\"具体场景说明：\",\"1653822036941\",\"当我们点击美食之后，会出现一系列的商家，商家中可以按照多种排序方式，我们此时关注的是距离，这个地方就需要使用到我们的GEO，向后台传入当前app收集的地址(我们此处是写死的) ，以当前坐标作为圆心，同时绑定相同的店家类型type，以及分页信息，把这几个条件传入后台，后台查询出对应的数据再返回。\",\"1653822021827\",\"我们要做的事情是：将数据库表中的数据导入到redis中去，redis中的GEO，GEO在redis中就一个menber和一个经纬度，我们把x和y轴传入到redis做的经纬度位置去，但我们不能把所有的数据都放入到menber中去，毕竟作为redis是一个内存级数据库，如果存海量数据，redis还是力不从心，所以我们在这个地方存储他的id即可。\",\"但是这个时候还有一个问题，就是在redis中并没有存储type，所以我们无法根据type来对数据进行筛选，所以我们可以按照商户类型做分组，类型相同的商户作为同一组，以typeId为key存入同一个GEO集合中即可\",\"代码\",\"HmDianPingApplicationTests\",\"@Test void loadShopData() { // 1.查询店铺信息 List<Shop> list = shopService.list(); // 2.把店铺分组，按照typeId分组，typeId一致的放到一个集合 Map<Long, List<Shop>> map = list.stream().collect(Collectors.groupingBy(Shop::getTypeId)); // 3.分批完成写入Redis for (Map.Entry<Long, List<Shop>> entry : map.entrySet()) { // 3.1.获取类型id Long typeId = entry.getKey(); String key = SHOP_GEO_KEY + typeId; // 3.2.获取同类型的店铺的集合 List<Shop> value = entry.getValue(); List<RedisGeoCommands.GeoLocation<String>> locations = new ArrayList<>(value.size()); // 3.3.写入redis GEOADD key 经度 纬度 member for (Shop shop : value) { // stringRedisTemplate.opsForGeo().add(key, new Point(shop.getX(), shop.getY()), shop.getId().toString()); locations.add(new RedisGeoCommands.GeoLocation<>( shop.getId().toString(), new Point(shop.getX(), shop.getY()) )); } stringRedisTemplate.opsForGeo().add(key, locations); } }\"]},\"537\":{\"h\":\"附近商户-实现附近商户功能\",\"t\":[\"SpringDataRedis的2.3.9版本并不支持Redis 6.2提供的GEOSEARCH命令，因此我们需要提示其版本，修改自己的POM\",\"第一步：导入pom\",\"<dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-data-redis</artifactId> <exclusions> <exclusion> <artifactId>spring-data-redis</artifactId> <groupId>org.springframework.data</groupId> </exclusion> <exclusion> <artifactId>lettuce-core</artifactId> <groupId>io.lettuce</groupId> </exclusion> </exclusions> </dependency> <dependency> <groupId>org.springframework.data</groupId> <artifactId>spring-data-redis</artifactId> <version>2.6.2</version> </dependency> <dependency> <groupId>io.lettuce</groupId> <artifactId>lettuce-core</artifactId> <version>6.1.6.RELEASE</version> </dependency>\",\"第二步：\",\"ShopController\",\"@GetMapping(\\\"/of/type\\\") public Result queryShopByType( @RequestParam(\\\"typeId\\\") Integer typeId, @RequestParam(value = \\\"current\\\", defaultValue = \\\"1\\\") Integer current, @RequestParam(value = \\\"x\\\", required = false) Double x, @RequestParam(value = \\\"y\\\", required = false) Double y ) { return shopService.queryShopByType(typeId, current, x, y); }\",\"ShopServiceImpl\",\"@Override public Result queryShopByType(Integer typeId, Integer current, Double x, Double y) { // 1.判断是否需要根据坐标查询 if (x == null || y == null) { // 不需要坐标查询，按数据库查询 Page<Shop> page = query() .eq(\\\"type_id\\\", typeId) .page(new Page<>(current, SystemConstants.DEFAULT_PAGE_SIZE)); // 返回数据 return Result.ok(page.getRecords()); } // 2.计算分页参数 int from = (current - 1) * SystemConstants.DEFAULT_PAGE_SIZE; int end = current * SystemConstants.DEFAULT_PAGE_SIZE; // 3.查询redis、按照距离排序、分页。结果：shopId、distance String key = SHOP_GEO_KEY + typeId; GeoResults<RedisGeoCommands.GeoLocation<String>> results = stringRedisTemplate.opsForGeo() // GEOSEARCH key BYLONLAT x y BYRADIUS 10 WITHDISTANCE .search( key, GeoReference.fromCoordinate(x, y), new Distance(5000), RedisGeoCommands.GeoSearchCommandArgs.newGeoSearchArgs().includeDistance().limit(end) ); // 4.解析出id if (results == null) { return Result.ok(Collections.emptyList()); } List<GeoResult<RedisGeoCommands.GeoLocation<String>>> list = results.getContent(); if (list.size() <= from) { // 没有下一页了，结束 return Result.ok(Collections.emptyList()); } // 4.1.截取 from ~ end的部分 List<Long> ids = new ArrayList<>(list.size()); Map<String, Distance> distanceMap = new HashMap<>(list.size()); list.stream().skip(from).forEach(result -> { // 4.2.获取店铺id String shopIdStr = result.getContent().getName(); ids.add(Long.valueOf(shopIdStr)); // 4.3.获取距离 Distance distance = result.getDistance(); distanceMap.put(shopIdStr, distance); }); // 5.根据id查询Shop String idStr = StrUtil.join(\\\",\\\", ids); List<Shop> shops = query().in(\\\"id\\\", ids).last(\\\"ORDER BY FIELD(id,\\\" + idStr + \\\")\\\").list(); for (Shop shop : shops) { shop.setDistance(distanceMap.get(shop.getId().toString()).getValue()); } // 6.返回 return Result.ok(shops); }\"]},\"538\":{\"h\":\"用户签到-BitMap功能演示\",\"t\":[\"我们针对签到功能完全可以通过mysql来完成，比如说以下这张表\",\"1653823145495\",\"用户一次签到，就是一条记录，假如有1000万用户，平均每人每年签到次数为10次，则这张表一年的数据量为 1亿条\",\"每签到一次需要使用（8 + 8 + 1 + 1 + 3 + 1）共22 字节的内存，一个月则最多需要600多字节\",\"我们如何能够简化一点呢？其实可以考虑小时候一个挺常见的方案，就是小时候，咱们准备一张小小的卡片，你只要签到就打上一个勾，我最后判断你是否签到，其实只需要到小卡片上看一看就知道了\",\"我们可以采用类似这样的方案来实现我们的签到需求。\",\"我们按月来统计用户签到信息，签到记录为1，未签到则记录为0.\",\"把每一个bit位对应当月的每一天，形成了映射关系。用0和1标示业务状态，这种思路就称为位图（BitMap）。这样我们就用极小的空间，来实现了大量数据的表示\",\"Redis中是利用string类型数据结构实现BitMap，因此最大上限是512M，转换为bit则是 2^32个bit位。\",\"1653824498278\",\"BitMap的操作命令有：\",\"SETBIT：向指定位置（offset）存入一个0或1\",\"GETBIT ：获取指定位置（offset）的bit值\",\"BITCOUNT ：统计BitMap中值为1的bit位的数量\",\"BITFIELD ：操作（查询、修改、自增）BitMap中bit数组中的指定位置（offset）的值\",\"BITFIELD_RO ：获取BitMap中bit数组，并以十进制形式返回\",\"BITOP ：将多个BitMap的结果做位运算（与 、或、异或）\",\"BITPOS ：查找bit数组中指定范围内第一个0或1出现的位置\"]},\"539\":{\"h\":\"用户签到-实现签到功能\",\"t\":[\"需求：实现签到接口，将当前用户当天签到信息保存到Redis中\",\"思路：我们可以把年和月作为bitMap的key，然后保存到一个bitMap中，每次签到就到对应的位上把数字从0变成1，只要对应是1，就表明说明这一天已经签到了，反之则没有签到。\",\"我们通过接口文档发现，此接口并没有传递任何的参数，没有参数怎么确实是哪一天签到呢？这个很容易，可以通过后台代码直接获取即可，然后到对应的地址上去修改bitMap。\",\"1653833970361\",\"代码\",\"UserController\",\" @PostMapping(\\\"/sign\\\") public Result sign(){ return userService.sign(); }\",\"UserServiceImpl\",\"@Override public Result sign() { // 1.获取当前登录用户 Long userId = UserHolder.getUser().getId(); // 2.获取日期 LocalDateTime now = LocalDateTime.now(); // 3.拼接key String keySuffix = now.format(DateTimeFormatter.ofPattern(\\\":yyyyMM\\\")); String key = USER_SIGN_KEY + userId + keySuffix; // 4.获取今天是本月的第几天 int dayOfMonth = now.getDayOfMonth(); // 5.写入Redis SETBIT key offset 1 stringRedisTemplate.opsForValue().setBit(key, dayOfMonth - 1, true); return Result.ok(); }\"]},\"540\":{\"h\":\"用户签到-签到统计\",\"t\":[\"**问题1：**什么叫做连续签到天数？ 从最后一次签到开始向前统计，直到遇到第一次未签到为止，计算总的签到次数，就是连续签到天数。\",\"1653834455899\",\"Java逻辑代码：获得当前这个月的最后一次签到数据，定义一个计数器，然后不停的向前统计，直到获得第一个非0的数字即可，每得到一个非0的数字计数器+1，直到遍历完所有的数据，就可以获得当前月的签到总天数了\",\"**问题2：**如何得到本月到今天为止的所有签到数据？\",\"BITFIELD key GET u[dayOfMonth] 0\",\"假设今天是10号，那么我们就可以从当前月的第一天开始，获得到当前这一天的位数，是10号，那么就是10位，去拿这段时间的数据，就能拿到所有的数据了，那么这10天里边签到了多少次呢？统计有多少个1即可。\",\"问题3：如何从后向前遍历每个bit位？\",\"注意：bitMap返回的数据是10进制，哪假如说返回一个数字8，那么我哪儿知道到底哪些是0，哪些是1呢？我们只需要让得到的10进制数字和1做与运算就可以了，因为1只有遇见1 才是1，其他数字都是0 ，我们把签到结果和1进行与操作，每与一次，就把签到结果向右移动一位，依次内推，我们就能完成逐个遍历的效果了。\",\"需求：实现下面接口，统计当前用户截止当前时间在本月的连续签到天数\",\"有用户有时间我们就可以组织出对应的key，此时就能找到这个用户截止这天的所有签到记录，再根据这套算法，就能统计出来他连续签到的次数了\",\"1653835784444\",\"代码\",\"UserController\",\"@GetMapping(\\\"/sign/count\\\") public Result signCount(){ return userService.signCount(); }\",\"UserServiceImpl\",\"@Override public Result signCount() { // 1.获取当前登录用户 Long userId = UserHolder.getUser().getId(); // 2.获取日期 LocalDateTime now = LocalDateTime.now(); // 3.拼接key String keySuffix = now.format(DateTimeFormatter.ofPattern(\\\":yyyyMM\\\")); String key = USER_SIGN_KEY + userId + keySuffix; // 4.获取今天是本月的第几天 int dayOfMonth = now.getDayOfMonth(); // 5.获取本月截止今天为止的所有的签到记录，返回的是一个十进制的数字 BITFIELD sign:5:202203 GET u14 0 List<Long> result = stringRedisTemplate.opsForValue().bitField( key, BitFieldSubCommands.create() .get(BitFieldSubCommands.BitFieldType.unsigned(dayOfMonth)).valueAt(0) ); if (result == null || result.isEmpty()) { // 没有任何签到结果 return Result.ok(0); } Long num = result.get(0); if (num == null || num == 0) { return Result.ok(0); } // 6.循环遍历 int count = 0; while (true) { // 6.1.让这个数字与1做与运算，得到数字的最后一个bit位 // 判断这个bit位是否为0 if ((num & 1) == 0) { // 如果为0，说明未签到，结束 break; }else { // 如果不为0，说明已签到，计数器+1 count++; } // 把数字右移一位，抛弃最后一个bit位，继续下一个bit位 num >>>= 1; } return Result.ok(count); }\"]},\"541\":{\"h\":\"额外加餐-关于使用bitmap来解决缓存穿透的方案\",\"t\":[\"回顾缓存穿透：\",\"发起了一个数据库不存在的，redis里边也不存在的数据，通常你可以把他看成一个攻击\",\"解决方案：\",\"判断id<0\",\"如果数据库是空，那么就可以直接往redis里边把这个空数据缓存起来\",\"第一种解决方案：遇到的问题是如果用户访问的是id不存在的数据，则此时就无法生效\",\"第二种解决方案：遇到的问题是：如果是不同的id那就可以防止下次过来直击数据\",\"所以我们如何解决呢？\",\"我们可以将数据库的数据，所对应的id写入到一个list集合中，当用户过来访问的时候，我们直接去判断list中是否包含当前的要查询的数据，如果说用户要查询的id数据并不在list集合中，则直接返回，如果list中包含对应查询的id数据，则说明不是一次缓存穿透数据，则直接放行。\",\"1653836416586\",\"现在的问题是这个主键其实并没有那么短，而是很长的一个 主键\",\"哪怕你单独去提取这个主键，但是在11年左右，淘宝的商品总量就已经超过10亿个\",\"所以如果采用以上方案，这个list也会很大，所以我们可以使用bitmap来减少list的存储空间\",\"我们可以把list数据抽象成一个非常大的bitmap，我们不再使用list，而是将db中的id数据利用哈希思想，比如：\",\"id % bitmap.size = 算出当前这个id对应应该落在bitmap的哪个索引上，然后将这个值从0变成1，然后当用户来查询数据时，此时已经没有了list，让用户用他查询的id去用相同的哈希算法， 算出来当前这个id应当落在bitmap的哪一位，然后判断这一位是0，还是1，如果是0则表明这一位上的数据一定不存在， 采用这种方式来处理，需要重点考虑一个事情，就是误差率，所谓的误差率就是指当发生哈希冲突的时候，产生的误差。\",\"1653836578970\",\"首先我们搞懂两个概念：\",\"UV：全称Unique Visitor，也叫独立访客量，是指通过互联网访问、浏览这个网页的自然人。1天内同一个用户多次访问该网站，只记录1次。\",\"PV：全称Page View，也叫页面访问量或点击量，用户每访问网站的一个页面，记录1次PV，用户多次打开页面，则记录多次PV。往往用来衡量网站的流量。\",\"通常来说UV会比PV大很多，所以衡量同一个网站的访问量，我们需要综合考虑很多因素，所以我们只是单纯的把这两个值作为一个参考值\",\"UV统计在服务端做会比较麻烦，因为要判断该用户是否已经统计过了，需要将统计过的用户信息保存。但是如果每个访问的用户都保存到Redis中，数据量会非常恐怖，那怎么处理呢？\",\"Hyperloglog(HLL)是从Loglog算法派生的概率算法，用于确定非常大的集合的基数，而不需要存储其所有值。相关算法原理大家可以参考：https://juejin.cn/post/6844903785744056333#heading-0 Redis中的HLL是基于string结构实现的，单个HLL的内存永远小于16kb，内存占用低的令人发指！作为代价，其测量结果是概率性的，有小于0.81％的误差。不过对于UV统计来说，这完全可以忽略。\",\"1653837988985\"]},\"542\":{\"h\":\"12.2 UV统计-测试百万数据的统计\",\"t\":[\"测试思路：我们直接利用单元测试，向HyperLogLog中添加100万条数据，看看内存占用和统计效果如何\",\"1653838053608\",\"经过测试：我们会发生他的误差是在允许范围内，并且内存占用极小\",\"黑马程序员\"]},\"543\":{\"c\":[\"Redis\"]},\"544\":{\"c\":[\"Redis\"]},\"545\":{\"h\":\"Redis应用场景\",\"t\":[\"Redis作为一种高性能的键值数据库，因其出色的读写速度和丰富的数据结构，被广泛应用于多个领域。以下是Redis在不同行业中的应用场景与实际使用方案。\",\"游戏行业通常将Redis作为重要的部署架构组件，用于缓存或数据持久化。\",\"应用场景： \",\"玩家信息存储：存储玩家的基本信息、装备、成就等。\",\"排行榜：实时更新玩家积分、等级等排名信息。\",\"会话管理：管理玩家登录状态和游戏进度。\",\"实际使用方案： \",\"使用Redis的字符串类型存储玩家信息，利用其原子操作进行数据更新。\",\"利用Redis的有序集合（ZSet）实现排行榜功能，根据玩家分数进行排序。\",\"使用Redis的会话管理功能，通过设置过期时间实现自动登出。\",\"电商行业通过Redis实现商品秒杀、购物推荐等功能。\",\"应用场景： \",\"商品信息缓存：缓存热门商品信息，提高查询速度。\",\"购物车：存储用户的购物车信息。\",\"优惠券发放：控制优惠券的发放数量和频率。\",\"实际使用方案： \",\"使用Redis的字符串或哈希类型缓存商品信息，减少数据库压力。\",\"利用Redis的列表或哈希类型存储购物车信息，支持商品数量的增减。\",\"使用Redis的原子操作和分布式锁实现优惠券的发放控制。\",\"应用场景： \",\"在线用户统计：统计直播间实时在线人数。\",\"弹幕消息存储：存储和展示弹幕消息。\",\"点赞和礼物记录：记录用户的点赞和礼物赠送行为。\",\"实际使用方案： \",\"使用Redis的计数器功能统计在线用户数，利用发布订阅模式实时更新数据。\",\"利用Redis的列表或发布订阅功能存储和推送弹幕消息。\",\"使用Redis的哈希或有序集合记录点赞和礼物信息，便于统计和展示。\",\"应用场景： \",\"路况信息缓存：缓存实时路况信息，提高查询速度。\",\"POI信息存储：存储兴趣点（POI）信息，如餐馆、景点等。\",\"用户位置记录：记录用户实时位置，用于导航和位置服务。\",\"实际使用方案： \",\"使用Redis的字符串或哈希类型缓存路况信息，减少数据库查询。\",\"利用Redis的地理位置（Geo）功能存储和查询POI信息。\",\"使用Redis的地理位置功能记录用户位置，实现实时导航和位置服务。\",\"应用场景：\",\"实时交易处理：处理高频交易和实时数据流。\",\"风险控制：存储和计算用户的交易行为，用于风险控制和欺诈检测。\",\"账户信息缓存：缓存用户账户信息，提高查询效率。\",\"实际使用方案：\",\"使用Redis的发布订阅功能和高性能特性处理实时交易数据。\",\"利用Redis的数据结构和事务功能进行风险控制计算。\",\"使用Redis缓存账户信息，减少对数据库的直接访问。\",\"应用场景：\",\"用户动态缓存：缓存用户发布的动态和内容。\",\"好友关系存储：存储用户之间的好友关系。\",\"消息队列：处理用户间的消息传递和通知。\",\"实际使用方案：\",\"使用Redis的列表或哈希类型缓存用户动态，提高读取速度。\",\"利用Redis的集合类型存储好友关系，便于快速查找和推荐。\",\"使用Redis的发布订阅功能或列表作为消息队列，处理消息传递。\",\"应用场景：\",\"设备状态监控：存储和监控设备状态信息。\",\"实时数据流处理：处理来自传感器的实时数据。\",\"命令和控制：发送控制命令到设备。\",\"实际使用方案：\",\"使用Redis的键值对存储设备状态，并通过发布订阅模式进行状态更新通知。\",\"利用Redis的数据结构和管道（pipelining）功能处理实时数据流。\",\"使用Redis作为命令和控制消息的中介，确保消息的可靠传输。\",\"应用场景：\",\"广告缓存：缓存广告内容和相关信息。\",\"广告投放优化：实时分析广告效果，调整投放策略。\",\"用户行为追踪：记录和分析用户对广告的点击行为。\",\"实际使用方案：\",\"使用Redis缓存广告内容，减少数据库访问，提高广告加载速度。\",\"利用Redis的数据分析功能进行实时广告效果分析。\",\"使用Redis的计数器和哈希表记录用户行为数据。\",\"应用场景：\",\"用户话单缓存：缓存用户通话记录和话单信息。\",\"网络状态监控：监控网络设备和链路的状态。\",\"计费系统：处理用户计费数据。\",\"实际使用方案：\",\"使用Redis缓存话单信息，提高话单查询和处理速度。\",\"利用Redis的键值对存储网络状态信息，便于实时监控。\",\"使用Redis的事务和持久化功能处理计费数据。\",\"应用场景：\",\"货物追踪：实时更新货物的位置信息。\",\"库存管理：快速查询和更新库存数据。\",\"路由优化：存储和计算最优配送路线。\",\"实际使用方案：\",\"使用Redis的地理位置（Geo）功能来追踪货物位置。\",\"利用Redis的原子操作来管理库存，确保数据的一致性。\",\"使用Redis的数据结构来存储配送节点信息，进行路由优化计算。\",\"应用场景：\",\"课程内容缓存：缓存课程视频、文档等资源，提高访问速度。\",\"互动记录：记录学生的互动和参与情况。\",\"在线考试：存储考试题目和用户答案，处理实时评分。\",\"实际使用方案：\",\"使用Redis缓存课程内容，减轻服务器压力。\",\"利用Redis的列表或哈希表记录学生的互动数据。\",\"使用Redis的事务功能来处理在线考试的答题和评分。\",\"应用场景：\",\"电子病历缓存：缓存患者的电子病历，快速检索。\",\"实时监控：监控患者的生命体征数据。\",\"药品库存管理：管理药品库存信息。\",\"实际使用方案：\",\"使用Redis缓存电子病历，提高查询效率。\",\"利用Redis的发布订阅功能进行实时监控数据的传输。\",\"使用Redis的键值对来管理药品库存，实现快速更新和查询。\",\"应用场景：\",\"日志存储：存储系统日志和用户操作日志。\",\"实时报警：处理和存储安全报警信息。\",\"访问控制：管理用户的访问权限。\",\"实际使用方案：\",\"使用Redis的列表或发布订阅功能存储日志信息。\",\"利用Redis的发布订阅功能实现实时报警通知。\",\"使用Redis的键值对来管理用户权限，实现快速访问控制。\",\"应用场景：\",\"数据缓存：缓存大量查询结果，提高数据分析速度。\",\"任务队列：管理数据分析任务的执行。\",\"结果存储：存储数据分析的中间结果。\",\"实际使用方案：\",\"使用Redis作为数据缓存层，减少对数据库的直接访问。\",\"利用Redis的列表或有序集合作为任务队列，进行任务调度。\",\"使用Redis的哈希或字符串存储分析结果，便于后续处理。\",\"应用场景：\",\"缓存航班、酒店和旅游套餐信息，提高搜索速度。\",\"实时更新航班状态和酒店可用性。\",\"管理用户预订和旅行历史。\",\"实际使用方案：\",\"使用Redis缓存热门查询结果和常用数据，减少数据库负载。\",\"利用Redis的发布订阅功能实时更新航班和酒店信息。\",\"使用Redis的哈希结构存储用户预订信息，列表结构存储旅行历史。\",\"应用场景：\",\"实时监控能源消耗数据。\",\"管理智能电网的配置和状态。\",\"存储和快速检索能源使用历史记录。\",\"实际使用方案：\",\"使用Redis的发布订阅功能监控实时数据流。\",\"利用Redis的数据结构存储电网配置，支持快速读取和更新。\",\"使用Redis的列表或有序集合记录能源使用数据，便于分析和报告。\"]},\"546\":{\"c\":[\"Redis\"]},\"547\":{\"c\":[\"Redis\",\"Redis应用场景\"]},\"548\":{\"h\":\"Redis应用场景\",\"t\":[\"Redis作为一种高性能的键值数据库，因其出色的读写速度和丰富的数据结构，被广泛应用于多个领域。以下是Redis在不同行业中的应用场景与实际使用方案。\",\"游戏行业通常将Redis作为重要的部署架构组件，用于缓存或数据持久化。\",\"应用场景： \",\"玩家信息存储：存储玩家的基本信息、装备、成就等。\",\"排行榜：实时更新玩家积分、等级等排名信息。\",\"会话管理：管理玩家登录状态和游戏进度。\",\"实际使用方案： \",\"使用Redis的字符串类型存储玩家信息，利用其原子操作进行数据更新。\",\"利用Redis的有序集合（ZSet）实现排行榜功能，根据玩家分数进行排序。\",\"使用Redis的会话管理功能，通过设置过期时间实现自动登出。\",\"电商行业通过Redis实现商品秒杀、购物推荐等功能。\",\"应用场景： \",\"商品信息缓存：缓存热门商品信息，提高查询速度。\",\"购物车：存储用户的购物车信息。\",\"优惠券发放：控制优惠券的发放数量和频率。\",\"实际使用方案： \",\"使用Redis的字符串或哈希类型缓存商品信息，减少数据库压力。\",\"利用Redis的列表或哈希类型存储购物车信息，支持商品数量的增减。\",\"使用Redis的原子操作和分布式锁实现优惠券的发放控制。\",\"应用场景： \",\"在线用户统计：统计直播间实时在线人数。\",\"弹幕消息存储：存储和展示弹幕消息。\",\"点赞和礼物记录：记录用户的点赞和礼物赠送行为。\",\"实际使用方案： \",\"使用Redis的计数器功能统计在线用户数，利用发布订阅模式实时更新数据。\",\"利用Redis的列表或发布订阅功能存储和推送弹幕消息。\",\"使用Redis的哈希或有序集合记录点赞和礼物信息，便于统计和展示。\",\"应用场景： \",\"路况信息缓存：缓存实时路况信息，提高查询速度。\",\"POI信息存储：存储兴趣点（POI）信息，如餐馆、景点等。\",\"用户位置记录：记录用户实时位置，用于导航和位置服务。\",\"实际使用方案： \",\"使用Redis的字符串或哈希类型缓存路况信息，减少数据库查询。\",\"利用Redis的地理位置（Geo）功能存储和查询POI信息。\",\"使用Redis的地理位置功能记录用户位置，实现实时导航和位置服务。\",\"应用场景：\",\"实时交易处理：处理高频交易和实时数据流。\",\"风险控制：存储和计算用户的交易行为，用于风险控制和欺诈检测。\",\"账户信息缓存：缓存用户账户信息，提高查询效率。\",\"实际使用方案：\",\"使用Redis的发布订阅功能和高性能特性处理实时交易数据。\",\"利用Redis的数据结构和事务功能进行风险控制计算。\",\"使用Redis缓存账户信息，减少对数据库的直接访问。\",\"应用场景：\",\"用户动态缓存：缓存用户发布的动态和内容。\",\"好友关系存储：存储用户之间的好友关系。\",\"消息队列：处理用户间的消息传递和通知。\",\"实际使用方案：\",\"使用Redis的列表或哈希类型缓存用户动态，提高读取速度。\",\"利用Redis的集合类型存储好友关系，便于快速查找和推荐。\",\"使用Redis的发布订阅功能或列表作为消息队列，处理消息传递。\",\"应用场景：\",\"设备状态监控：存储和监控设备状态信息。\",\"实时数据流处理：处理来自传感器的实时数据。\",\"命令和控制：发送控制命令到设备。\",\"实际使用方案：\",\"使用Redis的键值对存储设备状态，并通过发布订阅模式进行状态更新通知。\",\"利用Redis的数据结构和管道（pipelining）功能处理实时数据流。\",\"使用Redis作为命令和控制消息的中介，确保消息的可靠传输。\",\"应用场景：\",\"广告缓存：缓存广告内容和相关信息。\",\"广告投放优化：实时分析广告效果，调整投放策略。\",\"用户行为追踪：记录和分析用户对广告的点击行为。\",\"实际使用方案：\",\"使用Redis缓存广告内容，减少数据库访问，提高广告加载速度。\",\"利用Redis的数据分析功能进行实时广告效果分析。\",\"使用Redis的计数器和哈希表记录用户行为数据。\",\"应用场景：\",\"用户话单缓存：缓存用户通话记录和话单信息。\",\"网络状态监控：监控网络设备和链路的状态。\",\"计费系统：处理用户计费数据。\",\"实际使用方案：\",\"使用Redis缓存话单信息，提高话单查询和处理速度。\",\"利用Redis的键值对存储网络状态信息，便于实时监控。\",\"使用Redis的事务和持久化功能处理计费数据。\",\"应用场景：\",\"货物追踪：实时更新货物的位置信息。\",\"库存管理：快速查询和更新库存数据。\",\"路由优化：存储和计算最优配送路线。\",\"实际使用方案：\",\"使用Redis的地理位置（Geo）功能来追踪货物位置。\",\"利用Redis的原子操作来管理库存，确保数据的一致性。\",\"使用Redis的数据结构来存储配送节点信息，进行路由优化计算。\",\"应用场景：\",\"课程内容缓存：缓存课程视频、文档等资源，提高访问速度。\",\"互动记录：记录学生的互动和参与情况。\",\"在线考试：存储考试题目和用户答案，处理实时评分。\",\"实际使用方案：\",\"使用Redis缓存课程内容，减轻服务器压力。\",\"利用Redis的列表或哈希表记录学生的互动数据。\",\"使用Redis的事务功能来处理在线考试的答题和评分。\",\"应用场景：\",\"电子病历缓存：缓存患者的电子病历，快速检索。\",\"实时监控：监控患者的生命体征数据。\",\"药品库存管理：管理药品库存信息。\",\"实际使用方案：\",\"使用Redis缓存电子病历，提高查询效率。\",\"利用Redis的发布订阅功能进行实时监控数据的传输。\",\"使用Redis的键值对来管理药品库存，实现快速更新和查询。\",\"应用场景：\",\"日志存储：存储系统日志和用户操作日志。\",\"实时报警：处理和存储安全报警信息。\",\"访问控制：管理用户的访问权限。\",\"实际使用方案：\",\"使用Redis的列表或发布订阅功能存储日志信息。\",\"利用Redis的发布订阅功能实现实时报警通知。\",\"使用Redis的键值对来管理用户权限，实现快速访问控制。\",\"应用场景：\",\"数据缓存：缓存大量查询结果，提高数据分析速度。\",\"任务队列：管理数据分析任务的执行。\",\"结果存储：存储数据分析的中间结果。\",\"实际使用方案：\",\"使用Redis作为数据缓存层，减少对数据库的直接访问。\",\"利用Redis的列表或有序集合作为任务队列，进行任务调度。\",\"使用Redis的哈希或字符串存储分析结果，便于后续处理。\",\"应用场景：\",\"缓存航班、酒店和旅游套餐信息，提高搜索速度。\",\"实时更新航班状态和酒店可用性。\",\"管理用户预订和旅行历史。\",\"实际使用方案：\",\"使用Redis缓存热门查询结果和常用数据，减少数据库负载。\",\"利用Redis的发布订阅功能实时更新航班和酒店信息。\",\"使用Redis的哈希结构存储用户预订信息，列表结构存储旅行历史。\",\"应用场景：\",\"实时监控能源消耗数据。\",\"管理智能电网的配置和状态。\",\"存储和快速检索能源使用历史记录。\",\"实际使用方案：\",\"使用Redis的发布订阅功能监控实时数据流。\",\"利用Redis的数据结构存储电网配置，支持快速读取和更新。\",\"使用Redis的列表或有序集合记录能源使用数据，便于分析和报告。\"]},\"549\":{\"c\":[\"Redis\"]},\"550\":{\"c\":[\"Redis\",\"Redis应用场景\"]},\"551\":{\"h\":\"Canal解决Mysql和Redis数据同步(TCP)\",\"t\":[\"首选需要开启Mysql的bin-log\",\"然后需要安装canal-server伪装成slave同步mysql中的数据\",\"编写canal-client客户端监听canal-server，把数据从canal-server中同步过来\",\"然后把拿到的数据写入Redis即可\"]},\"552\":{\"h\":\"开启Mysql bin-log日志\",\"t\":[\"找到Mysql安装目录中的my.ini 配置文件，我以mysql 5.5为例,在 mysqld 下做如下配置\",\"image-20240717073638153\",\"[mysqld] #开启bInlog log-bin=mysql-bin #给mysql服务指定一个唯一的ID server-id=1 #以数据的方式写binlog日志 ：statement 是记录SQL，row是记录数据 binlog-format=ROW #同步的数据库名 #binlog-do-db=canaldb #忽略的表 binlog-ignore-db=mysql # 启动mysql时不启动grant-tables授权表 skip-grant-tables\",\"修改好之后，重启Mysql服务。注意：我这里指定了需要同步的数据库为canaldb，所以需要创建一个数据库，同时创建了一个employee表作为演示 然后创建一个用户提供给canal来链接Mysql做数据同步\",\"flush privileges; #创建用户cannal CREATE USER canal IDENTIFIED BY 'canal'; #把所有权限赋予canal，密码也是canal GRANT ALL PRIVILEGES ON canaldb.user TO 'canal'@'%' identified by \\\"canal\\\"; //GRANT SELECT, REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO 'canal'@'%' identified by \\\"canal\\\"; #刷新权限 flush privileges;\",\"到这，Mysql部分就搞定了\"]},\"553\":{\"h\":\"安装Canal\",\"t\":[\"去官网下载 Canal : https://github.com/alibaba/canal/releases ，我使用的是canal.deployer-1.1.5.tar.gz版本\",\"下载好之后解压，目录结构如下 接下来修改instance 配置文件 ： conf/example/instance.properties\",\"# 按需修改成自己的数据库信息 ################################################# ... #我的端口是3307 canal.instance.master.address=192.168.1.20:3307 # username/password,数据库的用户名和密码 ... #刚才开通的mysql的账户密码 canal.instance.dbUsername = canal canal.instance.dbPassword = canal ... # 同步的表的规则 # table regex # 同步所有表 #canal.instance.filter.regex=.*\\\\\\\\..* # 同步多个表，用逗号隔开 canal.instance.filter.regex=canaldb.employee,canaldb.dept ################################################# ...省略...\",\"这里注意如下几个东西，其他的不用管\",\"master.address ：Mysql的地址，我的端口是3307，默认是3306\",\"dbUsername ：上面开通的Mysql用户\",\"dbPassword ： 密码\",\"ccanal.instance.filter.regex ： 要同步的表，多个表用逗号隔开\",\"接着修改canal 配置文件 conf/canal.properties\",\"# ... # 可选项: tcp(默认), kafka, RocketMQ # 这里使用tcp , 还支持kafka和rocketmq canal.serverMode = tcp ...省略...\",\"这里需要注意 : canal.serverMode = tcp： 我这里以tcp为例,指的是以tcp协议把数据同步数据，而不是同步到mq\",\"配置好之后，找到 canal 安装目录下 bin目录下的 startup.bat 双击启动，linux上启动：startup.sh \"]},\"554\":{\"h\":\"编写canal-client\",\"t\":[\"接下来我们需要在项目中整合canal-client来同步canal-server中的数据，然后写入Redis\",\"第一步：导入如下依赖，我这里使用了 canal-spring-boot-starter 来整合canal-client\",\"<parent> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-parent</artifactId> <version>2.2.5.RELEASE</version> </parent> <dependencies> <dependency> <groupId>org.projectlombok</groupId> <artifactId>lombok</artifactId> <optional>true</optional> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-test</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-data-redis</artifactId> </dependency> <!--Canal 依赖--> <dependency> <groupId>top.javatool</groupId> <artifactId>canal-spring-boot-starter</artifactId> <version>1.2.1-RELEASE</version> </dependency> <dependency> <groupId>com.alibaba</groupId> <artifactId>fastjson</artifactId> <version>1.2.50</version> </dependency> </dependencies>\",\"第二步：在yaml配置canal地址，以及Redis相关参数\",\"canal: server: 127.0.0.1:11111 #canal的地址 destination: example #默认的数据同步的目的地 spring: redis: host: 127.0.0.1 password: 123456\",\"编写启动类\",\"@SpringBootApplication public class CanalApplication { public static void main(String[] args) { SpringApplication.run(CanalApplication.class,args); } }\",\"第三步：对Redis做配置，实现自动序列化\",\"//缓存的配置 @Configuration public class RedisConfig { @Resource private RedisConnectionFactory factory; //使用JSON进行序列化 @Bean public RedisTemplate<Object, Object> redisTemplate() { RedisTemplate<Object, Object> redisTemplate = new RedisTemplate<>(); redisTemplate.setConnectionFactory(factory); //JSON格式序列化 GenericFastJsonRedisSerializer serializer = new GenericFastJsonRedisSerializer(); //key的序列化 redisTemplate.setKeySerializer(serializer); //value的序列化 redisTemplate.setValueSerializer(serializer); //hash结构key的虚拟化 redisTemplate.setHashKeySerializer(new StringRedisSerializer()); //hash结构value的虚拟化 redisTemplate.setHashValueSerializer(serializer); return redisTemplate; } }\",\"第四步：编写实体类，对应要同步的数据库的表\",\"@Data public class Employee { private Long id; private String username; }\",\"第五步：编写数据同步处理器，canal-client提供了EntryHandler，该handler中提供了insert,delete,update方法，当监听到某张表的相关操作后，会回调对应的方法把数据传递进来，我们就可以拿到数据往Redis同步了。\",\"@CanalTable(\\\"employee\\\") @Component @Slf4j public class EmployeeHandler implements EntryHandler<Employee> { //把数据往Redis同步 @Autowired private RedisTemplate<Object,Object> redisTemplate; @Override public void insert(Employee employee) { redisTemplate.opsForValue().set(\\\"EMP:\\\"+employee.getId(),employee); } @Override public void delete(Employee employee) { redisTemplate.delete(\\\"EMP:\\\"+employee.getId()); } @Override public void update(Employee before, Employee after) { redisTemplate.opsForValue().set(\\\"EMP:\\\"+after.getId(),after); } }\",\"@CanalTable(“employee”) ：监听的表\",\"EntryHandler<Employee> ： 拿到employee表的改变后的数据之后，会封装为Employee实体 投递给我们\",\"到这里代码就编写完成了，启动程序可以从控制台看到canal-client在不同尝试获取数据\",\" 启动redis后， 尝试手动修改数据库 employee表中的数据，然后实例redis-cli 查看 数据，下面是表中的数据\",\"在这里插入图片描述\",\"下面是redis中的数据\",\"在这里插入图片描述\",\"版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。 \",\"原文链接：https://blog.csdn.net/u014494148/article/details/126433498\"]},\"555\":{\"c\":[\"Redis\"]},\"556\":{\"c\":[\"Redis\",\"Canal\",\"数据同步\"]},\"557\":{\"h\":\"Canal解决Mysql和Redis数据同步(MQ)\"},\"558\":{\"h\":\"Mysql和Redis数据同步方案\",\"t\":[\"根据上面所说，我们就可以通过Canal去自动同步数据库的binlog数据日志文件，然后再把数据同步到Redis，从而达到Mysql和Redis自动同步的功能。很遗憾的是Canal没办法直接把数据库同步到Redis，它支持的是组件有 ： mysql、Kafka、ElasticSearch、Hbase、RocketMQ等 当然 canal 特别设计了 client-server 模式，交互协议使用 protobuf 3.0 , client 端可采用不同语言实现不同的消费逻辑\",\"canal java 客户端: https://github.com/alibaba/canal/wiki/ClientExample\",\"canal c# 客户端: https://github.com/dotnetcore/CanalSharp\",\"canal go客户端: https://github.com/CanalClient/canal-go\",\"canal Python客户端: https://github.com/haozi3156666/canal-python\",\"canal 作为 MySQL binlog 增量获取和解析工具，可将变更记录投递到 MQ 系统中，比如 Kafka/RocketMQ，可以借助于 MQ 的多语言能力,因此我们可以使用下面这种方案来同步数据 这里对流程做一个解释\",\"首选我们需要开启Mysql的bin-log日志文件\",\"接着安装好Canal去同步bin-log日志，同时配置RocketMQ地址，Canal会把消息推送给MQ\",\"需要编写Java客户端去监听MQ中的消息，然后往Redis中进行同步\"]},\"559\":{\"h\":\"开启Mysql bin-log日志\",\"t\":[\"找到Mysql安装目录中的my.ini 配置文件，我以mysql 5.5为例,在 mysqld 下做如下配置\",\"[mysqld] #开启bInlog log-bin=mysql-bin #给mysql服务指定一个唯一的ID server-id=1 #以数据的方式写binlog日志 ：statement 是记录SQL，row是记录数据 binlog-format=ROW #同步的数据库名 binlog-do-db=canaldb #忽略的表 binlog-ignore-db=mysql # 启动mysql时不启动grant-tables授权表 skip-grant-tables\",\"修改好之后，重启Mysql服务。注意：我这里指定了需要同步的数据库为canaldb，所以需要创建一个数据库，同时创建了一个employee表作为演示 然后创建一个用户提供给canal来链接Mysql做数据同步\",\"flush privileges; #创建用户cannal CREATE USER canal IDENTIFIED BY 'canal'; #把所有权限赋予canal，密码也是canal GRANT ALL PRIVILEGES ON canaldb.user TO 'canal'@'%' identified by \\\"canal\\\"; //GRANT SELECT, REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO 'canal'@'%' identified by \\\"canal\\\"; #刷新权限 flush privileges;\",\"到这，Mysql部分就搞定了\"]},\"560\":{\"h\":\"安装Canal\",\"t\":[\"去官网下载 Canal : https://github.com/alibaba/canal/releases ，我使用的是canal.deployer-1.1.5.tar.gz版本\",\"下载好之后解压，目录结构如下 接下来修改instance 配置文件 ： conf/example/instance.properties\",\"# 按需修改成自己的数据库信息 ################################################# ... #我的端口是3307 canal.instance.master.address=192.168.1.20:3307 # username/password,数据库的用户名和密码 ... #刚才开通的mysql的账户密码 canal.instance.dbUsername = canal canal.instance.dbPassword = canal ... ################################################# # mq config 数据同步到MQ中的topic名字 canal.mq.topic=example # 针对库名或者表名发送动态topic #canal.mq.dynamicTopic=mytest,.*,mytest.user,mytest\\\\\\\\..*,.*\\\\\\\\..* canal.mq.partition=0 # hash partition config #canal.mq.partitionsNum=3 #库名.表名: 唯一主键，多个表之间用逗号分隔 #canal.mq.partitionHash=mytest.person:id,mytest.role:id\",\"这里注意如下几个东西，其他的不用管\",\"master.address ：Mysql的地址，我的端口是3307，默认是3306\",\"dbUsername ：上面开通的Mysql用户\",\"dbPassword ： 密码\",\"canal.mq.topic=example ： 数据同步到MQ中的topic名字\",\"接着修改canal 配置文件 conf/canal.properties\",\"# ... # 可选项: tcp(默认), kafka, RocketMQ # 这里使用RocketMQ canal.serverMode = rocketMQ # ... ################################################## ######### RocketMQ ############# ################################################## rocketmq.producer.group = test rocketmq.enable.message.trace = false rocketmq.customized.trace.topic = rocketmq.namespace = # RocketMQ的地址 rocketmq.namesrv.addr = 127.0.0.1:9876 rocketmq.retry.times.when.send.failed = 0 rocketmq.vip.channel.enabled = false rocketmq.tag =\",\"这里需要注意2个东西\",\"canal.serverMode = rocketMQ ： 我这里以RocketMQ为例\",\"rocketmq.namesrv.addr = 127.0.0.1:9876 ： 指向RocketMQ的地址\",\"配置好之后，找到 canal 安装目录下 bin目录下的 startup.bat 双击启动，linux上启动：startup.sh \",\"对于RocketMQ没使用过的童鞋可以看我《RocketMQ极简入门专题》，启动Canal和RocketMQ之后，尝试往employee表中增加数据，观察MQ控制台是否有数据同步，访问http://localhost:8080/#/message 如下 点击 MESSAGE DETAIL 如下 数据是JSON格式存储到MQ中的 ， 这里可以看到数据同步于哪个数据库，哪个表，以及数据内容以及old老数据。注意这里的内容格式，后面我们需要封装对象\"]},\"561\":{\"h\":\"Java程序把数据同步到Redis\",\"t\":[\"接下来需要编写一个Java程序来消费MQ中的消息同步到Redis ，创建项目，导入依赖\",\"<parent> <groupId> org.springframework.boot</groupId> <artifactId>spring-boot-starter-parent</artifactId> <version>2.2.5.RELEASE</version> </parent> <dependencies> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> </dependency> <dependency> <groupId>org.apache.rocketmq</groupId> <artifactId>rocketmq-spring-boot-starter</artifactId> <version>2.0.4</version> </dependency> <!--整合Redis , 底层可以用jedis--> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-data-redis</artifactId> <exclusions> <exclusion> <groupId>io.lettuce</groupId> <artifactId>lettuce-core</artifactId> </exclusion> </exclusions> </dependency> <dependency> <groupId>redis.clients</groupId> <artifactId>jedis</artifactId> </dependency> </dependencies>\",\"编写yml配置MQ和Redis\",\"#..其他省略.. spring: redis: database: 0 host: 127.0.0.1 port: 6379 password: 123456 jedis: pool: max-wait: 2000ms min-idle: 2 max-idle: 8 rocketmq: name-server: 127.0.0.1:9876 # 是否开启自动配置 producer: enable-msg-trace: true group: \\\"service-producer\\\" # 消息最大长度 默认 1024 * 4 (4M) max-message-size: 4096 # 发送消息超时时间，默认 3000 send-message-timeout: 3000 # 发送消息失败重试次数，默认2 retry-times-when-send-failed: 2 retry-times-when-send-async-failed: 2\",\"编写实体类来封装MQ中的消息 , 注意： 下面的 CanalSynDto对象是根据MQ中的消息内容进行封装的，你可以把数据复制到在线JSON转换工具中进行分析。\",\"@Data @NoArgsConstructor @AllArgsConstructor public class Employee { private Long id; private String username; } @AllArgsConstructor @NoArgsConstructor @Data public class CanalSynDto { private List<Employee> data; private String database; private String table; private String type; //省略了一些不重要的内容 }\",\"编写MQ消费者代码，把MQ消息封装成 CanalSynDto 对象，然后取到data数据，再根据SQL的类型(insert,delete,update)对Redis进行数据同步\",\"@Slf4j @Component //对应了canal的instance.properties 中的canal.mq.topic=example @RocketMQMessageListener(topic = \\\"example\\\", //TOPIC主题， selectorExpression=\\\"*\\\" //tag标签 ,consumerGroup = \\\"canal-syn-consumer\\\" ,messageModel = MessageModel.CLUSTERING ) public class CanalSynListenner implements RocketMQListener<MessageExt> { //注入Redis API @Autowired private RedisTemplate<Object,Object> redisTemplate; @Override public void onMessage(MessageExt message) { try { //拿到MQ中的消息内容 String json = new String(message.getBody(), \\\"utf-8\\\"); //把数据转为实体类 CanalSynDto canalSynDto = JSON.parseObject(json, CanalSynDto.class); log.info(\\\"canal同步 {}\\\", canalSynDto); //如果是INSERT或者UPDATE,直接往Redis添加 if(canalSynDto.getType().equals(\\\"INSERT\\\") || canalSynDto.getType().equals(\\\"UPDATE\\\")){ //insert就添加，update就覆盖 canalSynDto.getData().forEach(employee -> { //以 ID为key,把对象存储到Redis中 redisTemplate.opsForValue().set(\\\"ID:\\\"+employee.getId(),employee); }); //删除命令 }else if (canalSynDto.getType().equals(\\\"DELETE\\\")){ canalSynDto.getData().forEach(employee -> { //以 ID为key,把对象从Redis中删除 redisTemplate.delete(\\\"ID:\\\"+employee.getId()); }); } } catch (UnsupportedEncodingException e) { e.printStackTrace(); } } }\",\"到这里代码就写完了，启动SpringBoot程序，对employee表中数据进行修改或者删除，观察Redis中的数据变化 ：Redis始终会随着Mysql变化而变化 \",\"我们的效果达到了，弱弱的问一句：Mysql实现ElasticSearch的数据同步你有方案吗？可以在评论区说出你的见解\"]},\"562\":{\"c\":[\"Redis\"]},\"563\":{\"c\":[\"Redis\",\"Canal\",\"数据同步\",\"MQ\"]},\"564\":{\"h\":\"Canal解决Mysql和Redis数据同步(MQ)\"},\"565\":{\"h\":\"Mysql 和 ElasticSearch 数据同步方案\",\"t\":[\"根据上面所说，我们就可以通过Canal去自动同步数据库的binlog数据日志文件，然后再把数据同步到ElasticSearch。Canal支持把数据同步到的组件有 ： mysql、Kafka、ElasticSearch、Hbase、RocketMQ等 \",\"和上一章节讲的Redis的同步流程不一样，因为Canal可以直接同步到ElasticSearch，只不过需要安装CanalAdapter来实现，流程如下 \",\"image-20240717150210528\"]},\"566\":{\"h\":\"开启Mysql bin-log日志\",\"t\":[\"找到Mysql安装目录中的my.ini 配置文件，我以mysql 5.5为例,在 mysqld 下做如下配置\",\"[mysqld] #开启bInlog log-bin=mysql-bin #给mysql服务指定一个唯一的ID server-id=1 #以数据的方式写binlog日志 ：statement 是记录SQL，row是记录数据 binlog-format=ROW #同步的数据库名 binlog-do-db=canaldb #忽略的表 binlog-ignore-db=mysql # 启动mysql时不启动grant-tables授权表 skip-grant-tables\",\"修改好之后，重启Mysql服务。注意：我这里指定了需要同步的数据库为canaldb，所以需要创建一个数据库，同时创建了一个employee表作为演示 然后创建一个用户提供给canal来链接Mysql做数据同步\",\"flush privileges; #创建用户cannal CREATE USER canal IDENTIFIED BY 'canal'; #把所有权限赋予canal，密码也是canal GRANT ALL PRIVILEGES ON canaldb.user TO 'canal'@'%' identified by \\\"canal\\\"; //GRANT SELECT, REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO 'canal'@'%' identified by \\\"canal\\\"; #刷新权限 flush privileges;\",\"到这，Mysql部分就搞定了\"]},\"567\":{\"h\":\"安装Canal\",\"t\":[\"去官网下载 Canal : https://github.com/alibaba/canal/releases ，我使用的是canal.deployer-1.1.5.tar.gz版本\",\"下载好之后解压，目录结构如下 接下来修改instance 配置文件 ： conf/example/instance.properties\",\"# 按需修改成自己的数据库信息 ################################################# ... #我的端口是3307 canal.instance.master.address=192.168.1.20:3307 # username/password,数据库的用户名和密码 ... #刚才开通的mysql的账户密码 canal.instance.dbUsername = canal canal.instance.dbPassword = canal ... ################################################# # mq config 数据同步到MQ中的topic名字 canal.mq.topic=example # 针对库名或者表名发送动态topic #canal.mq.dynamicTopic=mytest,.*,mytest.user,mytest\\\\\\\\..*,.*\\\\\\\\..* canal.mq.partition=0 # hash partition config #canal.mq.partitionsNum=3 #库名.表名: 唯一主键，多个表之间用逗号分隔 #canal.mq.partitionHash=mytest.person:id,mytest.role:id\",\"这里注意如下几个东西，其他的不用管\",\"master.address ：Mysql的地址，我的端口是3307，默认是3306\",\"dbUsername ：上面开通的Mysql用户\",\"dbPassword ： 密码\",\"canal.mq.topic=example ： 数据同步到MQ中的topic名字\",\"接着修改canal 配置文件 conf/canal.properties\",\"# ... # 可选项: tcp(默认), kafka, RocketMQ # 这里使用tcp canal.serverMode = tcp # ... ################################################## ######### RocketMQ ############# ################################################## rocketmq.producer.group = test rocketmq.enable.message.trace = false rocketmq.customized.trace.topic = rocketmq.namespace = # RocketMQ的地址 rocketmq.namesrv.addr = 127.0.0.1:9876 rocketmq.retry.times.when.send.failed = 0 rocketmq.vip.channel.enabled = false rocketmq.tag =\",\"这里需要注意：canal.serverMode = tcp ： 注意这里是tcp，tcp指的是直接同步到客户端。和上一章节Redis同步还是有点区别，上一章节我们是同步到RocketMQ\",\"配置好之后，找到 canal 安装目录下 bin目录下的 bin/startup.bat 双击启动，linux上启动：bin/startup.sh \"]},\"568\":{\"h\":\"安装 canal-adapter\",\"t\":[\"去官网下载 Canal-adapter : https://github.com/alibaba/canal/releases ，我使用的是canal.adapter-1.1.5.tar.gz 版本 \",\"下载好之后解压，目录如下 进入到config目录，修改 config/application.yml 文件 修改内容如下\",\"...省略... canal.conf: mode: tcp #tcp kafka rocketMQ rabbitMQ ...省略... consumerProperties: # canal tcp consumer canal.tcp.server.host: 127.0.0.1:11111 #canal的地址 ...省略... srcDataSources: defaultDS: #同步的数据库，账号，密码，修改为自己的数据库信息 url: jdbc:mysql://127.0.0.1:3307/canaldb?useUnicode=true username: root password: admin canalAdapters: #adapter配置 - instance: example # canal instance Name or mq topic name groups: - groupId: g1 outerAdapters: - name: logger - name: es6 #es配置，这里使用9200通信 也就是rest模式 hosts: \\\"http://127.0.0.1:9200\\\" properties: mode: rest # or rest # # security.auth: test:123456 # only used for rest mode cluster.name: elasticsearch #集群名字\",\"上面把要修改的内容展示出来了，其他的不用管，具体要修改的如下\",\"canal.tcp.server.host: 127.0.0.1:11111 ：这个需要指向canal地址\",\"srcDataSources.defaultDS : 这个跟的是要同步的数据库，包括用户名密码要修改为自己的\",\"outerAdapters ：代表数据向哪儿输出，我们配置的是ES6，- name ：es6因为我使用的是es6 , hosts使用的是es的9200端口，mode使用rest方式。也可以使用9300，transport模式\",\"然后进入es6目录，基于mytest_user.yml拷贝重命名一个employee.yml(对应要同步的数据库表),然后删除其他的yml文件\",\" employee.yml内容如下\",\"dataSourceKey: defaultDS destination: example groupId: g1 esMapping: _index: employee #索引库名字 _type: _doc #es的type _id: _id #id作为文档ID upsert: true #pk: id # 如果不需要_id, 则需要指定一个属性为主键属性 #sql映射 ，把列名和es进行一一映射 _id 会作为文档ID sql: \\\"select id _id,username from employee\\\" # objFields: # _labels: array:; etlCondition: \\\"where a.c_time>={}\\\" commitBatch: 3000\",\"几个需要修改的参数\",\"_index: employee #索引库名字\",\"_type: _doc #es的type\",\"_id: _id #id作为文档ID\",\"sql : sql映射 ，根据查询的列名和es的field进行一一映射 ， 支持join连表查询\",\"到这Canal的配置完成了，启动 canal-adapapter : bin/startup.bat 但是我在启动的时候出现了一个问题 这个是因为Canal中的druid包和 canal.adapter\\\\plugin\\\\client-adapter.es6x-1.1.5-jar-with-dependencies.jar 包中的druid冲突了，我的做法是这样的\",\"1.下载canal源码：https://github.com/alibaba/canal/tree/canal-1.1.5 \",\"2.使用IDEA打开项目，找到 escore模块，修改pom.xml中druid增加scope如下\",\" <dependency> <groupId>com.alibaba</groupId> <artifactId>druid</artifactId> <scope>provided</scope> </dependency>\",\"3.使用mvn install 重新打包 es6x 模块，然后再target中得到 client-adapter.es6x-1.1.5-jar-with-dependencies.jar\",\"4.把 client-adapter.es6x-1.1.5-jar-with-dependencies.jar 拷贝到canal-adapter安装目录的plugin目录中，覆盖原本的client-adapter.es6x-1.1.5-jar-with-dependencies.jar。\",\"下面我提供一份打包好的 client-adapter.es6x-1.1.5-jar-with-dependencies.jar ，您直接下载即可\",\"5.依次启动canal ，canal-adpater \"]},\"569\":{\"h\":\"ES创建索引库和映射\",\"t\":[\"启动ES6，启动kibana , 创建索引库和映射，注意：需要对应 canal-adapter配置的索引库\",\"PUT employee #创建映射 PUT employee/_doc/_mapping { \\\"_doc\\\" : { \\\"properties\\\" : { \\\"id\\\" : { \\\"type\\\" : \\\"long\\\" }, \\\"username\\\" : { \\\"type\\\" : \\\"text\\\", \\\"analyzer\\\" : \\\"ik_smart\\\" } } } } 1234567891011121314151617\",\"最后修改数据库employee表中的数据，然后使用GET employee/_search 观察ES中是否有数据同步 \",\"文章到这就结束了，喜欢的话请给个好评，你的鼓励是我最大的动力，谢谢。\"]},\"570\":{\"c\":[\"Redis\"]},\"571\":{\"c\":[\"Redis\",\"Canal\",\"数据同步\",\"MQ\"]},\"572\":{\"h\":\"Redis缓存三兄弟\",\"t\":[\"more 注释之前的内容被视为文章摘要。\",\"image-20240716232915559\",\"缓存穿透：\",\"指查询一个不存在的数据，由于缓存不命中，将去查询数据库，但是数据库也无此记录，我们没有将这次查询的null写入\",\"缓存，这将导致这个不存在的数据每次请求都要到存储层去查询，失去了缓存的意义。\",\"风险：\",\"利用不存在的数据进行攻击，数据库压力瞬间增大，最终导致崩溃\",\"解决：\",\"null结果缓存，并加入短暂过期时间\",\"布隆过滤器判断是否存在\",\"image-20240716232939467\",\"缓存击穿：\",\"对于一些设置了过期时间的key，如果这些key可能在某些时间内被超高并发的访问，是一种非常热点的数据\",\"，如果这个key在大量请求同时进来前刚好失效，那么所有对这个key的数据查询都落到db，我们称为缓存击穿。\",\"解决：\",\"分布式锁\",\"大量并发只让一人去查，其他人等待，查询到以后释放锁，其他人获取到锁，先查询缓存，就会有数据，不用去DB查询\",\"逻辑过期\",\"第二种方案可以设置当前key逻辑过期，大概是思路如下：\",\"①：在设置key的时候，设置一个过期时间字段一块存入缓存中，不给当前key设置过期时间\",\"②：当查询的时候，从redis取出数据后判断时间是否过期\",\"③：如果过期则开通另外一个线程进行数据同步，当前线程正常返回数据，这个数据不是最新\",\"当然两种方案各有利弊：\",\"如果选择数据的强一致性，建议使用分布式锁的方案，性能上可能没那么高，锁需要等，也有可能产生死锁的问题\",\"如果选择key的逻辑删除，则优先考虑的高可用性，性能比较高，但是数据同步这块做不到强一致。\",\"image-20240716233013863\",\"缓存雪崩：\",\"缓存雪崩是指我们在设置缓存key时采用了相同的过期时间，导致缓存在某一时刻同时失效，请求全部转发到DB，DB压力瞬时压力过重雪崩\",\"解决：\",\"在原有的失效时间基础上行增加一个随机值，比如1-5分钟随机，这样每一个缓存的过期时间的重复率就会降低，\",\"就很难引发集体失效的事件\"]},\"573\":{\"c\":[\"Redis\"]},\"574\":{\"c\":[\"缓存穿透\",\"缓存击穿\",\"缓存雪崩\"]},\"575\":{\"h\":\"Redis缓存穿透-布隆过滤器\",\"t\":[\"more 注释之前的内容被视为文章摘要。\"]},\"576\":{\"h\":\"缓存穿透\",\"t\":[\"我举个蘑菇博客中的案例来说，我现在有一个博客详情页，然后博客详情页中的内容假设是存储在Redis中的，然后通过博客的Uid进行获取，正常的情况是：用户进入博客详情页，然后通过uid获取redis中缓存的文章详情，如果有内容就直接访问，如果不存在内容，那么需要访问数据库，然后从数据库中查询我们的博客详情后，然后在存储到redis中，最后在把数据返回给我们的页面。\",\"但是可能存在一些非法用户，他可能会模拟出很多不存在的key，然后通过该key去请求后台，首先redis的缓存没有命中，那么就去请求数据库，最后数据库没有查询出该内容，这样很多个非法的请求直接打在数据库中，可能会导致数据库直接宕机，无法对外提供服务。这就是我们所说的缓存穿透问题\"]},\"577\":{\"h\":\"简单的解决方法\",\"t\":[\"针对这个情况，我们有一种简单的解决方法就是，在数据库没有查询该条数据的时候，我们让该key缓存一个 空数据，这样用户再次以该key请求后台的时候，会直接返回null，避免了再次请求数据库。\"]},\"578\":{\"h\":\"布隆过滤器\"},\"579\":{\"h\":\"什么是布隆过滤器\",\"t\":[\"布隆过滤器的巨大作用 ，就是能够迅速判断一个元素是否存在一个集合中。因此次他有如下几个使用场景\",\"网站爬虫对URL的去重，避免爬取相同的URL\",\"反垃圾邮件，从数十亿个垃圾邮件列表中判断某邮箱是否是垃圾邮件（同理，垃圾短信）\",\"缓存穿透，将所有可能的数据缓存放到布隆过滤器中，当黑客访问不存在的缓存时，迅速返回避免缓存以及DB挂掉。\"]},\"580\":{\"h\":\"原理\",\"t\":[\"布隆过滤器其内部维护了一个全为0的bit数组，需要说明的是，布隆过滤器有一个误判的概念，误判率越低，则数组越长，所占空间越大。误判率越高则数组越小，所占的空间多少。\",\"假设，根据误判率，我们生成一个10位的bit数组，以及2个hash函数 f1 和 f2，如下图所示：生成的数组的位数 和 hash函数的数量，我们不用去关心如何生成的，这是有数学论文进行验证。\",\"img\",\"然后我们输入一个集合，集合中包含 N1 和 N2，我们通过计算 f1(N1) = 2，f2(N1) = 5，则将数组下标为2 和下标为5的位置设置成1，就得到了下图\",\"img\",\"同理，我们再次进行计算 N2的值， f1(N2) = 3，f2(N2) = 6。得到如下所示的图\",\"img\",\"这个时候，假设我们有第三个数N3过来了，我们需要判断N3是否在集合 [N1,N2]中，我们需要做的操作就是，使用f1 和 f2 计算出数组中的地址\",\"若值恰巧都位于上图的红色位置，我们认为 N3在集合 [N1,N2] 中\",\"若值有一个不位于上图的红色部分，我们认为N3不在集合[N1,N2] 中\",\"这就是布隆过滤器的计算原理\"]},\"581\":{\"h\":\"使用\",\"t\":[\"在java中使用布隆过滤器，我们需要首先引入依赖，布隆过滤器拥有Google提供的一个开箱即用的组件，来帮助我们实现布隆过滤器，其实布隆过滤器的核心思想其实并不难，难的是在于如何设计随机映射函数，到底映射几次，二进制向量设置多少比较合适。\",\"<dependencies> <dependency> <groupId>com.google.guava</groupId> <artifactId>guava</artifactId> <version>22.0</version> </dependency> </dependencies>\",\"然后我们编写代码，测试某元素是否存在于百万元素集合中\",\" private static int size = 1000000;//预计要插入多少数据 private static double fpp = 0.01;//期望的误判率 private static BloomFilter<Integer> bloomFilter = BloomFilter.create(Funnels.integerFunnel(), size, fpp); public static void main(String[] args) { //插入数据 for (int i = 0; i < 1000000; i++) { bloomFilter.put(i); } int count = 0; for (int i = 1000000; i < 2000000; i++) { if (bloomFilter.mightContain(i)) { count++; System.out.println(i + \\\"误判了\\\"); } } System.out.println(\\\"总共的误判数:\\\" + count); }\"]},\"582\":{\"h\":\"代码分析\",\"t\":[\"上面的代码中，我们创建了一个布隆过滤器，其中有两个重要的参数，分别是我们要预计插入的数据和我们所期望的误判率，误判率率不能为0。\",\"我们首先向布隆过滤器中插入 0 ~ 100万条数据，然后在用 100万 ~ 200万的数据进行测试\",\"我们输出结果，查看一下误判率\",\"1999501误判了 1999567误判了 1999640误判了 1999697误判了 1999827误判了 1999942误判了 总共的误判数:10314\",\"现在有100万不存在的数据，误判了10314次，我们计算一下误判率\",\"10314 / 1000000 = 0.010314\",\"和我们之前定义的误判率为0.01相差无几\"]},\"583\":{\"h\":\"参考\",\"t\":[\"https://www.cnblogs.com/rinack/p/9712477.html\",\"https://www.jianshu.com/p/2104d11ee0a2\",\"https://www.cnblogs.com/CodeBear/p/10911177.html\"]},\"584\":{\"c\":[\"Redis\"]},\"585\":{\"c\":[\"缓存穿透\",\"布隆过滤器\"]},\"586\":{\"h\":\"Redis缓存数据和数据库数据一致性\",\"t\":[\"Redis缓存数据和数据库数据如何保持一致性\",\"对于这种两个库如何保证一致性的问题，可以从两大方式去讨论。\",\"一、同步还是异步，\",\"二、需要强一致性还是最终一致性。\"]},\"587\":{\"h\":\"双写模式\",\"t\":[\"当修改了数据库的数据也要同时更新缓存的数据，缓存和数据库的数据要保持一致。\",\"image-20240717031153944\"]},\"588\":{\"h\":\"失效模式\",\"t\":[\"数据库更新后，将缓存中数据删除，等待下次主动查询进行更新\",\"缺点：在删除缓存前，有请求读到缓存，那么读取到的数据就不是最新的\",\"image-20240717031245889\"]},\"589\":{\"h\":\"先删除缓存，后更新数据库\",\"t\":[\"image-20240717031931497\"]},\"590\":{\"h\":\"先更新数据库，后删除缓存\",\"t\":[\"image-20240717032141396\",\"无论是先删数据库还是先删缓存，都是会出现问题，包括下面的延时双删也是不能保证100%的一致性，需要强一致性那么要加锁。\",\"image-20240717040018130\",\"image-20240717040036393\"]},\"591\":{\"h\":\"延迟双删\",\"t\":[\"读操作：缓存命中，直接返回；缓存未命中查询数据库，写入缓存，设定超时时间 写操作：延迟双删（因为数据有变更，数据在写的过程中，并发读会产生脏数据）\",\"image-20240717032251588\",\"若是网络延迟，在箭头处才写入旧数据的缓存，还是会出现问题。\",\"此外，因为删除缓存和更新数据库不是原子操作，还可能会出现问题。这种方案只适合最终一致性，想要强一致性就加锁或者直接去掉Rredis直接去MySQL查。或者去掉MySQL，直接全部数据放Redis再持久化，这样就不用考虑一致性问题。\"]},\"592\":{\"h\":\"加锁（强一致性）\",\"t\":[\"采用Redisson提供的读写锁\",\"①共享锁：读锁readLock，加锁之后，其他线程可以共享读操作\",\"②排他锁：独占锁writeLock也叫，加锁之后，阻塞其他线程读写操作\",\"基于MQ\",\"image-20240717000827587\",\"基于Canal\",\"image-20240717073627838\",\"image-20240717073638153\",\"无论是双写模式还是失效模式，都会导致缓存的不一致问题。即多个实例同时更新会出事。怎么办？\",\"1、如果是用户纬度数据（订单数据、用户数据），这种并发几率非常小，不用考虑这个问题，缓存数据加上过期时间，每隔一段时间触发读的主动更新即可\",\"2、如果是菜单，商品介绍等基础数据，也可以去使用canal订阅binlog的方式。\",\"3、缓存数据+过期时间也足够解决大部分业务对于缓存的要求。\",\"4、通过加锁保证并发读写，写写的时候按顺序排好队。读读无所谓。所以适合使用读写锁。（业务不关心脏数据，允许临时脏数据可忽略）；\",\"总结：\",\"我们能放入缓存的数据本就不应该是实时性、一致性要求超高的。所以缓存数据的时候加上过期时间，保证每天拿到当前最新数据即可。\",\"我们不应该过度设计，增加系统的复杂性\",\"遇到实时性、一致性要求高的数据，就应该查数据库，即使慢点。\",\"image-20240717031606230\"]},\"593\":{\"c\":[\"Redis\"]},\"594\":{\"c\":[\"一致性\",\"缓存数据和数据库数据一致性\"]},\"595\":{\"h\":\"Redis缓存穿透-布隆过滤器\",\"t\":[\"more 注释之前的内容被视为文章摘要。\"]},\"596\":{\"h\":\"缓存穿透\",\"t\":[\"我举个蘑菇博客中的案例来说，我现在有一个博客详情页，然后博客详情页中的内容假设是存储在Redis中的，然后通过博客的Uid进行获取，正常的情况是：用户进入博客详情页，然后通过uid获取redis中缓存的文章详情，如果有内容就直接访问，如果不存在内容，那么需要访问数据库，然后从数据库中查询我们的博客详情后，然后在存储到redis中，最后在把数据返回给我们的页面。\",\"但是可能存在一些非法用户，他可能会模拟出很多不存在的key，然后通过该key去请求后台，首先redis的缓存没有命中，那么就去请求数据库，最后数据库没有查询出该内容，这样很多个非法的请求直接打在数据库中，可能会导致数据库直接宕机，无法对外提供服务。这就是我们所说的缓存穿透问题\"]},\"597\":{\"h\":\"简单的解决方法\",\"t\":[\"针对这个情况，我们有一种简单的解决方法就是，在数据库没有查询该条数据的时候，我们让该key缓存一个 空数据，这样用户再次以该key请求后台的时候，会直接返回null，避免了再次请求数据库。\"]},\"598\":{\"h\":\"布隆过滤器\"},\"599\":{\"h\":\"什么是布隆过滤器\",\"t\":[\"布隆过滤器的巨大作用 ，就是能够迅速判断一个元素是否存在一个集合中。因此次他有如下几个使用场景\",\"网站爬虫对URL的去重，避免爬取相同的URL\",\"反垃圾邮件，从数十亿个垃圾邮件列表中判断某邮箱是否是垃圾邮件（同理，垃圾短信）\",\"缓存穿透，将所有可能的数据缓存放到布隆过滤器中，当黑客访问不存在的缓存时，迅速返回避免缓存以及DB挂掉。\"]},\"600\":{\"h\":\"原理\",\"t\":[\"布隆过滤器其内部维护了一个全为0的bit数组，需要说明的是，布隆过滤器有一个误判的概念，误判率越低，则数组越长，所占空间越大。误判率越高则数组越小，所占的空间多少。\",\"假设，根据误判率，我们生成一个10位的bit数组，以及2个hash函数 f1 和 f2，如下图所示：生成的数组的位数 和 hash函数的数量，我们不用去关心如何生成的，这是有数学论文进行验证。\",\"img\",\"然后我们输入一个集合，集合中包含 N1 和 N2，我们通过计算 f1(N1) = 2，f2(N1) = 5，则将数组下标为2 和下标为5的位置设置成1，就得到了下图\",\"img\",\"同理，我们再次进行计算 N2的值， f1(N2) = 3，f2(N2) = 6。得到如下所示的图\",\"img\",\"这个时候，假设我们有第三个数N3过来了，我们需要判断N3是否在集合 [N1,N2]中，我们需要做的操作就是，使用f1 和 f2 计算出数组中的地址\",\"若值恰巧都位于上图的红色位置，我们认为 N3在集合 [N1,N2] 中\",\"若值有一个不位于上图的红色部分，我们认为N3不在集合[N1,N2] 中\",\"这就是布隆过滤器的计算原理\"]},\"601\":{\"h\":\"使用\",\"t\":[\"在java中使用布隆过滤器，我们需要首先引入依赖，布隆过滤器拥有Google提供的一个开箱即用的组件，来帮助我们实现布隆过滤器，其实布隆过滤器的核心思想其实并不难，难的是在于如何设计随机映射函数，到底映射几次，二进制向量设置多少比较合适。\",\"<dependencies> <dependency> <groupId>com.google.guava</groupId> <artifactId>guava</artifactId> <version>22.0</version> </dependency> </dependencies>\",\"然后我们编写代码，测试某元素是否存在于百万元素集合中\",\" private static int size = 1000000;//预计要插入多少数据 private static double fpp = 0.01;//期望的误判率 private static BloomFilter<Integer> bloomFilter = BloomFilter.create(Funnels.integerFunnel(), size, fpp); public static void main(String[] args) { //插入数据 for (int i = 0; i < 1000000; i++) { bloomFilter.put(i); } int count = 0; for (int i = 1000000; i < 2000000; i++) { if (bloomFilter.mightContain(i)) { count++; System.out.println(i + \\\"误判了\\\"); } } System.out.println(\\\"总共的误判数:\\\" + count); }\"]},\"602\":{\"h\":\"代码分析\",\"t\":[\"上面的代码中，我们创建了一个布隆过滤器，其中有两个重要的参数，分别是我们要预计插入的数据和我们所期望的误判率，误判率率不能为0。\",\"我们首先向布隆过滤器中插入 0 ~ 100万条数据，然后在用 100万 ~ 200万的数据进行测试\",\"我们输出结果，查看一下误判率\",\"1999501误判了 1999567误判了 1999640误判了 1999697误判了 1999827误判了 1999942误判了 总共的误判数:10314\",\"现在有100万不存在的数据，误判了10314次，我们计算一下误判率\",\"10314 / 1000000 = 0.010314\",\"和我们之前定义的误判率为0.01相差无几\"]},\"603\":{\"h\":\"参考\",\"t\":[\"https://www.cnblogs.com/rinack/p/9712477.html\",\"https://www.jianshu.com/p/2104d11ee0a2\",\"https://www.cnblogs.com/CodeBear/p/10911177.html\"]},\"604\":{\"c\":[\"Redis\"]},\"605\":{\"c\":[\"缓存穿透\",\"布隆过滤器\"]},\"606\":{\"h\":\"Redis缓存穿透-布隆过滤器\",\"t\":[\"more 注释之前的内容被视为文章摘要。\"]},\"607\":{\"h\":\"缓存穿透\",\"t\":[\"我举个蘑菇博客中的案例来说，我现在有一个博客详情页，然后博客详情页中的内容假设是存储在Redis中的，然后通过博客的Uid进行获取，正常的情况是：用户进入博客详情页，然后通过uid获取redis中缓存的文章详情，如果有内容就直接访问，如果不存在内容，那么需要访问数据库，然后从数据库中查询我们的博客详情后，然后在存储到redis中，最后在把数据返回给我们的页面。\",\"但是可能存在一些非法用户，他可能会模拟出很多不存在的key，然后通过该key去请求后台，首先redis的缓存没有命中，那么就去请求数据库，最后数据库没有查询出该内容，这样很多个非法的请求直接打在数据库中，可能会导致数据库直接宕机，无法对外提供服务。这就是我们所说的缓存穿透问题\"]},\"608\":{\"h\":\"简单的解决方法\",\"t\":[\"针对这个情况，我们有一种简单的解决方法就是，在数据库没有查询该条数据的时候，我们让该key缓存一个 空数据，这样用户再次以该key请求后台的时候，会直接返回null，避免了再次请求数据库。\"]},\"609\":{\"h\":\"布隆过滤器\"},\"610\":{\"h\":\"什么是布隆过滤器\",\"t\":[\"布隆过滤器的巨大作用 ，就是能够迅速判断一个元素是否存在一个集合中。因此次他有如下几个使用场景\",\"网站爬虫对URL的去重，避免爬取相同的URL\",\"反垃圾邮件，从数十亿个垃圾邮件列表中判断某邮箱是否是垃圾邮件（同理，垃圾短信）\",\"缓存穿透，将所有可能的数据缓存放到布隆过滤器中，当黑客访问不存在的缓存时，迅速返回避免缓存以及DB挂掉。\"]},\"611\":{\"h\":\"原理\",\"t\":[\"布隆过滤器其内部维护了一个全为0的bit数组，需要说明的是，布隆过滤器有一个误判的概念，误判率越低，则数组越长，所占空间越大。误判率越高则数组越小，所占的空间多少。\",\"假设，根据误判率，我们生成一个10位的bit数组，以及2个hash函数 f1 和 f2，如下图所示：生成的数组的位数 和 hash函数的数量，我们不用去关心如何生成的，这是有数学论文进行验证。\",\"img\",\"然后我们输入一个集合，集合中包含 N1 和 N2，我们通过计算 f1(N1) = 2，f2(N1) = 5，则将数组下标为2 和下标为5的位置设置成1，就得到了下图\",\"img\",\"同理，我们再次进行计算 N2的值， f1(N2) = 3，f2(N2) = 6。得到如下所示的图\",\"img\",\"这个时候，假设我们有第三个数N3过来了，我们需要判断N3是否在集合 [N1,N2]中，我们需要做的操作就是，使用f1 和 f2 计算出数组中的地址\",\"若值恰巧都位于上图的红色位置，我们认为 N3在集合 [N1,N2] 中\",\"若值有一个不位于上图的红色部分，我们认为N3不在集合[N1,N2] 中\",\"这就是布隆过滤器的计算原理\"]},\"612\":{\"h\":\"使用\",\"t\":[\"在java中使用布隆过滤器，我们需要首先引入依赖，布隆过滤器拥有Google提供的一个开箱即用的组件，来帮助我们实现布隆过滤器，其实布隆过滤器的核心思想其实并不难，难的是在于如何设计随机映射函数，到底映射几次，二进制向量设置多少比较合适。\",\"<dependencies> <dependency> <groupId>com.google.guava</groupId> <artifactId>guava</artifactId> <version>22.0</version> </dependency> </dependencies>\",\"然后我们编写代码，测试某元素是否存在于百万元素集合中\",\" private static int size = 1000000;//预计要插入多少数据 private static double fpp = 0.01;//期望的误判率 private static BloomFilter<Integer> bloomFilter = BloomFilter.create(Funnels.integerFunnel(), size, fpp); public static void main(String[] args) { //插入数据 for (int i = 0; i < 1000000; i++) { bloomFilter.put(i); } int count = 0; for (int i = 1000000; i < 2000000; i++) { if (bloomFilter.mightContain(i)) { count++; System.out.println(i + \\\"误判了\\\"); } } System.out.println(\\\"总共的误判数:\\\" + count); }\"]},\"613\":{\"h\":\"代码分析\",\"t\":[\"上面的代码中，我们创建了一个布隆过滤器，其中有两个重要的参数，分别是我们要预计插入的数据和我们所期望的误判率，误判率率不能为0。\",\"我们首先向布隆过滤器中插入 0 ~ 100万条数据，然后在用 100万 ~ 200万的数据进行测试\",\"我们输出结果，查看一下误判率\",\"1999501误判了 1999567误判了 1999640误判了 1999697误判了 1999827误判了 1999942误判了 总共的误判数:10314\",\"现在有100万不存在的数据，误判了10314次，我们计算一下误判率\",\"10314 / 1000000 = 0.010314\",\"和我们之前定义的误判率为0.01相差无几\"]},\"614\":{\"h\":\"参考\",\"t\":[\"https://www.cnblogs.com/rinack/p/9712477.html\",\"https://www.jianshu.com/p/2104d11ee0a2\",\"https://www.cnblogs.com/CodeBear/p/10911177.html\"]},\"615\":{\"c\":[\"Redis\"]},\"616\":{\"c\":[\"缓存穿透\",\"布隆过滤器\"]},\"617\":{\"h\":\"Redis主从复制\",\"t\":[\"Redis主从复制原理，Redis主从复制配置。\",\"image-20240717182103796\",\"image-20240717181813999\"]},\"618\":{\"h\":\"是什么\",\"t\":[\"Redis的主从复制（Replication）是一种数据管理和扩展的策略，通过此机制可以将一个Redis服务器（称为主节点，Master）的数据实时复制到一个或多个其他Redis服务器（称为从节点，Slave）。这种架构设计主要用于实现数据冗余、提高读取性能以及构建高可用系统。以下是Redis主从复制的主要特点和工作原理：\"]},\"619\":{\"h\":\"为什么，主从复制主要的作用?\",\"t\":[\"数据冗余： 主从复制实现了数据的热备份，是持久化之外的一种数据冗余方 式。\",\"故障恢复： 当主节点出现问题时，可以由从节点提供服务，实现快速的故障恢 复 (实际上是一种服务的冗余) 。\",\"负载均衡： 在主从复制的基础上，配合读写分离，可以由主节点提供写服务， 由从节点提供读服务 （即写 Redis 数据时应用连接主节点，读 Redis 数据时应用 连接从节点） ，分担服务器负载。尤其是在写少读多的场景下，通过多个从节 点分担读负载，可以大大提高 Redis 服务器的并发量。\",\"高可用基石： 除了上述作用以外，主从复制还是哨兵和集群能够实施的 基 础 ，因此说主从复制是 Redis 高可用的基础。\"]},\"620\":{\"h\":\"优点和缺点\",\"t\":[\"主从复制虽好，但也存在一些问题：\",\"一旦主节点出现故障，需要手动将一个从节点晋升为主节点，同时需要修改应用方的主节点地址，还需要命令其他从节点去复制新的主节点，整个过程都需要人工干预。\",\"主节点的写能力受到单机的限制。\",\"主节点的存储能力受到单机的限制。\",\"第一个问题是Redis的高可用问题，第二、三个问题属于Redis的分布式问题。\"]},\"621\":{\"h\":\"工作原理\",\"t\":[\"连接与同步： \",\"初始化连接：从节点通过SLAVEOF命令连接到主节点，建立复制关系。在Redis 6之后，推荐使用REPLICAOF命令。\",\"全量复制：首次建立复制关系时，主节点会执行BGSAVE生成RDB快照文件，然后将此快照文件发送给从节点。从节点接收后载入快照，以达到与主节点数据一致的状态。\",\"部分复制：如果从节点断线后重新连接到主节点，主节点会根据复制积压缓冲区（replication backlog）来确定哪些命令需要补发给从节点，实现增量复制。\",\"命令传播： \",\"一旦从节点完成初始同步，主节点会持续将新的写操作命令异步地发送给所有从节点，保持数据的近实时同步。\",\"复制积压缓冲区： \",\"为了支持部分复制，Redis主节点维护一个固定大小的FIFO队列，保存最近的写操作命令。这个缓冲区有助于从节点在重连后仅同步缺失的部分数据，而非再次进行全量复制。\",\"心跳与监控： \",\"从节点定期向主节点发送PING命令，以检测连接状态并获取可能的延迟命令。\",\"哨兵系统（Sentinel）可以进一步监控主从节点的健康状态，自动处理故障转移。\"]},\"622\":{\"h\":\"目的与好处\",\"t\":[\"数据备份：通过主从复制实现数据冗余，保护数据免受单点故障的影响。\",\"读写分离：主节点处理写操作，从节点处理读操作，可以提高系统的读取性能和扩展性。\",\"高可用性：结合哨兵系统或集群模式，可以实现故障自动转移，提高服务可用性。\"]},\"623\":{\"h\":\"注意事项\",\"t\":[\"一致性：Redis的主从复制是异步的，意味着在极端情况下，从节点的数据可能会稍微滞后于主节点。\",\"配置与管理：需要合理配置主从节点数量、复制策略以及监控机制，以满足特定应用场景的需求。\",\"Redis的主从复制机制是其高可用性和可扩展性设计的重要组成部分，广泛应用于需要高性能读取和数据备份的场景中。\"]},\"624\":{\"h\":\"主从复制场景应用\",\"t\":[\"主从复制模式适用于以下场景：\",\"数据备份和容灾恢复：通过从节点备份主节点的数据，实现数据冗余。\",\"读写分离：将读操作分发到从节点，减轻主节点压力，提高系统性能。\",\"在线升级和扩展：在不影响主节点的情况下，通过增加从节点来扩展系统的读取能力。\",\"总结：主从复制模式适合数据备份、读写分离和在线升级等场景，但在主节点故障时需要手动切换，不能自动实现故障转移。如果对高可用性要求较高，可以考虑使用哨兵模式或Cluster模式。\"]},\"625\":{\"h\":\"可以配置的内容：这里可以忽视，直接去redis的配置文件看就行了\",\"t\":[\"主要的内容是配置主节点的ip+端口+密码，从节点的行为，比如断开连接时是否响应客户端，从节点是否只读，主从之间同步策略，从节点优先级（需要搭配哨兵模式），积压缓冲区大小，主从心跳与超时等等。详细看下文。\",\"# replicaof <masterip> <masterport>\"]},\"626\":{\"h\":\"主从复制基础\",\"t\":[\"replicaof: 用于设置从节点要复制的主节点的IP地址和端口号，格式为replicaof <masterip> <masterport>。这建立了主从关系，使从节点成为主节点的一个副本。\",\"# masterauth <master-password>\"]},\"627\":{\"h\":\"认证与安全性\",\"t\":[\"masterauth: 如果主节点设置了访问密码（通过requirepass指令），这里需要配置相同的密码，以便从节点能够成功进行身份验证并开始复制过程。\",\"replica-serve-stale-data yes\"]},\"628\":{\"h\":\"处理过时数据\",\"t\":[\"replica-serve-stale-data: 决定当从节点与主节点失去联系时，是否继续响应客户端的读请求。如果设置为yes（默认），即使数据可能陈旧或不完整，从节点仍会尝试服务客户端；设置为no，则在同步过程中返回错误。\",\"replica-read-only yes\"]},\"629\":{\"h\":\"只读从节点\",\"t\":[\"replica-read-only: 默认设置为yes，意味着从节点拒绝执行写操作，以此作为保护措施防止误操作。虽然名为“只读”，但请注意，某些管理命令依然可执行，考虑使用rename-command增强安全性。\",\"repl-diskless-sync no\"]},\"630\":{\"h\":\"同步策略\",\"t\":[\"repl-diskless-sync: 控制全量复制时是否采用无盘复制（diskless replication）。默认no，表示使用基于磁盘的复制方式。无盘复制减少了I/O操作，适合于网络带宽充足且磁盘速度较慢的场景。\",\"repl-diskless-sync-delay: 当使用无盘复制时，主节点等待额外的秒数以允许更多从节点连接，从而可能并行传输RDB文件。\",\"# repl-timeout 60\"]},\"631\":{\"h\":\"心跳与超时\",\"t\":[\"repl-ping-replica-period: 从节点向主节点发送PING的心跳间隔，默认10秒。\",\"repl-timeout: 复制超时时间，影响SYNC期间的I/O超时、主从间数据交换及心跳检测，默认60秒。\",\"# repl-backlog-ttl 3600\"]},\"632\":{\"h\":\"复制积压缓冲区\",\"t\":[\"repl-backlog-size: 控制复制积压缓冲区的大小，用于部分重同步，减少完全重同步的需要，默认1MB。\",\"repl-backlog-ttl: 没有从节点连接后，复制积压缓冲区自动释放前等待的秒数，默认3600秒（1小时）。\",\"replica-priority 100\"]},\"633\":{\"h\":\"从节点优先级\",\"t\":[\"replica-priority: 影响Redis Sentinel选择从节点晋升为主节点时的决策，默认为100，值越低优先级越高。0表示该从节点不应被晋升。\",\"# min-replicas-max-lag is set to 10.\"]},\"634\":{\"h\":\"主节点写入限制\",\"t\":[\"min-replicas-to-write 和 min-replicas-max-lag: 如之前解释，控制主节点在继续接受写入前需要的最低从节点连接数及其数据最大滞后时间。\"]},\"635\":{\"h\":\"主从复制REPLICATION\",\"t\":[\"这段配置文件内容详细描述了Redis的REPLICATION（复制）相关设置，用于控制主节点（Master）和从节点（Replica，也常称作Slave）之间的复制行为。\",\"# Master-Replica replication. Use replicaof to make a Redis instance a copy of # another Redis server. A few things to understand ASAP about Redis replication. # # +------------------+ +---------------+ # | Master | ---> | Replica | # | (receive writes) | | (exact copy) | # +------------------+ +---------------+ # # 1) Redis replication is asynchronous, but you can configure a master to # stop accepting writes if it appears to be not connected with at least # a given number of replicas. # 2) Redis replicas are able to perform a partial resynchronization with the # master if the replication link is lost for a relatively small amount of # time. You may want to configure the replication backlog size (see the next # sections of this file) with a sensible value depending on your needs. # 3) Replication is automatic and does not need user intervention. After a # network partition replicas automatically try to reconnect to masters # and resynchronize with them. # # replicaof <masterip> <masterport>\"]},\"636\":{\"h\":\"主从复制基础\",\"t\":[\"replicaof: 用于设置从节点要复制的主节点的IP地址和端口号，格式为replicaof <masterip> <masterport>。这建立了主从关系，使从节点成为主节点的一个副本。\",\"# If the master is password protected (using the \\\"requirepass\\\" configuration # directive below) it is possible to tell the replica to authenticate before # starting the replication synchronization process, otherwise the master will # refuse the replica request. # # masterauth <master-password>\"]},\"637\":{\"h\":\"认证与安全性\",\"t\":[\"masterauth: 如果主节点设置了访问密码（通过requirepass指令），这里需要配置相同的密码，以便从节点能够成功进行身份验证并开始复制过程。\",\"# When a replica loses its connection with the master, or when the replication # is still in progress, the replica can act in two different ways: # # 1) if replica-serve-stale-data is set to 'yes' (the default) the replica will # still reply to client requests, possibly with out of date data, or the # data set may just be empty if this is the first synchronization. # # 2) if replica-serve-stale-data is set to 'no' the replica will reply with # an error \\\"SYNC with master in progress\\\" to all the kind of commands # but to INFO, replicaOF, AUTH, PING, SHUTDOWN, REPLCONF, ROLE, CONFIG, # SUBSCRIBE, UNSUBSCRIBE, PSUBSCRIBE, PUNSUBSCRIBE, PUBLISH, PUBSUB, # COMMAND, POST, HOST: and LATENCY. # replica-serve-stale-data yes\"]},\"638\":{\"h\":\"处理过时数据\",\"t\":[\"replica-serve-stale-data: 决定当从节点与主节点失去联系时，是否继续响应客户端的读请求。如果设置为yes（默认），即使数据可能陈旧或不完整，从节点仍会尝试服务客户端；设置为no，则在同步过程中返回错误。\",\"# You can configure a replica instance to accept writes or not. Writing against # a replica instance may be useful to store some ephemeral data (because data # written on a replica will be easily deleted after resync with the master) but # may also cause problems if clients are writing to it because of a # misconfiguration. # # Since Redis 2.6 by default replicas are read-only. # # Note: read only replicas are not designed to be exposed to untrusted clients # on the internet. It's just a protection layer against misuse of the instance. # Still a read only replica exports by default all the administrative commands # such as CONFIG, DEBUG, and so forth. To a limited extent you can improve # security of read only replicas using 'rename-command' to shadow all the # administrative / dangerous commands. replica-read-only yes\"]},\"639\":{\"h\":\"只读从节点\",\"t\":[\"replica-read-only: 默认设置为yes，意味着从节点拒绝执行写操作，以此作为保护措施防止误操作。虽然名为“只读”，但请注意，某些管理命令依然可执行，考虑使用rename-command增强安全性。\",\"# Replication SYNC strategy: disk or socket. # # ------------------------------------------------------- # WARNING: DISKLESS REPLICATION IS EXPERIMENTAL CURRENTLY # ------------------------------------------------------- # # New replicas and reconnecting replicas that are not able to continue the replication # process just receiving differences, need to do what is called a \\\"full # synchronization\\\". An RDB file is transmitted from the master to the replicas. # The transmission can happen in two different ways: # # 1) Disk-backed: The Redis master creates a new process that writes the RDB # file on disk. Later the file is transferred by the parent # process to the replicas incrementally. # 2) Diskless: The Redis master creates a new process that directly writes the # RDB file to replica sockets, without touching the disk at all. # # With disk-backed replication, while the RDB file is generated, more replicas # can be queued and served with the RDB file as soon as the current child producing # the RDB file finishes its work. With diskless replication instead once # the transfer starts, new replicas arriving will be queued and a new transfer # will start when the current one terminates. # # When diskless replication is used, the master waits a configurable amount of # time (in seconds) before starting the transfer in the hope that multiple replicas # will arrive and the transfer can be parallelized. # # With slow disks and fast (large bandwidth) networks, diskless replication # works better. repl-diskless-sync no\"]},\"640\":{\"h\":\"同步策略\",\"t\":[\"repl-diskless-sync: 控制全量复制时是否采用无盘复制（diskless replication）。默认no，表示使用基于磁盘的复制方式。无盘复制减少了I/O操作，适合于网络带宽充足且磁盘速度较慢的场景。\",\"repl-diskless-sync-delay: 当使用无盘复制时，主节点等待额外的秒数以允许更多从节点连接，从而可能并行传输RDB文件。\",\"# When diskless replication is enabled, it is possible to configure the delay # the server waits in order to spawn the child that transfers the RDB via socket # to the replicas. # # This is important since once the transfer starts, it is not possible to serve # new replicas arriving, that will be queued for the next RDB transfer, so the server # waits a delay in order to let more replicas arrive. # # The delay is specified in seconds, and by default is 5 seconds. To disable # it entirely just set it to 0 seconds and the transfer will start ASAP. repl-diskless-sync-delay 5\",\"# Replicas send PINGs to server in a predefined interval. It's possible to change # this interval with the repl_ping_replica_period option. The default value is 10 # seconds. # # repl-ping-replica-period 10\",\"# The following option sets the replication timeout for: # # 1) Bulk transfer I/O during SYNC, from the point of view of replica. # 2) Master timeout from the point of view of replicas (data, pings). # 3) Replica timeout from the point of view of masters (REPLCONF ACK pings). # # It is important to make sure that this value is greater than the value # specified for repl-ping-replica-period otherwise a timeout will be detected # every time there is low traffic between the master and the replica. # # repl-timeout 60\"]},\"641\":{\"h\":\"心跳与超时\",\"t\":[\"repl-ping-replica-period: 从节点向主节点发送PING的心跳间隔，默认10秒。\",\"repl-timeout: 复制超时时间，影响SYNC期间的I/O超时、主从间数据交换及心跳检测，默认60秒。\",\"# Disable TCP_NODELAY on the replica socket after SYNC? # # If you select \\\"yes\\\" Redis will use a smaller number of TCP packets and # less bandwidth to send data to replicas. But this can add a delay for # the data to appear on the replica side, up to 40 milliseconds with # Linux kernels using a default configuration. # # If you select \\\"no\\\" the delay for data to appear on the replica side will # be reduced but more bandwidth will be used for replication. # # By default we optimize for low latency, but in very high traffic conditions # or when the master and replicas are many hops away, turning this to \\\"yes\\\" may # be a good idea. repl-disable-tcp-nodelay no\"]},\"642\":{\"h\":\"网络优化\",\"t\":[\"repl-disable-tcp-nodelay: 是否禁用TCP_NODELAY选项，默认no。禁用可以减少带宽使用但增加数据到达延迟，适用于高流量或远距离通信。\",\"# Set the replication backlog size. The backlog is a buffer that accumulates # replica data when replicas are disconnected for some time, so that when a replica # wants to reconnect again, often a full resync is not needed, but a partial # resync is enough, just passing the portion of data the replica missed while # disconnected. # # The bigger the replication backlog, the longer the time the replica can be # disconnected and later be able to perform a partial resynchronization. # # The backlog is only allocated once there is at least a replica connected. # # repl-backlog-size 1mb\",\"# After a master has no longer connected replicas for some time, the backlog # will be freed. The following option configures the amount of seconds that # need to elapse, starting from the time the last replica disconnected, for # the backlog buffer to be freed. # # Note that replicas never free the backlog for timeout, since they may be # promoted to masters later, and should be able to correctly \\\"partially # resynchronize\\\" with the replicas: hence they should always accumulate backlog. # # A value of 0 means to never release the backlog. # # repl-backlog-ttl 3600\"]},\"643\":{\"h\":\"复制积压缓冲区\",\"t\":[\"repl-backlog-size: 控制复制积压缓冲区的大小，用于部分重同步，减少完全重同步的需要，默认1MB。\",\"repl-backlog-ttl: 没有从节点连接后，复制积压缓冲区自动释放前等待的秒数，默认3600秒（1小时）。\",\"# The replica priority is an integer number published by Redis in the INFO output. # It is used by Redis Sentinel in order to select a replica to promote into a # master if the master is no longer working correctly. # # A replica with a low priority number is considered better for promotion, so # for instance if there are three replicas with priority 10, 100, 25 Sentinel will # pick the one with priority 10, that is the lowest. # # However a special priority of 0 marks the replica as not able to perform the # role of master, so a replica with priority of 0 will never be selected by # Redis Sentinel for promotion. # # By default the priority is 100. replica-priority 100\"]},\"644\":{\"h\":\"从节点优先级\",\"t\":[\"replica-priority: 影响Redis Sentinel选择从节点晋升为主节点时的决策，默认为100，值越低优先级越高。0表示该从节点不应被晋升。\",\"# It is possible for a master to stop accepting writes if there are less than # N replicas connected, having a lag less or equal than M seconds. # # The N replicas need to be in \\\"online\\\" state. # # The lag in seconds, that must be <= the specified value, is calculated from # the last ping received from the replica, that is usually sent every second. # # This option does not GUARANTEE that N replicas will accept the write, but # will limit the window of exposure for lost writes in case not enough replicas # are available, to the specified number of seconds. # # For example to require at least 3 replicas with a lag <= 10 seconds use: # # min-replicas-to-write 3 # min-replicas-max-lag 10\",\"# # Setting one or the other to 0 disables the feature. # # By default min-replicas-to-write is set to 0 (feature disabled) and # min-replicas-max-lag is set to 10.\"]},\"645\":{\"h\":\"主节点写入限制\",\"t\":[\"min-replicas-to-write 和 min-replicas-max-lag: 如之前解释，控制主节点在继续接受写入前需要的最低从节点连接数及其数据最大滞后时间。\",\"# A Redis master is able to list the address and port of the attached # replicas in different ways. For example the \\\"INFO replication\\\" section # offers this information, which is used, among other tools, by # Redis Sentinel in order to discover replica instances. # Another place where this info is available is in the output of the # \\\"ROLE\\\" command of a master. # # The listed IP and address normally reported by a replica is obtained # in the following way: # # IP: The address is auto detected by checking the peer address # of the socket used by the replica to connect with the master. # # Port: The port is communicated by the replica during the replication # handshake, and is normally the port that the replica is using to # listen for connections. # # However when port forwarding or Network Address Translation (NAT) is # used, the replica may be actually reachable via different IP and port # pairs. The following two options can be used by a replica in order to # report to its master a specific set of IP and port, so that both INFO # and ROLE will report those values. # # There is no need to use both the options if you need to override just # the port or the IP address. # # replica-announce-ip 5.5.5.5 # replica-announce-port 1234\"]},\"646\":{\"h\":\"从节点宣告地址\",\"t\":[\"配置允许从节点向主节点宣告不同于实际连接地址和端口的信息，以适应NAT或代理环境。\",\"特殊网络环境适应：在使用端口转发或网络地址转换（NAT）的环境中，从节点实际可访问的IP地址和端口可能与它们连接主节点时显示的不同。为解决这个问题，Redis提供了两个配置项：\",\"replica-announce-ip: 允许从节点指定一个不同的IP地址，使得主节点在通过INFO或ROLE命令报告从节点信息时，使用这个宣告的IP地址而非自动检测的地址。\",\"replica-announce-port: 类似地，此配置项让从节点能够声明一个不同于实际用于连接主节点的监听端口的端口号。这确保了监控和管理工具能够使用正确的端口访问从节点。\"]},\"647\":{\"c\":[\"Redis\"]},\"648\":{\"c\":[\"Redis\"]},\"649\":{\"h\":\"Redis缓存穿透-布隆过滤器\",\"t\":[\"more 注释之前的内容被视为文章摘要。\"]},\"650\":{\"h\":\"缓存穿透\",\"t\":[\"我举个蘑菇博客中的案例来说，我现在有一个博客详情页，然后博客详情页中的内容假设是存储在Redis中的，然后通过博客的Uid进行获取，正常的情况是：用户进入博客详情页，然后通过uid获取redis中缓存的文章详情，如果有内容就直接访问，如果不存在内容，那么需要访问数据库，然后从数据库中查询我们的博客详情后，然后在存储到redis中，最后在把数据返回给我们的页面。\",\"但是可能存在一些非法用户，他可能会模拟出很多不存在的key，然后通过该key去请求后台，首先redis的缓存没有命中，那么就去请求数据库，最后数据库没有查询出该内容，这样很多个非法的请求直接打在数据库中，可能会导致数据库直接宕机，无法对外提供服务。这就是我们所说的缓存穿透问题\"]},\"651\":{\"h\":\"简单的解决方法\",\"t\":[\"针对这个情况，我们有一种简单的解决方法就是，在数据库没有查询该条数据的时候，我们让该key缓存一个 空数据，这样用户再次以该key请求后台的时候，会直接返回null，避免了再次请求数据库。\"]},\"652\":{\"h\":\"布隆过滤器\"},\"653\":{\"h\":\"什么是布隆过滤器\",\"t\":[\"布隆过滤器的巨大作用 ，就是能够迅速判断一个元素是否存在一个集合中。因此次他有如下几个使用场景\",\"网站爬虫对URL的去重，避免爬取相同的URL\",\"反垃圾邮件，从数十亿个垃圾邮件列表中判断某邮箱是否是垃圾邮件（同理，垃圾短信）\",\"缓存穿透，将所有可能的数据缓存放到布隆过滤器中，当黑客访问不存在的缓存时，迅速返回避免缓存以及DB挂掉。\"]},\"654\":{\"h\":\"原理\",\"t\":[\"布隆过滤器其内部维护了一个全为0的bit数组，需要说明的是，布隆过滤器有一个误判的概念，误判率越低，则数组越长，所占空间越大。误判率越高则数组越小，所占的空间多少。\",\"假设，根据误判率，我们生成一个10位的bit数组，以及2个hash函数 f1 和 f2，如下图所示：生成的数组的位数 和 hash函数的数量，我们不用去关心如何生成的，这是有数学论文进行验证。\",\"img\",\"然后我们输入一个集合，集合中包含 N1 和 N2，我们通过计算 f1(N1) = 2，f2(N1) = 5，则将数组下标为2 和下标为5的位置设置成1，就得到了下图\",\"img\",\"同理，我们再次进行计算 N2的值， f1(N2) = 3，f2(N2) = 6。得到如下所示的图\",\"img\",\"这个时候，假设我们有第三个数N3过来了，我们需要判断N3是否在集合 [N1,N2]中，我们需要做的操作就是，使用f1 和 f2 计算出数组中的地址\",\"若值恰巧都位于上图的红色位置，我们认为 N3在集合 [N1,N2] 中\",\"若值有一个不位于上图的红色部分，我们认为N3不在集合[N1,N2] 中\",\"这就是布隆过滤器的计算原理\"]},\"655\":{\"h\":\"使用\",\"t\":[\"在java中使用布隆过滤器，我们需要首先引入依赖，布隆过滤器拥有Google提供的一个开箱即用的组件，来帮助我们实现布隆过滤器，其实布隆过滤器的核心思想其实并不难，难的是在于如何设计随机映射函数，到底映射几次，二进制向量设置多少比较合适。\",\"<dependencies> <dependency> <groupId>com.google.guava</groupId> <artifactId>guava</artifactId> <version>22.0</version> </dependency> </dependencies>\",\"然后我们编写代码，测试某元素是否存在于百万元素集合中\",\" private static int size = 1000000;//预计要插入多少数据 private static double fpp = 0.01;//期望的误判率 private static BloomFilter<Integer> bloomFilter = BloomFilter.create(Funnels.integerFunnel(), size, fpp); public static void main(String[] args) { //插入数据 for (int i = 0; i < 1000000; i++) { bloomFilter.put(i); } int count = 0; for (int i = 1000000; i < 2000000; i++) { if (bloomFilter.mightContain(i)) { count++; System.out.println(i + \\\"误判了\\\"); } } System.out.println(\\\"总共的误判数:\\\" + count); }\"]},\"656\":{\"h\":\"代码分析\",\"t\":[\"上面的代码中，我们创建了一个布隆过滤器，其中有两个重要的参数，分别是我们要预计插入的数据和我们所期望的误判率，误判率率不能为0。\",\"我们首先向布隆过滤器中插入 0 ~ 100万条数据，然后在用 100万 ~ 200万的数据进行测试\",\"我们输出结果，查看一下误判率\",\"1999501误判了 1999567误判了 1999640误判了 1999697误判了 1999827误判了 1999942误判了 总共的误判数:10314\",\"现在有100万不存在的数据，误判了10314次，我们计算一下误判率\",\"10314 / 1000000 = 0.010314\",\"和我们之前定义的误判率为0.01相差无几\"]},\"657\":{\"h\":\"参考\",\"t\":[\"https://www.cnblogs.com/rinack/p/9712477.html\",\"https://www.jianshu.com/p/2104d11ee0a2\",\"https://www.cnblogs.com/CodeBear/p/10911177.html\"]},\"658\":{\"c\":[\"Redis\"]},\"659\":{\"c\":[\"缓存穿透\",\"布隆过滤器\"]},\"660\":{\"h\":\"Redis缓存穿透-布隆过滤器\",\"t\":[\"more 注释之前的内容被视为文章摘要。\"]},\"661\":{\"h\":\"缓存穿透\",\"t\":[\"我举个蘑菇博客中的案例来说，我现在有一个博客详情页，然后博客详情页中的内容假设是存储在Redis中的，然后通过博客的Uid进行获取，正常的情况是：用户进入博客详情页，然后通过uid获取redis中缓存的文章详情，如果有内容就直接访问，如果不存在内容，那么需要访问数据库，然后从数据库中查询我们的博客详情后，然后在存储到redis中，最后在把数据返回给我们的页面。\",\"但是可能存在一些非法用户，他可能会模拟出很多不存在的key，然后通过该key去请求后台，首先redis的缓存没有命中，那么就去请求数据库，最后数据库没有查询出该内容，这样很多个非法的请求直接打在数据库中，可能会导致数据库直接宕机，无法对外提供服务。这就是我们所说的缓存穿透问题\"]},\"662\":{\"h\":\"简单的解决方法\",\"t\":[\"针对这个情况，我们有一种简单的解决方法就是，在数据库没有查询该条数据的时候，我们让该key缓存一个 空数据，这样用户再次以该key请求后台的时候，会直接返回null，避免了再次请求数据库。\"]},\"663\":{\"h\":\"布隆过滤器\"},\"664\":{\"h\":\"什么是布隆过滤器\",\"t\":[\"布隆过滤器的巨大作用 ，就是能够迅速判断一个元素是否存在一个集合中。因此次他有如下几个使用场景\",\"网站爬虫对URL的去重，避免爬取相同的URL\",\"反垃圾邮件，从数十亿个垃圾邮件列表中判断某邮箱是否是垃圾邮件（同理，垃圾短信）\",\"缓存穿透，将所有可能的数据缓存放到布隆过滤器中，当黑客访问不存在的缓存时，迅速返回避免缓存以及DB挂掉。\"]},\"665\":{\"h\":\"原理\",\"t\":[\"布隆过滤器其内部维护了一个全为0的bit数组，需要说明的是，布隆过滤器有一个误判的概念，误判率越低，则数组越长，所占空间越大。误判率越高则数组越小，所占的空间多少。\",\"假设，根据误判率，我们生成一个10位的bit数组，以及2个hash函数 f1 和 f2，如下图所示：生成的数组的位数 和 hash函数的数量，我们不用去关心如何生成的，这是有数学论文进行验证。\",\"img\",\"然后我们输入一个集合，集合中包含 N1 和 N2，我们通过计算 f1(N1) = 2，f2(N1) = 5，则将数组下标为2 和下标为5的位置设置成1，就得到了下图\",\"img\",\"同理，我们再次进行计算 N2的值， f1(N2) = 3，f2(N2) = 6。得到如下所示的图\",\"img\",\"这个时候，假设我们有第三个数N3过来了，我们需要判断N3是否在集合 [N1,N2]中，我们需要做的操作就是，使用f1 和 f2 计算出数组中的地址\",\"若值恰巧都位于上图的红色位置，我们认为 N3在集合 [N1,N2] 中\",\"若值有一个不位于上图的红色部分，我们认为N3不在集合[N1,N2] 中\",\"这就是布隆过滤器的计算原理\"]},\"666\":{\"h\":\"使用\",\"t\":[\"在java中使用布隆过滤器，我们需要首先引入依赖，布隆过滤器拥有Google提供的一个开箱即用的组件，来帮助我们实现布隆过滤器，其实布隆过滤器的核心思想其实并不难，难的是在于如何设计随机映射函数，到底映射几次，二进制向量设置多少比较合适。\",\"<dependencies> <dependency> <groupId>com.google.guava</groupId> <artifactId>guava</artifactId> <version>22.0</version> </dependency> </dependencies>\",\"然后我们编写代码，测试某元素是否存在于百万元素集合中\",\" private static int size = 1000000;//预计要插入多少数据 private static double fpp = 0.01;//期望的误判率 private static BloomFilter<Integer> bloomFilter = BloomFilter.create(Funnels.integerFunnel(), size, fpp); public static void main(String[] args) { //插入数据 for (int i = 0; i < 1000000; i++) { bloomFilter.put(i); } int count = 0; for (int i = 1000000; i < 2000000; i++) { if (bloomFilter.mightContain(i)) { count++; System.out.println(i + \\\"误判了\\\"); } } System.out.println(\\\"总共的误判数:\\\" + count); }\"]},\"667\":{\"h\":\"代码分析\",\"t\":[\"上面的代码中，我们创建了一个布隆过滤器，其中有两个重要的参数，分别是我们要预计插入的数据和我们所期望的误判率，误判率率不能为0。\",\"我们首先向布隆过滤器中插入 0 ~ 100万条数据，然后在用 100万 ~ 200万的数据进行测试\",\"我们输出结果，查看一下误判率\",\"1999501误判了 1999567误判了 1999640误判了 1999697误判了 1999827误判了 1999942误判了 总共的误判数:10314\",\"现在有100万不存在的数据，误判了10314次，我们计算一下误判率\",\"10314 / 1000000 = 0.010314\",\"和我们之前定义的误判率为0.01相差无几\"]},\"668\":{\"h\":\"参考\",\"t\":[\"https://www.cnblogs.com/rinack/p/9712477.html\",\"https://www.jianshu.com/p/2104d11ee0a2\",\"https://www.cnblogs.com/CodeBear/p/10911177.html\"]},\"669\":{\"c\":[\"Redis\"]},\"670\":{\"c\":[\"缓存穿透\",\"布隆过滤器\"]},\"671\":{\"h\":\"Redis\"},\"672\":{\"c\":[\"Redis\"]},\"673\":{\"h\":\"页面配置\",\"t\":[\"more 注释之前的内容被视为文章摘要。\"]},\"674\":{\"h\":\"页面标题\",\"t\":[\"The first H1 title in Markdown will be regarded as page title.\",\"Markdown 中的第一个 H1 标题会被视为页面标题。\",\"你可以在 Markdown 的 Frontmatter 中设置页面标题。\",\"--- title: 页面标题 ---\"]},\"675\":{\"h\":\"页面信息\",\"t\":[\"你可以在 Markdown 的 Frontmatter 中设置页面信息。\",\"作者设置为 Ms.Hope。\",\"写作日期为 2020 年 1 月 1 日\",\"分类为 “使用指南”\",\"标签为 “页面配置” 和 “使用指南”\"]},\"676\":{\"h\":\"页面内容\",\"t\":[\"你可以自由在这里书写你的 Markdown。\",\"图片引入\",\"你可以将图片和 Markdown 文件放置在一起使用相对路径进行引用。\",\"对于 .vuepress/public 文件夹的图片，请使用绝对链接 / 进行引用。\"]},\"677\":{\"h\":\"组件\",\"t\":[\"每个 Markdown 页面都会被转换为一个 Vue 组件，这意味着你可以在 Markdown 中使用 Vue 语法：\",\"{{ 1 + 1 }}\",\"{{ i }}\",\"你也可以创建并引入你自己的组件。\"]},\"678\":{\"c\":[\"使用指南\"]},\"679\":{\"c\":[\"页面配置\",\"使用指南\"]},\"680\":{\"h\":\"广告数仓\",\"t\":[\"广告数仓\",\"数据仓库是一个为数据分析而设计的企业级数据管理系统。数据仓库可集中、整合多个信息源的大量数据，借助数据仓库的分析能力，企业可从数据中获得宝贵的信息进而改进决策。同时，随着时间的推移，数据仓库中积累的大量历史数据对于数据科学家和业务分析师也是十分宝贵的。\",\"ETL\",\"反爬虫\",\"过滤：\",\"FineBI\",\"列式数据库适合统计，行式数据库适合查询\"]},\"681\":{\"c\":[\"广告数仓\"]},\"682\":{\"c\":[\"elasticsearch\",\"数据同步\"]},\"683\":{\"h\":\"广告数仓\",\"t\":[\"广告数仓\",\"数据仓库是一个为数据分析而设计的企业级数据管理系统。数据仓库可集中、整合多个信息源的大量数据，借助数据仓库的分析能力，企业可从数据中获得宝贵的信息进而改进决策。同时，随着时间的推移，数据仓库中积累的大量历史数据对于数据科学家和业务分析师也是十分宝贵的。\",\"ETL\",\"反爬虫\",\"过滤：\",\"FineBI\"]},\"684\":{\"c\":[\"广告数仓\"]},\"685\":{\"c\":[\"elasticsearch\",\"数据同步\"]},\"686\":{\"h\":\"苹果 1\"},\"687\":{\"h\":\"标题 2\",\"t\":[\"这里是内容。\"]},\"688\":{\"h\":\"标题 3\",\"t\":[\"这里是内容。\"]},\"689\":{\"c\":[\"苹果\"]},\"690\":{\"c\":[\"红\",\"大\",\"圆\"]},\"691\":{\"h\":\"苹果 2\",\"t\":[\"一个被星标了的苹果文章。\"]},\"692\":{\"h\":\"标题 2\",\"t\":[\"这里是内容。\"]},\"693\":{\"h\":\"标题 3\",\"t\":[\"这里是内容。\"]},\"694\":{\"c\":[\"苹果\"]},\"695\":{\"c\":[\"红\",\"大\",\"圆\"]},\"696\":{\"h\":\"苹果 3\"},\"697\":{\"h\":\"标题 2\",\"t\":[\"这里是内容。\"]},\"698\":{\"h\":\"标题 3\",\"t\":[\"这里是内容。\"]},\"699\":{\"c\":[\"苹果\",\"水果\"]},\"700\":{\"c\":[\"红\",\"大\",\"圆\"]},\"701\":{\"h\":\"苹果 4\"},\"702\":{\"h\":\"标题 2\",\"t\":[\"这里是内容。\"]},\"703\":{\"h\":\"标题 3\",\"t\":[\"这里是内容。\"]},\"704\":{\"c\":[\"苹果\",\"水果\"]},\"705\":{\"c\":[\"红\",\"大\",\"圆\"]},\"706\":{\"h\":\"香蕉 1\"},\"707\":{\"h\":\"标题 2\",\"t\":[\"这里是内容。\"]},\"708\":{\"h\":\"标题 3\",\"t\":[\"这里是内容。\"]},\"709\":{\"c\":[\"香蕉\",\"水果\"]},\"710\":{\"c\":[\"黄\",\"弯曲的\",\"长\"]},\"711\":{\"h\":\"香蕉 2\",\"t\":[\"一个被数字 10 星标了的香蕉文章。\"]},\"712\":{\"h\":\"标题 2\",\"t\":[\"这里是内容。\"]},\"713\":{\"h\":\"标题 3\",\"t\":[\"这里是内容。\"]},\"714\":{\"c\":[\"香蕉\",\"水果\"]},\"715\":{\"c\":[\"黄\",\"弯曲的\",\"长\"]},\"716\":{\"h\":\"香蕉 3\"},\"717\":{\"h\":\"标题 2\",\"t\":[\"这里是内容。\"]},\"718\":{\"h\":\"标题 3\",\"t\":[\"这里是内容。\"]},\"719\":{\"c\":[\"香蕉\"]},\"720\":{\"c\":[\"黄\",\"弯曲的\",\"长\"]},\"721\":{\"h\":\"香蕉 4\"},\"722\":{\"h\":\"标题 2\",\"t\":[\"这里是内容。\"]},\"723\":{\"h\":\"标题 3\",\"t\":[\"这里是内容。\"]},\"724\":{\"c\":[\"香蕉\"]},\"725\":{\"c\":[\"黄\",\"弯曲的\",\"长\"]},\"726\":{\"h\":\"数据同步到Elasticsearch\",\"t\":[\"数据同步到Elasticsearch，同步写，异步写，中间件实现同步。\",\"在写入MySQL时同时写入ES，这是最简单的方式。\",\"image-20240716171141128\",\"优点：系统结构简单，不用引入新的组件，实时性高。\",\"缺点：耦合度高，MYSQL写入失败或ES写入失败都需要考虑回滚，接口性能下降。\",\"基于MQ来实现。\",\"image-20240716171151636\",\"优点：解耦，基于MQ消费确认机制保证数据。\",\"缺点：基于MQ，有一定延时。\",\"基于binlog日志，MySQL通过binlog订阅实现主从同步，canal也是这个原理，将client组件伪装成从库，来实现数据订阅。\",\"image-20240716171207081\",\"Canal 原理就是伪装成 MySQL 的从节点，从而订阅 master 节点的 Binlog 日志，主要流程为：\",\"Canal 服务端向 MySQL 的 master 节点传输 dump 协议；\",\"MySQL 的 master 节点接收到 dump 请求后推送 Binlog 日志给 Canal 服务端，解析 Binlog 对象（原始为 byte 流）转成 Json 格式；\",\"Canal 客户端通过 TCP 协议或 MQ 形式监听 Canal 服务端，同步数据到 ES。\",\"下面是 Cannel 执行的核心流程，其中 Binlog Parser 主要负责 Binlog 的提取、解析和推送，EventSink 负责数据的过滤 、路由和加工，仅作了解即可。\",\"图片\",\"如果对实时性要求不高的情况下，可以考虑用定时器来处理：\",\"数据库的相关表中增加一个字段为 timestamp 的字段，任何 CURD 操作都会导致该字段的时间发生变化；\",\"原来程序中的 CURD 操作不做任何变化；\",\"增加一个定时器程序，让该程序按一定的时间周期扫描指定的表，把该时间段内发生变化的数据提取出来；\",\"逐条写入到 ES 中。\",\"image-20240716171234652\",\"优点：\",\"不改变原来代码，没有侵入性、没有硬编码；\",\"没有业务强耦合，不改变原来程序的性能；\",\"Worker 代码编写简单不需要考虑增删改查。\",\"缺点：\",\"时效性较差，由于是采用定时器根据固定频率查询表来同步数据，尽管将同步周期设置到秒级，也还是会存在一定时间的延迟；\",\"对数据库有一定的轮询压力，一种改进方法是将轮询放到压力不大的从库上。\",\"经典方案：借助 Logstash 实现数据同步，其底层实现原理就是根据配置定期使用 SQL 查询新增的数据写入 ES 中，实现数据的增量同步。\",\"image-20240716173734159\",\"4种数据同步到Elasticsearch方案 - 古道轻风 - 博客园 (cnblogs.com)\"]},\"727\":{\"c\":[\"Elasticsearch\"]},\"728\":{\"c\":[\"elasticsearch\",\"数据同步\"]},\"729\":{\"h\":\"数据同步到Elasticsearch\",\"t\":[\"数据同步到Elasticsearch，同步写，异步写，中间件实现同步。\",\"在写入MySQL时同时写入ES，这是最简单的方式。\",\"image-20240716171141128\",\"优点：系统结构简单，不用引入新的组件，实时性高。\",\"缺点：耦合度高，MYSQL写入失败或ES写入失败都需要考虑回滚，接口性能下降。\",\"基于MQ来实现。\",\"image-20240716171151636\",\"优点：解耦，基于MQ消费确认机制保证数据。\",\"缺点：基于MQ，有一定延时。\",\"基于binlog日志，MySQL通过binlog订阅实现主从同步，canal也是这个原理，将client组件伪装成从库，来实现数据订阅。\",\"image-20240716171207081\",\"Canal 原理就是伪装成 MySQL 的从节点，从而订阅 master 节点的 Binlog 日志，主要流程为：\",\"Canal 服务端向 MySQL 的 master 节点传输 dump 协议；\",\"MySQL 的 master 节点接收到 dump 请求后推送 Binlog 日志给 Canal 服务端，解析 Binlog 对象（原始为 byte 流）转成 Json 格式；\",\"Canal 客户端通过 TCP 协议或 MQ 形式监听 Canal 服务端，同步数据到 ES。\",\"下面是 Cannel 执行的核心流程，其中 Binlog Parser 主要负责 Binlog 的提取、解析和推送，EventSink 负责数据的过滤 、路由和加工，仅作了解即可。\",\"图片\",\"如果对实时性要求不高的情况下，可以考虑用定时器来处理：\",\"数据库的相关表中增加一个字段为 timestamp 的字段，任何 CURD 操作都会导致该字段的时间发生变化；\",\"原来程序中的 CURD 操作不做任何变化；\",\"增加一个定时器程序，让该程序按一定的时间周期扫描指定的表，把该时间段内发生变化的数据提取出来；\",\"逐条写入到 ES 中。\",\"image-20240716171234652\",\"优点：\",\"不改变原来代码，没有侵入性、没有硬编码；\",\"没有业务强耦合，不改变原来程序的性能；\",\"Worker 代码编写简单不需要考虑增删改查。\",\"缺点：\",\"时效性较差，由于是采用定时器根据固定频率查询表来同步数据，尽管将同步周期设置到秒级，也还是会存在一定时间的延迟；\",\"对数据库有一定的轮询压力，一种改进方法是将轮询放到压力不大的从库上。\",\"经典方案：借助 Logstash 实现数据同步，其底层实现原理就是根据配置定期使用 SQL 查询新增的数据写入 ES 中，实现数据的增量同步。\",\"image-20240716173734159\",\"4种数据同步到Elasticsearch方案 - 古道轻风 - 博客园 (cnblogs.com)\"]},\"730\":{\"c\":[\"Elasticsearch\"]},\"731\":{\"c\":[\"elasticsearch\",\"数据同步\"]},\"732\":{\"h\":\"\",\"t\":[\"404 Not Found\"]},\"733\":{\"h\":\"Posts\"},\"734\":{\"h\":\"Computernetwork\"},\"735\":{\"h\":\"Es\"},\"736\":{\"h\":\"Go\"},\"737\":{\"h\":\"Kafka\"},\"738\":{\"h\":\"Mysql\"},\"739\":{\"h\":\"大数据\"},\"740\":{\"h\":\"Apple\"},\"741\":{\"h\":\"Banana\"},\"742\":{\"h\":\"Deepin\"},\"743\":{\"h\":\"Linux\"}},\"dirtCount\":0,\"index\":[[\"星标了的香蕉文章\",{\"1\":{\"711\":1}}],[\"长\",{\"2\":{\"710\":1,\"715\":1,\"720\":1,\"725\":1}}],[\"长度为\",{\"1\":{\"423\":1}}],[\"弯曲的\",{\"2\":{\"710\":1,\"715\":1,\"720\":1,\"725\":1}}],[\"黄\",{\"2\":{\"710\":1,\"715\":1,\"720\":1,\"725\":1}}],[\"香蕉\",{\"0\":{\"706\":1,\"711\":1,\"716\":1,\"721\":1},\"2\":{\"709\":1,\"714\":1,\"719\":1,\"724\":1}}],[\"苹果\",{\"0\":{\"686\":1,\"691\":1,\"696\":1,\"701\":1},\"2\":{\"689\":1,\"694\":1,\"699\":1,\"704\":1}}],[\"企业可从数据中获得宝贵的信息进而改进决策\",{\"1\":{\"680\":1,\"683\":1}}],[\"企业内部应用认证授权\",{\"0\":{\"250\":1}}],[\"影响redis\",{\"1\":{\"633\":1,\"644\":1}}],[\"影响sync期间的i\",{\"1\":{\"631\":1,\"641\":1}}],[\"心跳与超时\",{\"0\":{\"631\":1,\"641\":1}}],[\"心跳与监控\",{\"1\":{\"621\":1}}],[\"决定当从节点与主节点失去联系时\",{\"1\":{\"628\":1,\"638\":1}}],[\"决指令交错\",{\"1\":{\"481\":1}}],[\"详细看下文\",{\"1\":{\"625\":1}}],[\"详见官网fmt的api\",{\"1\":{\"146\":1}}],[\"详见数据迁移\",{\"1\":{\"89\":1}}],[\"广泛应用于需要高性能读取和数据备份的场景中\",{\"1\":{\"623\":1}}],[\"广告数仓\",{\"0\":{\"680\":1,\"683\":1},\"1\":{\"680\":1,\"683\":1},\"2\":{\"681\":1,\"684\":1}}],[\"广告投放优化\",{\"1\":{\"545\":1,\"548\":1}}],[\"广告缓存\",{\"1\":{\"545\":1,\"548\":1}}],[\"意味着从节点拒绝执行写操作\",{\"1\":{\"629\":1,\"639\":1}}],[\"意味着在极端情况下\",{\"1\":{\"623\":1}}],[\"意思就是\",{\"1\":{\"423\":1}}],[\"意思就是禁止我们手动的\",{\"1\":{\"351\":1}}],[\"意思是\",{\"1\":{\"398\":1}}],[\"哨兵系统\",{\"1\":{\"621\":1}}],[\"部分复制\",{\"1\":{\"621\":1}}],[\"建立复制关系\",{\"1\":{\"621\":1}}],[\"建议使用分布式锁的方案\",{\"1\":{\"572\":1}}],[\"建议用户重写findclass\",{\"1\":{\"461\":1}}],[\"建议您在自己的系统上调整和测试强度参数\",{\"1\":{\"199\":1}}],[\"础\",{\"1\":{\"619\":1}}],[\"除了上述作用以外\",{\"1\":{\"619\":1}}],[\"除了query参数之外\",{\"1\":{\"88\":1}}],[\"尤其是在写少读多的场景下\",{\"1\":{\"619\":1}}],[\"式\",{\"1\":{\"619\":1}}],[\"业务不关心脏数据\",{\"1\":{\"592\":1}}],[\"业务幂等和消息去重\",{\"1\":{\"484\":1}}],[\"订单数据\",{\"1\":{\"592\":1}}],[\"订阅模型\",{\"1\":{\"484\":1}}],[\"独占锁writelock也叫\",{\"1\":{\"592\":1}}],[\"独立值\",{\"1\":{\"139\":1}}],[\"强一致性\",{\"0\":{\"592\":1}}],[\"强引用\",{\"1\":{\"359\":1}}],[\"延迟双删\",{\"0\":{\"591\":1},\"1\":{\"591\":1}}],[\"误判率率不能为0\",{\"1\":{\"582\":1,\"602\":1,\"613\":1,\"656\":1,\"667\":1}}],[\"误判率越高则数组越小\",{\"1\":{\"580\":1,\"600\":1,\"611\":1,\"654\":1,\"665\":1}}],[\"误判率越低\",{\"1\":{\"580\":1,\"600\":1,\"611\":1,\"654\":1,\"665\":1}}],[\"误判了10314次\",{\"1\":{\"582\":1,\"602\":1,\"613\":1,\"656\":1,\"667\":1}}],[\"误判了\",{\"1\":{\"581\":1,\"601\":1,\"612\":1,\"655\":1,\"666\":1}}],[\"期望的误判率\",{\"1\":{\"581\":1,\"601\":1,\"612\":1,\"655\":1,\"666\":1}}],[\"预计要插入多少数据\",{\"1\":{\"581\":1,\"601\":1,\"612\":1,\"655\":1,\"666\":1}}],[\"预定义了一组默认的属性\",{\"1\":{\"271\":1}}],[\"难的是在于如何设计随机映射函数\",{\"1\":{\"581\":1,\"601\":1,\"612\":1,\"655\":1,\"666\":1}}],[\"迅速返回避免缓存以及db挂掉\",{\"1\":{\"579\":1,\"599\":1,\"610\":1,\"653\":1,\"664\":1}}],[\"避免爬取相同的url\",{\"1\":{\"579\":1,\"599\":1,\"610\":1,\"653\":1,\"664\":1}}],[\"避免了再次请求数据库\",{\"1\":{\"577\":1,\"597\":1,\"608\":1,\"651\":1,\"662\":1}}],[\"避免在mysql频繁查询\",{\"1\":{\"105\":1}}],[\"空数据\",{\"1\":{\"577\":1,\"597\":1,\"608\":1,\"651\":1,\"662\":1}}],[\"空间整合\",{\"1\":{\"376\":1}}],[\"他可能会模拟出很多不存在的key\",{\"1\":{\"576\":1,\"596\":1,\"607\":1,\"650\":1,\"661\":1}}],[\"他可以避免线程从自己的工作缓存中查找变量的值\",{\"1\":{\"480\":1}}],[\"③\",{\"1\":{\"572\":1}}],[\"②排他锁\",{\"1\":{\"592\":1}}],[\"②\",{\"1\":{\"572\":1}}],[\"①共享锁\",{\"1\":{\"592\":1}}],[\"①\",{\"1\":{\"572\":1}}],[\"逻辑过期\",{\"1\":{\"572\":1}}],[\"风险\",{\"1\":{\"572\":1}}],[\"风险控制\",{\"1\":{\"545\":1,\"548\":1}}],[\"谢谢\",{\"1\":{\"569\":1}}],[\"谢希仁\",{\"1\":{\"62\":1}}],[\"喜欢的话请给个好评\",{\"1\":{\"569\":1}}],[\"您直接下载即可\",{\"1\":{\"568\":1}}],[\"您可以同时测试多个可能符合条件的值\",{\"1\":{\"142\":1}}],[\"您可以执行查询和多个聚合\",{\"1\":{\"88\":1}}],[\"覆盖原本的client\",{\"1\":{\"568\":1}}],[\"拷贝到canal\",{\"1\":{\"568\":1}}],[\"拷贝存活\",{\"1\":{\"383\":1}}],[\"账号\",{\"1\":{\"568\":1}}],[\"账户信息缓存\",{\"1\":{\"545\":1,\"548\":1}}],[\"库名\",{\"1\":{\"560\":1,\"567\":1}}],[\"库存管理\",{\"1\":{\"545\":1,\"548\":1}}],[\"增量获取和解析工具\",{\"1\":{\"558\":1}}],[\"增加系统的复杂性\",{\"1\":{\"592\":1}}],[\"增加文档\",{\"0\":{\"93\":1}}],[\"增加一个定时器程序\",{\"1\":{\"81\":1,\"726\":1,\"729\":1}}],[\"端可采用不同语言实现不同的消费逻辑\",{\"1\":{\"558\":1}}],[\"端口号都要保持一致\",{\"1\":{\"220\":1}}],[\"端口号\",{\"1\":{\"56\":2,\"57\":2}}],[\"端口号拼接到\",{\"1\":{\"56\":1}}],[\"交互协议使用\",{\"1\":{\"558\":1}}],[\"交集\",{\"1\":{\"515\":1}}],[\"很遗憾的是canal没办法直接把数据库同步到redis\",{\"1\":{\"558\":1}}],[\"很多人将\",{\"1\":{\"472\":1}}],[\"很多人关注他\",{\"1\":{\"115\":1,\"533\":1}}],[\"遵循\",{\"1\":{\"554\":1}}],[\"版权协议\",{\"1\":{\"554\":1}}],[\"版权声明\",{\"1\":{\"554\":1}}],[\"版本号\",{\"1\":{\"338\":1}}],[\"版本\",{\"0\":{\"399\":1},\"1\":{\"85\":1,\"568\":1}}],[\"投递给我们\",{\"1\":{\"554\":1}}],[\"投喂用户感兴趣信息\",{\"1\":{\"115\":1,\"533\":1}}],[\"监听的表\",{\"1\":{\"554\":1}}],[\"监控患者的生命体征数据\",{\"1\":{\"545\":1,\"548\":1}}],[\"监控网络设备和链路的状态\",{\"1\":{\"545\":1,\"548\":1}}],[\"双写模式\",{\"0\":{\"587\":1}}],[\"双击启动\",{\"1\":{\"553\":1,\"560\":1,\"567\":1}}],[\"双亲委派模型的第三次\",{\"1\":{\"461\":1}}],[\"双亲委派模型的第二次\",{\"1\":{\"461\":1}}],[\"双亲委派模型的第一次\",{\"1\":{\"461\":1}}],[\"双亲委派模式\",{\"0\":{\"460\":1}}],[\"省略了一些不重要的内容\",{\"1\":{\"561\":1}}],[\"省略\",{\"1\":{\"553\":2,\"568\":3}}],[\"省略var\",{\"1\":{\"134\":1}}],[\"刷新权限\",{\"1\":{\"552\":1,\"559\":1,\"566\":1}}],[\"忽略的表\",{\"1\":{\"552\":1,\"559\":1,\"566\":1}}],[\"酒店和旅游套餐信息\",{\"1\":{\"545\":1,\"548\":1}}],[\"药品库存管理\",{\"1\":{\"545\":1,\"548\":1}}],[\"课程内容缓存\",{\"1\":{\"545\":1,\"548\":1}}],[\"快速检索\",{\"1\":{\"545\":1,\"548\":1}}],[\"快速查询和更新库存数据\",{\"1\":{\"545\":1,\"548\":1}}],[\"快速存在性检查\",{\"1\":{\"522\":1}}],[\"货物追踪\",{\"1\":{\"545\":1,\"548\":1}}],[\"设定超时时间\",{\"1\":{\"591\":1}}],[\"设备状态监控\",{\"1\":{\"545\":1,\"548\":1}}],[\"设置为no\",{\"1\":{\"628\":1,\"638\":1}}],[\"设置一个过期时间字段一块存入缓存中\",{\"1\":{\"572\":1}}],[\"设置默认值\",{\"1\":{\"451\":1}}],[\"设置虚拟机栈内存大小\",{\"1\":{\"327\":1}}],[\"设置自己为\",{\"1\":{\"312\":1}}],[\"设置\",{\"1\":{\"302\":1,\"364\":1}}],[\"设置到对象的\",{\"1\":{\"294\":1}}],[\"好友关系存储\",{\"1\":{\"545\":1,\"548\":1}}],[\"好友关注\",{\"0\":{\"531\":1,\"532\":1,\"533\":1,\"534\":1,\"535\":1}}],[\"景点等\",{\"1\":{\"545\":1,\"548\":1}}],[\"便于分析和报告\",{\"1\":{\"545\":1,\"548\":1}}],[\"便于后续处理\",{\"1\":{\"545\":1,\"548\":1}}],[\"便于实时监控\",{\"1\":{\"545\":1,\"548\":1}}],[\"便于快速查找和推荐\",{\"1\":{\"545\":1,\"548\":1}}],[\"便于统计和展示\",{\"1\":{\"545\":1,\"548\":1}}],[\"便会触发full\",{\"1\":{\"384\":1}}],[\"弹幕消息存储\",{\"1\":{\"545\":1,\"548\":1}}],[\"弹出\",{\"1\":{\"410\":1}}],[\"弹出栈帧\",{\"1\":{\"410\":1}}],[\"商品介绍等基础数据\",{\"1\":{\"592\":1}}],[\"商品信息缓存\",{\"1\":{\"545\":1,\"548\":1}}],[\"商家中可以按照多种排序方式\",{\"1\":{\"536\":1}}],[\"购物推荐等功能\",{\"1\":{\"545\":1,\"548\":1}}],[\"购物车\",{\"1\":{\"516\":1,\"545\":1,\"548\":1}}],[\"装备\",{\"1\":{\"545\":1,\"548\":1}}],[\"玩家信息存储\",{\"1\":{\"545\":1,\"548\":1}}],[\"游戏行业通常将redis作为重要的部署架构组件\",{\"1\":{\"545\":1,\"548\":1}}],[\"游标\",{\"1\":{\"87\":1}}],[\"黑马程序员\",{\"1\":{\"542\":1}}],[\"黑色\",{\"1\":{\"386\":1}}],[\"浏览这个网页的自然人\",{\"1\":{\"541\":1}}],[\"浏览器将被重定向到github进行身份验证\",{\"1\":{\"268\":1}}],[\"浏览器将被重定向到默认的自动生成的登录页面\",{\"1\":{\"268\":1}}],[\"浏览器关掉\",{\"1\":{\"253\":1}}],[\"浏览器就跳转到了index页面\",{\"1\":{\"161\":1}}],[\"浏览器自动跳转到登录页面\",{\"1\":{\"161\":1}}],[\"浏览器中访问\",{\"1\":{\"161\":1}}],[\"淘宝的商品总量就已经超过10亿个\",{\"1\":{\"541\":1}}],[\"遇到实时性\",{\"1\":{\"592\":1}}],[\"遇到的问题是\",{\"1\":{\"541\":1}}],[\"遇到的问题是如果用户访问的是id不存在的数据\",{\"1\":{\"541\":1}}],[\"遇到一个较大的对象时\",{\"1\":{\"374\":1}}],[\"额外加餐\",{\"0\":{\"541\":1}}],[\"额外生成的类\",{\"1\":{\"446\":1}}],[\"抛弃最后一个bit位\",{\"1\":{\"540\":1}}],[\"抛出异常\",{\"1\":{\"430\":1,\"432\":1}}],[\"拼接key\",{\"1\":{\"539\":1,\"540\":1}}],[\"思路\",{\"1\":{\"539\":1}}],[\"思考一下\",{\"1\":{\"474\":1}}],[\"思考\",{\"1\":{\"412\":1}}],[\"统计直播间实时在线人数\",{\"1\":{\"545\":1,\"548\":1}}],[\"统计当前用户截止当前时间在本月的连续签到天数\",{\"1\":{\"540\":1}}],[\"统计有多少个1即可\",{\"1\":{\"540\":1}}],[\"统计bitmap中值为1的bit位的数量\",{\"1\":{\"538\":1}}],[\"统计连续签到的用户数量\",{\"1\":{\"520\":1}}],[\"咱们准备一张小小的卡片\",{\"1\":{\"538\":1}}],[\"咱们可以采用一个可以排序的set集合\",{\"1\":{\"530\":1}}],[\"假如有1000万用户\",{\"1\":{\"538\":1}}],[\"假设我们有第三个数n3过来了\",{\"1\":{\"580\":1,\"600\":1,\"611\":1,\"654\":1,\"665\":1}}],[\"假设\",{\"1\":{\"580\":1,\"600\":1,\"611\":1,\"654\":1,\"665\":1}}],[\"假设今天是10号\",{\"1\":{\"540\":1}}],[\"假设i的初始值为0\",{\"1\":{\"474\":3,\"481\":1}}],[\"假设其中\",{\"1\":{\"312\":1}}],[\"假设没有其他securityfilterchain实例匹配\",{\"1\":{\"171\":1}}],[\"假设现在t2时候又发布了一条记录\",{\"1\":{\"115\":1,\"534\":1}}],[\"假设在t1\",{\"1\":{\"115\":1,\"534\":1}}],[\"假设一个大v写信息\",{\"1\":{\"115\":1,\"533\":1}}],[\"假设此时李四再来读取\",{\"1\":{\"115\":1,\"533\":1}}],[\"假设用户关注了大量的用户\",{\"1\":{\"115\":1,\"533\":1}}],[\"假设赵六要读取信息\",{\"1\":{\"115\":1,\"533\":1}}],[\"假设有一个函数getuserbyid\",{\"1\":{\"112\":1}}],[\"截取\",{\"1\":{\"537\":1}}],[\"毕竟作为redis是一个内存级数据库\",{\"1\":{\"536\":1}}],[\"附近商户\",{\"0\":{\"536\":1,\"537\":1}}],[\"帮助我们根据经纬度来检索数据\",{\"1\":{\"535\":1}}],[\"核心的意思\",{\"1\":{\"534\":1}}],[\"收件箱满足可以根据时间戳排序\",{\"1\":{\"534\":1}}],[\"收集所有\",{\"1\":{\"415\":2}}],[\"收集\",{\"1\":{\"376\":1}}],[\"收集器处理对象的过程中\",{\"1\":{\"386\":1}}],[\"收集器串行的收集\",{\"1\":{\"384\":1}}],[\"收集器使用两个参数控制吞吐量\",{\"1\":{\"378\":1}}],[\"收集器可设置\",{\"1\":{\"378\":1}}],[\"收集器最重要的一个区别\",{\"1\":{\"378\":1}}],[\"收集器类似\",{\"1\":{\"378\":1}}],[\"收集器一样存在\",{\"1\":{\"377\":1}}],[\"收集器默认开启的收集线程数与cpu的数量相同\",{\"1\":{\"377\":1}}],[\"收集器其实就是\",{\"1\":{\"377\":1}}],[\"收集器进行垃圾回收时\",{\"1\":{\"377\":1}}],[\"收集器由于没有线程交互的开销\",{\"1\":{\"377\":1}}],[\"收集器是最基本的\",{\"1\":{\"377\":1}}],[\"收集器\",{\"1\":{\"377\":2,\"378\":2,\"379\":5,\"380\":1}}],[\"收集器搭配使用作为cms收集器的后备方案简单\",{\"1\":{\"376\":1}}],[\"收集器的内存回收过程是与用户线程一起并发执行的\",{\"1\":{\"379\":1}}],[\"收集器的多线程版本\",{\"1\":{\"377\":1}}],[\"收集器的多线程版本新生代采用标记\",{\"1\":{\"376\":1}}],[\"收集器的老年代版本\",{\"1\":{\"378\":2}}],[\"收集器的老年代版本标记\",{\"1\":{\"376\":1}}],[\"收集器的老年代标记\",{\"1\":{\"376\":1}}],[\"滚动查看\",{\"0\":{\"534\":1}}],[\"改造原因是因为我们需要在用户关注了某位用户后\",{\"1\":{\"532\":1}}],[\"完善点赞功能\",{\"1\":{\"529\":1}}],[\"完成静态变量的自增\",{\"1\":{\"474\":1}}],[\"完成类的加载和初始化\",{\"1\":{\"464\":1}}],[\"完成懒惰初始化单例模式\",{\"1\":{\"456\":1}}],[\"完成\",{\"1\":{\"410\":1}}],[\"完成分页功能\",{\"1\":{\"88\":1}}],[\"造成这个问题的原因是\",{\"1\":{\"529\":1}}],[\"造成了不必要的复制\",{\"1\":{\"349\":1}}],[\"笔记不存在\",{\"1\":{\"528\":1}}],[\"探店笔记表\",{\"1\":{\"527\":1}}],[\"探店笔记类似点评网站的评价\",{\"1\":{\"527\":1}}],[\"达人探店\",{\"0\":{\"527\":1,\"528\":1,\"529\":1,\"530\":1}}],[\"达到次数升级重量级锁\",{\"1\":{\"305\":1}}],[\"各种语言都有封装好的客户端库\",{\"1\":{\"523\":1}}],[\"各做\",{\"1\":{\"474\":1}}],[\"防止查询不存在的数据导致的缓存穿透问题\",{\"1\":{\"522\":1}}],[\"防御常见攻击\",{\"1\":{\"156\":2}}],[\"未签到则记录为0\",{\"1\":{\"538\":1}}],[\"未点赞过则点赞数+1\",{\"1\":{\"529\":1}}],[\"未激活等\",{\"1\":{\"521\":1}}],[\"未知型\",{\"1\":{\"144\":1}}],[\"激活\",{\"1\":{\"521\":1}}],[\"离线\",{\"1\":{\"521\":1}}],[\"紧凑存储\",{\"1\":{\"521\":1}}],[\"签到统计\",{\"0\":{\"540\":1}}],[\"签到记录为1\",{\"1\":{\"538\":1}}],[\"签到\",{\"1\":{\"520\":1}}],[\"范围可以是圆形或矩形\",{\"1\":{\"519\":1,\"535\":1}}],[\"范围的数字存入了\",{\"1\":{\"410\":1}}],[\"半径\",{\"1\":{\"519\":1,\"535\":1}}],[\"纬度\",{\"1\":{\"519\":1,\"535\":1,\"536\":1}}],[\"电子病历缓存\",{\"1\":{\"545\":1,\"548\":1}}],[\"电子邮件地址\",{\"1\":{\"235\":1}}],[\"电商行业通过redis实现商品秒杀\",{\"1\":{\"545\":1,\"548\":1}}],[\"电话和姓名排序\",{\"1\":{\"517\":1}}],[\"排行榜\",{\"1\":{\"517\":1,\"545\":1,\"548\":1}}],[\"排序场景\",{\"1\":{\"517\":1}}],[\"排序字段\",{\"1\":{\"87\":1}}],[\"抽奖活动\",{\"1\":{\"515\":1}}],[\"抽象概念\",{\"1\":{\"472\":1}}],[\"共22\",{\"1\":{\"538\":1}}],[\"共同关注\",{\"0\":{\"532\":1},\"1\":{\"515\":1}}],[\"共享\",{\"1\":{\"513\":1}}],[\"共享内存\",{\"1\":{\"472\":1}}],[\"官网地址\",{\"1\":{\"512\":1}}],[\"官方代码示例\",{\"1\":{\"157\":1}}],[\"官方文档\",{\"1\":{\"156\":1,\"166\":1,\"176\":1}}],[\"官方位置\",{\"1\":{\"133\":1}}],[\"到底映射几次\",{\"1\":{\"581\":1,\"601\":1,\"612\":1,\"655\":1,\"666\":1}}],[\"到这canal的配置完成了\",{\"1\":{\"568\":1}}],[\"到这里代码就写完了\",{\"1\":{\"561\":1}}],[\"到这里代码就编写完成了\",{\"1\":{\"554\":1}}],[\"到这\",{\"1\":{\"552\":1,\"559\":1,\"566\":1}}],[\"到后面才知道不同场景需要选用不同的数据库\",{\"1\":{\"512\":1}}],[\"到序号n\",{\"1\":{\"57\":1}}],[\"副本机制\",{\"1\":{\"484\":1}}],[\"集群名字\",{\"1\":{\"568\":1}}],[\"集群\",{\"1\":{\"484\":1}}],[\"集合中包含\",{\"1\":{\"580\":1,\"600\":1,\"611\":1,\"654\":1,\"665\":1}}],[\"集合中存放了\",{\"1\":{\"364\":1}}],[\"集合\",{\"1\":{\"511\":1,\"512\":1}}],[\"集合要使用\",{\"1\":{\"440\":1}}],[\"集合类型\",{\"1\":{\"135\":1}}],[\"积压缓冲区大小\",{\"1\":{\"625\":1}}],[\"积压\",{\"1\":{\"484\":1}}],[\"局部顺序\",{\"1\":{\"484\":1}}],[\"局部变量必须是final的\",{\"1\":{\"446\":1}}],[\"局部变量必须是\",{\"1\":{\"446\":1}}],[\"局部变量表中\",{\"1\":{\"433\":1}}],[\"局部变量表中有4个槽位\",{\"1\":{\"409\":1}}],[\"局部变量表分配\",{\"1\":{\"414\":1}}],[\"恰恰是因为开启重试机制后\",{\"1\":{\"484\":1}}],[\"起到了一个削弱峰值的作用\",{\"1\":{\"484\":1}}],[\"起始\",{\"1\":{\"90\":1}}],[\"平衡了生产者和消费者的处理能力\",{\"1\":{\"484\":1}}],[\"平均每人每年签到次数为10次\",{\"1\":{\"538\":1}}],[\"平均\",{\"1\":{\"88\":1}}],[\"消费消息\",{\"1\":{\"484\":1}}],[\"消费者扩容\",{\"1\":{\"484\":1}}],[\"消费者\",{\"1\":{\"484\":1}}],[\"消费者不找生产者要数据\",{\"1\":{\"484\":1}}],[\"消费者模式是通过一个容器来解决生产者和消费者的强耦合问题\",{\"1\":{\"484\":1}}],[\"消息最大长度\",{\"1\":{\"561\":1}}],[\"消息队列\",{\"1\":{\"514\":1,\"518\":1,\"545\":1,\"548\":1},\"2\":{\"486\":1}}],[\"消息队列有三个作用\",{\"1\":{\"484\":1}}],[\"消息的异步传输成为可能\",{\"1\":{\"484\":1}}],[\"消息消费者从消息队列中接收消息\",{\"1\":{\"484\":1}}],[\"消息生产者将数据发送到消息队列中\",{\"1\":{\"484\":1}}],[\"生产消息\",{\"1\":{\"484\":1}}],[\"生产者需要自行实现全局唯一\",{\"1\":{\"514\":1}}],[\"生产者对象重启\",{\"1\":{\"484\":1}}],[\"生产者和消费者彼此之间不直接通信\",{\"1\":{\"484\":1}}],[\"生产者\",{\"1\":{\"484\":2}}],[\"生产者发送消息时\",{\"1\":{\"484\":1}}],[\"生成新文件名\",{\"1\":{\"527\":1}}],[\"生成新的栈帧\",{\"1\":{\"410\":1}}],[\"生成平台特定的机器码\",{\"1\":{\"469\":1}}],[\"生成的数组的位数\",{\"1\":{\"580\":1,\"600\":1,\"611\":1,\"654\":1,\"665\":1}}],[\"生成的\",{\"1\":{\"444\":1}}],[\"生成的url都能正确地指向注销功能\",{\"1\":{\"160\":1,\"163\":1}}],[\"生成应用程序密钥\",{\"1\":{\"263\":1}}],[\"生成一个唯一的哈希\",{\"1\":{\"198\":1}}],[\"生成一个默认的随机密码\",{\"1\":{\"165\":1}}],[\"生成默认的登录表单和注销页面\",{\"1\":{\"165\":1}}],[\"生成key\",{\"1\":{\"106\":1,\"107\":1,\"108\":1,\"109\":1,\"116\":1}}],[\"点分担读负载\",{\"1\":{\"619\":1}}],[\"点赞和礼物记录\",{\"1\":{\"545\":1,\"548\":1}}],[\"点赞列表查询列表\",{\"1\":{\"530\":1}}],[\"点赞逻辑代码\",{\"1\":{\"530\":1}}],[\"点赞排行榜\",{\"0\":{\"530\":1}}],[\"点赞功能\",{\"0\":{\"529\":1}}],[\"点赞\",{\"1\":{\"515\":1}}],[\"点对点模型\",{\"1\":{\"484\":1}}],[\"点击超链接可以看到对象的内存结构\",{\"1\":{\"421\":1}}],[\"点击允许以授权oauth客户端访问用户的基本个人资料信息\",{\"1\":{\"268\":1}}],[\"点击github链接\",{\"1\":{\"268\":1}}],[\"点击\",{\"1\":{\"161\":1,\"420\":1,\"560\":1}}],[\"削峰\",{\"1\":{\"484\":1}}],[\"性能比较高\",{\"1\":{\"572\":1}}],[\"性能上可能没那么高\",{\"1\":{\"572\":1}}],[\"性能相对更低\",{\"1\":{\"480\":1}}],[\"性能调优\",{\"0\":{\"346\":1}}],[\"易变关键字\",{\"0\":{\"480\":1}}],[\"秒之后\",{\"1\":{\"478\":1}}],[\"秒后\",{\"1\":{\"316\":1}}],[\"里的一段话\",{\"1\":{\"476\":1}}],[\"里面存放了\",{\"1\":{\"442\":1}}],[\"怎么办\",{\"1\":{\"592\":1}}],[\"怎么从jvm角度理解呢\",{\"1\":{\"476\":1}}],[\"怎么能正确加载\",{\"1\":{\"463\":1}}],[\"房间\",{\"1\":{\"476\":1}}],[\"房间出来\",{\"1\":{\"476\":1}}],[\"减轻主节点压力\",{\"1\":{\"624\":1}}],[\"减轻服务器压力\",{\"1\":{\"545\":1,\"548\":1}}],[\"减法\",{\"1\":{\"474\":1}}],[\"减少完全重同步的需要\",{\"1\":{\"632\":1,\"643\":1}}],[\"减少对数据库的直接访问\",{\"1\":{\"545\":2,\"548\":2}}],[\"减少对主存中\",{\"1\":{\"478\":1}}],[\"减少数据库负载\",{\"1\":{\"545\":1,\"548\":1}}],[\"减少数据库访问\",{\"1\":{\"545\":1,\"548\":1}}],[\"减少数据库查询\",{\"1\":{\"545\":1,\"548\":1}}],[\"减少数据库压力\",{\"1\":{\"545\":1,\"548\":1}}],[\"减少可能的比较\",{\"1\":{\"441\":1}}],[\"减少stw\",{\"1\":{\"371\":1}}],[\"减少了泄漏令牌的风险\",{\"1\":{\"253\":1}}],[\"减少rrt次数\",{\"1\":{\"116\":1}}],[\"零\",{\"1\":{\"474\":1}}],[\"负载均衡\",{\"1\":{\"619\":1}}],[\"负数\",{\"1\":{\"474\":1}}],[\"负责验证资源所有者的身份并向客户端颁发访问令牌\",{\"1\":{\"242\":1}}],[\"负责查找当前的请求需要执行的security\",{\"1\":{\"170\":1}}],[\"负责数据的过滤\",{\"1\":{\"81\":1,\"726\":1,\"729\":1}}],[\"吗\",{\"1\":{\"474\":1}}],[\"提高系统性能\",{\"1\":{\"624\":1}}],[\"提高服务可用性\",{\"1\":{\"622\":1}}],[\"提高读取性能以及构建高可用系统\",{\"1\":{\"618\":1}}],[\"提高读取速度\",{\"1\":{\"545\":1,\"548\":1}}],[\"提高搜索速度\",{\"1\":{\"545\":1,\"548\":1}}],[\"提高数据分析速度\",{\"1\":{\"545\":1,\"548\":1}}],[\"提高访问速度\",{\"1\":{\"545\":1,\"548\":1}}],[\"提高话单查询和处理速度\",{\"1\":{\"545\":1,\"548\":1}}],[\"提高广告加载速度\",{\"1\":{\"545\":1,\"548\":1}}],[\"提高查询效率\",{\"1\":{\"545\":2,\"548\":2}}],[\"提高查询速度\",{\"1\":{\"545\":2,\"548\":2}}],[\"提高了消息队列的可用性和灵活性\",{\"1\":{\"518\":1}}],[\"提高效率\",{\"1\":{\"478\":1}}],[\"提出问题\",{\"1\":{\"474\":1}}],[\"提供线程阻塞和唤醒操作的工具类\",{\"1\":{\"319\":1}}],[\"提供了\",{\"1\":{\"403\":1}}],[\"提供了一些原子类\",{\"1\":{\"283\":1}}],[\"提供了更灵活的线程通信方式\",{\"1\":{\"277\":1}}],[\"提供更高级的线程通信和同步机制\",{\"1\":{\"277\":1}}],[\"提供更加丰富的写作功能\",{\"1\":{\"14\":1}}],[\"提供默认值以减少所需的配置\",{\"1\":{\"271\":1}}],[\"提供的一个\",{\"1\":{\"168\":1}}],[\"提供基于表单的登录和注销流程\",{\"1\":{\"165\":1}}],[\"体现在以下几个方面\",{\"1\":{\"472\":1}}],[\"体现的是\",{\"1\":{\"279\":1,\"465\":1}}],[\"硬件内存\",{\"1\":{\"472\":1}}],[\"缓存数据和数据库数据一致性\",{\"2\":{\"594\":1}}],[\"缓存数据+过期时间也足够解决大部分业务对于缓存的要求\",{\"1\":{\"592\":1}}],[\"缓存数据加上过期时间\",{\"1\":{\"592\":1}}],[\"缓存未命中查询数据库\",{\"1\":{\"591\":1}}],[\"缓存命中\",{\"1\":{\"591\":1}}],[\"缓存和数据库的数据要保持一致\",{\"1\":{\"587\":1}}],[\"缓存雪崩是指我们在设置缓存key时采用了相同的过期时间\",{\"1\":{\"572\":1}}],[\"缓存雪崩\",{\"1\":{\"572\":1},\"2\":{\"574\":1}}],[\"缓存击穿\",{\"1\":{\"572\":1},\"2\":{\"574\":1}}],[\"缓存穿透\",{\"0\":{\"576\":1,\"596\":1,\"607\":1,\"650\":1,\"661\":1},\"1\":{\"572\":1,\"579\":1,\"599\":1,\"610\":1,\"653\":1,\"664\":1},\"2\":{\"574\":1,\"585\":1,\"605\":1,\"616\":1,\"659\":1,\"670\":1}}],[\"缓存穿透防止\",{\"1\":{\"522\":1}}],[\"缓存的配置\",{\"1\":{\"554\":1}}],[\"缓存的影响\",{\"1\":{\"472\":1}}],[\"缓存航班\",{\"1\":{\"545\":1,\"548\":1}}],[\"缓存大量查询结果\",{\"1\":{\"545\":1,\"548\":1}}],[\"缓存患者的电子病历\",{\"1\":{\"545\":1,\"548\":1}}],[\"缓存课程视频\",{\"1\":{\"545\":1,\"548\":1}}],[\"缓存广告内容和相关信息\",{\"1\":{\"545\":1,\"548\":1}}],[\"缓存用户通话记录和话单信息\",{\"1\":{\"545\":1,\"548\":1}}],[\"缓存用户发布的动态和内容\",{\"1\":{\"545\":1,\"548\":1}}],[\"缓存用户账户信息\",{\"1\":{\"545\":1,\"548\":1}}],[\"缓存实时路况信息\",{\"1\":{\"545\":1,\"548\":1}}],[\"缓存热门商品信息\",{\"1\":{\"545\":1,\"548\":1}}],[\"缓存对象\",{\"1\":{\"513\":1,\"516\":1}}],[\"缓存\",{\"1\":{\"472\":1,\"572\":1}}],[\"傻傻分不清\",{\"1\":{\"472\":1}}],[\"倍左右\",{\"1\":{\"472\":1}}],[\"膨胀阈值\",{\"1\":{\"472\":1}}],[\"观察es中是否有数据同步\",{\"1\":{\"569\":1}}],[\"观察redis中的数据变化\",{\"1\":{\"561\":1}}],[\"观察mq控制台是否有数据同步\",{\"1\":{\"560\":1}}],[\"观察测试结果\",{\"1\":{\"471\":1}}],[\"观察发现\",{\"1\":{\"395\":1}}],[\"修饰符\",{\"1\":{\"471\":1,\"480\":1}}],[\"修改pom\",{\"1\":{\"568\":1}}],[\"修改为自己的数据库信息\",{\"1\":{\"568\":1}}],[\"修改内容如下\",{\"1\":{\"568\":1}}],[\"修改好之后\",{\"1\":{\"552\":1,\"559\":1,\"566\":1}}],[\"修改自己的pom\",{\"1\":{\"537\":1}}],[\"修改新增探店笔记的业务\",{\"1\":{\"534\":1}}],[\"修改代码\",{\"1\":{\"529\":1,\"530\":1}}],[\"修改分页查询blog业务\",{\"1\":{\"529\":1}}],[\"修改根据id查询blog的业务\",{\"1\":{\"529\":1}}],[\"修改点赞功能\",{\"1\":{\"529\":1}}],[\"修改点赞数量\",{\"1\":{\"529\":1}}],[\"修改配置\",{\"0\":{\"194\":1}}],[\"修改websecurityconfig中的userdetailsservice方法如下\",{\"1\":{\"189\":1}}],[\"修改\",{\"1\":{\"90\":1,\"364\":1,\"481\":1,\"538\":1,\"568\":1}}],[\"修改文件名称\",{\"1\":{\"90\":1}}],[\"修改失败\",{\"1\":{\"85\":1}}],[\"修改之后seq\",{\"1\":{\"85\":1}}],[\"修改成功\",{\"1\":{\"85\":1}}],[\"求长度\",{\"1\":{\"471\":1}}],[\"求交集\",{\"1\":{\"109\":1,\"532\":1}}],[\"次调用使用的是\",{\"1\":{\"472\":1}}],[\"次取下标\",{\"1\":{\"471\":1}}],[\"次\",{\"1\":{\"471\":2,\"472\":1,\"474\":1}}],[\"次后\",{\"1\":{\"299\":1,\"300\":1}}],[\"伪代码\",{\"1\":{\"471\":1}}],[\"粘贴到调用者的位置\",{\"1\":{\"470\":1}}],[\"举个栗子\",{\"1\":{\"470\":1}}],[\"举个例子\",{\"1\":{\"115\":1,\"534\":1}}],[\"逃逸分析\",{\"1\":{\"469\":1}}],[\"约定如下\",{\"1\":{\"464\":1}}],[\"机制加载驱动\",{\"1\":{\"464\":1}}],[\"机制来保证可见性\",{\"1\":{\"283\":1}}],[\"正常的情况是\",{\"1\":{\"576\":1,\"596\":1,\"607\":1,\"650\":1,\"661\":1}}],[\"正确加载的\",{\"1\":{\"463\":1}}],[\"正在添加\",{\"1\":{\"459\":1}}],[\"正在处理中的\",{\"1\":{\"386\":1}}],[\"驱动\",{\"1\":{\"463\":1}}],[\"背景\",{\"0\":{\"463\":1}}],[\"模块\",{\"1\":{\"568\":1}}],[\"模块热部署\",{\"1\":{\"461\":1}}],[\"模式下的虚拟机并行\",{\"1\":{\"376\":1}}],[\"模式下的虚拟机简单\",{\"1\":{\"376\":1}}],[\"模式\",{\"1\":{\"85\":1,\"279\":1,\"558\":1}}],[\"门的名词\",{\"1\":{\"461\":1}}],[\"热\",{\"1\":{\"461\":1}}],[\"热牛奶\",{\"1\":{\"0\":1}}],[\"远古\",{\"1\":{\"461\":1}}],[\"破坏双亲委派模式\",{\"1\":{\"461\":1}}],[\"父类\",{\"1\":{\"461\":1}}],[\"父子类的返回值完全一致\",{\"1\":{\"445\":1}}],[\"继承\",{\"1\":{\"461\":1}}],[\"继续下一个bit位\",{\"1\":{\"540\":1}}],[\"继续看\",{\"1\":{\"464\":1}}],[\"继续运行\",{\"1\":{\"316\":1}}],[\"继续执行\",{\"1\":{\"316\":1}}],[\"步骤\",{\"1\":{\"461\":1}}],[\"希望解耦时\",{\"1\":{\"461\":1}}],[\"希望系统停顿时间最短\",{\"1\":{\"379\":1}}],[\"记录学生的互动和参与情况\",{\"1\":{\"545\":1,\"548\":1}}],[\"记录和分析用户对广告的点击行为\",{\"1\":{\"545\":1,\"548\":1}}],[\"记录1次pv\",{\"1\":{\"541\":1}}],[\"记录用户实时位置\",{\"1\":{\"545\":1,\"548\":1}}],[\"记录用户的点赞和礼物赠送行为\",{\"1\":{\"545\":1,\"548\":1}}],[\"记录用户登录情况\",{\"1\":{\"520\":1}}],[\"记录用户每天的签到状态\",{\"1\":{\"520\":1}}],[\"记录时间\",{\"1\":{\"460\":1}}],[\"记得去掉\",{\"1\":{\"296\":1}}],[\"捕获异常\",{\"1\":{\"460\":1}}],[\"压缩了\",{\"1\":{\"459\":1}}],[\"压入操作数栈\",{\"1\":{\"410\":4,\"416\":1}}],[\"拓展类加载器\",{\"1\":{\"457\":1}}],[\"懒惰实例化\",{\"1\":{\"456\":1}}],[\"典型应用\",{\"1\":{\"456\":1}}],[\"元数据\",{\"1\":{\"448\":2}}],[\"元空间用的本地\",{\"1\":{\"337\":1}}],[\"暴露给\",{\"1\":{\"448\":1}}],[\"ﬁndclass\",{\"1\":{\"461\":1}}],[\"ﬁnal\",{\"1\":{\"416\":1,\"451\":2,\"455\":1}}],[\"ﬁelds\",{\"1\":{\"448\":1}}],[\"ﬁeld\",{\"1\":{\"448\":1}}],[\"匿名内部类则值不一致\",{\"1\":{\"446\":1}}],[\"匿名内部类\",{\"0\":{\"446\":1}}],[\"见下面的例子\",{\"1\":{\"445\":1}}],[\"想要强一致性就加锁或者直接去掉rredis直接去mysql查\",{\"1\":{\"591\":1}}],[\"想要去看共同关注的好友\",{\"1\":{\"532\":1}}],[\"想要通过客户应用访问资源服务器上的资源\",{\"1\":{\"242\":1}}],[\"想一想为什么\",{\"1\":{\"480\":1}}],[\"想象成两个人\",{\"1\":{\"476\":1}}],[\"想象成一个房间\",{\"1\":{\"476\":1}}],[\"想加载非\",{\"1\":{\"461\":1}}],[\"想想\",{\"1\":{\"444\":1}}],[\"出现正数的情况\",{\"1\":{\"474\":1}}],[\"出现负数的情况\",{\"1\":{\"474\":1}}],[\"出现的异常就是最后\",{\"1\":{\"444\":1}}],[\"出现异常\",{\"1\":{\"430\":1,\"444\":1}}],[\"枚举类\",{\"0\":{\"443\":1}}],[\"枚举的\",{\"1\":{\"442\":1}}],[\"枚举\",{\"0\":{\"442\":1}}],[\"又利用\",{\"1\":{\"441\":1}}],[\"又是并行的多线程收集器\",{\"1\":{\"378\":1}}],[\"冲突\",{\"1\":{\"441\":2}}],[\"配合读写分离\",{\"1\":{\"619\":1}}],[\"配合\",{\"1\":{\"441\":1}}],[\"配置允许从节点向主节点宣告不同于实际连接地址和端口的信息\",{\"1\":{\"646\":1}}],[\"配置与管理\",{\"1\":{\"623\":1}}],[\"配置好之后\",{\"1\":{\"553\":1,\"560\":1,\"567\":1}}],[\"配置文件\",{\"1\":{\"552\":1,\"553\":2,\"559\":1,\"560\":2,\"566\":1,\"567\":2}}],[\"配置oauth客户端属性\",{\"0\":{\"265\":1}}],[\"配置角色\",{\"0\":{\"233\":1}}],[\"配置权限\",{\"0\":{\"229\":1}}],[\"配置securityfilterchain\",{\"0\":{\"205\":1}}],[\"配置数据源\",{\"0\":{\"181\":1}}],[\"配置类\",{\"1\":{\"176\":1}}],[\"配置了默认的用户名\",{\"1\":{\"174\":1}}],[\"配置\",{\"0\":{\"11\":1},\"1\":{\"66\":1,\"70\":1,\"74\":1,\"78\":1,\"89\":1,\"90\":1,\"98\":1,\"102\":1,\"126\":1,\"130\":1,\"488\":1,\"492\":1,\"496\":1,\"500\":1,\"504\":1,\"508\":1}}],[\"样\",{\"1\":{\"439\":1}}],[\"样本测试数据\",{\"1\":{\"85\":1}}],[\"得到如下所示的图\",{\"1\":{\"580\":1,\"600\":1,\"611\":1,\"654\":1,\"665\":1}}],[\"得到数字的最后一个bit位\",{\"1\":{\"540\":1}}],[\"得到\",{\"1\":{\"472\":1}}],[\"得到原始类型\",{\"1\":{\"438\":1}}],[\"得到泛型参数的类型信息\",{\"1\":{\"438\":1}}],[\"得到的字节码文件是这个样子的\",{\"1\":{\"397\":1}}],[\"擦除的是字节码上的泛型信息\",{\"1\":{\"438\":1}}],[\"泛型参数\",{\"1\":{\"438\":4}}],[\"泛型反射代码如下\",{\"1\":{\"438\":1}}],[\"泛型也是在\",{\"1\":{\"437\":1}}],[\"泛型集合取值\",{\"0\":{\"437\":1}}],[\"称谓拆箱\",{\"1\":{\"436\":1}}],[\"称为从节点\",{\"1\":{\"618\":1}}],[\"称为主节点\",{\"1\":{\"618\":1}}],[\"称为装箱\",{\"1\":{\"436\":1}}],[\"称为拆装箱\",{\"1\":{\"436\":1}}],[\"称为虚拟机栈\",{\"1\":{\"326\":1}}],[\"称为盐\",{\"1\":{\"198\":1}}],[\"称为元数据\",{\"1\":{\"85\":1}}],[\"称为socket实现\",{\"1\":{\"56\":1}}],[\"称为socketapi\",{\"1\":{\"56\":1}}],[\"切记\",{\"1\":{\"434\":1}}],[\"几个需要修改的参数\",{\"1\":{\"568\":1}}],[\"几乎等价\",{\"1\":{\"434\":1}}],[\"几点说明\",{\"1\":{\"412\":1}}],[\"算出来当前这个id应当落在bitmap的哪一位\",{\"1\":{\"541\":1}}],[\"算出当前这个id对应应该落在bitmap的哪个索引上\",{\"1\":{\"541\":1}}],[\"算是\",{\"1\":{\"434\":1}}],[\"算法\",{\"1\":{\"380\":2}}],[\"相等\",{\"1\":{\"457\":1}}],[\"相比于list\",{\"1\":{\"518\":1}}],[\"相比\",{\"1\":{\"431\":1}}],[\"相关设置\",{\"1\":{\"635\":1}}],[\"相关算法原理大家可以参考\",{\"1\":{\"541\":1}}],[\"相关题目\",{\"1\":{\"411\":1}}],[\"相关参数\",{\"1\":{\"380\":1}}],[\"相关概念\",{\"1\":{\"376\":1}}],[\"相关依赖\",{\"0\":{\"260\":1}}],[\"相关角色\",{\"0\":{\"258\":1}}],[\"相关得分\",{\"1\":{\"87\":1}}],[\"了解redis是什么\",{\"1\":{\"511\":1}}],[\"了解详情\",{\"1\":{\"11\":1}}],[\"了\",{\"1\":{\"431\":2}}],[\"暂存到局部变量表的\",{\"1\":{\"433\":1}}],[\"暂存返回值\",{\"1\":{\"431\":1}}],[\"暂停其它用户的线程\",{\"1\":{\"371\":1}}],[\"暂停线程对象\",{\"1\":{\"280\":1}}],[\"暂停当前线程\",{\"1\":{\"280\":1}}],[\"份\",{\"1\":{\"430\":1}}],[\"剩余的异常类型流程\",{\"1\":{\"430\":1}}],[\"剩余的异常类型\",{\"1\":{\"430\":2}}],[\"块内的代码\",{\"1\":{\"476\":1}}],[\"块中的\",{\"1\":{\"444\":1}}],[\"块中的内容\",{\"1\":{\"431\":1}}],[\"块中出现异常\",{\"1\":{\"431\":1}}],[\"块中如果有返回操作的话\",{\"1\":{\"431\":1}}],[\"块的情况\",{\"0\":{\"428\":1}}],[\"块以及\",{\"1\":{\"283\":1}}],[\"异或\",{\"1\":{\"538\":1}}],[\"异步\",{\"1\":{\"484\":1}}],[\"异步写\",{\"1\":{\"81\":1,\"84\":1,\"726\":1,\"729\":1}}],[\"异常\",{\"1\":{\"444\":2}}],[\"异常表\",{\"1\":{\"433\":1}}],[\"异常情况的解决方案\",{\"1\":{\"433\":1}}],[\"异常处理\",{\"0\":{\"426\":1}}],[\"验证类是否被初始化\",{\"1\":{\"455\":1}}],[\"验证类是否符合\",{\"1\":{\"450\":1}}],[\"验证\",{\"0\":{\"450\":1}}],[\"验证方法地址\",{\"0\":{\"424\":1}}],[\"验证分词效果\",{\"1\":{\"90\":1}}],[\"行式数据库适合查询\",{\"1\":{\"680\":1}}],[\"行代码可能交错运行\",{\"1\":{\"474\":1}}],[\"行代码是顺序执行\",{\"1\":{\"474\":1}}],[\"行\",{\"1\":{\"422\":1}}],[\"停在\",{\"1\":{\"418\":1}}],[\"停车场显示空余车位减一\",{\"1\":{\"312\":1}}],[\"吃鱼\",{\"1\":{\"417\":1}}],[\"啃骨头\",{\"1\":{\"417\":1}}],[\"经过测试\",{\"1\":{\"542\":1}}],[\"经度\",{\"1\":{\"519\":1,\"535\":1,\"536\":1}}],[\"经历了以下几个步骤\",{\"1\":{\"417\":1}}],[\"经典方案\",{\"1\":{\"81\":1,\"726\":1,\"729\":1}}],[\"普通成员方法是由\",{\"1\":{\"416\":1}}],[\"普通成员方法在调用时\",{\"1\":{\"416\":1}}],[\"普通用户只能查看信息\",{\"1\":{\"226\":1}}],[\"私有方法\",{\"1\":{\"416\":1}}],[\"私有\",{\"1\":{\"416\":1}}],[\"形成了映射关系\",{\"1\":{\"538\":1}}],[\"形成点赞排行榜\",{\"1\":{\"530\":1}}],[\"形成新的构造方法\",{\"1\":{\"415\":1}}],[\"形式监听\",{\"1\":{\"81\":1,\"726\":1,\"729\":1}}],[\"合并为一个特殊的方法\",{\"1\":{\"415\":1}}],[\"静态变量i=\",{\"1\":{\"474\":2,\"481\":1}}],[\"静态变量i=0\",{\"1\":{\"474\":1}}],[\"静态变量i=1\",{\"1\":{\"474\":3,\"481\":1}}],[\"静态常量\",{\"1\":{\"455\":2}}],[\"静态方法在调用时使用invokestatic指令\",{\"1\":{\"416\":1}}],[\"静态代码块和静态成员赋值的代码\",{\"1\":{\"415\":1}}],[\"静止显示的\",{\"1\":{\"351\":1}}],[\"构造\",{\"1\":{\"416\":1}}],[\"构造方法都是由\",{\"1\":{\"416\":1}}],[\"构造方法\",{\"0\":{\"415\":1},\"1\":{\"454\":1}}],[\"构造时设置\",{\"1\":{\"316\":1}}],[\"跳转到第4条指令\",{\"1\":{\"414\":1}}],[\"跳过这些查询过的数据\",{\"1\":{\"115\":1,\"535\":1}}],[\"槽位中的值为\",{\"1\":{\"414\":1}}],[\"运算结束后操作数栈为空\",{\"1\":{\"414\":1}}],[\"运行期优化\",{\"0\":{\"467\":1}}],[\"运行下面的代码\",{\"1\":{\"431\":1}}],[\"运行\",{\"0\":{\"419\":1}}],[\"运行代码\",{\"0\":{\"418\":1}}],[\"运行用户代码时间\",{\"1\":{\"376\":2}}],[\"运行时常量池\",{\"0\":{\"340\":1},\"1\":{\"340\":1}}],[\"运行结束\",{\"1\":{\"279\":1}}],[\"运行结果\",{\"1\":{\"134\":1,\"136\":1,\"138\":2,\"139\":1,\"143\":1,\"144\":1,\"148\":1,\"150\":1}}],[\"运行效果\",{\"1\":{\"151\":1}}],[\"准备常量1\",{\"1\":{\"474\":8,\"481\":2}}],[\"准备常数\",{\"1\":{\"289\":1}}],[\"准备\",{\"0\":{\"451\":1}}],[\"准备一个常数\",{\"1\":{\"414\":2}}],[\"呢\",{\"1\":{\"414\":1,\"463\":1}}],[\"殊途也能同归😊\",{\"1\":{\"413\":1}}],[\"细心的同学应当注意到\",{\"1\":{\"412\":1}}],[\"细节如图\",{\"1\":{\"364\":1}}],[\"助记符\",{\"1\":{\"412\":1}}],[\"练习\",{\"0\":{\"411\":1,\"414\":1,\"456\":1},\"1\":{\"471\":1}}],[\"定位到方法区\",{\"1\":{\"410\":1}}],[\"定义出来具体的返回值实体类\",{\"1\":{\"535\":1}}],[\"定义了一套在多线程读写共享数据时\",{\"1\":{\"472\":1}}],[\"定义了这些概念来规范多线程程序的内存一致性行为\",{\"1\":{\"283\":1}}],[\"定义的驱动名加载驱动\",{\"1\":{\"464\":1}}],[\"定义的变量或者import的包如果没有使用到\",{\"1\":{\"133\":1}}],[\"定义系统中所有可能的权限\",{\"1\":{\"235\":1}}],[\"定义dbuserdetailsmanager\",{\"0\":{\"188\":1}}],[\"定义一个计数器\",{\"1\":{\"540\":1}}],[\"定义一个合成类\",{\"1\":{\"442\":1}}],[\"定义一个\",{\"1\":{\"176\":1}}],[\"定义局部变量\",{\"1\":{\"140\":1,\"142\":1}}],[\"定义错误提示\",{\"1\":{\"105\":1}}],[\"定义\",{\"0\":{\"326\":1,\"331\":1,\"336\":1,\"348\":1},\"1\":{\"93\":1,\"367\":1,\"368\":1,\"369\":1,\"377\":2,\"378\":2,\"379\":2}}],[\"定义实体\",{\"0\":{\"91\":1}}],[\"放到操作数栈\",{\"1\":{\"433\":1}}],[\"放到局部变量表的\",{\"1\":{\"410\":1}}],[\"放入的值是\",{\"1\":{\"414\":1}}],[\"放入操作数栈中\",{\"1\":{\"414\":1}}],[\"放入局部变量的\",{\"1\":{\"414\":1}}],[\"放入局部变量表的3号位置\",{\"1\":{\"410\":1}}],[\"放入局部变量表的\",{\"1\":{\"410\":1,\"414\":1}}],[\"放入一个队列\",{\"1\":{\"387\":1}}],[\"放入串池\",{\"1\":{\"341\":1}}],[\"放入redis的set集合\",{\"1\":{\"110\":1,\"111\":1,\"532\":1}}],[\"名+类型\",{\"1\":{\"400\":3}}],[\"名称加载的类说明\",{\"1\":{\"457\":1}}],[\"名称\",{\"1\":{\"134\":1,\"457\":1}}],[\"串\",{\"1\":{\"400\":23}}],[\"串行\",{\"0\":{\"377\":1}}],[\"成就等\",{\"1\":{\"545\":1,\"548\":1}}],[\"成员变量\",{\"1\":{\"472\":1}}],[\"成员变量读取的优化\",{\"1\":{\"471\":1}}],[\"成员变量名\",{\"1\":{\"400\":1}}],[\"成员方法与静态方法调用的另一个区别是\",{\"1\":{\"416\":1}}],[\"成功\",{\"1\":{\"301\":1}}],[\"成功结果处理\",{\"0\":{\"209\":1}}],[\"另一方面\",{\"1\":{\"469\":1}}],[\"另一个要配合\",{\"1\":{\"416\":1}}],[\"另一个是通过使用\",{\"1\":{\"87\":1}}],[\"另外\",{\"1\":{\"434\":1}}],[\"另外utf\",{\"1\":{\"400\":1}}],[\"依赖\",{\"1\":{\"554\":1}}],[\"依赖了spring\",{\"1\":{\"158\":1}}],[\"依次启动canal\",{\"1\":{\"568\":1}}],[\"依次内推\",{\"1\":{\"540\":1}}],[\"依次类推\",{\"1\":{\"400\":1}}],[\"碰到属于constant\",{\"1\":{\"400\":1}}],[\"项来获得这个成员变量的\",{\"1\":{\"400\":1}}],[\"项来获得这个方法的\",{\"1\":{\"400\":2}}],[\"项\",{\"1\":{\"400\":7,\"410\":1}}],[\"项不计入\",{\"1\":{\"400\":1}}],[\"项目名\",{\"1\":{\"158\":1}}],[\"传感器读数\",{\"1\":{\"523\":1}}],[\"传入枚举元素的值及\",{\"1\":{\"443\":1}}],[\"传递参数\",{\"1\":{\"410\":1}}],[\"传送门\",{\"1\":{\"400\":1}}],[\"传统了分页在feed流是不适用的\",{\"1\":{\"115\":1,\"534\":1}}],[\"魔数\",{\"0\":{\"398\":1}}],[\"规范\",{\"1\":{\"397\":1}}],[\"规定了\",{\"1\":{\"283\":1}}],[\"规定了这种方式\",{\"1\":{\"253\":1}}],[\"频繁\",{\"1\":{\"396\":1}}],[\"频繁触发\",{\"1\":{\"394\":1}}],[\"否者先尝试调优新生代\",{\"1\":{\"395\":1}}],[\"否则不会走双亲委派机制\",{\"1\":{\"461\":1}}],[\"否则不修改\",{\"1\":{\"85\":1}}],[\"否则退化为\",{\"1\":{\"389\":1}}],[\"否则底层线程可能被\",{\"1\":{\"297\":1}}],[\"否则你的登录页会加载很久\",{\"1\":{\"164\":1}}],[\"否则编译器会报错的\",{\"1\":{\"141\":1}}],[\"否则无法通过编译\",{\"1\":{\"136\":1}}],[\"否则报错\",{\"1\":{\"133\":1}}],[\"否则\",{\"1\":{\"89\":1,\"457\":1}}],[\"否则以前序为准\",{\"1\":{\"88\":1}}],[\"晋升阈值配置得当\",{\"1\":{\"394\":1}}],[\"晋升老年代的对象年龄\",{\"1\":{\"378\":1}}],[\"清理新生代所花费的时间会更长\",{\"1\":{\"394\":1}}],[\"清除的过程中\",{\"1\":{\"379\":1}}],[\"清除算法实现\",{\"1\":{\"379\":1}}],[\"清除算法的垃圾回收器\",{\"1\":{\"379\":1}}],[\"清除算法希望系统停顿时间最短\",{\"1\":{\"376\":1}}],[\"清除\",{\"1\":{\"379\":1,\"410\":1}}],[\"朝生夕死\",{\"1\":{\"394\":1}}],[\"死亡对象回收零代价\",{\"1\":{\"394\":1}}],[\"弱弱的问一句\",{\"1\":{\"561\":1}}],[\"弱\",{\"1\":{\"393\":1}}],[\"弱引用搭配\",{\"1\":{\"365\":1}}],[\"弱引用的使用和软引用类似\",{\"1\":{\"365\":1}}],[\"弱引用\",{\"1\":{\"361\":1,\"365\":1}}],[\"软\",{\"1\":{\"393\":1}}],[\"软引用自己会加入到\",{\"1\":{\"364\":1}}],[\"软引用对象\",{\"1\":{\"364\":2}}],[\"软引用\",{\"1\":{\"360\":1,\"364\":3}}],[\"考虑使用rename\",{\"1\":{\"629\":1,\"639\":1}}],[\"考虑以下几个问题\",{\"1\":{\"393\":1}}],[\"考虑是否需要将字符串对象入池\",{\"1\":{\"346\":1}}],[\"互动记录\",{\"1\":{\"545\":1,\"548\":1}}],[\"互相保存了对方的地址\",{\"1\":{\"448\":1}}],[\"互联网注重低延迟\",{\"1\":{\"392\":1}}],[\"互斥锁\",{\"1\":{\"277\":1}}],[\"科学运算注重吞吐量\",{\"1\":{\"392\":1}}],[\"高可用性\",{\"1\":{\"622\":1}}],[\"高可用的基础\",{\"1\":{\"619\":1}}],[\"高可用基石\",{\"1\":{\"619\":1}}],[\"高吞吐量\",{\"1\":{\"392\":2}}],[\"高效垃圾回收时必须暂停其他所有的工作线程parallel\",{\"1\":{\"376\":1}}],[\"高效垃圾回收时必须暂停其他所有的工作线程parnewserial\",{\"1\":{\"376\":1}}],[\"高效的并发程序至关重要\",{\"1\":{\"283\":1}}],[\"占用\",{\"1\":{\"391\":1}}],[\"占4字节\",{\"1\":{\"57\":1}}],[\"底层可以用jedis\",{\"1\":{\"561\":1}}],[\"底层对应着\",{\"1\":{\"472\":1}}],[\"底层是char\",{\"1\":{\"387\":1}}],[\"底层线程\",{\"1\":{\"297\":1}}],[\"略微多占用了\",{\"1\":{\"387\":1}}],[\"节省空间\",{\"1\":{\"521\":1}}],[\"节省大量内存\",{\"1\":{\"387\":1}}],[\"节点\",{\"1\":{\"312\":3}}],[\"节点接收到\",{\"1\":{\"81\":1,\"726\":1,\"729\":1}}],[\"节点传输\",{\"1\":{\"81\":1,\"726\":1,\"729\":1}}],[\"节点的\",{\"1\":{\"81\":1,\"726\":1,\"729\":1}}],[\"白色\",{\"1\":{\"386\":1}}],[\"灰色\",{\"1\":{\"386\":1}}],[\"脏卡\",{\"1\":{\"385\":1}}],[\"卡表\",{\"1\":{\"385\":1}}],[\"卡片中\",{\"1\":{\"115\":1,\"535\":1}}],[\"跨代引用\",{\"0\":{\"385\":1}}],[\"跨域全称是跨域资源共享\",{\"1\":{\"220\":1}}],[\"跨域\",{\"0\":{\"220\":1},\"1\":{\"220\":1}}],[\"能正确看到对\",{\"1\":{\"480\":1}}],[\"能够配合数组\",{\"1\":{\"440\":1}}],[\"能够得到更多内存\",{\"1\":{\"383\":1}}],[\"能直接到的对象\",{\"1\":{\"379\":1}}],[\"耗时可能过高\",{\"1\":{\"383\":1}}],[\"耗费时间等信息\",{\"1\":{\"345\":1}}],[\"问\",{\"1\":{\"383\":1,\"441\":1}}],[\"问题3\",{\"1\":{\"540\":1}}],[\"问题2\",{\"1\":{\"540\":1}}],[\"问题1\",{\"1\":{\"540\":1}}],[\"问题分析\",{\"1\":{\"529\":1}}],[\"问题解析\",{\"0\":{\"474\":1}}],[\"问题\",{\"1\":{\"377\":1,\"379\":2,\"385\":1}}],[\"问题辨析\",{\"1\":{\"326\":1}}],[\"阈值可以根据用户来进行设定\",{\"1\":{\"382\":1}}],[\"伊甸园\",{\"1\":{\"381\":1}}],[\"伊甸园和\",{\"1\":{\"371\":1}}],[\"产生的误差\",{\"1\":{\"541\":1}}],[\"产生的停顿时间\",{\"1\":{\"381\":1}}],[\"产生垃圾碎片g1一款面向服务器的垃圾收集器\",{\"1\":{\"376\":1}}],[\"阶段\",{\"1\":{\"380\":1}}],[\"超过\",{\"1\":{\"410\":2}}],[\"超大堆内存\",{\"1\":{\"380\":1}}],[\"超时重传\",{\"0\":{\"60\":1},\"1\":{\"62\":1}}],[\"低延迟\",{\"1\":{\"380\":1,\"392\":2}}],[\"低停顿\",{\"1\":{\"379\":1}}],[\"低停顿对\",{\"1\":{\"376\":1}}],[\"找出存活对象且用户线程可并发执行\",{\"1\":{\"379\":1}}],[\"找到\",{\"1\":{\"553\":1,\"560\":1,\"567\":1,\"568\":1}}],[\"找到mysql安装目录中的my\",{\"1\":{\"552\":1,\"559\":1,\"566\":1}}],[\"找到该圆内包含的所有member\",{\"1\":{\"519\":1,\"535\":1}}],[\"找到对象的实际\",{\"1\":{\"425\":1}}],[\"找到对象实际的class\",{\"1\":{\"417\":1}}],[\"找到常量池\",{\"1\":{\"410\":1}}],[\"找到父类全限定名\",{\"1\":{\"401\":1}}],[\"找到本类全限定名\",{\"1\":{\"401\":1}}],[\"找到它所引用的对象\",{\"1\":{\"363\":1}}],[\"找到被引用对象并调用它的\",{\"1\":{\"363\":1}}],[\"找到了\",{\"1\":{\"357\":1}}],[\"服务器的并发量\",{\"1\":{\"619\":1}}],[\"服务提供接口\",{\"0\":{\"464\":1}}],[\"服务\",{\"1\":{\"379\":1}}],[\"服务端\",{\"1\":{\"81\":2,\"726\":2,\"729\":2}}],[\"服务端向\",{\"1\":{\"81\":1,\"726\":1,\"729\":1}}],[\"尽可能让单次的暂停时间\",{\"1\":{\"379\":1}}],[\"尽管方法区域在逻辑上是堆的一部分\",{\"1\":{\"336\":1}}],[\"尽管\",{\"1\":{\"285\":1}}],[\"尽管将同步周期设置到秒级\",{\"1\":{\"81\":1,\"726\":1,\"729\":1}}],[\"控制主节点在继续接受写入前需要的最低从节点连接数及其数据最大滞后时间\",{\"1\":{\"634\":1,\"645\":1}}],[\"控制复制积压缓冲区的大小\",{\"1\":{\"632\":1,\"643\":1}}],[\"控制全量复制时是否采用无盘复制\",{\"1\":{\"630\":1,\"640\":1}}],[\"控制优惠券的发放数量和频率\",{\"1\":{\"545\":1,\"548\":1}}],[\"控制最大的垃圾收集停顿时间\",{\"1\":{\"378\":1}}],[\"控制线程池中的线程数量等\",{\"1\":{\"314\":1}}],[\"区的比例\",{\"1\":{\"378\":1}}],[\"区别在于new会在堆中创建一个新的对象\",{\"1\":{\"342\":1}}],[\"属于动态绑定\",{\"1\":{\"416\":2}}],[\"属于静态绑定\",{\"1\":{\"416\":2}}],[\"属于新生代收集器也是采用复制算法的收集器\",{\"1\":{\"378\":1}}],[\"属于操作系统\",{\"1\":{\"348\":1}}],[\"故障恢复\",{\"1\":{\"619\":1}}],[\"故障自动转移\",{\"1\":{\"484\":1}}],[\"故也称为吞吐量优先收集器\",{\"1\":{\"378\":2}}],[\"故意使用大量的cpu\",{\"1\":{\"198\":1}}],[\"故意占用资源\",{\"1\":{\"198\":1}}],[\"~\",{\"1\":{\"378\":1,\"379\":3,\"395\":1,\"472\":1,\"537\":1,\"582\":2,\"602\":2,\"613\":2,\"656\":2,\"667\":2}}],[\"专心做垃圾收集自然可以获得最高的单线程收集效率\",{\"1\":{\"377\":1}}],[\"采用redisson提供的读写锁\",{\"1\":{\"592\":1}}],[\"采用这种方式来处理\",{\"1\":{\"541\":1}}],[\"采用标记\",{\"1\":{\"377\":2,\"378\":2}}],[\"采用复制算法\",{\"1\":{\"377\":2,\"378\":1}}],[\"采用的就是timeline的方式\",{\"1\":{\"115\":1,\"533\":1}}],[\"安全性检查\",{\"1\":{\"450\":1}}],[\"安全点\",{\"1\":{\"377\":1}}],[\"安装\",{\"0\":{\"568\":1}}],[\"安装canal\",{\"0\":{\"553\":1,\"560\":1,\"567\":1}}],[\"安装目录下\",{\"1\":{\"553\":1,\"560\":1,\"567\":1}}],[\"安装目录\",{\"1\":{\"419\":1}}],[\"安装客户端\",{\"1\":{\"125\":1}}],[\"安装完毕后\",{\"1\":{\"90\":1}}],[\"安装ik分词器\",{\"1\":{\"90\":1}}],[\"适合于网络带宽充足且磁盘速度较慢的场景\",{\"1\":{\"630\":1,\"640\":1}}],[\"适合个人电脑\",{\"1\":{\"377\":1}}],[\"适用场景\",{\"1\":{\"380\":1}}],[\"适用于高流量或远距离通信\",{\"1\":{\"642\":1}}],[\"适用于大量数据的快速查询\",{\"1\":{\"522\":1}}],[\"适用于以下场景\",{\"1\":{\"515\":1,\"517\":1}}],[\"适用于注重服务的响应速度\",{\"1\":{\"379\":1}}],[\"适用于状态标记\",{\"1\":{\"286\":1}}],[\"适用于没有前端的命令行应用\",{\"1\":{\"255\":1}}],[\"吞吐量优先\",{\"0\":{\"378\":1}}],[\"吞吐量\",{\"1\":{\"376\":2}}],[\"针对这个情况\",{\"1\":{\"577\":1,\"597\":1,\"608\":1,\"651\":1,\"662\":1}}],[\"针对库名或者表名发送动态topic\",{\"1\":{\"560\":1,\"567\":1}}],[\"针对用户的操作\",{\"1\":{\"531\":1}}],[\"针对具有大内存多处理器的机器停顿时间可控\",{\"1\":{\"376\":1}}],[\"针对各种可能的字母组合预先生成的哈希值集合\",{\"1\":{\"198\":1}}],[\"效率高\",{\"1\":{\"376\":1}}],[\"历史最悠久的单线程垃圾收集器\",{\"1\":{\"376\":1}}],[\"垃圾短信\",{\"1\":{\"579\":1,\"599\":1,\"610\":1,\"653\":1,\"664\":1}}],[\"垃圾收集器花掉1分钟\",{\"1\":{\"376\":1}}],[\"垃圾收集器特点算法适用场景优点缺点serial最基本\",{\"1\":{\"376\":1}}],[\"垃圾收集时间\",{\"1\":{\"376\":1}}],[\"垃圾回收调优\",{\"0\":{\"390\":1}}],[\"垃圾回收器\",{\"0\":{\"376\":1}}],[\"垃圾回收算法\",{\"0\":{\"366\":1}}],[\"垃圾回收\",{\"0\":{\"345\":1},\"1\":{\"333\":1,\"345\":1,\"380\":1}}],[\"垃圾回收是否涉及栈内存\",{\"1\":{\"326\":1}}],[\"某些管理命令依然可执行\",{\"1\":{\"629\":1,\"639\":1}}],[\"某些代码会被反复的执行多次\",{\"1\":{\"139\":1}}],[\"某些代码才会执行\",{\"1\":{\"139\":1}}],[\"某个线程的内存溢出了而抛异常\",{\"1\":{\"375\":1}}],[\"什么是布隆过滤器\",{\"0\":{\"579\":1,\"599\":1,\"610\":1,\"653\":1,\"664\":1}}],[\"什么是套接字\",{\"0\":{\"56\":1}}],[\"什么叫做连续签到天数\",{\"1\":{\"540\":1}}],[\"什么时候触发\",{\"1\":{\"373\":2}}],[\"触发\",{\"1\":{\"371\":1}}],[\"幸存区需要能够保存\",{\"1\":{\"394\":1}}],[\"幸存区等进行混合收集\",{\"1\":{\"380\":1}}],[\"幸存区\",{\"1\":{\"380\":1,\"381\":2}}],[\"幸存区比例\",{\"1\":{\"373\":1}}],[\"幸存区from\",{\"1\":{\"370\":1}}],[\"幸存区to\",{\"1\":{\"370\":1}}],[\"速度较本地实现快\",{\"1\":{\"472\":1}}],[\"速度很快但是仍存在\",{\"1\":{\"379\":1}}],[\"速度慢\",{\"1\":{\"368\":1}}],[\"速度快\",{\"1\":{\"367\":1}}],[\"整合多个信息源的大量数据\",{\"1\":{\"680\":1,\"683\":1}}],[\"整合redis\",{\"1\":{\"561\":1}}],[\"整个过程都需要人工干预\",{\"1\":{\"620\":1}}],[\"整体上是\",{\"1\":{\"380\":1}}],[\"整理\",{\"1\":{\"379\":1}}],[\"整理算法\",{\"1\":{\"377\":2,\"378\":2,\"379\":1}}],[\"整理算法在注重吞吐量及cpu资源的场合吞吐量高\",{\"1\":{\"376\":1}}],[\"整理算法在\",{\"1\":{\"376\":1}}],[\"整理时需要重新处理引用关系\",{\"1\":{\"368\":1}}],[\"整数类型\",{\"1\":{\"139\":1}}],[\"整数型\",{\"1\":{\"138\":1}}],[\"换为了\",{\"1\":{\"365\":1}}],[\"遍历引用队列\",{\"1\":{\"364\":1}}],[\"遍历所有结果\",{\"1\":{\"94\":1}}],[\"搭配引用队列\",{\"1\":{\"364\":1}}],[\"终方法\",{\"1\":{\"416\":1}}],[\"终结器引用\",{\"1\":{\"363\":2}}],[\"终止原容器\",{\"1\":{\"90\":1}}],[\"入队\",{\"1\":{\"362\":1,\"363\":1}}],[\"回边次数\",{\"1\":{\"469\":1}}],[\"回收时被优先考虑\",{\"1\":{\"389\":1}}],[\"回收巨型对象\",{\"0\":{\"389\":1}}],[\"回收后\",{\"1\":{\"383\":1}}],[\"回收新生代伊甸园\",{\"1\":{\"380\":1}}],[\"回收以后会交换两个幸存区\",{\"1\":{\"371\":1}}],[\"回收流程\",{\"0\":{\"371\":1}}],[\"回收软引用对象\",{\"1\":{\"360\":1}}],[\"回顾缓存穿透\",{\"1\":{\"541\":1}}],[\"回顾\",{\"1\":{\"258\":1}}],[\"仍会执行重复的解释\",{\"1\":{\"469\":1}}],[\"仍是\",{\"1\":{\"440\":1}}],[\"仍然保留了方法参数泛型的信息\",{\"1\":{\"438\":1}}],[\"仍然存在\",{\"1\":{\"379\":1}}],[\"仍处于等待状态\",{\"1\":{\"376\":1}}],[\"仍不足时会再次出发垃圾回收\",{\"1\":{\"360\":1}}],[\"仍需进入\",{\"1\":{\"278\":1}}],[\"五种引用\",{\"0\":{\"358\":1}}],[\"命令传播\",{\"1\":{\"621\":1}}],[\"命令和控制\",{\"1\":{\"545\":1,\"548\":1}}],[\"命令转储文件\",{\"1\":{\"357\":1}}],[\"命令\",{\"1\":{\"357\":1,\"519\":1}}],[\"命中4条\",{\"1\":{\"88\":1}}],[\"命中结果\",{\"1\":{\"88\":2}}],[\"持有的对象\",{\"1\":{\"356\":1}}],[\"扫描堆中的对象\",{\"1\":{\"355\":1}}],[\"引用局部变量的匿名内部类\",{\"1\":{\"446\":1}}],[\"引用了常量池中\",{\"1\":{\"400\":5}}],[\"引用队列会根据它\",{\"1\":{\"363\":1}}],[\"引用队列\",{\"1\":{\"360\":1,\"361\":1,\"362\":1,\"363\":1,\"365\":1}}],[\"引用该对象时\",{\"1\":{\"360\":1,\"361\":1}}],[\"引用该对象\",{\"1\":{\"359\":1}}],[\"引用的对象\",{\"1\":{\"356\":1}}],[\"引用计数法\",{\"0\":{\"353\":1}}],[\"引入fastjson\",{\"0\":{\"207\":1}}],[\"引入依赖\",{\"0\":{\"180\":1}}],[\"老年代充裕情况下\",{\"1\":{\"396\":1}}],[\"老年代调优\",{\"0\":{\"395\":1}}],[\"老年代被划为一个个卡表\",{\"1\":{\"385\":1}}],[\"老年代引用新生代\",{\"1\":{\"385\":1}}],[\"老年代所占内存超过阈值\",{\"1\":{\"384\":1}}],[\"老年代内存占比有所降低\",{\"1\":{\"394\":1}}],[\"老年代内存不足\",{\"1\":{\"384\":2}}],[\"老年代内存不足发生的垃圾收集\",{\"1\":{\"384\":2}}],[\"老年代内存\",{\"1\":{\"380\":1}}],[\"老年代由于浮动垃圾过多\",{\"1\":{\"379\":1}}],[\"老年代没有幸存区\",{\"1\":{\"378\":1}}],[\"老年代serialold\",{\"1\":{\"377\":1}}],[\"老年代标记整理\",{\"0\":{\"377\":1}}],[\"老年代\",{\"1\":{\"351\":1,\"379\":1,\"380\":1,\"381\":2}}],[\"老版本写法\",{\"1\":{\"89\":1}}],[\"失去了缓存的意义\",{\"1\":{\"572\":1}}],[\"失效模式\",{\"0\":{\"588\":1}}],[\"失效\",{\"1\":{\"351\":1}}],[\"失败\",{\"1\":{\"301\":2,\"302\":1}}],[\"失败结果处理\",{\"0\":{\"212\":1}}],[\"失败的搜索分片\",{\"1\":{\"87\":1}}],[\"手动\",{\"1\":{\"351\":2}}],[\"虚方法表\",{\"1\":{\"448\":1}}],[\"虚引用\",{\"1\":{\"350\":1,\"362\":1}}],[\"虚拟机调优\",{\"1\":{\"481\":1}}],[\"虚拟机加载\",{\"1\":{\"457\":1}}],[\"虚拟机中的唯一性\",{\"1\":{\"457\":1}}],[\"虚拟机中执行编译的方法\",{\"1\":{\"339\":1}}],[\"虚拟机会保证这个类的\",{\"1\":{\"454\":1}}],[\"虚拟机会根据系统的运行状况收集性能监控信息\",{\"1\":{\"378\":1}}],[\"虚拟机可见\",{\"1\":{\"445\":1}}],[\"虚拟机共运行100分钟\",{\"1\":{\"376\":1}}],[\"虚拟机指令根据这张常量表找到要执行的类名\",{\"1\":{\"340\":1}}],[\"虚拟机线程之间共享的方法区域\",{\"1\":{\"336\":1}}],[\"虚拟机有一个在所有\",{\"1\":{\"336\":1}}],[\"虚拟机栈\",{\"0\":{\"325\":1},\"1\":{\"356\":1}}],[\"虚拟机\",{\"1\":{\"322\":1,\"337\":1}}],[\"申请内存\",{\"1\":{\"350\":1}}],[\"申请令牌\",{\"1\":{\"254\":1}}],[\"位置被共用\",{\"1\":{\"428\":1}}],[\"位置\",{\"0\":{\"344\":1}}],[\"答\",{\"1\":{\"342\":1}}],[\"反爬虫\",{\"1\":{\"680\":1,\"683\":1}}],[\"反垃圾邮件\",{\"1\":{\"579\":1,\"599\":1,\"610\":1,\"653\":1,\"664\":1}}],[\"反之则没有签到\",{\"1\":{\"539\":1}}],[\"反锁住门\",{\"1\":{\"476\":1}}],[\"反射优化\",{\"0\":{\"472\":1}}],[\"反编译后的结果\",{\"1\":{\"341\":2}}],[\"反映了当前的基本信息\",{\"1\":{\"85\":1}}],[\"栗子3\",{\"1\":{\"341\":1}}],[\"栗子2\",{\"1\":{\"341\":1}}],[\"栗子1\",{\"1\":{\"341\":1}}],[\"仅此一次\",{\"1\":{\"481\":1}}],[\"仅用在一个写线程\",{\"1\":{\"481\":1}}],[\"仅对\",{\"1\":{\"445\":1}}],[\"仅\",{\"1\":{\"442\":1}}],[\"仅有\",{\"1\":{\"360\":1,\"361\":1}}],[\"仅是常量池中的符号\",{\"1\":{\"341\":1}}],[\"仅作了解即可\",{\"1\":{\"81\":1,\"726\":1,\"729\":1}}],[\"利用不存在的数据进行攻击\",{\"1\":{\"572\":1}}],[\"利用发布订阅模式实时更新数据\",{\"1\":{\"545\":1,\"548\":1}}],[\"利用其原子操作进行数据更新\",{\"1\":{\"545\":1,\"548\":1}}],[\"利用redis中恰当的数据结构\",{\"1\":{\"532\":1}}],[\"利用redis的发布订阅功能实时更新航班和酒店信息\",{\"1\":{\"545\":1,\"548\":1}}],[\"利用redis的发布订阅功能实现实时报警通知\",{\"1\":{\"545\":1,\"548\":1}}],[\"利用redis的发布订阅功能进行实时监控数据的传输\",{\"1\":{\"545\":1,\"548\":1}}],[\"利用redis的原子操作来管理库存\",{\"1\":{\"545\":1,\"548\":1}}],[\"利用redis的键值对存储网络状态信息\",{\"1\":{\"545\":1,\"548\":1}}],[\"利用redis的数据结构存储电网配置\",{\"1\":{\"545\":1,\"548\":1}}],[\"利用redis的数据结构和管道\",{\"1\":{\"545\":1,\"548\":1}}],[\"利用redis的数据结构和事务功能进行风险控制计算\",{\"1\":{\"545\":1,\"548\":1}}],[\"利用redis的数据分析功能进行实时广告效果分析\",{\"1\":{\"545\":1,\"548\":1}}],[\"利用redis的集合类型存储好友关系\",{\"1\":{\"545\":1,\"548\":1}}],[\"利用redis的地理位置\",{\"1\":{\"545\":1,\"548\":1}}],[\"利用redis的列表或有序集合作为任务队列\",{\"1\":{\"545\":1,\"548\":1}}],[\"利用redis的列表或哈希表记录学生的互动数据\",{\"1\":{\"545\":1,\"548\":1}}],[\"利用redis的列表或哈希类型存储购物车信息\",{\"1\":{\"545\":1,\"548\":1}}],[\"利用redis的列表或发布订阅功能存储和推送弹幕消息\",{\"1\":{\"545\":1,\"548\":1}}],[\"利用redis的有序集合\",{\"1\":{\"545\":1,\"548\":1}}],[\"利用redis的set集合判断是否点赞过\",{\"1\":{\"529\":1}}],[\"利用redis的高速读取特性\",{\"1\":{\"523\":1}}],[\"利用有序集合的排序功能\",{\"1\":{\"517\":1}}],[\"利用set的集合操作实现并集\",{\"1\":{\"515\":1}}],[\"利用list的lpush和rpop操作实现消息队列\",{\"1\":{\"514\":1}}],[\"利用串池的机制\",{\"1\":{\"341\":1}}],[\"利用智能算法屏蔽掉违规的\",{\"1\":{\"115\":1,\"533\":1}}],[\"参考视频\",{\"1\":{\"481\":1}}],[\"参考文章\",{\"1\":{\"481\":2}}],[\"参考文档\",{\"1\":{\"197\":1,\"400\":1}}],[\"参考\",{\"0\":{\"583\":1,\"603\":1,\"614\":1,\"657\":1,\"668\":1},\"1\":{\"412\":1}}],[\"参数的类型以及泛型类型\",{\"1\":{\"438\":1}}],[\"参数决定\",{\"1\":{\"382\":1}}],[\"参数来限制垃圾收集的线程数\",{\"1\":{\"377\":1}}],[\"参数\",{\"1\":{\"373\":1,\"378\":1,\"417\":1,\"422\":2}}],[\"参数类型\",{\"1\":{\"340\":1}}],[\"号槽位的值自增\",{\"1\":{\"414\":1}}],[\"号槽位的值又变为了0\",{\"1\":{\"414\":1}}],[\"号槽位的数加\",{\"1\":{\"414\":1}}],[\"号槽位的数放入操作数栈中\",{\"1\":{\"414\":2}}],[\"号槽位\",{\"1\":{\"414\":3,\"433\":1}}],[\"号位置的元素压入操作数栈中\",{\"1\":{\"410\":1}}],[\"号位置的元素放入操作数栈中\",{\"1\":{\"410\":1}}],[\"号位置和\",{\"1\":{\"410\":1}}],[\"号位置\",{\"1\":{\"410\":1}}],[\"号的内容需要在常量池中查找\",{\"1\":{\"339\":1}}],[\"号数据为\",{\"1\":{\"85\":1}}],[\"框内的是真正编译执行的内容\",{\"1\":{\"339\":1}}],[\"获得到当前这一天的位数\",{\"1\":{\"540\":1}}],[\"获得到当前笔记的粉丝\",{\"1\":{\"534\":1}}],[\"获得当前这个月的最后一次签到数据\",{\"1\":{\"540\":1}}],[\"获得该集合的迭代器\",{\"1\":{\"440\":1}}],[\"获得对应类的\",{\"1\":{\"339\":1}}],[\"获取本月截止今天为止的所有的签到记录\",{\"1\":{\"540\":1}}],[\"获取今天是本月的第几天\",{\"1\":{\"539\":1,\"540\":1}}],[\"获取日期\",{\"1\":{\"539\":1,\"540\":1}}],[\"获取bitmap中bit数组\",{\"1\":{\"538\":1}}],[\"获取指定位置\",{\"1\":{\"538\":1}}],[\"获取距离\",{\"1\":{\"537\":1}}],[\"获取店铺id\",{\"1\":{\"537\":1}}],[\"获取同类型的店铺的集合\",{\"1\":{\"536\":1}}],[\"获取类型id\",{\"1\":{\"536\":1}}],[\"获取id\",{\"1\":{\"535\":1}}],[\"获取粉丝id\",{\"1\":{\"534\":1}}],[\"获取当前登录用户\",{\"1\":{\"539\":1,\"540\":1}}],[\"获取当前用户\",{\"1\":{\"532\":1,\"535\":1}}],[\"获取当前用户id\",{\"1\":{\"122\":1}}],[\"获取当前页数据\",{\"1\":{\"532\":1}}],[\"获取登录用户\",{\"1\":{\"527\":1,\"529\":1,\"530\":2,\"531\":2,\"532\":1,\"534\":1}}],[\"获取原始文件名称\",{\"1\":{\"527\":1}}],[\"获取静态变量i的值\",{\"1\":{\"474\":8,\"481\":2}}],[\"获取线程上下文类加载器\",{\"1\":{\"466\":1}}],[\"获取进程\",{\"1\":{\"418\":1}}],[\"获取\",{\"1\":{\"313\":1,\"481\":5}}],[\"获取应用程序id\",{\"1\":{\"263\":1}}],[\"获取第三方网站的身份数据\",{\"1\":{\"245\":1}}],[\"获取的内容\",{\"1\":{\"222\":1}}],[\"获取错误信息\",{\"1\":{\"212\":1,\"218\":1}}],[\"获取用户身份信息\",{\"1\":{\"209\":1}}],[\"获取分数\",{\"1\":{\"117\":1,\"535\":1}}],[\"获取该作者粉丝\",{\"1\":{\"115\":1}}],[\"获取该作者的粉丝\",{\"1\":{\"115\":1}}],[\"获取该用户的粉丝集合\",{\"1\":{\"98\":1,\"102\":1,\"121\":1}}],[\"获取共同关注\",{\"0\":{\"112\":1},\"1\":{\"109\":1,\"112\":1}}],[\"获取参数及参数的校验\",{\"1\":{\"98\":1,\"102\":1,\"121\":1}}],[\"永久代用的堆内存\",{\"1\":{\"337\":1}}],[\"段\",{\"1\":{\"336\":1}}],[\"堆中有一份\",{\"1\":{\"349\":1}}],[\"堆中对象都需要考虑线程安全的问题\",{\"1\":{\"332\":1}}],[\"堆内存较大\",{\"1\":{\"378\":1,\"379\":1}}],[\"堆内存小\",{\"1\":{\"377\":1}}],[\"堆内存不足\",{\"1\":{\"364\":1}}],[\"堆内存\",{\"1\":{\"349\":1}}],[\"堆内存中\",{\"1\":{\"349\":1}}],[\"堆内存溢出\",{\"1\":{\"333\":1}}],[\"堆\",{\"0\":{\"330\":1}}],[\"案例3\",{\"1\":{\"396\":1}}],[\"案例2\",{\"1\":{\"396\":1}}],[\"案例1\",{\"1\":{\"396\":1}}],[\"案例\",{\"0\":{\"396\":1},\"1\":{\"328\":1,\"333\":1}}],[\"案例分析\",{\"0\":{\"269\":1}}],[\"过滤\",{\"1\":{\"680\":1,\"683\":1}}],[\"过滤器和servlet的工作流程\",{\"1\":{\"167\":1}}],[\"过程说明\",{\"1\":{\"441\":1}}],[\"过多\",{\"1\":{\"327\":1}}],[\"过多导致栈内存溢出\",{\"1\":{\"327\":1}}],[\"过大导致栈内存溢出\",{\"1\":{\"327\":1}}],[\"栈帧中的本地变量表\",{\"1\":{\"356\":1}}],[\"栈帧过大\",{\"1\":{\"327\":1}}],[\"栈帧\",{\"1\":{\"327\":2,\"410\":1}}],[\"栈内存溢出\",{\"0\":{\"327\":1},\"1\":{\"327\":1}}],[\"栈内存越大\",{\"1\":{\"326\":1}}],[\"栈内存分配越大越好吗\",{\"1\":{\"326\":1}}],[\"栈内存是方法调用产生的\",{\"1\":{\"326\":1}}],[\"寄存器\",{\"1\":{\"324\":1,\"472\":1}}],[\"稍等一下\",{\"1\":{\"319\":1}}],[\"然而\",{\"1\":{\"319\":1}}],[\"然后我们编写代码\",{\"1\":{\"581\":1,\"601\":1,\"612\":1,\"655\":1,\"666\":1}}],[\"然后我们输入一个集合\",{\"1\":{\"580\":1,\"600\":1,\"611\":1,\"654\":1,\"665\":1}}],[\"然后通过该key去请求后台\",{\"1\":{\"576\":1,\"596\":1,\"607\":1,\"650\":1,\"661\":1}}],[\"然后通过uid获取redis中缓存的文章详情\",{\"1\":{\"576\":1,\"596\":1,\"607\":1,\"650\":1,\"661\":1}}],[\"然后通过博客的uid进行获取\",{\"1\":{\"576\":1,\"596\":1,\"607\":1,\"650\":1,\"661\":1}}],[\"然后博客详情页中的内容假设是存储在redis中的\",{\"1\":{\"576\":1,\"596\":1,\"607\":1,\"650\":1,\"661\":1}}],[\"然后删除其他的yml文件\",{\"1\":{\"568\":1}}],[\"然后进入es6目录\",{\"1\":{\"568\":1}}],[\"然后取到data数据\",{\"1\":{\"561\":1}}],[\"然后往redis中进行同步\",{\"1\":{\"558\":1}}],[\"然后实例redis\",{\"1\":{\"554\":1}}],[\"然后写入redis\",{\"1\":{\"554\":1}}],[\"然后创建一个用户提供给canal来链接mysql做数据同步\",{\"1\":{\"552\":1,\"559\":1,\"566\":1}}],[\"然后把拿到的数据写入redis即可\",{\"1\":{\"551\":1}}],[\"然后把数据推送到粉丝的redis中去\",{\"1\":{\"534\":1}}],[\"然后需要安装canal\",{\"1\":{\"551\":1}}],[\"然后判断这一位是0\",{\"1\":{\"541\":1}}],[\"然后当用户来查询数据时\",{\"1\":{\"541\":1}}],[\"然后不停的向前统计\",{\"1\":{\"540\":1}}],[\"然后到对应的地址上去修改bitmap\",{\"1\":{\"539\":1}}],[\"然后保存到一个bitmap中\",{\"1\":{\"539\":1}}],[\"然后用客户端去操作\",{\"1\":{\"523\":1}}],[\"然后从数据库中查询我们的博客详情后\",{\"1\":{\"576\":1,\"596\":1,\"607\":1,\"650\":1,\"661\":1}}],[\"然后从该主题中获取消息\",{\"1\":{\"484\":1}}],[\"然后从这个位置开始去读取数据\",{\"1\":{\"115\":1,\"534\":1}}],[\"然后让应用类加载器去找\",{\"1\":{\"460\":1}}],[\"然后压入栈中\",{\"1\":{\"433\":1}}],[\"然后退化成\",{\"1\":{\"384\":1}}],[\"然后收集结束\",{\"1\":{\"380\":1}}],[\"然后交换from和to\",{\"1\":{\"369\":1}}],[\"然后整理剩余的对象\",{\"1\":{\"368\":1}}],[\"然后垃圾收集器根据标识清除相应的内容\",{\"1\":{\"367\":1}}],[\"然后运行\",{\"1\":{\"364\":1}}],[\"然后调用被引用对象的finalize方法\",{\"1\":{\"363\":1}}],[\"然后调用它的clean方法来释放直接内存\",{\"1\":{\"362\":1}}],[\"然后调用park方法进入等待状态\",{\"1\":{\"319\":1}}],[\"然后将此快照文件发送给从节点\",{\"1\":{\"621\":1}}],[\"然后将这个值从0变成1\",{\"1\":{\"541\":1}}],[\"然后将放在该队列中的对象重新处理\",{\"1\":{\"386\":1}}],[\"然后将\",{\"1\":{\"357\":1}}],[\"然后在用\",{\"1\":{\"582\":1,\"602\":1,\"613\":1,\"656\":1,\"667\":1}}],[\"然后在存储到redis中\",{\"1\":{\"576\":1,\"596\":1,\"607\":1,\"650\":1,\"661\":1}}],[\"然后在将系统缓冲区数据\",{\"1\":{\"349\":1}}],[\"然后在进行排序\",{\"1\":{\"115\":1,\"533\":1}}],[\"然后读取磁盘文件\",{\"1\":{\"349\":1}}],[\"然后能在控制台看到反编译以后类的信息了\",{\"1\":{\"339\":1}}],[\"然后自己进入\",{\"1\":{\"302\":1}}],[\"然后唤醒\",{\"1\":{\"289\":1}}],[\"然后询问用户\",{\"1\":{\"270\":1}}],[\"然后\",{\"1\":{\"198\":1,\"312\":1}}],[\"然后与数据库的密码进行比较\",{\"1\":{\"198\":1}}],[\"然后就可以各种读取了\",{\"1\":{\"151\":1}}],[\"然后使用get\",{\"1\":{\"569\":1}}],[\"然后使用\",{\"1\":{\"357\":1}}],[\"然后使用客户端的api对数据进行操作\",{\"1\":{\"125\":1}}],[\"然后使用如下方式进行数据迁移\",{\"1\":{\"89\":1}}],[\"然后记录下当前最后一次拿取的记录\",{\"1\":{\"115\":1,\"534\":1}}],[\"然后是6~2\",{\"1\":{\"115\":1,\"534\":1}}],[\"然后再target中得到\",{\"1\":{\"568\":1}}],[\"然后再把数据同步到elasticsearch\",{\"1\":{\"565\":1}}],[\"然后再把数据同步到redis\",{\"1\":{\"558\":1}}],[\"然后再通过api去查看这两个set集合中的交集数据\",{\"1\":{\"532\":1}}],[\"然后再用该码获取令牌\",{\"1\":{\"252\":1}}],[\"然后再直接写一份到活跃粉丝收件箱里边去\",{\"1\":{\"115\":1,\"533\":1}}],[\"然后再根据10000<=balance<=20000进行过滤查询结果\",{\"1\":{\"88\":1}}],[\"然后按照时间排序即可\",{\"1\":{\"115\":1,\"533\":1}}],[\"然后直接把内容推送给用户\",{\"1\":{\"115\":1,\"533\":1}}],[\"然后推送粉丝\",{\"1\":{\"98\":1,\"102\":1,\"121\":1}}],[\"然后解压到该文件夹下即可\",{\"1\":{\"90\":1}}],[\"然后输出tokens流\",{\"1\":{\"90\":1}}],[\"组成\",{\"0\":{\"337\":1},\"1\":{\"326\":1}}],[\"组合以及异常处理等\",{\"1\":{\"318\":1}}],[\"组件\",{\"0\":{\"22\":1,\"29\":1,\"677\":1},\"1\":{\"29\":1,\"677\":1}}],[\"人满发车\",{\"1\":{\"316\":1}}],[\"喻为\",{\"1\":{\"316\":1}}],[\"个线程可见\",{\"1\":{\"481\":1}}],[\"个线程来获取资源\",{\"1\":{\"312\":1}}],[\"个层次\",{\"1\":{\"469\":1}}],[\"个方法都是谁呢\",{\"1\":{\"423\":1}}],[\"个虚方法的入口地址\",{\"1\":{\"423\":1}}],[\"个虚方法\",{\"1\":{\"423\":1}}],[\"个数\",{\"1\":{\"414\":1}}],[\"个数为2时才会继续执行\",{\"1\":{\"316\":1}}],[\"个空间\",{\"1\":{\"414\":1}}],[\"个字节\",{\"1\":{\"410\":3}}],[\"尝试往employee表中增加数据\",{\"1\":{\"560\":1}}],[\"尝试手动修改数据库\",{\"1\":{\"554\":1}}],[\"尝试获取\",{\"1\":{\"313\":1}}],[\"尝试编译这段代码将得到错误\",{\"1\":{\"136\":1}}],[\"释放锁\",{\"1\":{\"433\":2}}],[\"释放直接内存中占用的内存\",{\"1\":{\"350\":1}}],[\"释放\",{\"1\":{\"313\":1,\"351\":1}}],[\"释放了\",{\"1\":{\"312\":1}}],[\"断开原来的\",{\"1\":{\"312\":1}}],[\"队列\",{\"1\":{\"312\":1}}],[\"竞争失败\",{\"1\":{\"312\":1}}],[\"竞争成功\",{\"1\":{\"312\":2}}],[\"竞争的时是非公平的\",{\"1\":{\"289\":1}}],[\"管理智能电网的配置和状态\",{\"1\":{\"545\":1,\"548\":1}}],[\"管理用户预订和旅行历史\",{\"1\":{\"545\":1,\"548\":1}}],[\"管理用户的访问权限\",{\"1\":{\"545\":1,\"548\":1}}],[\"管理数据分析任务的执行\",{\"1\":{\"545\":1,\"548\":1}}],[\"管理药品库存信息\",{\"1\":{\"545\":1,\"548\":1}}],[\"管理玩家登录状态和游戏进度\",{\"1\":{\"545\":1,\"548\":1}}],[\"管理任务提交和线程池的接口\",{\"1\":{\"310\":1}}],[\"管理员能做所有操作\",{\"1\":{\"226\":1}}],[\"工程\",{\"1\":{\"471\":1}}],[\"工作原理\",{\"0\":{\"621\":1}}],[\"工作内存\",{\"1\":{\"472\":1}}],[\"工作与老年代\",{\"1\":{\"378\":1}}],[\"工作于新生代\",{\"1\":{\"378\":1}}],[\"工作在老年代\",{\"1\":{\"377\":1,\"379\":1}}],[\"工作在新生代\",{\"1\":{\"377\":1,\"379\":1}}],[\"工作因子\",{\"1\":{\"198\":2,\"200\":1}}],[\"工具查看\",{\"1\":{\"448\":1,\"472\":1}}],[\"工具来反编译\",{\"1\":{\"403\":1}}],[\"工具进行分析\",{\"1\":{\"357\":1}}],[\"工具\",{\"0\":{\"419\":1},\"1\":{\"334\":3,\"423\":1,\"434\":1}}],[\"工厂类\",{\"1\":{\"310\":1}}],[\"子类访问父类静态变量\",{\"1\":{\"455\":1}}],[\"子类访问父类的静态变量\",{\"1\":{\"455\":1}}],[\"子类初始化\",{\"1\":{\"455\":2}}],[\"子类\",{\"1\":{\"445\":1}}],[\"子类返回值可以是父类返回值的子类\",{\"1\":{\"445\":1}}],[\"子类需要实现tryacquire和tryrelease等方法来控制锁的获取和释放\",{\"1\":{\"310\":1}}],[\"子聚合\",{\"1\":{\"88\":2}}],[\"旧的预期值\",{\"1\":{\"309\":1}}],[\"非空判断\",{\"1\":{\"535\":1}}],[\"非常多的环境中\",{\"1\":{\"377\":1}}],[\"非公平锁\",{\"1\":{\"306\":1}}],[\"非字符串\",{\"1\":{\"88\":1}}],[\"公共的\",{\"1\":{\"401\":1}}],[\"公平性\",{\"1\":{\"313\":1}}],[\"公平锁\",{\"1\":{\"306\":1}}],[\"公司也为这些标准库提供了相应的api文档\",{\"1\":{\"133\":1}}],[\"明显是不合理的\",{\"1\":{\"529\":1}}],[\"明显不会发生线程安全问题的代码才会消除锁\",{\"1\":{\"303\":1}}],[\"明文\",{\"1\":{\"200\":1}}],[\"明文密码\",{\"1\":{\"198\":1}}],[\"地址找到\",{\"1\":{\"302\":1}}],[\"地址后面写上端口号\",{\"1\":{\"56\":1}}],[\"退不出的循环\",{\"0\":{\"478\":1}}],[\"退出同步块解锁时\",{\"1\":{\"302\":1}}],[\"退模式\",{\"1\":{\"115\":1}}],[\"锁需要等\",{\"1\":{\"572\":1}}],[\"锁竞争\",{\"1\":{\"391\":1}}],[\"锁粗化\",{\"0\":{\"304\":1}}],[\"锁消除是指jvm在编译过程中通过静态分析技术检测到一些不可能存在竞争条件的锁\",{\"1\":{\"303\":1}}],[\"锁消除\",{\"0\":{\"303\":1}}],[\"锁\",{\"1\":{\"302\":1}}],[\"锁膨胀\",{\"0\":{\"302\":1}}],[\"锁记录的值不为\",{\"1\":{\"301\":1}}],[\"锁记录地址和状态\",{\"1\":{\"301\":1}}],[\"锁重入\",{\"1\":{\"301\":1}}],[\"锁住的是对象实例或类对象\",{\"1\":{\"289\":1}}],[\"替换成功\",{\"1\":{\"301\":1}}],[\"替换\",{\"1\":{\"301\":1}}],[\"让用户用他查询的id去用相同的哈希算法\",{\"1\":{\"541\":1}}],[\"让这个数字与1做与运算\",{\"1\":{\"540\":1}}],[\"让我们追踪一下源码\",{\"1\":{\"463\":1}}],[\"让对象可以通过其找到方法区中的instanceklass\",{\"1\":{\"448\":1}}],[\"让长时间存活的对象尽快晋升\",{\"1\":{\"394\":1}}],[\"让单位时间\",{\"1\":{\"378\":1}}],[\"让其他线程都在这个点停下来\",{\"1\":{\"377\":1}}],[\"让\",{\"1\":{\"302\":1}}],[\"让锁记录中\",{\"1\":{\"301\":1}}],[\"让该程序按一定的时间周期扫描指定的表\",{\"1\":{\"81\":1,\"726\":1,\"729\":1}}],[\"根本就不该偏向\",{\"1\":{\"300\":1}}],[\"根据误判率\",{\"1\":{\"580\":1,\"600\":1,\"611\":1,\"654\":1,\"665\":1}}],[\"根据查询的列名和es的field进行一一映射\",{\"1\":{\"568\":1}}],[\"根据上面所说\",{\"1\":{\"558\":1,\"565\":1}}],[\"根据玩家分数进行排序\",{\"1\":{\"545\":1,\"548\":1}}],[\"根据用户查询\",{\"1\":{\"532\":1}}],[\"根据用户id查询用户\",{\"1\":{\"530\":1}}],[\"根据用户分数进行排序\",{\"1\":{\"517\":1}}],[\"根据特定字段排序\",{\"1\":{\"517\":1}}],[\"根据平台类型\",{\"1\":{\"469\":1}}],[\"根据\",{\"1\":{\"397\":1}}],[\"根据值自行判定变量类型\",{\"1\":{\"134\":1}}],[\"根据id查询shop\",{\"1\":{\"537\":1}}],[\"根据id查询blog\",{\"1\":{\"535\":1}}],[\"根据id查询博主的探店笔记\",{\"1\":{\"532\":1}}],[\"根据id查询用户\",{\"1\":{\"532\":1}}],[\"根据id查询post\",{\"1\":{\"122\":1}}],[\"根据id查询粉丝\",{\"0\":{\"120\":1},\"1\":{\"120\":1}}],[\"根据id取出帖子数据\",{\"1\":{\"98\":1,\"102\":1}}],[\"根据粉丝集合\",{\"1\":{\"98\":1,\"102\":1,\"121\":1}}],[\"根据这两个数据\",{\"1\":{\"59\":1}}],[\"根据rfc793的定义\",{\"1\":{\"56\":1}}],[\"批量撤销\",{\"0\":{\"300\":1}}],[\"批量重偏向\",{\"0\":{\"299\":1}}],[\"于是整个类的所有对象\",{\"1\":{\"300\":1}}],[\"于是会在给这些对象加锁时重新偏向至\",{\"1\":{\"299\":1}}],[\"于是b在发送给a的确认报文段中把确认号置为701\",{\"1\":{\"57\":1}}],[\"必定会创建并进入重量级锁\",{\"1\":{\"298\":1}}],[\"必须用redis的数据结构实现\",{\"1\":{\"534\":1}}],[\"必须到主存中获取它的值\",{\"1\":{\"480\":1}}],[\"必须改写下面这样\",{\"1\":{\"436\":1}}],[\"必须暂停其他所有的工作线程\",{\"1\":{\"377\":1}}],[\"必须打开下面的注释\",{\"1\":{\"297\":1}}],[\"必须是进入同一个对象的\",{\"1\":{\"289\":1}}],[\"必须配合\",{\"1\":{\"283\":1,\"362\":1}}],[\"必须将令牌储存在前端\",{\"1\":{\"253\":1}}],[\"必须确保常量左右值类型一致\",{\"1\":{\"138\":1}}],[\"必须不匹配must\",{\"1\":{\"88\":1}}],[\"必须达到must所列举的所有条件\",{\"1\":{\"88\":1}}],[\"必须完全匹配\",{\"1\":{\"88\":1}}],[\"必须全匹配上才检索成功\",{\"1\":{\"88\":1}}],[\"必须指定\",{\"1\":{\"85\":1}}],[\"必须释放已经建立的tcp连接\",{\"1\":{\"55\":1}}],[\"必须先建立tcp连接\",{\"1\":{\"55\":1}}],[\"轻量级锁使用cas\",{\"1\":{\"305\":1}}],[\"轻量级锁对使用者是透明的\",{\"1\":{\"301\":1}}],[\"轻量级锁的使用场景\",{\"1\":{\"301\":1}}],[\"轻量级锁\",{\"0\":{\"301\":1},\"1\":{\"305\":1}}],[\"轻量级锁会在锁记录中记录\",{\"1\":{\"296\":1}}],[\"轻量级锁在没有竞争时\",{\"1\":{\"294\":1}}],[\"升级为重量级锁\",{\"0\":{\"298\":1}}],[\"升级为轻量级锁\",{\"0\":{\"296\":1,\"297\":1},\"1\":{\"296\":1,\"305\":1}}],[\"升序\",{\"1\":{\"87\":1}}],[\"撤销\",{\"0\":{\"296\":1,\"297\":1,\"298\":1}}],[\"||\",{\"1\":{\"464\":1,\"530\":1,\"532\":1,\"535\":1,\"537\":1,\"540\":2,\"561\":1}}],[\"|\",{\"1\":{\"295\":52,\"316\":2,\"328\":1,\"390\":1,\"415\":4,\"429\":2,\"635\":8}}],[\"|elasticsearch\",{\"1\":{\"90\":1}}],[\"头\",{\"1\":{\"294\":1}}],[\"偏移\",{\"1\":{\"423\":1}}],[\"偏移量就是1\",{\"1\":{\"117\":1}}],[\"偏移量\",{\"1\":{\"117\":1}}],[\"偏向某个线程使用\",{\"1\":{\"305\":1}}],[\"偏向状态\",{\"0\":{\"295\":1}}],[\"偏向锁\",{\"0\":{\"294\":1},\"1\":{\"305\":1}}],[\"图解方法执行流程\",{\"0\":{\"404\":1}}],[\"图形界面的\",{\"1\":{\"334\":1}}],[\"图中\",{\"1\":{\"289\":1}}],[\"图片等\",{\"1\":{\"398\":1,\"527\":1}}],[\"图片\",{\"1\":{\"81\":1,\"726\":1,\"729\":1}}],[\"图片引入\",{\"1\":{\"28\":1,\"676\":1}}],[\"图片增强\",{\"0\":{\"20\":1}}],[\"置为null\",{\"1\":{\"357\":1}}],[\"置为\",{\"1\":{\"289\":2}}],[\"刚才开通的mysql的账户密码\",{\"1\":{\"553\":1,\"560\":1,\"567\":1}}],[\"刚才的\",{\"1\":{\"471\":1}}],[\"刚才通过ps命令看到的tid来对比定位\",{\"1\":{\"328\":1}}],[\"刚才通过top查到的进程号\",{\"1\":{\"328\":1}}],[\"刚开始学习的时候\",{\"1\":{\"512\":1}}],[\"刚开始\",{\"1\":{\"289\":1,\"312\":1}}],[\"刚导入了1000条数据\",{\"1\":{\"85\":1}}],[\"屏障\",{\"1\":{\"286\":1}}],[\"递增操作\",{\"1\":{\"285\":1}}],[\"禁止某个方法\",{\"1\":{\"470\":1}}],[\"禁止指令重排序\",{\"1\":{\"285\":1}}],[\"禁用可以减少带宽使用但增加数据到达延迟\",{\"1\":{\"642\":1}}],[\"禁用指针压缩\",{\"1\":{\"417\":1}}],[\"禁用\",{\"2\":{\"5\":1,\"276\":1}}],[\"禁用了如下功能\",{\"1\":{\"3\":1,\"274\":1}}],[\"告诉jvm编译器和处理器\",{\"1\":{\"284\":1}}],[\"含义参数堆初始大小\",{\"1\":{\"373\":1}}],[\"含义\",{\"0\":{\"284\":1},\"1\":{\"412\":1}}],[\"理解并正确使用这些概念对于编写正确\",{\"1\":{\"283\":1}}],[\"理解成泊车\",{\"1\":{\"280\":1}}],[\"理解成停车场\",{\"1\":{\"280\":1}}],[\"理解成订单\",{\"1\":{\"280\":1}}],[\"精确\",{\"1\":{\"283\":1}}],[\"精确控制\",{\"1\":{\"88\":1}}],[\"唤醒线程\",{\"1\":{\"319\":1}}],[\"唤醒\",{\"1\":{\"283\":1,\"289\":2,\"302\":1}}],[\"立马处理\",{\"1\":{\"282\":1}}],[\"司机停车的时候发现有个订单\",{\"1\":{\"282\":1}}],[\"司机那边收到就开始工作\",{\"1\":{\"281\":1}}],[\"司机在停车场停车休息\",{\"1\":{\"281\":1}}],[\"阻塞其他线程读写操作\",{\"1\":{\"592\":1}}],[\"阻塞队列就相当于一个消息缓冲区\",{\"1\":{\"484\":1}}],[\"阻塞当前线程\",{\"1\":{\"319\":2}}],[\"阻塞\",{\"1\":{\"283\":1,\"312\":1,\"377\":1}}],[\"阻塞等待订单\",{\"1\":{\"281\":1}}],[\"阻塞式\",{\"1\":{\"150\":1}}],[\"跟前一个中的\",{\"1\":{\"431\":1}}],[\"跟现实的司机很像\",{\"1\":{\"280\":1}}],[\"跟原来一样就什么都不做\",{\"1\":{\"85\":1}}],[\"恢复某个线程的运行\",{\"1\":{\"280\":1}}],[\"恢复计数\",{\"1\":{\"139\":1}}],[\"状态标志\",{\"1\":{\"521\":1}}],[\"状态如下\",{\"1\":{\"312\":1}}],[\"状态的线程\",{\"1\":{\"289\":1}}],[\"状态\",{\"1\":{\"278\":1,\"279\":1,\"312\":1,\"386\":1}}],[\"条件判断指令\",{\"0\":{\"412\":1}}],[\"条件变量\",{\"1\":{\"277\":1}}],[\"条件满足\",{\"1\":{\"139\":2}}],[\"确定目标\",{\"0\":{\"392\":1}}],[\"确保数据的一致性\",{\"1\":{\"545\":1,\"548\":1}}],[\"确保消息的可靠传输\",{\"1\":{\"545\":1,\"548\":1}}],[\"确保线程已经进入park状态\",{\"1\":{\"319\":1}}],[\"确保在分布式系统中某个操作只执行一次\",{\"1\":{\"513\":1}}],[\"确保在该屏障之前的所有读\",{\"1\":{\"286\":1}}],[\"确保在不同的线程\",{\"1\":{\"283\":1}}],[\"确保在并发环境中程序的执行结果与按序执行时的结果一致\",{\"1\":{\"283\":1}}],[\"确保对象的引用在构造之后不会改变\",{\"1\":{\"277\":1}}],[\"确保对变量的读写操作直接在主内存中进行\",{\"1\":{\"277\":1}}],[\"确认号\",{\"1\":{\"57\":1}}],[\"等级等排名信息\",{\"1\":{\"545\":1,\"548\":1}}],[\"等支持二进制的编辑器修改\",{\"1\":{\"450\":1}}],[\"等接口都实现了\",{\"1\":{\"444\":1}}],[\"等价代码为\",{\"1\":{\"439\":1}}],[\"等价于下面的代码\",{\"1\":{\"279\":1}}],[\"等工具\",{\"1\":{\"434\":1}}],[\"等情况\",{\"1\":{\"373\":1}}],[\"等垃圾回收结束\",{\"1\":{\"371\":1}}],[\"等司机来接\",{\"1\":{\"282\":1}}],[\"等同步器\",{\"1\":{\"277\":1}}],[\"等待下次主动查询进行更新\",{\"1\":{\"588\":1}}],[\"等待线程满足某个计数\",{\"1\":{\"316\":1}}],[\"等待所有线程完成倒计时\",{\"1\":{\"315\":1}}],[\"等待\",{\"1\":{\"277\":1,\"279\":1,\"316\":1}}],[\"等\",{\"1\":{\"277\":1,\"283\":1,\"378\":1,\"461\":1,\"469\":1}}],[\"等于\",{\"1\":{\"139\":1}}],[\"线程t如预想的停下来\",{\"1\":{\"480\":1}}],[\"线程t不会如预想的停下来\",{\"1\":{\"478\":1}}],[\"线程操作\",{\"1\":{\"480\":1}}],[\"线程修改了\",{\"1\":{\"478\":1}}],[\"线程要频繁从主内存中读取\",{\"1\":{\"478\":1}}],[\"线程刚开始从主内存读取了\",{\"1\":{\"478\":1}}],[\"线程无法停止\",{\"1\":{\"478\":1}}],[\"线程不可见\",{\"1\":{\"478\":1}}],[\"线程不能结束\",{\"1\":{\"297\":1}}],[\"线程对\",{\"1\":{\"478\":1}}],[\"线程执行到monitorenter\",{\"1\":{\"476\":1}}],[\"线程这时才可以进入\",{\"1\":{\"476\":1}}],[\"线程内i=\",{\"1\":{\"474\":2,\"481\":1}}],[\"线程内i=1\",{\"1\":{\"474\":4,\"481\":1}}],[\"线程内i=0\",{\"1\":{\"474\":6,\"481\":2}}],[\"线程私有\",{\"1\":{\"472\":1}}],[\"线程上下文类加载器是当前线程使用的类加载器\",{\"1\":{\"466\":1}}],[\"线程上下文类加载器\",{\"0\":{\"462\":1}}],[\"线程开始运行\",{\"0\":{\"409\":1}}],[\"线程通过\",{\"1\":{\"350\":1,\"363\":1}}],[\"线程通信通常通过以下几种方式实现\",{\"1\":{\"277\":1}}],[\"线程通信通常用于以下场景\",{\"1\":{\"277\":1}}],[\"线程通信是指线程之间相互发送信号和交换数据的过程\",{\"1\":{\"277\":1}}],[\"线程运行诊断\",{\"0\":{\"328\":1}}],[\"线程被唤醒后继续执行并打印另一条消息\",{\"1\":{\"319\":1}}],[\"线程2\",{\"1\":{\"474\":8,\"481\":4}}],[\"线程2继续向下运行\",{\"1\":{\"316\":1}}],[\"线程2开始\",{\"1\":{\"316\":1}}],[\"线程个数够2\",{\"1\":{\"316\":1}}],[\"线程1\",{\"1\":{\"474\":16,\"481\":4}}],[\"线程1继续向下运行\",{\"1\":{\"316\":1}}],[\"线程1开始\",{\"1\":{\"316\":1}}],[\"线程使用完资源后释放许可\",{\"1\":{\"314\":1}}],[\"线程使用资源\",{\"1\":{\"314\":1}}],[\"线程尝试获取许可\",{\"1\":{\"314\":1}}],[\"线程完成资源使用后\",{\"1\":{\"313\":1}}],[\"线程成功获取许可\",{\"1\":{\"313\":1}}],[\"线程就获得了锁\",{\"1\":{\"305\":1}}],[\"线程之间的共享变量存储在主内存\",{\"1\":{\"283\":1}}],[\"线程\",{\"1\":{\"283\":1,\"297\":1,\"302\":1,\"476\":1,\"480\":1,\"481\":6}}],[\"线程调用虚引用相关方法释放\",{\"1\":{\"362\":1}}],[\"线程调用semaphore的acquire\",{\"1\":{\"313\":1}}],[\"线程调用\",{\"1\":{\"278\":1}}],[\"线程释放锁时唤醒\",{\"1\":{\"278\":1}}],[\"线程会在\",{\"1\":{\"278\":2}}],[\"线程发现条件不满足\",{\"1\":{\"278\":1}}],[\"线程可能需要向其他线程提供数据或者从其他线程接收数据\",{\"1\":{\"277\":1}}],[\"线程可能需要等待其他线程完成某些操作后才能继续执行\",{\"1\":{\"277\":1}}],[\"线程同步关注的是如何避免并发导致的问题\",{\"1\":{\"283\":1}}],[\"线程同步和线程通信虽然密切相关\",{\"1\":{\"283\":1}}],[\"线程同步的目的是确保当一个线程正在使用某个资源时\",{\"1\":{\"277\":1}}],[\"线程同步通常通过以下几种方式实现\",{\"1\":{\"277\":1}}],[\"线程同步是一种机制\",{\"1\":{\"277\":1}}],[\"线程是cpu调度的最小单位\",{\"1\":{\"277\":1}}],[\"协调任务执行\",{\"1\":{\"277\":1}}],[\"协程是在线程的基础上再细分出来的一个调度的最小单位\",{\"1\":{\"277\":1}}],[\"协议或\",{\"1\":{\"81\":1,\"726\":1,\"729\":1}}],[\"协议\",{\"1\":{\"81\":1,\"726\":1,\"729\":1}}],[\"类初始化\",{\"1\":{\"456\":1}}],[\"类加载器加载类\",{\"1\":{\"458\":1}}],[\"类加载器虽然只用于实现类的加载动作\",{\"1\":{\"457\":1}}],[\"类加载器\",{\"0\":{\"457\":1}}],[\"类加载器的\",{\"1\":{\"455\":1}}],[\"类加载阶段\",{\"0\":{\"447\":1}}],[\"类对象\",{\"1\":{\"455\":2}}],[\"类自己的\",{\"1\":{\"424\":1}}],[\"类有\",{\"1\":{\"423\":1}}],[\"类似地\",{\"1\":{\"646\":1}}],[\"类似的指令还有\",{\"1\":{\"410\":1}}],[\"类似于操作系统的线程\",{\"1\":{\"277\":1}}],[\"类文件结构如下\",{\"1\":{\"397\":1}}],[\"类文件结构\",{\"0\":{\"397\":1}}],[\"类名为\",{\"1\":{\"472\":1}}],[\"类名\",{\"1\":{\"338\":1,\"403\":1}}],[\"类\",{\"0\":{\"316\":1},\"1\":{\"448\":1}}],[\"类的初始化的懒惰的\",{\"1\":{\"455\":1}}],[\"类的对象在对象头中保存了\",{\"1\":{\"448\":1}}],[\"类的基本信息\",{\"1\":{\"339\":1}}],[\"类的绝对路径\",{\"1\":{\"339\":1}}],[\"类的\",{\"1\":{\"277\":1,\"424\":2}}],[\"类型相同的商户作为同一组\",{\"1\":{\"536\":1}}],[\"类型sorted\",{\"0\":{\"517\":1}}],[\"类型的变量\",{\"1\":{\"437\":1}}],[\"类型的文件\",{\"1\":{\"398\":1}}],[\"类型来处理\",{\"1\":{\"437\":1}}],[\"类型是userdetailsservice\",{\"1\":{\"176\":1}}],[\"类型不被局限于常量或整数\",{\"1\":{\"142\":1}}],[\"类型推断type\",{\"1\":{\"134\":1}}],[\"类型\",{\"0\":{\"513\":1,\"514\":1,\"515\":1,\"516\":1},\"1\":{\"85\":1,\"134\":1,\"441\":1}}],[\"类型下保存\",{\"1\":{\"85\":1}}],[\"那怎么处理呢\",{\"1\":{\"541\":1}}],[\"那这两个类就必定不相等\",{\"1\":{\"457\":1}}],[\"那就要考虑线程安全问题\",{\"1\":{\"326\":1}}],[\"那要先提一下线程间是如何通信的\",{\"1\":{\"277\":1}}],[\"那么读取到的数据就不是最新的\",{\"1\":{\"588\":1}}],[\"那么需要访问数据库\",{\"1\":{\"576\":1,\"596\":1,\"607\":1,\"650\":1,\"661\":1}}],[\"那么所有对这个key的数据查询都落到db\",{\"1\":{\"572\":1}}],[\"那么我哪儿知道到底哪些是0\",{\"1\":{\"540\":1}}],[\"那么我们就可以从当前月的第一天开始\",{\"1\":{\"540\":1}}],[\"那么我们就读取到了重复的数据\",{\"1\":{\"115\":1,\"534\":1}}],[\"那么我们拿到的就是10~6\",{\"1\":{\"115\":1,\"534\":1}}],[\"那么我们采用写扩散的方式\",{\"1\":{\"115\":1,\"533\":1}}],[\"那么我们应该把这些数据推送给用户\",{\"1\":{\"115\":1,\"533\":1}}],[\"那么幂等性操作就会失效\",{\"1\":{\"484\":1}}],[\"那么数据就有可能是重复的\",{\"1\":{\"484\":1}}],[\"那么一旦数据发送失败\",{\"1\":{\"484\":1}}],[\"那么生产者在生产消息时\",{\"1\":{\"484\":1}}],[\"那么赋值也会在初始化阶段完成\",{\"1\":{\"451\":1}}],[\"那么编译阶段值就确定了\",{\"1\":{\"451\":1}}],[\"那么ualx属性没有机会再跟着一起变化\",{\"1\":{\"446\":1}}],[\"那么这10天里边签到了多少次呢\",{\"1\":{\"540\":1}}],[\"那么这\",{\"1\":{\"423\":1}}],[\"那么它们要比较怎么办\",{\"1\":{\"412\":1}}],[\"那么它的结构如下\",{\"1\":{\"88\":1}}],[\"那么已经\",{\"1\":{\"395\":1}}],[\"那么吞吐量就是99\",{\"1\":{\"376\":1}}],[\"那么触发\",{\"1\":{\"371\":1}}],[\"那么就去请求数据库\",{\"1\":{\"576\":1,\"596\":1,\"607\":1,\"650\":1,\"661\":1}}],[\"那么就可以直接往redis里边把这个空数据缓存起来\",{\"1\":{\"541\":1}}],[\"那么就是10位\",{\"1\":{\"540\":1}}],[\"那么就是跨域请求\",{\"1\":{\"220\":1}}],[\"那么就会由\",{\"1\":{\"350\":1}}],[\"那么程序计数器会记录线程下一行指令的地址行号\",{\"1\":{\"324\":1}}],[\"那么再添加一条\",{\"1\":{\"301\":1}}],[\"那么可以使用轻量级锁来优化\",{\"1\":{\"301\":1}}],[\"那么将调用securityfilterchain\",{\"1\":{\"171\":1}}],[\"那么只能够在该if\",{\"1\":{\"141\":1}}],[\"那么此时就需要使用kafka的事务功能来解决跨会话的幂等性操作\",{\"1\":{\"484\":1}}],[\"那么此时就会拉取海量的内容\",{\"1\":{\"115\":1,\"533\":1}}],[\"那么此时读取到的第二页实际上是从6\",{\"1\":{\"115\":1,\"534\":1}}],[\"那么大v和普通的人发的都会直接写入到自己收件箱里边来\",{\"1\":{\"115\":1,\"533\":1}}],[\"那么他是直接将数据先写入到一份到发件箱里边去\",{\"1\":{\"115\":1,\"533\":1}}],[\"那么他会从读取他自己的收件箱\",{\"1\":{\"115\":1,\"533\":1}}],[\"那么得到的套接字就是\",{\"1\":{\"56\":1}}],[\"那么\",{\"1\":{\"56\":1,\"163\":1,\"357\":1}}],[\"讲到并发\",{\"1\":{\"277\":1}}],[\"向hyperloglog中添加100万条数据\",{\"1\":{\"542\":1}}],[\"向指定位置\",{\"1\":{\"538\":1}}],[\"向后台传入当前app收集的地址\",{\"1\":{\"536\":1}}],[\"向\",{\"1\":{\"270\":2,\"271\":1}}],[\"询问用户是否允许或拒绝客户应用访问github上的用户数据\",{\"1\":{\"268\":1}}],[\"启动kibana\",{\"1\":{\"569\":1}}],[\"启动es6\",{\"1\":{\"569\":1}}],[\"启动\",{\"1\":{\"568\":1}}],[\"启动springboot程序\",{\"1\":{\"561\":1}}],[\"启动canal和rocketmq之后\",{\"1\":{\"560\":1}}],[\"启动redis后\",{\"1\":{\"554\":1}}],[\"启动程序可以从控制台看到canal\",{\"1\":{\"554\":1}}],[\"启动程序并访问localhost\",{\"1\":{\"268\":1}}],[\"启动mysql时不启动grant\",{\"1\":{\"552\":1,\"559\":1,\"566\":1}}],[\"启动类的加载器\",{\"0\":{\"458\":1}}],[\"启动类加载器\",{\"1\":{\"457\":1}}],[\"启动应用程序\",{\"0\":{\"268\":1}}],[\"启动项目测试controller\",{\"0\":{\"161\":1}}],[\"填写应用信息\",{\"1\":{\"263\":1}}],[\"锚点在http请求中不会发送到服务器\",{\"1\":{\"253\":1}}],[\"令牌uri和用户信息uri通常不经常变化\",{\"1\":{\"271\":1}}],[\"令牌就失效了\",{\"1\":{\"253\":1}}],[\"令牌则是储存在后端\",{\"1\":{\"252\":1}}],[\"隐藏式\",{\"0\":{\"253\":1},\"1\":{\"251\":1,\"253\":1}}],[\"隐式类型定义\",{\"1\":{\"138\":1}}],[\"四种模式\",{\"1\":{\"251\":1}}],[\"四次挥手\",{\"1\":{\"62\":1}}],[\"阮一峰的网络日志\",{\"1\":{\"251\":1}}],[\"阮一峰\",{\"1\":{\"251\":1}}],[\"微服务安全\",{\"0\":{\"249\":1}}],[\"证明有多个线程同时使用\",{\"1\":{\"305\":1}}],[\"证明自己的身份\",{\"1\":{\"245\":1}}],[\"证书或其他认证凭据\",{\"1\":{\"222\":1}}],[\"网络优化\",{\"0\":{\"642\":1}}],[\"网络状态监控\",{\"1\":{\"545\":1,\"548\":1}}],[\"网络模型\",{\"1\":{\"54\":1}}],[\"网站爬虫对url的去重\",{\"1\":{\"579\":1,\"599\":1,\"610\":1,\"653\":1,\"664\":1}}],[\"网站使用\",{\"1\":{\"270\":1}}],[\"网站使用令牌\",{\"1\":{\"270\":1}}],[\"网站使用授权码\",{\"1\":{\"270\":1}}],[\"网站要求获取用户信息的权限\",{\"1\":{\"270\":1}}],[\"网站让用户跳转到\",{\"1\":{\"270\":1}}],[\"网站让用户提供第三方网站的数据\",{\"1\":{\"245\":1}}],[\"网站\",{\"1\":{\"245\":1,\"270\":1}}],[\"允许从节点指定一个不同的ip地址\",{\"1\":{\"646\":1}}],[\"允许临时脏数据可忽略\",{\"1\":{\"592\":1}}],[\"允许存储地理坐标信息\",{\"1\":{\"535\":1}}],[\"允许不同的消费者组消费相同消息的不同副本\",{\"1\":{\"518\":1}}],[\"允许你指定一个阻塞时间\",{\"1\":{\"319\":1}}],[\"允许在并发线程之间交换数据\",{\"1\":{\"317\":1}}],[\"允许一个或多个线程等待一组操作在其他线程中完成\",{\"1\":{\"315\":1}}],[\"允许线程尝试获取许可而不被阻塞\",{\"1\":{\"313\":1}}],[\"允许直接向前端颁发令牌\",{\"1\":{\"253\":1}}],[\"允许使用第三方网站的身份\",{\"1\":{\"245\":1}}],[\"允许应用程序访问连网协议的应用编程接口api\",{\"1\":{\"56\":1}}],[\"社交登录\",{\"0\":{\"245\":1}}],[\"社区id\",{\"1\":{\"91\":1,\"93\":1}}],[\"客户应用使用令牌向github请求用户数据\",{\"1\":{\"271\":1}}],[\"客户应用使用授权码\",{\"1\":{\"271\":1}}],[\"客户应用如果想要访问资源服务器需要有凭证\",{\"1\":{\"252\":1}}],[\"客户应用\",{\"1\":{\"242\":1,\"258\":1,\"259\":1,\"260\":1}}],[\"客户端凭证\",{\"1\":{\"251\":1}}],[\"客户端通过\",{\"1\":{\"81\":1,\"726\":1,\"729\":1}}],[\"客户端\",{\"1\":{\"65\":1,\"69\":1,\"73\":1,\"77\":1,\"90\":1,\"97\":1,\"101\":1,\"129\":1,\"487\":1,\"491\":1,\"495\":1,\"499\":1,\"503\":1,\"507\":1,\"558\":2}}],[\"连续签到用户总数\",{\"1\":{\"520\":1}}],[\"连续的空间就更多\",{\"1\":{\"368\":1}}],[\"连在一起就表示\",{\"1\":{\"241\":1}}],[\"连接与同步\",{\"1\":{\"621\":1}}],[\"连接从节点\",{\"1\":{\"619\":1}}],[\"连接\",{\"0\":{\"66\":1,\"70\":1,\"74\":1,\"78\":1,\"98\":1,\"102\":1,\"126\":1,\"130\":1,\"488\":1,\"492\":1,\"496\":1,\"500\":1,\"504\":1,\"508\":1},\"1\":{\"523\":1}}],[\"描述\",{\"1\":{\"235\":5,\"448\":1}}],[\"更轻量级的同步机制\",{\"1\":{\"286\":1}}],[\"更多的例子\",{\"1\":{\"231\":1,\"239\":1}}],[\"更新\",{\"1\":{\"385\":1}}],[\"更新必须创建新的索引进行数据迁移\",{\"1\":{\"89\":1}}],[\"更新映射\",{\"1\":{\"89\":1}}],[\"更新文档\",{\"1\":{\"85\":1}}],[\"更新时间等页面元信息\",{\"1\":{\"6\":1}}],[\"更新时间\",{\"1\":{\"3\":1,\"274\":1}}],[\"授予角色\",{\"0\":{\"234\":1}}],[\"授予权限\",{\"0\":{\"230\":1}}],[\"授权页面\",{\"1\":{\"271\":1}}],[\"授权回调地址\",{\"1\":{\"271\":1}}],[\"授权uri\",{\"1\":{\"271\":1}}],[\"授权登录的实现思路\",{\"0\":{\"261\":1}}],[\"授权类型的选择\",{\"0\":{\"256\":1}}],[\"授权码通过前端传送\",{\"1\":{\"252\":1}}],[\"授权码\",{\"0\":{\"252\":1},\"1\":{\"251\":1,\"252\":1}}],[\"授权服务器\",{\"1\":{\"242\":1,\"258\":1,\"259\":1,\"260\":1}}],[\"授权管理的实现在springsecurity中非常灵活\",{\"1\":{\"226\":1}}],[\"授权\",{\"1\":{\"156\":2,\"241\":1,\"245\":2}}],[\"具有原子性\",{\"1\":{\"306\":1}}],[\"具有管理员角色的用户可以访问\",{\"1\":{\"233\":1}}],[\"具有user\",{\"1\":{\"228\":2,\"229\":2}}],[\"具体要修改的如下\",{\"1\":{\"568\":1}}],[\"具体场景说明\",{\"1\":{\"536\":1}}],[\"具体的关注代码\",{\"1\":{\"532\":1}}],[\"具体的可以查看上方给出的官网\",{\"1\":{\"90\":1}}],[\"具体步骤\",{\"1\":{\"529\":1}}],[\"具体发布流程\",{\"1\":{\"527\":1}}],[\"具体代码在\",{\"1\":{\"466\":1}}],[\"具体操作如下\",{\"1\":{\"115\":1,\"535\":1}}],[\"李四的角色是普通用户\",{\"1\":{\"226\":1}}],[\"李四的权限是查看用户列表\",{\"1\":{\"226\":1}}],[\"张三是角色是管理员\",{\"1\":{\"226\":1}}],[\"角色权限关联id\",{\"1\":{\"235\":1}}],[\"角色权限关联表\",{\"1\":{\"235\":1}}],[\"角色描述\",{\"1\":{\"235\":1}}],[\"角色名称\",{\"1\":{\"235\":1}}],[\"角色id\",{\"1\":{\"235\":3}}],[\"角色表\",{\"1\":{\"235\":1}}],[\"角色为admin的用户才可以访问\",{\"1\":{\"232\":1}}],[\"角色\",{\"0\":{\"232\":1,\"235\":1},\"1\":{\"226\":1,\"239\":1}}],[\"资源变量\",{\"1\":{\"444\":1}}],[\"资源敏感\",{\"1\":{\"376\":1}}],[\"资源服务器\",{\"1\":{\"242\":1,\"258\":1,\"259\":1,\"260\":1}}],[\"资源的拥有人\",{\"1\":{\"242\":1}}],[\"资源所有者\",{\"1\":{\"242\":1,\"258\":1}}],[\"资源\",{\"0\":{\"228\":1,\"232\":1,\"235\":1},\"1\":{\"226\":2}}],[\"权限控制\",{\"1\":{\"521\":1}}],[\"权限描述\",{\"1\":{\"235\":1}}],[\"权限名称\",{\"1\":{\"235\":1}}],[\"权限id\",{\"1\":{\"235\":2}}],[\"权限表\",{\"1\":{\"235\":1}}],[\"权限\",{\"0\":{\"228\":1,\"235\":1},\"1\":{\"223\":1,\"226\":2,\"239\":1}}],[\"权限列表\",{\"1\":{\"188\":1}}],[\"脱敏\",{\"1\":{\"223\":1}}],[\"凭证式\",{\"0\":{\"255\":1},\"1\":{\"255\":1}}],[\"凭证\",{\"1\":{\"223\":1}}],[\"身份识别与访问管理\",{\"1\":{\"250\":1}}],[\"身份\",{\"1\":{\"223\":1}}],[\"身份认证是验证谁正在访问系统资源\",{\"1\":{\"156\":1}}],[\"身份认证\",{\"0\":{\"157\":1},\"1\":{\"156\":2}}],[\"总结\",{\"1\":{\"592\":1,\"624\":1}}],[\"总结起来\",{\"1\":{\"222\":1}}],[\"总共的误判数\",{\"1\":{\"581\":1,\"582\":1,\"601\":1,\"602\":1,\"612\":1,\"613\":1,\"655\":1,\"656\":1,\"666\":1,\"667\":1}}],[\"总的目标是发现热点代码\",{\"1\":{\"469\":1}}],[\"总会被首先初始化\",{\"1\":{\"455\":1}}],[\"总会添加一个安全的空档空间\",{\"1\":{\"389\":1}}],[\"总之\",{\"1\":{\"56\":2,\"57\":1}}],[\"域名\",{\"1\":{\"220\":1}}],[\"错误处理\",{\"1\":{\"219\":1,\"231\":1}}],[\"错误的用户名和密码\",{\"1\":{\"204\":1}}],[\"转载请附上原文出处链接和本声明\",{\"1\":{\"554\":1}}],[\"转为\",{\"1\":{\"437\":2}}],[\"转换为bit则是\",{\"1\":{\"538\":1}}],[\"转换后代码\",{\"1\":{\"446\":1}}],[\"转换后的代码\",{\"1\":{\"443\":1,\"446\":1}}],[\"转换过程如下\",{\"1\":{\"436\":1}}],[\"转换成json字符串\",{\"1\":{\"209\":1,\"212\":1,\"215\":1,\"218\":1,\"225\":1,\"231\":1}}],[\"转储文件\",{\"1\":{\"357\":1}}],[\"转成\",{\"1\":{\"81\":1,\"726\":1,\"729\":1}}],[\"认证与安全性\",{\"0\":{\"627\":1,\"637\":1}}],[\"认证对象\",{\"1\":{\"223\":1}}],[\"认证失败时的处理\",{\"1\":{\"213\":1}}],[\"认证失败响应\",{\"0\":{\"211\":1}}],[\"认证成功时的处理\",{\"1\":{\"210\":1}}],[\"认证成功的响应\",{\"0\":{\"208\":1}}],[\"认证用户的常见方式是要求用户输入用户名和密码\",{\"1\":{\"156\":1}}],[\"登录页面超链接的文本\",{\"1\":{\"271\":1}}],[\"登录页面无需授权即可访问\",{\"1\":{\"205\":1}}],[\"登录流程\",{\"0\":{\"270\":1}}],[\"登录github\",{\"1\":{\"263\":1}}],[\"登录成功\",{\"1\":{\"209\":1}}],[\"登录成功后调用\",{\"1\":{\"206\":1}}],[\"登录失败后调用\",{\"1\":{\"206\":1}}],[\"登录失败的返回地址\",{\"1\":{\"205\":1}}],[\"登录\",{\"1\":{\"204\":1}}],[\"登录按钮没有样式文件渲染\",{\"1\":{\"164\":1}}],[\"兼容数据库中的老版本密码策略生成的密码\",{\"1\":{\"201\":1}}],[\"兼具推和拉两种模式的优点\",{\"1\":{\"115\":1,\"533\":1}}],[\"密文\",{\"1\":{\"200\":1}}],[\"密码也是canal\",{\"1\":{\"552\":1,\"559\":1,\"566\":1}}],[\"密码式\",{\"0\":{\"254\":1},\"1\":{\"251\":1,\"254\":1}}],[\"密码和其他身份验证信息\",{\"1\":{\"235\":1}}],[\"密码\",{\"1\":{\"204\":1,\"235\":1,\"254\":1,\"553\":1,\"560\":1,\"567\":1,\"568\":1}}],[\"密码不一致\",{\"1\":{\"200\":1}}],[\"密码校验\",{\"1\":{\"200\":1}}],[\"密码以明文形式存储在数据库中\",{\"1\":{\"198\":1}}],[\"密码加密测试\",{\"0\":{\"200\":1}}],[\"密码加密方式\",{\"0\":{\"198\":1}}],[\"密码加密算法\",{\"0\":{\"197\":1}}],[\"密码是\",{\"1\":{\"179\":1}}],[\"密码password登录\",{\"1\":{\"176\":1}}],[\"密码配置在springboot的配置文件中\",{\"1\":{\"174\":1}}],[\"值越低优先级越高\",{\"1\":{\"633\":1,\"644\":1}}],[\"值越大运算速度越慢\",{\"1\":{\"200\":1}}],[\"值\",{\"1\":{\"519\":1,\"535\":1}}],[\"值发生了改变\",{\"1\":{\"446\":1}}],[\"值后\",{\"1\":{\"446\":1}}],[\"值为set集合\",{\"1\":{\"105\":1}}],[\"使从节点成为主节点的一个副本\",{\"1\":{\"626\":1,\"636\":1}}],[\"使得主节点在通过info或role命令报告从节点信息时\",{\"1\":{\"646\":1}}],[\"使得类被启动类加器加载\",{\"1\":{\"458\":1}}],[\"使得其他线程找不到被移动的对象\",{\"1\":{\"377\":1}}],[\"使内存更加紧凑\",{\"1\":{\"368\":1}}],[\"使一组线程到达某个点后继续执行\",{\"1\":{\"316\":1}}],[\"使其在您的系统上验证一个密码大约需要1秒的时间\",{\"1\":{\"199\":1}}],[\"使用这个宣告的ip地址而非自动检测的地址\",{\"1\":{\"646\":1}}],[\"使用f1\",{\"1\":{\"580\":1,\"600\":1,\"611\":1,\"654\":1,\"665\":1}}],[\"使用mvn\",{\"1\":{\"568\":1}}],[\"使用memory\",{\"0\":{\"357\":1}}],[\"使用idea打开项目\",{\"1\":{\"568\":1}}],[\"使用invokevirtual指令\",{\"1\":{\"416\":1}}],[\"使用inmemoryuserdetailsmanager将user存入内存\",{\"1\":{\"177\":1}}],[\"使用json进行序列化\",{\"1\":{\"554\":1}}],[\"使用步骤\",{\"1\":{\"523\":1}}],[\"使用hyperloglog进行高效的去重\",{\"1\":{\"522\":1}}],[\"使用redis作为数据缓存层\",{\"1\":{\"545\":1,\"548\":1}}],[\"使用redis作为命令和控制消息的中介\",{\"1\":{\"545\":1,\"548\":1}}],[\"使用redis缓存热门查询结果和常用数据\",{\"1\":{\"545\":1,\"548\":1}}],[\"使用redis缓存电子病历\",{\"1\":{\"545\":1,\"548\":1}}],[\"使用redis缓存课程内容\",{\"1\":{\"545\":1,\"548\":1}}],[\"使用redis缓存话单信息\",{\"1\":{\"545\":1,\"548\":1}}],[\"使用redis缓存广告内容\",{\"1\":{\"545\":1,\"548\":1}}],[\"使用redis缓存账户信息\",{\"1\":{\"545\":1,\"548\":1}}],[\"使用redis的哈希结构存储用户预订信息\",{\"1\":{\"545\":1,\"548\":1}}],[\"使用redis的哈希或字符串存储分析结果\",{\"1\":{\"545\":1,\"548\":1}}],[\"使用redis的哈希或有序集合记录点赞和礼物信息\",{\"1\":{\"545\":1,\"548\":1}}],[\"使用redis的列表或有序集合记录能源使用数据\",{\"1\":{\"545\":1,\"548\":1}}],[\"使用redis的列表或发布订阅功能存储日志信息\",{\"1\":{\"545\":1,\"548\":1}}],[\"使用redis的列表或哈希类型缓存用户动态\",{\"1\":{\"545\":1,\"548\":1}}],[\"使用redis的键值对来管理用户权限\",{\"1\":{\"545\":1,\"548\":1}}],[\"使用redis的键值对来管理药品库存\",{\"1\":{\"545\":1,\"548\":1}}],[\"使用redis的键值对存储设备状态\",{\"1\":{\"545\":1,\"548\":1}}],[\"使用redis的事务功能来处理在线考试的答题和评分\",{\"1\":{\"545\":1,\"548\":1}}],[\"使用redis的事务和持久化功能处理计费数据\",{\"1\":{\"545\":1,\"548\":1}}],[\"使用redis的数据结构来存储配送节点信息\",{\"1\":{\"545\":1,\"548\":1}}],[\"使用redis的地理位置\",{\"1\":{\"545\":1,\"548\":1}}],[\"使用redis的地理位置功能记录用户位置\",{\"1\":{\"545\":1,\"548\":1}}],[\"使用redis的计数器和哈希表记录用户行为数据\",{\"1\":{\"545\":1,\"548\":1}}],[\"使用redis的计数器功能统计在线用户数\",{\"1\":{\"545\":1,\"548\":1}}],[\"使用redis的发布订阅功能监控实时数据流\",{\"1\":{\"545\":1,\"548\":1}}],[\"使用redis的发布订阅功能或列表作为消息队列\",{\"1\":{\"545\":1,\"548\":1}}],[\"使用redis的发布订阅功能和高性能特性处理实时交易数据\",{\"1\":{\"545\":1,\"548\":1}}],[\"使用redis的原子操作和分布式锁实现优惠券的发放控制\",{\"1\":{\"545\":1,\"548\":1}}],[\"使用redis的字符串或哈希类型缓存路况信息\",{\"1\":{\"545\":1,\"548\":1}}],[\"使用redis的字符串或哈希类型缓存商品信息\",{\"1\":{\"545\":1,\"548\":1}}],[\"使用redis的字符串类型存储玩家信息\",{\"1\":{\"545\":1,\"548\":1}}],[\"使用redis的会话管理功能\",{\"1\":{\"545\":1,\"548\":1}}],[\"使用redis的sorted\",{\"1\":{\"523\":1}}],[\"使用redis的setnx命令实现分布式锁\",{\"1\":{\"513\":1}}],[\"使用redis客户端执行sinter操作\",{\"1\":{\"109\":1,\"116\":1}}],[\"使用者调用该类加载器的\",{\"1\":{\"461\":1}}],[\"使用反射可以得到\",{\"1\":{\"438\":1}}],[\"使用前需要设置\",{\"1\":{\"373\":1}}],[\"使用引用队列\",{\"1\":{\"364\":1}}],[\"使用软引用对象\",{\"1\":{\"364\":2}}],[\"使用了不同的字符串表\",{\"1\":{\"387\":1}}],[\"使用了\",{\"1\":{\"349\":1,\"350\":2}}],[\"使用本地方法进行操作\",{\"1\":{\"349\":1}}],[\"使用直接内存的好处\",{\"0\":{\"349\":1}}],[\"使用拼接字符串变量的方法来创建新的字符串时\",{\"1\":{\"341\":1}}],[\"使用拼接字符串常量的方法来创建新的字符串时\",{\"1\":{\"341\":1}}],[\"使用拼接字符串常量对象的方法创建字符串\",{\"1\":{\"341\":1}}],[\"使用拼接字符串\",{\"1\":{\"341\":1}}],[\"使用结束\",{\"1\":{\"333\":1}}],[\"使用park和unpark的方法可以在没有使用锁的情况下实现线程间的协作\",{\"1\":{\"319\":1}}],[\"使用pbkdf2算法对密码进行哈希处理\",{\"1\":{\"199\":1}}],[\"使用场景\",{\"1\":{\"286\":1,\"461\":1}}],[\"使用场景及原理\",{\"0\":{\"286\":1}}],[\"使用github账户凭据进行身份验证后\",{\"1\":{\"268\":1}}],[\"使用oauth2\",{\"1\":{\"261\":1}}],[\"使用表单授权方式\",{\"1\":{\"205\":1}}],[\"使用动态参数\",{\"1\":{\"204\":1}}],[\"使用scrypt算法对密码进行哈希处理\",{\"1\":{\"199\":1}}],[\"使用swagger测试\",{\"0\":{\"195\":1}}],[\"使用argon2算法对密码进行哈希处理\",{\"1\":{\"199\":1}}],[\"使用广泛支持的bcrypt算法来对密码进行哈希\",{\"1\":{\"199\":1}}],[\"使用自适应单向函数验证密码时\",{\"1\":{\"198\":1}}],[\"使用数据库中配置的用户名和密码进行登录\",{\"1\":{\"189\":1}}],[\"使用用户名huan\",{\"1\":{\"176\":1}}],[\"使用逗号分割它们\",{\"1\":{\"142\":1}}],[\"使用默认值\",{\"1\":{\"134\":1}}],[\"使用客户端操作相应api\",{\"1\":{\"90\":1}}],[\"使用第三方组件步骤\",{\"1\":{\"90\":1}}],[\"使用\",{\"0\":{\"314\":1,\"465\":1,\"581\":1,\"601\":1,\"612\":1,\"655\":1,\"666\":1},\"1\":{\"89\":1,\"133\":1,\"140\":1,\"170\":1,\"277\":1,\"283\":1,\"297\":1,\"302\":1,\"327\":1,\"338\":2,\"357\":2,\"362\":2,\"363\":1,\"379\":1,\"441\":2,\"442\":1,\"444\":1,\"448\":1,\"456\":1,\"464\":2,\"469\":4,\"472\":1,\"523\":1}}],[\"使用一次简洁和简化的\",{\"1\":{\"88\":1}}],[\"使用时不要加\",{\"1\":{\"88\":1}}],[\"使用的功能\",{\"1\":{\"88\":1}}],[\"使用指南\",{\"1\":{\"27\":2,\"675\":2},\"2\":{\"2\":1,\"4\":1,\"23\":1,\"30\":1,\"31\":1,\"275\":1,\"678\":1,\"679\":1}}],[\"调整投放策略\",{\"1\":{\"545\":1,\"548\":1}}],[\"调整到系统中验证密码需要约一秒钟的时间\",{\"1\":{\"198\":1}}],[\"调优领域\",{\"0\":{\"391\":1}}],[\"调优时\",{\"1\":{\"351\":1}}],[\"调用本地实现\",{\"1\":{\"472\":1}}],[\"调用了线程上下文类加载器完成类加载\",{\"1\":{\"466\":1}}],[\"调用了对象的\",{\"1\":{\"296\":1}}],[\"调用父类的\",{\"1\":{\"461\":1}}],[\"调用父类中的方法\",{\"1\":{\"443\":1}}],[\"调用父类方法\",{\"1\":{\"416\":1}}],[\"调用构造函数\",{\"1\":{\"443\":1}}],[\"调用一个静态方法\",{\"1\":{\"416\":1}}],[\"调用该对象的构造方法\",{\"1\":{\"416\":1}}],[\"调用以后\",{\"1\":{\"363\":1}}],[\"调用run方法\",{\"1\":{\"350\":1}}],[\"调用release\",{\"1\":{\"313\":1}}],[\"调用字符串对象的intern方法\",{\"1\":{\"341\":1,\"343\":1}}],[\"调用后当前线程就会挂起\",{\"1\":{\"319\":1}}],[\"调用对象\",{\"0\":{\"296\":1}}],[\"调用者线程进入\",{\"1\":{\"279\":1}}],[\"调用\",{\"0\":{\"298\":1},\"1\":{\"278\":1,\"416\":1,\"445\":1}}],[\"调用socket函数时\",{\"1\":{\"56\":1}}],[\"调用socket函数的端点称为socket\",{\"1\":{\"56\":1}}],[\"随着时间的推移\",{\"1\":{\"680\":1,\"683\":1}}],[\"随着硬件的改进而增加\",{\"1\":{\"198\":1}}],[\"随着硬件的不断发展\",{\"1\":{\"198\":1}}],[\"随意路径中的类文件\",{\"1\":{\"461\":1}}],[\"随便启动一个\",{\"1\":{\"90\":1}}],[\"随便起\",{\"1\":{\"88\":1}}],[\"哈希\",{\"1\":{\"511\":1,\"512\":1}}],[\"哈希都是不同的\",{\"1\":{\"198\":1}}],[\"哈希算法是单向的\",{\"1\":{\"198\":1}}],[\"唯一主键\",{\"1\":{\"560\":1,\"567\":1}}],[\"唯一的盐意味着彩虹表不再有效\",{\"1\":{\"198\":1}}],[\"唯一索引\",{\"1\":{\"179\":1}}],[\"盐和用户输入的密码一起经过哈希函数运算\",{\"1\":{\"198\":1}}],[\"盐和用户的密码将一起经过哈希函数运算\",{\"1\":{\"198\":1}}],[\"盐将以明文形式与用户的密码一起存储\",{\"1\":{\"198\":1}}],[\"加法\",{\"1\":{\"474\":1}}],[\"加锁之后\",{\"1\":{\"592\":2}}],[\"加锁\",{\"0\":{\"475\":1,\"592\":1},\"1\":{\"433\":1}}],[\"加锁线程\",{\"1\":{\"299\":1}}],[\"加载时会使用拓展类加载器加载\",{\"1\":{\"459\":1}}],[\"加载的类\",{\"1\":{\"457\":1}}],[\"加载和链接可能是交替运行的\",{\"1\":{\"448\":1}}],[\"加载\",{\"0\":{\"448\":1}}],[\"加载对象到栈顶\",{\"1\":{\"433\":1}}],[\"加载异常\",{\"1\":{\"432\":1}}],[\"加载局部变量表1号位置的数10到操作数栈\",{\"1\":{\"432\":1}}],[\"加载到操作数栈\",{\"1\":{\"433\":1}}],[\"加载到操作数栈顶\",{\"1\":{\"432\":1}}],[\"加载到局部变量表的1号位置\",{\"1\":{\"432\":1}}],[\"加载了默认的16个filter\",{\"1\":{\"173\":1}}],[\"加轻量级锁cas失败\",{\"1\":{\"302\":1}}],[\"加盐哈希也不再安全\",{\"1\":{\"198\":1}}],[\"加盐密码\",{\"1\":{\"198\":1}}],[\"目的与好处\",{\"0\":{\"622\":1}}],[\"目的\",{\"1\":{\"201\":1}}],[\"目前主要的算法有lm\",{\"1\":{\"198\":1}}],[\"目录如下\",{\"1\":{\"568\":1}}],[\"目录结构如下\",{\"1\":{\"553\":1,\"560\":1,\"567\":1}}],[\"目录下\",{\"1\":{\"90\":1}}],[\"目录\",{\"1\":{\"90\":1}}],[\"越是复杂的密码\",{\"1\":{\"198\":1}}],[\"恶意用户创建称为彩虹表的查找表\",{\"1\":{\"198\":1}}],[\"彩虹表就是一个庞大的\",{\"1\":{\"198\":1}}],[\"彩虹表\",{\"1\":{\"198\":1}}],[\"已点赞过则点赞数\",{\"1\":{\"529\":1}}],[\"已经有了mysql数据库\",{\"0\":{\"512\":1}}],[\"已经对该对象加了轻量级锁\",{\"1\":{\"302\":1}}],[\"已添加清单\",{\"1\":{\"459\":1}}],[\"已被处理\",{\"1\":{\"386\":1}}],[\"已认证的请求会被自动授权\",{\"1\":{\"229\":1,\"233\":1}}],[\"已认证请求会自动被授权\",{\"1\":{\"190\":1}}],[\"已存在同名的变量\",{\"1\":{\"136\":1}}],[\"插入数据\",{\"1\":{\"581\":1,\"601\":1,\"612\":1,\"655\":1,\"666\":1}}],[\"插入用户数据\",{\"1\":{\"179\":1}}],[\"插件\",{\"1\":{\"434\":1}}],[\"插件来实现\",{\"1\":{\"12\":1}}],[\"校验用户时\",{\"1\":{\"177\":1,\"187\":1}}],[\"封装用户名密码\",{\"1\":{\"177\":1}}],[\"封装并返回\",{\"1\":{\"122\":1,\"535\":1}}],[\"默认为100\",{\"1\":{\"633\":1,\"644\":1}}],[\"默认3600秒\",{\"1\":{\"632\":1,\"643\":1}}],[\"默认1mb\",{\"1\":{\"632\":1,\"643\":1}}],[\"默认10秒\",{\"1\":{\"631\":1,\"641\":1}}],[\"默认60秒\",{\"1\":{\"631\":1,\"641\":1}}],[\"默认no\",{\"1\":{\"630\":1,\"640\":1,\"642\":1}}],[\"默认设置为yes\",{\"1\":{\"629\":1,\"639\":1}}],[\"默认2\",{\"1\":{\"561\":1}}],[\"默认200ms\",{\"1\":{\"378\":1}}],[\"默认\",{\"1\":{\"472\":1,\"553\":1,\"560\":1,\"561\":2,\"567\":1,\"628\":1,\"638\":1}}],[\"默认就是应用程序类加载器\",{\"1\":{\"466\":1}}],[\"默认构造器\",{\"0\":{\"435\":1}}],[\"默认启用\",{\"1\":{\"388\":1}}],[\"默认45\",{\"1\":{\"382\":1}}],[\"默认的数据同步的目的地\",{\"1\":{\"554\":1}}],[\"默认的暂停目标是\",{\"1\":{\"380\":1}}],[\"默认的重定向uri模板为\",{\"1\":{\"263\":1}}],[\"默认收集器在注重吞吐量及cpu资源的场合吞吐量高\",{\"1\":{\"376\":1}}],[\"默认是3306\",{\"1\":{\"553\":1,\"560\":1,\"567\":1}}],[\"默认是4g\",{\"1\":{\"333\":1}}],[\"默认是password\",{\"1\":{\"205\":1}}],[\"默认是username\",{\"1\":{\"205\":1}}],[\"默认值是10\",{\"1\":{\"200\":1}}],[\"默认情况下springsecurity开启了csrf攻击防御的功能\",{\"1\":{\"196\":1}}],[\"默认情况下spring\",{\"1\":{\"174\":1}}],[\"默认使用的都是\",{\"1\":{\"90\":1}}],[\"被广泛应用于多个领域\",{\"1\":{\"545\":1,\"548\":1}}],[\"被破坏\",{\"1\":{\"461\":3}}],[\"被同一个\",{\"1\":{\"457\":1}}],[\"被分为了两个\",{\"1\":{\"441\":1}}],[\"被插入了所有可能的流程\",{\"1\":{\"431\":1}}],[\"被final修饰的方法\",{\"1\":{\"416\":1}}],[\"被回收时\",{\"1\":{\"364\":1}}],[\"被回收以后\",{\"1\":{\"350\":1}}],[\"被引用对象暂时没有被回收\",{\"1\":{\"363\":1}}],[\"被引用对象回收时\",{\"1\":{\"362\":1}}],[\"被jc\",{\"1\":{\"333\":1}}],[\"被翻译为监视器或管程\",{\"0\":{\"288\":1}}],[\"被声明为\",{\"1\":{\"285\":1}}],[\"被定义出来屏蔽各种硬件和操作系统的内存访问差异\",{\"1\":{\"283\":1}}],[\"被\",{\"1\":{\"170\":1}}],[\"被保存数据的版本\",{\"1\":{\"85\":1}}],[\"容易产生内存碎片\",{\"1\":{\"367\":1}}],[\"容易沉迷\",{\"1\":{\"115\":1,\"533\":1}}],[\"容器\",{\"1\":{\"461\":1,\"465\":1}}],[\"容器中管理\",{\"1\":{\"168\":1}}],[\"容器之间建立桥梁\",{\"1\":{\"168\":1}}],[\"容器和\",{\"1\":{\"168\":1}}],[\"攻击\",{\"1\":{\"165\":1}}],[\"程序结束\",{\"1\":{\"410\":1}}],[\"程序\",{\"1\":{\"379\":1}}],[\"程序运行时的额外执行负载高\",{\"1\":{\"376\":1}}],[\"程序计数器会记录下一条指令的地址行号\",{\"1\":{\"324\":1}}],[\"程序计数器\",{\"0\":{\"323\":1},\"1\":{\"324\":1}}],[\"程序启动时\",{\"1\":{\"177\":1,\"187\":1}}],[\"程序启动时生成一个默认用户\",{\"1\":{\"165\":1}}],[\"程序的行为符合预期\",{\"1\":{\"283\":1}}],[\"程序的启动和运行\",{\"0\":{\"172\":1}}],[\"程序的流程控制结构一共有三种\",{\"1\":{\"139\":1}}],[\"程序的执行入口是main\",{\"1\":{\"133\":1}}],[\"保持数据的近实时同步\",{\"1\":{\"621\":1}}],[\"保证每天拿到当前最新数据即可\",{\"1\":{\"592\":1}}],[\"保证了每次run变量都会从主存中获取\",{\"1\":{\"480\":1}}],[\"保证了共享变量的可见性\",{\"1\":{\"480\":1}}],[\"保证了可见性和禁止指令重排序\",{\"1\":{\"285\":1}}],[\"保证指令不会受\",{\"1\":{\"472\":2}}],[\"保证指令不会受到线程上下文切换的影响\",{\"1\":{\"472\":1}}],[\"保证可见性\",{\"1\":{\"285\":1}}],[\"保证可见性和有序性\",{\"1\":{\"283\":1}}],[\"保证操作的有序性\",{\"1\":{\"283\":1}}],[\"保证对象初始化的安全性\",{\"1\":{\"277\":1}}],[\"保护数据免受单点故障的影响\",{\"1\":{\"622\":1}}],[\"保护性暂停\",{\"1\":{\"279\":1}}],[\"保护应用程序url\",{\"1\":{\"165\":1}}],[\"保存最近的写操作命令\",{\"1\":{\"621\":1}}],[\"保存探店笔记\",{\"1\":{\"534\":1}}],[\"保存探店博文\",{\"1\":{\"527\":1}}],[\"保存用户到redis的set集合\",{\"1\":{\"529\":1,\"530\":1}}],[\"保存文件\",{\"1\":{\"527\":1}}],[\"保存到数据库\",{\"1\":{\"110\":1,\"111\":1}}],[\"保存时候分词\",{\"1\":{\"89\":1}}],[\"保存在哪个索引的哪个类型下\",{\"1\":{\"85\":1}}],[\"保存一个数据\",{\"1\":{\"85\":1}}],[\"保存\",{\"1\":{\"85\":2}}],[\"输入刚才的\",{\"1\":{\"423\":1}}],[\"输入完成后\",{\"1\":{\"339\":1}}],[\"输入\",{\"1\":{\"339\":1,\"420\":1,\"423\":1,\"459\":1}}],[\"输入密码\",{\"1\":{\"161\":1}}],[\"输入用户名\",{\"1\":{\"161\":1}}],[\"输出为0\",{\"1\":{\"476\":1}}],[\"输出为10\",{\"1\":{\"432\":1}}],[\"输出\",{\"1\":{\"89\":1,\"297\":1,\"298\":1,\"299\":1,\"350\":1,\"444\":1,\"459\":2}}],[\"系统中\",{\"1\":{\"558\":1}}],[\"系统可以根据用户的角色和权限决定是否允许访问\",{\"1\":{\"235\":1}}],[\"系统会控制谁能访问哪些资源\",{\"1\":{\"156\":1}}],[\"系统结构简单\",{\"1\":{\"81\":1,\"726\":1,\"729\":1}}],[\"判断id<0\",{\"1\":{\"541\":1}}],[\"判断这个bit位是否为0\",{\"1\":{\"540\":1}}],[\"判断到底是关注还是取关\",{\"1\":{\"531\":1,\"532\":1}}],[\"判断\",{\"1\":{\"531\":1}}],[\"判断当前登录用户是否已经点赞\",{\"1\":{\"529\":1,\"530\":2}}],[\"判断当前登录用户是否点赞过\",{\"1\":{\"529\":2}}],[\"判断字段blog类的islike属性\",{\"1\":{\"529\":1}}],[\"判断用户登录状态\",{\"1\":{\"520\":1}}],[\"判断用户是否为合法用户\",{\"1\":{\"156\":1}}],[\"判断了资源不为空\",{\"1\":{\"444\":1}}],[\"判断参数类型是否\",{\"1\":{\"438\":1}}],[\"判断结果\",{\"0\":{\"414\":1}}],[\"判断是否需要根据坐标查询\",{\"1\":{\"537\":1}}],[\"判断是否\",{\"1\":{\"412\":3}}],[\"判断是否关注的接口\",{\"1\":{\"531\":1}}],[\"判断是否关注\",{\"0\":{\"108\":1},\"1\":{\"108\":1}}],[\"功能来追踪货物位置\",{\"1\":{\"545\":1,\"548\":1}}],[\"功能处理实时数据流\",{\"1\":{\"545\":1,\"548\":1}}],[\"功能存储和查询poi信息\",{\"1\":{\"545\":1,\"548\":1}}],[\"功能\",{\"1\":{\"156\":1}}],[\"功能参数\",{\"1\":{\"88\":1}}],[\"读写分离和在线升级等场景\",{\"1\":{\"624\":1}}],[\"读写分离\",{\"1\":{\"622\":1,\"624\":1}}],[\"读\",{\"1\":{\"619\":1}}],[\"读读无所谓\",{\"1\":{\"592\":1}}],[\"读锁readlock\",{\"1\":{\"592\":1}}],[\"读操作\",{\"1\":{\"591\":1}}],[\"读操作也是如此\",{\"1\":{\"285\":1}}],[\"读操作会从主内存中读取数据\",{\"1\":{\"285\":1}}],[\"读到的数据\",{\"1\":{\"151\":1}}],[\"读取操作\",{\"1\":{\"471\":1}}],[\"读取类文件的字节码\",{\"1\":{\"461\":1}}],[\"读取运行时常量池中\",{\"1\":{\"410\":1}}],[\"读取键盘的输入\",{\"1\":{\"150\":1}}],[\"读取第二页传入的参数是page=2\",{\"1\":{\"115\":1,\"534\":1}}],[\"键值存储\",{\"1\":{\"512\":1}}],[\"键值对\",{\"1\":{\"512\":1}}],[\"键盘输入\",{\"0\":{\"149\":1}}],[\"键为业务前缀\",{\"1\":{\"105\":1}}],[\"二进制向量设置多少比较合适\",{\"1\":{\"581\":1,\"601\":1,\"612\":1,\"655\":1,\"666\":1}}],[\"二进制文件\",{\"1\":{\"357\":1}}],[\"二值状态统计的场景\",{\"1\":{\"520\":1}}],[\"二\",{\"0\":{\"149\":1},\"1\":{\"586\":1}}],[\"源代码\",{\"1\":{\"446\":1}}],[\"源码\",{\"1\":{\"434\":1}}],[\"源码方式\",{\"1\":{\"434\":1}}],[\"源码编译为\",{\"1\":{\"434\":1}}],[\"源自c语言但更简单\",{\"1\":{\"146\":1}}],[\"源文件以\",{\"1\":{\"133\":1}}],[\"型\",{\"1\":{\"144\":4}}],[\"差集等计算\",{\"1\":{\"515\":1}}],[\"差\",{\"1\":{\"142\":1}}],[\"及格\",{\"1\":{\"142\":1}}],[\"良好\",{\"1\":{\"142\":1}}],[\"优惠券发放\",{\"1\":{\"545\":1,\"548\":1}}],[\"优秀\",{\"1\":{\"142\":1}}],[\"优点和缺点\",{\"0\":{\"620\":1}}],[\"优点\",{\"1\":{\"81\":3,\"115\":4,\"367\":1,\"368\":1,\"369\":1,\"387\":1,\"533\":4,\"726\":3,\"729\":3}}],[\"后删除缓存\",{\"0\":{\"590\":1}}],[\"后更新数据库\",{\"0\":{\"589\":1}}],[\"后台查询出对应的数据再返回\",{\"1\":{\"536\":1}}],[\"后续\",{\"1\":{\"471\":1}}],[\"后追加\",{\"1\":{\"458\":1}}],[\"后的元空间内\",{\"1\":{\"448\":2}}],[\"后面我们需要封装对象\",{\"1\":{\"560\":1}}],[\"后面是数据\",{\"1\":{\"400\":1}}],[\"后面09是constant\",{\"1\":{\"400\":1}}],[\"后面又引用了c\",{\"1\":{\"386\":1}}],[\"后面有4n字节是根据需要而增加的选项\",{\"1\":{\"57\":1}}],[\"后\",{\"1\":{\"298\":1,\"421\":1}}],[\"后使用偏向锁\",{\"1\":{\"296\":1}}],[\"后unpark\",{\"0\":{\"281\":1},\"1\":{\"280\":1}}],[\"后登录的账号会使先登录的账号失效\",{\"1\":{\"224\":1}}],[\"后者表示用户的身份验证信息\",{\"1\":{\"222\":1}}],[\"后可以由多个数值\",{\"1\":{\"142\":1}}],[\"匹配异常类型\",{\"1\":{\"427\":1}}],[\"匹配成功后不会自动向下执行其他case\",{\"1\":{\"142\":1}}],[\"匹配项后面也不需要再加break\",{\"1\":{\"142\":1}}],[\"匹配某个属性的值\",{\"1\":{\"88\":1}}],[\"开车不能玩手机\",{\"1\":{\"282\":1}}],[\"开放api\",{\"0\":{\"246\":1}}],[\"开放系统间授权\",{\"0\":{\"244\":1}}],[\"开放授权\",{\"1\":{\"241\":1}}],[\"开放\",{\"1\":{\"241\":1}}],[\"开启binlog\",{\"1\":{\"552\":1,\"559\":1,\"566\":1}}],[\"开启mysql\",{\"0\":{\"552\":1,\"559\":1,\"566\":1}}],[\"开启串行回收器\",{\"1\":{\"377\":1}}],[\"开启方法授权\",{\"0\":{\"237\":1}}],[\"开启授权保护\",{\"1\":{\"190\":1,\"229\":1,\"233\":1}}],[\"开发人员开始使用自适应单向函数来存储密码\",{\"1\":{\"198\":1}}],[\"开发人员开始使用加盐密码\",{\"1\":{\"198\":1}}],[\"开关\",{\"0\":{\"142\":1}}],[\"开始新增了对需要关闭的资源处理的特殊语法\",{\"1\":{\"444\":1}}],[\"开始引入的语法糖\",{\"1\":{\"440\":1}}],[\"开始加入的新特性\",{\"1\":{\"439\":1}}],[\"开始加入的特性\",{\"1\":{\"437\":1}}],[\"开始加入的\",{\"1\":{\"436\":1}}],[\"开始释放\",{\"1\":{\"351\":2}}],[\"开始\",{\"1\":{\"115\":1,\"441\":1,\"442\":1,\"534\":1}}],[\"开始使用\",{\"1\":{\"90\":1}}],[\"变为\",{\"1\":{\"278\":1,\"341\":3}}],[\"变体\",{\"0\":{\"141\":1}}],[\"变量都是直接操作主存\",{\"1\":{\"480\":1}}],[\"变量是\",{\"1\":{\"451\":2}}],[\"变量是可以是不同的类型值\",{\"1\":{\"138\":1}}],[\"变量分配空间\",{\"1\":{\"451\":1}}],[\"变量不能为null\",{\"1\":{\"441\":1}}],[\"变量类型修改为\",{\"1\":{\"437\":1}}],[\"变量对象创建字符串的过程\",{\"1\":{\"341\":1}}],[\"变量只涉及局部变量\",{\"1\":{\"303\":1}}],[\"变量时\",{\"1\":{\"286\":1}}],[\"变量被声明为\",{\"1\":{\"286\":1}}],[\"变量写操作之前的所有操作都将在写操作之前完成\",{\"1\":{\"285\":1}}],[\"变量中实际存储的变量类型\",{\"1\":{\"144\":1}}],[\"变量\",{\"1\":{\"142\":1}}],[\"变量定义了就要使用\",{\"1\":{\"136\":1}}],[\"变量的修改对另一\",{\"1\":{\"481\":1}}],[\"变量的修改对于\",{\"1\":{\"478\":1}}],[\"变量的修改了\",{\"1\":{\"480\":1}}],[\"变量的写操作在执行时不能被编译器或处理器重排序到之前的任何时刻\",{\"1\":{\"285\":1}}],[\"变量的零值\",{\"1\":{\"136\":1}}],[\"变量的使用步骤\",{\"1\":{\"133\":1}}],[\"变量名不能冲突\",{\"1\":{\"136\":1}}],[\"变量必须先定义才能使用\",{\"1\":{\"136\":1}}],[\"语句块既可以保证代码块的原子性\",{\"1\":{\"480\":1}}],[\"语句块\",{\"1\":{\"444\":1}}],[\"语句还可以被用于\",{\"1\":{\"144\":1}}],[\"语句执行的过程从上至下\",{\"1\":{\"142\":1}}],[\"语句用于基于不同条件执行不同动作\",{\"1\":{\"142\":1}}],[\"语句判断布尔表达式\",{\"1\":{\"140\":1}}],[\"语句\",{\"0\":{\"140\":1}}],[\"语法糖\",{\"1\":{\"434\":1}}],[\"语法格式\",{\"1\":{\"85\":1,\"140\":1}}],[\"语法\",{\"0\":{\"18\":1},\"1\":{\"14\":1,\"29\":1,\"133\":1,\"476\":1,\"677\":1}}],[\"语法进行了扩展\",{\"1\":{\"13\":1}}],[\"语法扩展\",{\"1\":{\"12\":1}}],[\"循环遍历\",{\"1\":{\"540\":1}}],[\"循环的\",{\"1\":{\"469\":1}}],[\"循环写法\",{\"1\":{\"440\":1}}],[\"循环\",{\"0\":{\"440\":1},\"1\":{\"413\":3}}],[\"循环控制指令\",{\"0\":{\"413\":1}}],[\"循环结束\",{\"1\":{\"364\":1}}],[\"循环结构\",{\"1\":{\"139\":2}}],[\"循环引用时\",{\"0\":{\"354\":1}}],[\"循环栅栏\",{\"1\":{\"316\":1}}],[\"循环语句\",{\"1\":{\"139\":1}}],[\"逐行执行\",{\"1\":{\"139\":1}}],[\"逐条写入到\",{\"1\":{\"81\":1,\"726\":1,\"729\":1}}],[\"选举\",{\"1\":{\"484\":1}}],[\"选择合适的gc\",{\"1\":{\"392\":1}}],[\"选择结构\",{\"1\":{\"139\":2}}],[\"选项卡\",{\"0\":{\"15\":1}}],[\"顺序结构\",{\"1\":{\"139\":2}}],[\"布隆过滤器拥有google提供的一个开箱即用的组件\",{\"1\":{\"581\":1,\"601\":1,\"612\":1,\"655\":1,\"666\":1}}],[\"布隆过滤器有一个误判的概念\",{\"1\":{\"580\":1,\"600\":1,\"611\":1,\"654\":1,\"665\":1}}],[\"布隆过滤器其内部维护了一个全为0的bit数组\",{\"1\":{\"580\":1,\"600\":1,\"611\":1,\"654\":1,\"665\":1}}],[\"布隆过滤器的巨大作用\",{\"1\":{\"579\":1,\"599\":1,\"610\":1,\"653\":1,\"664\":1}}],[\"布隆过滤器\",{\"0\":{\"575\":1,\"578\":1,\"595\":1,\"598\":1,\"606\":1,\"609\":1,\"649\":1,\"652\":1,\"660\":1,\"663\":1},\"2\":{\"585\":1,\"605\":1,\"616\":1,\"659\":1,\"670\":1}}],[\"布隆过滤器判断是否存在\",{\"1\":{\"572\":1}}],[\"布隆过滤器是一种概率数据结构\",{\"1\":{\"522\":1}}],[\"布尔表达式2为true时执行\",{\"1\":{\"140\":1}}],[\"布尔表达式2\",{\"1\":{\"140\":1}}],[\"布尔表达式1\",{\"1\":{\"140\":1}}],[\"布尔表达式\",{\"1\":{\"140\":2}}],[\"布尔类型\",{\"1\":{\"139\":1}}],[\"布局包括\",{\"1\":{\"6\":1}}],[\"布局\",{\"0\":{\"6\":1},\"2\":{\"8\":1}}],[\"布局与功能禁用\",{\"0\":{\"3\":1,\"274\":1}}],[\"浮点\",{\"1\":{\"148\":1}}],[\"浮点类型\",{\"1\":{\"139\":1}}],[\"浮点型和复数\",{\"1\":{\"138\":1}}],[\"无盘复制减少了i\",{\"1\":{\"630\":1,\"640\":1}}],[\"无交集\",{\"1\":{\"532\":1}}],[\"无法对外提供服务\",{\"1\":{\"576\":1,\"596\":1,\"607\":1,\"650\":1,\"661\":1}}],[\"无法直接访问\",{\"1\":{\"457\":1}}],[\"无法处理浮动垃圾\",{\"1\":{\"376\":1}}],[\"无返回值\",{\"1\":{\"400\":2}}],[\"无需查询是否点赞\",{\"1\":{\"530\":1}}],[\"无需再编译\",{\"1\":{\"469\":1}}],[\"无需手动编码\",{\"1\":{\"363\":1}}],[\"无需将代码从系统内存复制到\",{\"1\":{\"349\":1}}],[\"无效\",{\"1\":{\"351\":1}}],[\"无论是双写模式还是失效模式\",{\"1\":{\"592\":1}}],[\"无论是先删数据库还是先删缓存\",{\"1\":{\"590\":1}}],[\"无论他怎么操作\",{\"1\":{\"529\":1}}],[\"无论通过哪种方法\",{\"1\":{\"423\":1}}],[\"无论内存是否充足\",{\"1\":{\"361\":1}}],[\"无论放入是否成功\",{\"1\":{\"341\":1,\"343\":1}}],[\"无论应用程序部署在哪个上下文路径下\",{\"1\":{\"160\":1,\"163\":1}}],[\"无锁\",{\"1\":{\"305\":1}}],[\"无须像变量那样通过内存寻址来取值\",{\"1\":{\"139\":1}}],[\"无差错\",{\"1\":{\"55\":1}}],[\"自己图片所在的地址\",{\"1\":{\"527\":1}}],[\"自己确实偏向错了\",{\"1\":{\"300\":1}}],[\"自减\",{\"1\":{\"474\":3,\"481\":1}}],[\"自减需要在主存和线程内存中进行数据交换\",{\"1\":{\"474\":1}}],[\"自减并不是原子操作\",{\"1\":{\"474\":1}}],[\"自动处理故障转移\",{\"1\":{\"621\":1}}],[\"自动生成全局唯一消息id\",{\"1\":{\"518\":1}}],[\"自动生成和转换的一些代码\",{\"1\":{\"434\":1}}],[\"自动拆装箱\",{\"0\":{\"436\":1}}],[\"自增\",{\"1\":{\"474\":3,\"481\":1,\"538\":1}}],[\"自增后\",{\"1\":{\"414\":1}}],[\"自增默认是int类型\",{\"1\":{\"139\":1}}],[\"自旋问题\",{\"0\":{\"309\":1}}],[\"自适应单向函数包括bcrypt\",{\"1\":{\"198\":1}}],[\"自适应单向函数允许配置一个\",{\"1\":{\"198\":1}}],[\"自适应单向函数\",{\"1\":{\"198\":1}}],[\"自定义\",{\"1\":{\"457\":1}}],[\"自定义类加载器\",{\"0\":{\"461\":1},\"1\":{\"457\":1}}],[\"自定义表单密码参数\",{\"1\":{\"205\":1}}],[\"自定义表单用户名参数\",{\"1\":{\"205\":1}}],[\"自定义登录页面\",{\"0\":{\"202\":1}}],[\"自定义角色\",{\"1\":{\"176\":1}}],[\"自定义密码\",{\"1\":{\"176\":1,\"193\":1}}],[\"自定义用户名\",{\"1\":{\"176\":1,\"193\":1}}],[\"自定义词库\",{\"1\":{\"90\":1}}],[\"自定义分词器\",{\"1\":{\"90\":1}}],[\"自定义映射规则来执行动态添加属性\",{\"1\":{\"89\":1}}],[\"且\",{\"1\":{\"431\":1}}],[\"且在该线程执行回收工作时\",{\"1\":{\"377\":1}}],[\"且在同一作用域\",{\"1\":{\"136\":1}}],[\"且后台线程还会对虚引用的对象监测\",{\"1\":{\"350\":1}}],[\"且后续自增值按行序递增\",{\"1\":{\"139\":1}}],[\"特殊网络环境适应\",{\"1\":{\"646\":1}}],[\"特殊常量\",{\"1\":{\"139\":1}}],[\"特别设计了\",{\"1\":{\"558\":1}}],[\"特别是哪些仅用于filtering过滤的文档\",{\"1\":{\"88\":1}}],[\"特性\",{\"1\":{\"341\":1}}],[\"特点\",{\"1\":{\"324\":1,\"377\":4,\"378\":4,\"379\":2}}],[\"显示为null\",{\"1\":{\"457\":1}}],[\"显示的\",{\"1\":{\"351\":1}}],[\"显示指定类型的时候\",{\"1\":{\"138\":1}}],[\"显然风险很大\",{\"1\":{\"254\":1}}],[\"显式类型定义\",{\"1\":{\"138\":1}}],[\"常见的命令有\",{\"1\":{\"535\":1}}],[\"常见于\",{\"1\":{\"461\":1}}],[\"常见于nio操作时\",{\"1\":{\"348\":1}}],[\"常规计数\",{\"1\":{\"513\":1}}],[\"常用在框架设计\",{\"1\":{\"461\":1}}],[\"常用授权注解\",{\"0\":{\"239\":1}}],[\"常用方法\",{\"1\":{\"150\":1}}],[\"常用打印函数\",{\"0\":{\"148\":1}}],[\"常用于好友或关注\",{\"1\":{\"115\":1,\"533\":1}}],[\"常量池也属于方法区\",{\"1\":{\"407\":1}}],[\"常量池载入运行时常量池\",{\"0\":{\"407\":1}}],[\"常量池中的信息\",{\"1\":{\"341\":1}}],[\"常量池中的字符串仅是符号\",{\"1\":{\"341\":1}}],[\"常量池与串池stringtable的关系\",{\"0\":{\"341\":1}}],[\"常量池是\",{\"1\":{\"340\":1}}],[\"常量池\",{\"0\":{\"400\":1},\"1\":{\"339\":1,\"340\":1,\"410\":1}}],[\"常量中的数据类型只可以是布尔型\",{\"1\":{\"138\":1}}],[\"常量的注意事项\",{\"1\":{\"138\":1}}],[\"常量组中如不指定类型和初始化值\",{\"1\":{\"138\":1}}],[\"常量组\",{\"1\":{\"138\":1}}],[\"常量可以作为枚举\",{\"1\":{\"138\":1}}],[\"常量是一个简单值的标识符\",{\"1\":{\"138\":1}}],[\"常量声明\",{\"0\":{\"138\":1}}],[\"常量constant\",{\"0\":{\"137\":1}}],[\"编写mq消费者代码\",{\"1\":{\"561\":1}}],[\"编写yml配置mq和redis\",{\"1\":{\"561\":1}}],[\"编写数据同步处理器\",{\"1\":{\"554\":1}}],[\"编写实体类来封装mq中的消息\",{\"1\":{\"561\":1}}],[\"编写实体类\",{\"1\":{\"554\":1}}],[\"编写启动类\",{\"1\":{\"554\":1}}],[\"编写canal\",{\"0\":{\"554\":1},\"1\":{\"551\":1}}],[\"编译成class后的代码\",{\"1\":{\"435\":1}}],[\"编译后的字节码文件\",{\"0\":{\"406\":1}}],[\"编译为\",{\"1\":{\"397\":1}}],[\"编译器真正生成的字节码中\",{\"1\":{\"437\":1}}],[\"编译器转换的结果直接就是\",{\"1\":{\"434\":1}}],[\"编译器给我们的一个额外福利\",{\"1\":{\"434\":1}}],[\"编译器把\",{\"1\":{\"434\":1}}],[\"编译器处理\",{\"0\":{\"434\":1}}],[\"编译器会将\",{\"1\":{\"478\":1}}],[\"编译器会做如下处理\",{\"1\":{\"445\":1}}],[\"编译器会帮助生成关闭资源代码\",{\"1\":{\"444\":1}}],[\"编译器会帮我们转换为\",{\"1\":{\"440\":1}}],[\"编译器会在编译期间将上述代码变换为\",{\"1\":{\"439\":1}}],[\"编译器会按从上至下的顺序\",{\"1\":{\"415\":2}}],[\"编译器会提示错误\",{\"1\":{\"136\":1}}],[\"编译器在编译期间会把abc作为常量放在常量池中\",{\"1\":{\"342\":1}}],[\"编译器和jvm会帮助我们将其合并为一次加锁解锁操作\",{\"1\":{\"304\":1}}],[\"编译器就会抛出错误\",{\"1\":{\"143\":1}}],[\"编辑此页链接\",{\"1\":{\"3\":1,\"274\":1}}],[\"左边的变量名至少有一个是新的\",{\"1\":{\"136\":1}}],[\"简化开发\",{\"1\":{\"531\":1}}],[\"简化了生产者的id生成工作\",{\"1\":{\"518\":1}}],[\"简短定义方式\",{\"1\":{\"136\":2}}],[\"简单的解决方法\",{\"0\":{\"577\":1,\"597\":1,\"608\":1,\"651\":1,\"662\":1}}],[\"简单的说\",{\"1\":{\"472\":1}}],[\"简单的按照内容发布时间排序\",{\"1\":{\"115\":1,\"533\":1}}],[\"简单高效\",{\"1\":{\"377\":1}}],[\"简单来说线程有两种通信方式\",{\"1\":{\"277\":1}}],[\"简单使用redis\",{\"1\":{\"115\":1,\"125\":1}}],[\"简单使用elasticsearch\",{\"0\":{\"65\":1,\"69\":1,\"73\":1,\"77\":1,\"97\":1,\"129\":1,\"487\":1,\"491\":1,\"495\":1,\"499\":1,\"503\":1,\"507\":1},\"1\":{\"65\":1,\"69\":1,\"73\":1,\"77\":1,\"97\":1,\"129\":1,\"487\":1,\"491\":1,\"495\":1,\"499\":1,\"503\":1,\"507\":1}}],[\"要同步的表\",{\"1\":{\"553\":1}}],[\"要将\",{\"1\":{\"525\":1,\"526\":1}}],[\"要使用第三方中间件时\",{\"1\":{\"523\":1}}],[\"要作为原子操作代码\",{\"1\":{\"476\":1}}],[\"要遵从双亲委派机制\",{\"1\":{\"461\":1}}],[\"要么就全部都不执行\",{\"1\":{\"283\":1}}],[\"要求用户登录\",{\"1\":{\"270\":1}}],[\"要求用户提供登录凭证\",{\"1\":{\"218\":1}}],[\"要求对应用程序的任何交互进行身份验证\",{\"1\":{\"165\":1}}],[\"要求变量的类型和赋值的类型必须一致\",{\"1\":{\"136\":1}}],[\"要匹配mill\",{\"1\":{\"88\":1}}],[\"存入一个0或1\",{\"1\":{\"538\":1}}],[\"存入堆中\",{\"1\":{\"333\":1}}],[\"存活的对象年龄加\",{\"1\":{\"371\":1}}],[\"存活的对象使用\",{\"1\":{\"371\":1}}],[\"存在于e\",{\"1\":{\"385\":1}}],[\"存在于堆内存之中\",{\"1\":{\"341\":1}}],[\"存在默认值\",{\"1\":{\"135\":1}}],[\"存储数据分析的中间结果\",{\"1\":{\"545\":1,\"548\":1}}],[\"存储系统日志和用户操作日志\",{\"1\":{\"545\":1,\"548\":1}}],[\"存储考试题目和用户答案\",{\"1\":{\"545\":1,\"548\":1}}],[\"存储和快速检索能源使用历史记录\",{\"1\":{\"545\":1,\"548\":1}}],[\"存储和计算最优配送路线\",{\"1\":{\"545\":1,\"548\":1}}],[\"存储和计算用户的交易行为\",{\"1\":{\"545\":1,\"548\":1}}],[\"存储和监控设备状态信息\",{\"1\":{\"545\":1,\"548\":1}}],[\"存储和展示弹幕消息\",{\"1\":{\"545\":1,\"548\":1}}],[\"存储兴趣点\",{\"1\":{\"545\":1,\"548\":1}}],[\"存储玩家的基本信息\",{\"1\":{\"545\":1,\"548\":1}}],[\"存储地理位置信息\",{\"1\":{\"519\":1}}],[\"存储用户之间的好友关系\",{\"1\":{\"545\":1,\"548\":1}}],[\"存储用户的购物车信息\",{\"1\":{\"545\":1,\"548\":1}}],[\"存储用户或角色的权限位字段\",{\"1\":{\"521\":1}}],[\"存储用户购物车中的商品信息\",{\"1\":{\"516\":1}}],[\"存储用户关注集合\",{\"1\":{\"515\":1}}],[\"存储参与用户集合\",{\"1\":{\"515\":1}}],[\"存储点赞用户集合\",{\"1\":{\"515\":1}}],[\"存储在磁盘影响存取速度\",{\"1\":{\"512\":1}}],[\"存储在磁盘\",{\"1\":{\"512\":1}}],[\"存储受保护资源的服务器或定义了可以访问到资源的api\",{\"1\":{\"242\":1}}],[\"存储所有可能的角色及其描述\",{\"1\":{\"235\":1}}],[\"存储认证对象的上下文\",{\"1\":{\"223\":1}}],[\"存储已认证用户的详细信息\",{\"1\":{\"222\":1}}],[\"存储已认证用户详细信息的地方\",{\"1\":{\"222\":1}}],[\"存储的信息\",{\"1\":{\"85\":1}}],[\"数组\",{\"1\":{\"472\":1}}],[\"数组大小即为枚举元素个数\",{\"1\":{\"442\":1}}],[\"数组赋初值的简化写法也是语法糖哦\",{\"1\":{\"440\":1}}],[\"数组的循环\",{\"1\":{\"440\":1}}],[\"数组长度\",{\"1\":{\"290\":1}}],[\"数字常量不会分配存储空间\",{\"1\":{\"139\":1}}],[\"数字型\",{\"1\":{\"138\":1}}],[\"数字\",{\"1\":{\"134\":1}}],[\"数据仓库中积累的大量历史数据对于数据科学家和业务分析师也是十分宝贵的\",{\"1\":{\"680\":1,\"683\":1}}],[\"数据仓库可集中\",{\"1\":{\"680\":1,\"683\":1}}],[\"数据仓库是一个为数据分析而设计的企业级数据管理系统\",{\"1\":{\"680\":1,\"683\":1}}],[\"数据备份和容灾恢复\",{\"1\":{\"624\":1}}],[\"数据备份\",{\"1\":{\"622\":1}}],[\"数据时应用\",{\"1\":{\"619\":1}}],[\"数据时应用连接主节点\",{\"1\":{\"619\":1}}],[\"数据冗余\",{\"1\":{\"619\":1}}],[\"数据在写的过程中\",{\"1\":{\"591\":1}}],[\"数据是json格式存储到mq中的\",{\"1\":{\"560\":1}}],[\"数据是不是太多\",{\"1\":{\"393\":1}}],[\"数据\",{\"1\":{\"554\":1}}],[\"数据缓存\",{\"1\":{\"545\":1,\"548\":1}}],[\"数据量会非常恐怖\",{\"1\":{\"541\":1}}],[\"数据聚合\",{\"1\":{\"523\":1}}],[\"数据就不会丢失了\",{\"1\":{\"484\":1}}],[\"数据就丢失了\",{\"1\":{\"484\":1}}],[\"数据表示是否太臃肿\",{\"1\":{\"393\":1}}],[\"数据共享\",{\"1\":{\"277\":1}}],[\"数据类型\",{\"1\":{\"235\":5,\"512\":1}}],[\"数据库更新后\",{\"1\":{\"588\":1}}],[\"数据库压力瞬间增大\",{\"1\":{\"572\":1}}],[\"数据库的用户名和密码\",{\"1\":{\"553\":1,\"560\":1,\"567\":1}}],[\"数据库的相关表中增加一个字段为\",{\"1\":{\"81\":1,\"726\":1,\"729\":1}}],[\"数据库中有一张tb\",{\"1\":{\"531\":1}}],[\"数据库中存储的是单向转换后的密码\",{\"1\":{\"198\":1}}],[\"数据库点赞数\",{\"1\":{\"529\":1,\"530\":2}}],[\"数据库点赞数+1\",{\"1\":{\"529\":1}}],[\"数据库等\",{\"1\":{\"277\":1}}],[\"数据迁移\",{\"1\":{\"89\":2}}],[\"数据同步方案\",{\"0\":{\"565\":1}}],[\"数据同步到mq中的topic名字\",{\"1\":{\"560\":2,\"567\":2}}],[\"数据同步到elasticsearch\",{\"0\":{\"81\":1,\"84\":1,\"726\":1,\"729\":1},\"1\":{\"81\":1,\"84\":1,\"726\":1,\"729\":1}}],[\"数据同步\",{\"2\":{\"83\":1,\"96\":1,\"556\":1,\"563\":1,\"571\":1,\"682\":1,\"685\":1,\"728\":1,\"731\":1}}],[\"数据偏移\",{\"1\":{\"57\":1}}],[\"由从节点提供读服务\",{\"1\":{\"619\":1}}],[\"由下面的\",{\"1\":{\"382\":1}}],[\"由\",{\"1\":{\"362\":1}}],[\"由三部分组成\",{\"1\":{\"280\":1}}],[\"由一个或多个字母\",{\"1\":{\"134\":1}}],[\"由于缓存不命中\",{\"1\":{\"572\":1}}],[\"由于内存不连续\",{\"1\":{\"367\":1}}],[\"由于编译器优化\",{\"1\":{\"283\":1}}],[\"由于哈希是单向的\",{\"1\":{\"198\":1}}],[\"由于他们上线不是很频繁\",{\"1\":{\"115\":1,\"533\":1}}],[\"由于访问nginx中资源\",{\"1\":{\"90\":1}}],[\"由于\",{\"1\":{\"85\":1,\"431\":1}}],[\"由于是采用定时器根据固定频率查询表来同步数据\",{\"1\":{\"81\":1,\"726\":1,\"729\":1}}],[\"赋值在准备阶段完成\",{\"1\":{\"451\":1}}],[\"赋值在初始化阶段完成\",{\"1\":{\"451\":1}}],[\"赋值给\",{\"1\":{\"439\":1}}],[\"赋值给islike字段\",{\"1\":{\"529\":2}}],[\"赋值给i\",{\"1\":{\"432\":2}}],[\"赋值给局部变量\",{\"1\":{\"416\":1}}],[\"赋值给x和y\",{\"1\":{\"150\":1}}],[\"赋值也是不够的\",{\"1\":{\"136\":1}}],[\"赋值\",{\"1\":{\"133\":1,\"441\":1}}],[\"声明的\",{\"1\":{\"446\":1}}],[\"声明与赋值分开\",{\"1\":{\"135\":1}}],[\"声明并赋值\",{\"1\":{\"134\":1}}],[\"声明后若不赋值\",{\"1\":{\"134\":1}}],[\"声明一个变量\",{\"1\":{\"134\":1}}],[\"声明变量\",{\"0\":{\"134\":1}}],[\"声明\",{\"1\":{\"133\":1}}],[\"缺一不可\",{\"1\":{\"133\":1}}],[\"缺点是synchronized是属于重量级操作\",{\"1\":{\"480\":1}}],[\"缺点是数据存储了两份\",{\"1\":{\"349\":1}}],[\"缺点\",{\"1\":{\"81\":3,\"115\":4,\"367\":1,\"368\":1,\"369\":1,\"387\":1,\"533\":4,\"588\":1,\"726\":3,\"729\":3}}],[\"方法源码\",{\"1\":{\"472\":1}}],[\"方法没有内联\",{\"1\":{\"471\":1}}],[\"方法会被优化成下面的样子\",{\"1\":{\"471\":1}}],[\"方法会在类加载的初始化阶段被调用\",{\"1\":{\"415\":1}}],[\"方法内联了\",{\"1\":{\"471\":1}}],[\"方法内联\",{\"0\":{\"470\":1},\"1\":{\"471\":1}}],[\"方法的调用次数\",{\"1\":{\"469\":1}}],[\"方法的返回值是\",{\"1\":{\"445\":1}}],[\"方法中也会调用该方法\",{\"1\":{\"461\":1}}],[\"方法中的线程能够立即看到这个变化\",{\"1\":{\"286\":1}}],[\"方法去找到该类\",{\"1\":{\"460\":1}}],[\"方法时\",{\"1\":{\"460\":1}}],[\"方法所在的类\",{\"1\":{\"455\":1}}],[\"方法不会导致类的解析和初始化\",{\"1\":{\"452\":1}}],[\"方法返回值\",{\"1\":{\"445\":1}}],[\"方法重写时对返回值分两种情况\",{\"1\":{\"445\":1}}],[\"方法重写时的桥接方法\",{\"0\":{\"445\":1}}],[\"方法是否内联会影响\",{\"1\":{\"471\":1}}],[\"方法是继承\",{\"1\":{\"424\":1}}],[\"方法是\",{\"1\":{\"424\":1}}],[\"方法2\",{\"1\":{\"423\":1}}],[\"方法1\",{\"1\":{\"423\":1}}],[\"方法上\",{\"1\":{\"418\":1}}],[\"方法解析\",{\"1\":{\"364\":2}}],[\"方法调用\",{\"0\":{\"416\":1},\"1\":{\"410\":1}}],[\"方法调用结束后会弹出栈\",{\"1\":{\"326\":1}}],[\"方法调\",{\"1\":{\"350\":1}}],[\"方法减少重复入池\",{\"1\":{\"346\":1}}],[\"方法名\",{\"1\":{\"340\":1,\"400\":2}}],[\"方法区中常量引用的对象\",{\"1\":{\"356\":1}}],[\"方法区中类静态属性引用的对象\",{\"1\":{\"356\":1}}],[\"方法区内存溢出\",{\"0\":{\"338\":1}}],[\"方法区域的内存不需要是连续的\",{\"1\":{\"336\":1}}],[\"方法区域可以具有固定的大小\",{\"1\":{\"336\":1}}],[\"方法区域类似于用于传统语言的编译代码的存储区域\",{\"1\":{\"336\":1}}],[\"方法区\",{\"0\":{\"335\":1}}],[\"方法呢的局部变量是否线程安全\",{\"1\":{\"326\":1}}],[\"方法唤醒\",{\"1\":{\"319\":1}}],[\"方法唤醒它\",{\"1\":{\"277\":1}}],[\"方法进行等待\",{\"1\":{\"316\":1}}],[\"方法来加载类\",{\"1\":{\"461\":1}}],[\"方法来释放一个许可\",{\"1\":{\"313\":1}}],[\"方法来获取一个许可\",{\"1\":{\"313\":1}}],[\"方法修改\",{\"1\":{\"286\":1}}],[\"方法\",{\"0\":{\"454\":1},\"1\":{\"278\":1,\"298\":1,\"313\":1,\"350\":1,\"363\":1,\"364\":1,\"410\":1,\"441\":1,\"445\":1,\"456\":1,\"461\":4,\"464\":1,\"466\":1}}],[\"方法暂停执行并等待其他线程通过\",{\"1\":{\"277\":1}}],[\"方法实现\",{\"1\":{\"277\":1}}],[\"方法获取\",{\"1\":{\"222\":2}}],[\"方法由一条条语句构成\",{\"1\":{\"133\":1}}],[\"方便后续进行共同关注\",{\"1\":{\"532\":1}}],[\"方便检索和更新\",{\"1\":{\"516\":1}}],[\"方便控制\",{\"1\":{\"381\":1}}],[\"方便随时做密码策略的升级\",{\"1\":{\"201\":1}}],[\"方便求得两个用户之间的共同关注\",{\"1\":{\"105\":1}}],[\"严格区分大小写\",{\"1\":{\"133\":1}}],[\"函数取值时\",{\"1\":{\"437\":1}}],[\"函数对应的源码查看\",{\"1\":{\"133\":1}}],[\"函数\",{\"1\":{\"133\":1}}],[\"函数解释\",{\"1\":{\"117\":1}}],[\"处理过时数据\",{\"0\":{\"628\":1,\"638\":1}}],[\"处理和存储安全报警信息\",{\"1\":{\"545\":1,\"548\":1}}],[\"处理实时评分\",{\"1\":{\"545\":1,\"548\":1}}],[\"处理用户计费数据\",{\"1\":{\"545\":1,\"548\":1}}],[\"处理用户间的消息传递和通知\",{\"1\":{\"545\":1,\"548\":1}}],[\"处理来自传感器的实时数据\",{\"1\":{\"545\":1,\"548\":1}}],[\"处理消息传递\",{\"1\":{\"545\":1,\"548\":1}}],[\"处理高频交易和实时数据流\",{\"1\":{\"545\":1,\"548\":1}}],[\"处理中\",{\"1\":{\"386\":1}}],[\"处理器和编译器优化下\",{\"1\":{\"283\":1}}],[\"处理器乱序执行等原因\",{\"1\":{\"283\":1}}],[\"处理会话劫持攻击\",{\"1\":{\"165\":1}}],[\"处理跨站请求伪造\",{\"1\":{\"165\":1}}],[\"处理分数相同的情况\",{\"1\":{\"117\":1}}],[\"处理错误\",{\"1\":{\"117\":1}}],[\"作为\",{\"1\":{\"558\":1}}],[\"作为代价\",{\"1\":{\"541\":1}}],[\"作为依赖项包含在您的应用程序中\",{\"1\":{\"526\":1}}],[\"作为被压制异常添加\",{\"1\":{\"444\":1}}],[\"作为重入的计数\",{\"1\":{\"301\":1}}],[\"作用是把\",{\"1\":{\"448\":1}}],[\"作用是生产类的二进制字节码\",{\"1\":{\"338\":1}}],[\"作用\",{\"0\":{\"285\":1},\"1\":{\"324\":1}}],[\"作用和lastidstr一样\",{\"1\":{\"117\":1}}],[\"作者id\",{\"1\":{\"91\":1,\"93\":1}}],[\"作者设置为\",{\"1\":{\"27\":1,\"675\":1}}],[\"本文为博主原创文章\",{\"1\":{\"554\":1}}],[\"本例中的个人页面\",{\"1\":{\"533\":1}}],[\"本例即为\",{\"1\":{\"416\":1}}],[\"本类为\",{\"1\":{\"401\":1}}],[\"本地方法栈中jni\",{\"1\":{\"356\":1}}],[\"本地方法栈\",{\"0\":{\"329\":1}}],[\"本地内存中存储了该线程以读\",{\"1\":{\"283\":1}}],[\"本地内存\",{\"1\":{\"283\":1}}],[\"本次查询的最小时间戳\",{\"1\":{\"117\":1}}],[\"本页面就是一个示例\",{\"1\":{\"3\":1,\"274\":1}}],[\"往往用来衡量网站的流量\",{\"1\":{\"541\":1}}],[\"往往是图文结合\",{\"1\":{\"527\":1}}],[\"往信箱进行发送\",{\"0\":{\"116\":1},\"1\":{\"115\":1,\"116\":1}}],[\"往粉丝的信箱推送\",{\"1\":{\"115\":1}}],[\"去官网下载\",{\"1\":{\"553\":1,\"560\":1,\"567\":1,\"568\":1}}],[\"去拿这段时间的数据\",{\"1\":{\"540\":1}}],[\"去查询用户的笔记\",{\"1\":{\"532\":1}}],[\"去查询用户的详情\",{\"1\":{\"532\":1}}],[\"去信箱中取\",{\"1\":{\"115\":1}}],[\"去掉type就是为了提高es处理数据的效率\",{\"1\":{\"89\":1}}],[\"去掉type概念\",{\"1\":{\"89\":1}}],[\"粉丝点击我的关注时\",{\"1\":{\"115\":1}}],[\"才是1\",{\"1\":{\"540\":1}}],[\"才会导致内部类加载和初始化其静态成员\",{\"1\":{\"456\":1}}],[\"才有上述的效果\",{\"1\":{\"289\":1}}],[\"才能访问此方法\",{\"1\":{\"239\":2}}],[\"才从该博主的信息拉取\",{\"1\":{\"115\":1}}],[\"才进行修改\",{\"1\":{\"85\":1}}],[\"按需修改成自己的数据库信息\",{\"1\":{\"553\":1,\"560\":1,\"567\":1}}],[\"按数据库查询\",{\"1\":{\"537\":1}}],[\"按照距离排序\",{\"1\":{\"537\":1}}],[\"按照typeid分组\",{\"1\":{\"536\":1}}],[\"按照年龄聚合\",{\"1\":{\"88\":1}}],[\"按分数从大到小的顺序查询指定数量的元素\",{\"1\":{\"117\":1}}],[\"按时间浏览\",{\"1\":{\"115\":1}}],[\"综上\",{\"1\":{\"115\":1,\"535\":1}}],[\"需求\",{\"1\":{\"115\":1,\"228\":1,\"232\":1,\"529\":1,\"531\":1,\"532\":1,\"534\":1,\"535\":1,\"539\":1,\"540\":1}}],[\"需要搭配哨兵模式\",{\"1\":{\"625\":1}}],[\"需要合理配置主从节点数量\",{\"1\":{\"623\":1}}],[\"需要手动将一个从节点晋升为主节点\",{\"1\":{\"620\":1}}],[\"需要强一致性那么要加锁\",{\"1\":{\"590\":1}}],[\"需要强一致性还是最终一致性\",{\"1\":{\"586\":1}}],[\"需要说明的是\",{\"1\":{\"580\":1,\"600\":1,\"611\":1,\"654\":1,\"665\":1}}],[\"需要对应\",{\"1\":{\"569\":1}}],[\"需要编写java客户端去监听mq中的消息\",{\"1\":{\"558\":1}}],[\"需要重点考虑一个事情\",{\"1\":{\"541\":1}}],[\"需要重启elasticsearch容器\",{\"1\":{\"90\":1}}],[\"需要首先进入到这个页面\",{\"1\":{\"532\":1}}],[\"需要是唯一的\",{\"1\":{\"530\":1}}],[\"需要修改systemconstants\",{\"1\":{\"527\":1}}],[\"需要该集合类实现了\",{\"1\":{\"440\":1}}],[\"需要将统计过的用户信息保存\",{\"1\":{\"541\":1}}],[\"需要将数据放入到set集合中\",{\"1\":{\"532\":1}}],[\"需要将\",{\"1\":{\"437\":2}}],[\"需要保留的\",{\"1\":{\"386\":1}}],[\"需要切换到内核态\",{\"1\":{\"349\":1}}],[\"需要转换\",{\"1\":{\"328\":1}}],[\"需要在授权服务器上注册客户应用\",{\"1\":{\"252\":1}}],[\"需要解决跨域的问题\",{\"1\":{\"220\":1}}],[\"需要登录\",{\"1\":{\"218\":1}}],[\"需要大量内存\",{\"1\":{\"199\":2}}],[\"需要的彩虹表就越大\",{\"1\":{\"198\":1}}],[\"需要通过科学上网的方式访问\",{\"1\":{\"164\":1}}],[\"需要注意的是\",{\"1\":{\"141\":1}}],[\"需要时可做显示类型转换\",{\"1\":{\"138\":1}}],[\"需要计算偏移量\",{\"1\":{\"117\":1}}],[\"需要实现取关方法\",{\"1\":{\"107\":1}}],[\"需要做相应的转换\",{\"1\":{\"94\":1}}],[\"需要了解\",{\"1\":{\"87\":1}}],[\"需要指定\",{\"1\":{\"85\":1}}],[\"拿到mq中的消息内容\",{\"1\":{\"561\":1}}],[\"拿到employee表的改变后的数据之后\",{\"1\":{\"554\":1}}],[\"拿到泛型类型\",{\"1\":{\"438\":1}}],[\"拿到方法\",{\"1\":{\"438\":1}}],[\"拿到我们需要的数据\",{\"1\":{\"115\":1,\"535\":1}}],[\"拿到了10~6\",{\"1\":{\"115\":1,\"534\":1}}],[\"拿第一页数据\",{\"1\":{\"115\":1,\"534\":1}}],[\"再根据sql的类型\",{\"1\":{\"561\":1}}],[\"再根据这套算法\",{\"1\":{\"540\":1}}],[\"再看\",{\"1\":{\"464\":1}}],[\"再比如\",{\"1\":{\"413\":1}}],[\"再将活跃对象复制到幸存区to中\",{\"1\":{\"371\":1}}],[\"再回收不被gc\",{\"1\":{\"369\":1}}],[\"再由\",{\"1\":{\"363\":1}}],[\"再放入到串池中\",{\"1\":{\"343\":1}}],[\"再与存储的密码进行比较\",{\"1\":{\"198\":1}}],[\"再次点击则取消点赞\",{\"1\":{\"529\":1}}],[\"再次比较\",{\"1\":{\"441\":1}}],[\"再次创建对象\",{\"1\":{\"371\":1}}],[\"再次转储\",{\"1\":{\"357\":1}}],[\"再次设置为\",{\"1\":{\"312\":1}}],[\"再次传递到后台\",{\"1\":{\"115\":1,\"535\":1}}],[\"再次发送上面的请求\",{\"1\":{\"85\":1}}],[\"再从发件箱里边去拉信息\",{\"1\":{\"115\":1,\"533\":1}}],[\"站在发件人这一段\",{\"1\":{\"115\":1,\"533\":1}}],[\"内部类中保存单例\",{\"1\":{\"456\":1}}],[\"内部采用\",{\"1\":{\"448\":1}}],[\"内部可以存储锁定对象的mark\",{\"1\":{\"301\":1}}],[\"内暂停时间\",{\"1\":{\"378\":1}}],[\"内存占用低的令人发指\",{\"1\":{\"541\":1}}],[\"内存结构\",{\"1\":{\"472\":1}}],[\"内存结构图\",{\"1\":{\"337\":1}}],[\"内存地址\",{\"1\":{\"423\":1}}],[\"内存位置\",{\"1\":{\"309\":1}}],[\"内存\",{\"1\":{\"286\":1,\"337\":1,\"360\":1,\"391\":1}}],[\"内存模型\",{\"1\":{\"283\":1,\"472\":2}}],[\"内存或其他资源\",{\"1\":{\"198\":1}}],[\"内存压力大\",{\"1\":{\"115\":1,\"533\":1}}],[\"内容获取效率低\",{\"1\":{\"115\":1,\"533\":1}}],[\"内容\",{\"1\":{\"12\":1}}],[\"比较一下之前我们将线程安全时举的例子\",{\"1\":{\"481\":1}}],[\"比较两个类是否\",{\"1\":{\"457\":1}}],[\"比较绕口\",{\"1\":{\"445\":1}}],[\"比较呢\",{\"1\":{\"441\":1}}],[\"比较可知\",{\"1\":{\"424\":1}}],[\"比较有意思的是\",{\"1\":{\"416\":1}}],[\"比较操作数栈中的两个数\",{\"1\":{\"414\":1}}],[\"比较\",{\"1\":{\"412\":1,\"413\":1}}],[\"比较延迟\",{\"1\":{\"115\":1,\"533\":1}}],[\"比较节约空间\",{\"1\":{\"115\":1,\"533\":1}}],[\"比如断开连接时是否响应客户端\",{\"1\":{\"625\":1}}],[\"比如1\",{\"1\":{\"572\":1}}],[\"比如说以下这张表\",{\"1\":{\"538\":1}}],[\"比如最早点赞的top5\",{\"1\":{\"530\":1}}],[\"比如es\",{\"1\":{\"523\":1}}],[\"比如redis数据库\",{\"1\":{\"512\":1}}],[\"比如它无法处理非关系型的数据\",{\"1\":{\"512\":1}}],[\"比如咱们的消息中有一个分类是nba\",{\"1\":{\"484\":1}}],[\"比如第一项0a是constant\",{\"1\":{\"400\":1}}],[\"比如手动\",{\"1\":{\"351\":1}}],[\"比如限制数据库连接池的大小\",{\"1\":{\"314\":1}}],[\"比如\",{\"1\":{\"88\":1,\"89\":2,\"398\":1,\"430\":2,\"541\":1,\"558\":1}}],[\"此配置项让从节点能够声明一个不同于实际用于连接主节点的监听端口的端口号\",{\"1\":{\"646\":1}}],[\"此接口并没有传递任何的参数\",{\"1\":{\"539\":1}}],[\"此方法才是真正重写了父类\",{\"1\":{\"445\":1}}],[\"此对象没有任何属性\",{\"1\":{\"421\":1}}],[\"此规范不强制指定方法区的位置或用于管理已编译代码的策略\",{\"1\":{\"336\":1}}],[\"此行设置断点可以查看创建的user对象\",{\"1\":{\"176\":1}}],[\"此外\",{\"1\":{\"136\":1,\"591\":1}}],[\"此时已经没有了list\",{\"1\":{\"541\":1}}],[\"此时就能找到这个用户截止这天的所有签到记录\",{\"1\":{\"540\":1}}],[\"此时也会破坏双亲委派模式\",{\"1\":{\"461\":1}}],[\"此时操作数栈中有\",{\"1\":{\"414\":1}}],[\"此时计数器加1\",{\"1\":{\"313\":1}}],[\"此时由于stringbuffer对象是线程安全的\",{\"1\":{\"303\":1}}],[\"此时\",{\"1\":{\"268\":1}}],[\"此时这个11放到最顶上\",{\"1\":{\"115\":1,\"534\":1}}],[\"此时t3时刻来拿第二页\",{\"1\":{\"115\":1,\"534\":1}}],[\"此时t3\",{\"1\":{\"115\":1,\"534\":1}}],[\"此时page\",{\"1\":{\"115\":1,\"534\":1}}],[\"此时会主动的把张三写的内容发送到他的粉丝收件箱中去\",{\"1\":{\"115\":1,\"533\":1}}],[\"此时系统会从他关注的人群中\",{\"1\":{\"115\":1,\"533\":1}}],[\"此文字有脚注^first\",{\"1\":{\"16\":1}}],[\"推荐使用replicaof命令\",{\"1\":{\"621\":1}}],[\"推送\",{\"1\":{\"534\":1}}],[\"推送笔记id给所有粉丝\",{\"1\":{\"534\":1}}],[\"推送到粉丝的收件箱\",{\"1\":{\"534\":1}}],[\"推送到粉丝的信箱\",{\"1\":{\"115\":1}}],[\"推送到粉丝收件箱\",{\"0\":{\"534\":1}}],[\"推送用户感兴趣信息来吸引用户\",{\"1\":{\"115\":1,\"533\":1}}],[\"推拉模式是一个折中的方案\",{\"1\":{\"115\":1,\"533\":1}}],[\"推拉结合模式\",{\"1\":{\"115\":1,\"533\":1}}],[\"推拉结合\",{\"1\":{\"115\":1,\"533\":1}}],[\"推模式是没有写邮箱的\",{\"1\":{\"115\":1,\"533\":1}}],[\"推模式\",{\"1\":{\"115\":3,\"533\":2}}],[\"拉模式\",{\"1\":{\"115\":3,\"533\":2}}],[\"智能排序\",{\"1\":{\"115\":1,\"533\":1}}],[\"信息\",{\"1\":{\"222\":1,\"400\":7,\"470\":1,\"513\":1,\"545\":1,\"548\":1}}],[\"信息噪音较多\",{\"1\":{\"115\":1,\"533\":1}}],[\"信息全面\",{\"1\":{\"115\":1,\"533\":1}}],[\"信息检索\",{\"1\":{\"87\":1}}],[\"沉浸式\",{\"1\":{\"115\":1,\"533\":1}}],[\"直到遍历完所有的数据\",{\"1\":{\"540\":1}}],[\"直到获得第一个非0的数字即可\",{\"1\":{\"540\":1}}],[\"直到遇到第一次未签到为止\",{\"1\":{\"540\":1}}],[\"直到它结束\",{\"1\":{\"377\":1}}],[\"直到它被其他线程通过调用locksupport\",{\"1\":{\"319\":1}}],[\"直到另一个线程唤醒它或者当前时间超过了指定的截止时间\",{\"1\":{\"319\":1}}],[\"直到另一个线程唤醒它或者超过指定的纳秒时间\",{\"1\":{\"319\":1}}],[\"直到另一个线程调用locksupport\",{\"1\":{\"319\":1}}],[\"直到其他线程释放许可\",{\"1\":{\"313\":1}}],[\"直到锁被释放\",{\"1\":{\"305\":1}}],[\"直到\",{\"1\":{\"279\":1}}],[\"直到找到匹配项\",{\"1\":{\"142\":1}}],[\"直到匹配为止\",{\"1\":{\"142\":1}}],[\"直译为投喂\",{\"1\":{\"115\":1,\"533\":1}}],[\"直接去redis的配置文件看就行了\",{\"0\":{\"625\":1}}],[\"直接全部数据放redis再持久化\",{\"1\":{\"591\":1}}],[\"直接返回\",{\"1\":{\"591\":1}}],[\"直接往redis添加\",{\"1\":{\"561\":1}}],[\"直接扔给阻塞队列\",{\"1\":{\"484\":1}}],[\"直接执行\",{\"1\":{\"469\":1}}],[\"直接设置吞吐量的大小\",{\"1\":{\"378\":1}}],[\"直接内存被\",{\"1\":{\"351\":1}}],[\"直接内存回收原理\",{\"0\":{\"351\":1}}],[\"直接内存的回收机制总结\",{\"1\":{\"350\":1}}],[\"直接内存的回收不是通过jvm的垃圾回收来释放的\",{\"1\":{\"350\":1}}],[\"直接内存释放原理\",{\"1\":{\"350\":1}}],[\"直接内存是操作系统和\",{\"1\":{\"349\":1}}],[\"直接内存\",{\"0\":{\"347\":1},\"1\":{\"351\":1,\"362\":1}}],[\"直接告诉该应用\",{\"1\":{\"254\":1}}],[\"直接赋值\",{\"1\":{\"135\":1}}],[\"直接把数据写入到他的粉丝中去\",{\"1\":{\"115\":1,\"533\":1}}],[\"直接写入es当中\",{\"1\":{\"98\":1,\"102\":1}}],[\"直接更新\",{\"1\":{\"85\":1}}],[\"取消点赞\",{\"1\":{\"529\":1,\"530\":1}}],[\"取消关注service\",{\"1\":{\"531\":1}}],[\"取消关注\",{\"1\":{\"111\":1,\"531\":1}}],[\"取关则删除数据\",{\"1\":{\"111\":1}}],[\"取关\",{\"0\":{\"107\":1,\"111\":1},\"1\":{\"107\":1,\"531\":1,\"532\":1}}],[\"取到当前发请求的用户的id\",{\"1\":{\"98\":1,\"102\":1,\"121\":1}}],[\"前端已实现\",{\"1\":{\"529\":1}}],[\"前追加\",{\"1\":{\"458\":1}}],[\"前后的内存占用\",{\"1\":{\"393\":1}}],[\"前\",{\"1\":{\"373\":1,\"421\":1}}],[\"前缀动态获取和密码的形式类型一致的passwordencoder对象\",{\"1\":{\"201\":1}}],[\"前缀+用户id\",{\"1\":{\"106\":1}}],[\"前面例子体现的实际就是可见性\",{\"1\":{\"481\":1}}],[\"前面\",{\"1\":{\"472\":1}}],[\"前面已经声明了b变量\",{\"1\":{\"134\":1}}],[\"前面已经讲过\",{\"1\":{\"56\":1}}],[\"前面的match仅指定了一个字段\",{\"1\":{\"88\":1}}],[\"首选我们需要开启mysql的bin\",{\"1\":{\"558\":1}}],[\"首选需要开启mysql的bin\",{\"1\":{\"551\":1}}],[\"首次建立复制关系时\",{\"1\":{\"621\":1}}],[\"首次读取会缓存起来\",{\"1\":{\"471\":1}}],[\"首次访问这个类的静态变量或静态方法时\",{\"1\":{\"455\":2}}],[\"首先redis的缓存没有命中\",{\"1\":{\"576\":1,\"596\":1,\"607\":1,\"650\":1,\"661\":1}}],[\"首先我们搞懂两个概念\",{\"1\":{\"541\":1}}],[\"首先启用\",{\"1\":{\"471\":1}}],[\"首先查找该类是否已经被该类加载器加载过了\",{\"1\":{\"460\":1}}],[\"首先排除减少因为自身编写的代码而引发的内存问题\",{\"1\":{\"393\":1}}],[\"首先会设置一个堆内存的大小为\",{\"1\":{\"364\":1}}],[\"首先需要实现关注的方法\",{\"1\":{\"106\":1}}],[\"首部最多是60字节\",{\"1\":{\"57\":1}}],[\"首部中的序号字段值则指的是本报文段所发送的数据的第一个字节的序号\",{\"1\":{\"57\":1}}],[\"之间的复制行为\",{\"1\":{\"635\":1}}],[\"之前的点赞是放到set集合\",{\"1\":{\"530\":1}}],[\"之前是无法编译通过的\",{\"1\":{\"436\":1}}],[\"之前执行了\",{\"1\":{\"416\":1}}],[\"之前需要使用\",{\"1\":{\"389\":1}}],[\"之前c未被引用\",{\"1\":{\"386\":1}}],[\"之前会导致永久代内存溢出\",{\"1\":{\"338\":1}}],[\"之前使用它\",{\"1\":{\"136\":1}}],[\"之后会导致元空间内存溢出\",{\"1\":{\"338\":1}}],[\"之后检查\",{\"1\":{\"294\":1}}],[\"之后\",{\"1\":{\"288\":1,\"458\":1}}],[\"之后可以使用set集合求交集\",{\"1\":{\"105\":1}}],[\"之所以有这个限制\",{\"1\":{\"57\":1}}],[\"zsetoperations\",{\"1\":{\"535\":1}}],[\"zset\",{\"0\":{\"517\":1},\"1\":{\"545\":1,\"548\":1}}],[\"zero\",{\"1\":{\"444\":1}}],[\"zing\",{\"1\":{\"392\":1}}],[\"zip\",{\"1\":{\"90\":1}}],[\"zgc\",{\"1\":{\"392\":1}}],[\"zrange\",{\"1\":{\"530\":1}}],[\"zrangeby\",{\"1\":{\"117\":1}}],[\"zrevrange\",{\"1\":{\"117\":1}}],[\"zrevrangebyscorewithscores\",{\"1\":{\"117\":2}}],[\"zrevrangebyscore\",{\"1\":{\"117\":1,\"119\":1,\"122\":1,\"535\":1}}],[\"z\",{\"1\":{\"116\":1,\"138\":3,\"437\":1,\"438\":1}}],[\"zadd\",{\"1\":{\"116\":1,\"530\":1}}],[\"zap\",{\"1\":{\"98\":11,\"102\":11,\"121\":9}}],[\"初始代码\",{\"1\":{\"529\":1}}],[\"初始状态\",{\"1\":{\"478\":1}}],[\"初始标记\",{\"1\":{\"379\":1}}],[\"初始化连接\",{\"1\":{\"621\":1}}],[\"初始化器\",{\"1\":{\"465\":1}}],[\"初始化驱动\",{\"1\":{\"463\":1}}],[\"初始化时的线程安全是有保障的\",{\"1\":{\"456\":1}}],[\"初始化即调用\",{\"1\":{\"454\":1}}],[\"初始化\",{\"0\":{\"453\":1},\"1\":{\"456\":1}}],[\"初始化userdetailsservice\",{\"0\":{\"189\":1}}],[\"初始化es连接\",{\"1\":{\"98\":1,\"102\":1}}],[\"初步检索\",{\"0\":{\"85\":1}}],[\"动态生成的新实现代替本地实现\",{\"1\":{\"472\":1}}],[\"动态性\",{\"1\":{\"461\":1}}],[\"动态设置这些参数以提供最优的停顿时间和最高的吞吐量\",{\"1\":{\"378\":1}}],[\"动态\",{\"1\":{\"373\":1}}],[\"动态搜索文档\",{\"0\":{\"94\":1}}],[\"动作\",{\"1\":{\"85\":1}}],[\"添加一个字段\",{\"1\":{\"529\":1}}],[\"添加一个地理空间信息\",{\"1\":{\"519\":1,\"535\":1}}],[\"添加\",{\"1\":{\"471\":1}}],[\"添加依赖如下\",{\"1\":{\"471\":1}}],[\"添加被压制异常\",{\"1\":{\"444\":1}}],[\"添加用户功能\",{\"0\":{\"191\":1}}],[\"添加文档\",{\"1\":{\"93\":1}}],[\"添加新的字段映射\",{\"1\":{\"89\":1}}],[\"帖子创建时间\",{\"1\":{\"91\":1,\"93\":1}}],[\"帖子内容\",{\"1\":{\"91\":1,\"93\":1}}],[\"帖子标题\",{\"1\":{\"91\":1,\"93\":1}}],[\"帖子状态\",{\"1\":{\"91\":1,\"93\":1}}],[\"帖子id\",{\"1\":{\"91\":1,\"93\":1,\"116\":1}}],[\"`enabled`\",{\"1\":{\"179\":2}}],[\"`password`\",{\"1\":{\"179\":2}}],[\"`user\",{\"1\":{\"179\":1}}],[\"`username`\",{\"1\":{\"179\":3}}],[\"`user`\",{\"1\":{\"179\":3}}],[\"`id`\",{\"1\":{\"179\":1}}],[\"`security\",{\"1\":{\"179\":2}}],[\"`select\",{\"1\":{\"118\":1}}],[\"`ruby`\",{\"1\":{\"148\":1}}],[\"`\",{\"1\":{\"90\":3,\"91\":7}}],[\"`json\",{\"1\":{\"90\":1,\"91\":7}}],[\"硅谷\",{\"1\":{\"90\":1}}],[\"重启mysql服务\",{\"1\":{\"552\":1,\"559\":1,\"566\":1}}],[\"重启es\",{\"1\":{\"90\":1}}],[\"重复消费\",{\"1\":{\"484\":1}}],[\"重复关注\",{\"1\":{\"110\":1}}],[\"重写\",{\"1\":{\"461\":1}}],[\"重偏向会重置对象\",{\"1\":{\"299\":1}}],[\"重用作为\",{\"1\":{\"297\":1}}],[\"重置\",{\"1\":{\"289\":2}}],[\"重量级锁是\",{\"1\":{\"305\":1}}],[\"重量级锁\",{\"1\":{\"305\":1}}],[\"重量级锁会在\",{\"1\":{\"296\":1}}],[\"重量级\",{\"1\":{\"288\":1}}],[\"重新打包\",{\"1\":{\"568\":1}}],[\"重新执行\",{\"1\":{\"459\":1}}],[\"重新开始\",{\"1\":{\"380\":1}}],[\"重新标记阶段会stw\",{\"1\":{\"386\":1}}],[\"重新标记阶段\",{\"1\":{\"386\":1}}],[\"重新标记\",{\"1\":{\"379\":1}}],[\"重新竞争\",{\"1\":{\"278\":1}}],[\"重新计算分配规则\",{\"1\":{\"85\":1}}],[\"重定向到登录页面\",{\"1\":{\"165\":1}}],[\">新生代伊甸园垃圾回收\",{\"1\":{\"380\":1}}],[\">混合收集\",{\"1\":{\"380\":1}}],[\">内存不足\",{\"1\":{\"380\":1}}],[\">>>=\",{\"1\":{\"540\":1}}],[\">>\",{\"1\":{\"364\":3,\"365\":2}}],[\">user\",{\"1\":{\"267\":2}}],[\">log\",{\"1\":{\"160\":1}}],[\">=\",{\"1\":{\"143\":3}}],[\">words\",{\"1\":{\"90\":1}}],[\">http\",{\"1\":{\"90\":1}}],[\"><\",{\"1\":{\"90\":2,\"267\":5}}],[\">\",{\"1\":{\"90\":7,\"98\":1,\"102\":1,\"121\":1,\"160\":2,\"183\":3,\"190\":1,\"195\":1,\"196\":1,\"204\":10,\"205\":1,\"216\":1,\"219\":1,\"226\":1,\"229\":1,\"230\":2,\"231\":2,\"233\":1,\"260\":3,\"267\":9,\"289\":3,\"297\":2,\"298\":2,\"299\":2,\"300\":3,\"315\":3,\"316\":2,\"319\":1,\"364\":8,\"365\":7,\"373\":1,\"374\":1,\"375\":2,\"415\":6,\"420\":1,\"422\":1,\"423\":2,\"424\":1,\"438\":1,\"451\":1,\"452\":1,\"458\":1,\"460\":2,\"466\":1,\"471\":1,\"472\":1,\"474\":2,\"476\":2,\"478\":1,\"480\":1,\"526\":1,\"530\":1,\"531\":1,\"532\":1,\"535\":1,\"537\":1,\"554\":1,\"561\":3,\"635\":1}}],[\"<optional>true<\",{\"1\":{\"554\":1}}],[\"<parent>\",{\"1\":{\"554\":1,\"561\":1}}],[\"<properties>\",{\"1\":{\"90\":1}}],[\"<scope>provided<\",{\"1\":{\"471\":1,\"568\":1}}],[\"<s>\",{\"1\":{\"466\":1}}],[\"<span\",{\"1\":{\"267\":6}}],[\"<追加路径>\",{\"1\":{\"458\":2}}],[\"<new\",{\"1\":{\"458\":1}}],[\"<nil>\",{\"1\":{\"144\":1}}],[\"<cinit>\",{\"0\":{\"454\":1},\"1\":{\"454\":1}}],[\"<comment>ik\",{\"1\":{\"90\":1}}],[\"<init>\",{\"1\":{\"341\":2,\"350\":1,\"400\":1,\"406\":4,\"415\":1,\"416\":2,\"433\":1,\"435\":1,\"437\":1,\"438\":2}}],[\"<input\",{\"1\":{\"204\":3,\"267\":1}}],[\"<li\",{\"1\":{\"267\":1}}],[\"<ul>\",{\"1\":{\"267\":1}}],[\"<master\",{\"1\":{\"626\":1,\"636\":1}}],[\"<masterport>\",{\"1\":{\"625\":1,\"626\":1,\"635\":1,\"636\":1}}],[\"<masterip>\",{\"1\":{\"625\":1,\"626\":1,\"635\":1,\"636\":1}}],[\"<mapper\",{\"1\":{\"183\":1}}],[\"<meta\",{\"1\":{\"267\":1}}],[\"<form\",{\"1\":{\"204\":1,\"267\":1}}],[\"<dependencies>\",{\"1\":{\"554\":1,\"561\":1,\"581\":1,\"601\":1,\"612\":1,\"655\":1,\"666\":1}}],[\"<dependency>\",{\"1\":{\"180\":4,\"195\":1,\"207\":1,\"260\":3,\"471\":2,\"525\":1,\"526\":1,\"537\":3,\"554\":6,\"561\":4,\"568\":1,\"581\":1,\"601\":1,\"612\":1,\"655\":1,\"666\":1}}],[\"<div>\",{\"1\":{\"204\":2,\"267\":3}}],[\"<div\",{\"1\":{\"204\":1,\"267\":4}}],[\"<title>spring\",{\"1\":{\"267\":1}}],[\"<title>登录<\",{\"1\":{\"204\":1}}],[\"<title>hello\",{\"1\":{\"160\":1}}],[\"<exclusion>\",{\"1\":{\"180\":1,\"537\":2,\"561\":1}}],[\"<exclusions>\",{\"1\":{\"180\":1,\"537\":1,\"561\":1}}],[\"<entry\",{\"1\":{\"90\":4}}],[\"<version>1\",{\"1\":{\"554\":2}}],[\"<version>6\",{\"1\":{\"526\":1,\"537\":1}}],[\"<version>5\",{\"1\":{\"525\":1}}],[\"<version>$\",{\"1\":{\"471\":2}}],[\"<version>22\",{\"1\":{\"581\":1,\"601\":1,\"612\":1,\"655\":1,\"666\":1}}],[\"<version>2\",{\"1\":{\"207\":1,\"537\":1,\"554\":1,\"561\":2}}],[\"<version>4\",{\"1\":{\"195\":1}}],[\"<version>3\",{\"1\":{\"180\":2}}],[\"<version>8\",{\"1\":{\"180\":1}}],[\"<groupid>\",{\"1\":{\"561\":1}}],[\"<groupid>top\",{\"1\":{\"554\":1}}],[\"<groupid>io\",{\"1\":{\"526\":1,\"537\":2,\"561\":1}}],[\"<groupid>redis\",{\"1\":{\"525\":1,\"561\":1}}],[\"<groupid>org\",{\"1\":{\"180\":3,\"260\":3,\"471\":2,\"537\":3,\"554\":5,\"561\":3}}],[\"<groupid>com\",{\"1\":{\"180\":1,\"195\":1,\"207\":1,\"554\":1,\"568\":1,\"581\":1,\"601\":1,\"612\":1,\"655\":1,\"666\":1}}],[\"<groupid>mysql<\",{\"1\":{\"180\":1}}],[\"<artifactid>guava<\",{\"1\":{\"581\":1,\"601\":1,\"612\":1,\"655\":1,\"666\":1}}],[\"<artifactid>druid<\",{\"1\":{\"568\":1}}],[\"<artifactid>rocketmq\",{\"1\":{\"561\":1}}],[\"<artifactid>fastjson<\",{\"1\":{\"554\":1}}],[\"<artifactid>fastjson2<\",{\"1\":{\"207\":1}}],[\"<artifactid>canal\",{\"1\":{\"554\":1}}],[\"<artifactid>lettuce\",{\"1\":{\"526\":1,\"537\":2,\"561\":1}}],[\"<artifactid>lombok<\",{\"1\":{\"180\":1,\"554\":1}}],[\"<artifactid>jedis<\",{\"1\":{\"525\":1,\"561\":1}}],[\"<artifactid>jmh\",{\"1\":{\"471\":2}}],[\"<artifactid>spring\",{\"1\":{\"260\":3,\"537\":3,\"554\":4,\"561\":3}}],[\"<artifactid>knife4j\",{\"1\":{\"195\":1}}],[\"<artifactid>mybatis\",{\"1\":{\"180\":3}}],[\"<artifactid>mysql\",{\"1\":{\"180\":1}}],[\"<a\",{\"1\":{\"160\":1}}],[\"<body>\",{\"1\":{\"160\":1,\"204\":1,\"267\":1}}],[\"<h1>oauth\",{\"1\":{\"267\":1}}],[\"<h1>登录<\",{\"1\":{\"204\":1}}],[\"<h1>hello\",{\"1\":{\"160\":1}}],[\"<head>\",{\"1\":{\"160\":1,\"204\":1,\"267\":1}}],[\"<html\",{\"1\":{\"160\":1,\"204\":1,\"267\":1}}],[\"<=\",{\"1\":{\"143\":2,\"537\":1,\"644\":2}}],[\"<\",{\"1\":{\"90\":8,\"140\":1,\"160\":5,\"180\":6,\"183\":3,\"195\":2,\"204\":12,\"207\":1,\"260\":6,\"267\":16,\"289\":5,\"299\":2,\"300\":3,\"338\":1,\"345\":1,\"364\":3,\"365\":2,\"412\":1,\"413\":3,\"414\":1,\"415\":6,\"438\":1,\"440\":1,\"469\":4,\"470\":2,\"471\":10,\"474\":2,\"476\":2,\"525\":1,\"526\":2,\"537\":6,\"554\":9,\"561\":9,\"568\":1,\"581\":4,\"601\":4,\"612\":4,\"655\":4,\"666\":4}}],[\"乱码先不用管\",{\"1\":{\"90\":1}}],[\"都要使用客户端\",{\"1\":{\"523\":1}}],[\"都需要加载\",{\"1\":{\"463\":1}}],[\"都拥有一个独立的类名称空间\",{\"1\":{\"457\":1}}],[\"都必须由加载它的类加载器和这个类本身一起共同确立其在\",{\"1\":{\"457\":1}}],[\"都是会出现问题\",{\"1\":{\"590\":1}}],[\"都是\",{\"1\":{\"529\":1}}],[\"都是继承\",{\"1\":{\"424\":1}}],[\"都是强引用\",{\"1\":{\"364\":1}}],[\"都是先创建其客户端\",{\"1\":{\"125\":1}}],[\"都有可能造成栈内存溢出\",{\"1\":{\"327\":1}}],[\"都会导致缓存的不一致问题\",{\"1\":{\"592\":1}}],[\"都会按\",{\"1\":{\"412\":1}}],[\"都会回收弱引用对象\",{\"1\":{\"361\":1}}],[\"都会返回串池中的字符串对象\",{\"1\":{\"341\":1,\"343\":1}}],[\"都会被加载到运行时常量池中\",{\"1\":{\"341\":1}}],[\"都会变为不可偏向的\",{\"1\":{\"300\":1}}],[\"都会保存在自己的邮箱中\",{\"1\":{\"115\":1,\"533\":1}}],[\"都将立即反映到主内存中\",{\"1\":{\"284\":1}}],[\"都在html文件夹下查找\",{\"1\":{\"90\":1}}],[\"都可以找到\",{\"1\":{\"423\":1}}],[\"都可以\",{\"1\":{\"85\":1}}],[\"访问http\",{\"1\":{\"560\":1}}],[\"访问控制\",{\"1\":{\"545\":1,\"548\":1}}],[\"访问类的\",{\"1\":{\"455\":1}}],[\"访问标识与继承信息\",{\"0\":{\"401\":1}}],[\"访问到了即可\",{\"1\":{\"90\":1}}],[\"访问\",{\"1\":{\"90\":1}}],[\"尚硅谷不错\",{\"1\":{\"90\":1}}],[\"尚硅谷\",{\"1\":{\"90\":2}}],[\"给mysql服务指定一个唯一的id\",{\"1\":{\"552\":1,\"559\":1,\"566\":1}}],[\"给blog类中添加一个islike字段\",{\"1\":{\"529\":1}}],[\"给出了\",{\"1\":{\"434\":1}}],[\"给对象分配堆内存\",{\"1\":{\"416\":1}}],[\"给对象上锁\",{\"1\":{\"288\":1}}],[\"给用户带来更好的体验等场景下\",{\"1\":{\"379\":1}}],[\"给用户授予角色和权限\",{\"0\":{\"238\":1}}],[\"给堆内存腾出相应的空间\",{\"1\":{\"367\":1}}],[\"给\",{\"1\":{\"90\":1,\"373\":1}}],[\"$values\",{\"1\":{\"443\":3}}],[\"$map\",{\"1\":{\"442\":2}}],[\"$\",{\"1\":{\"204\":1,\"267\":5}}],[\"$2a$10$grldnijsqmuvl\",{\"1\":{\"179\":3,\"201\":1}}],[\"$containerid\",{\"1\":{\"90\":1}}],[\"$$\",{\"1\":{\"18\":2}}],[\"移动到\",{\"1\":{\"90\":1}}],[\"先更新数据库\",{\"0\":{\"590\":1}}],[\"先删除缓存\",{\"0\":{\"589\":1}}],[\"先查询缓存\",{\"1\":{\"572\":1}}],[\"先查询一下是否已关注\",{\"1\":{\"110\":1}}],[\"先来看一个现象\",{\"1\":{\"478\":1}}],[\"先看\",{\"1\":{\"464\":1}}],[\"先不看别的\",{\"1\":{\"463\":1}}],[\"先让拓展类加载器调用\",{\"1\":{\"460\":1}}],[\"先加载父类\",{\"1\":{\"448\":1}}],[\"先通过栈帧中的对象引用找到对象\",{\"1\":{\"425\":1}}],[\"先通过栈帧中对象的引用找到对象\",{\"1\":{\"417\":1}}],[\"先执行\",{\"1\":{\"411\":1}}],[\"先尝试不做调优\",{\"1\":{\"395\":1}}],[\"先采用标记算法确定可回收对象\",{\"1\":{\"367\":1,\"368\":1}}],[\"先下个单\",{\"1\":{\"282\":1}}],[\"先unpark后park\",{\"0\":{\"282\":1}}],[\"先park\",{\"0\":{\"281\":1}}],[\"先创建reader对象\",{\"1\":{\"151\":1}}],[\"先创建new\",{\"1\":{\"89\":1}}],[\"先定义错误提示\",{\"1\":{\"105\":1}}],[\"先安装nginx\",{\"1\":{\"90\":1}}],[\"国人\",{\"1\":{\"90\":1}}],[\"我现在有一个博客详情页\",{\"1\":{\"576\":1,\"596\":1,\"607\":1,\"650\":1,\"661\":1}}],[\"我举个蘑菇博客中的案例来说\",{\"1\":{\"576\":1,\"596\":1,\"607\":1,\"650\":1,\"661\":1}}],[\"我的做法是这样的\",{\"1\":{\"568\":1}}],[\"我的端口是3307\",{\"1\":{\"553\":2,\"560\":2,\"567\":2}}],[\"我这里以rocketmq为例\",{\"1\":{\"560\":1}}],[\"我这里以tcp为例\",{\"1\":{\"553\":1}}],[\"我这里使用了\",{\"1\":{\"554\":1}}],[\"我这里指定了需要同步的数据库为canaldb\",{\"1\":{\"552\":1,\"559\":1,\"566\":1}}],[\"我使用的是canal\",{\"1\":{\"553\":1,\"560\":1,\"567\":1,\"568\":1}}],[\"我以mysql\",{\"1\":{\"552\":1,\"559\":1,\"566\":1}}],[\"我最后判断你是否签到\",{\"1\":{\"538\":1}}],[\"我是\",{\"1\":{\"417\":1}}],[\"我是不是偏向错了呢\",{\"1\":{\"299\":1}}],[\"我是中国人\",{\"1\":{\"90\":2}}],[\"我\",{\"1\":{\"90\":2}}],[\"我们能放入缓存的数据本就不应该是实时性\",{\"1\":{\"592\":1}}],[\"我们计算一下误判率\",{\"1\":{\"582\":1,\"602\":1,\"613\":1,\"656\":1,\"667\":1}}],[\"我们输出结果\",{\"1\":{\"582\":1,\"602\":1,\"613\":1,\"656\":1,\"667\":1}}],[\"我们首先向布隆过滤器中插入\",{\"1\":{\"582\":1,\"602\":1,\"613\":1,\"656\":1,\"667\":1}}],[\"我们创建了一个布隆过滤器\",{\"1\":{\"582\":1,\"602\":1,\"613\":1,\"656\":1,\"667\":1}}],[\"我们认为n3不在集合\",{\"1\":{\"580\":1,\"600\":1,\"611\":1,\"654\":1,\"665\":1}}],[\"我们认为\",{\"1\":{\"580\":1,\"600\":1,\"611\":1,\"654\":1,\"665\":1}}],[\"我们再次进行计算\",{\"1\":{\"580\":1,\"600\":1,\"611\":1,\"654\":1,\"665\":1}}],[\"我们通过计算\",{\"1\":{\"580\":1,\"600\":1,\"611\":1,\"654\":1,\"665\":1}}],[\"我们通过接口文档发现\",{\"1\":{\"539\":1}}],[\"我们生成一个10位的bit数组\",{\"1\":{\"580\":1,\"600\":1,\"611\":1,\"654\":1,\"665\":1}}],[\"我们让该key缓存一个\",{\"1\":{\"577\":1,\"597\":1,\"608\":1,\"651\":1,\"662\":1}}],[\"我们称为缓存击穿\",{\"1\":{\"572\":1}}],[\"我们称之为发布消息\",{\"1\":{\"484\":1}}],[\"我们没有将这次查询的null写入\",{\"1\":{\"572\":1}}],[\"我们配置的是es6\",{\"1\":{\"568\":1}}],[\"我们会发生他的误差是在允许范围内\",{\"1\":{\"542\":1}}],[\"我们会发现得分都是0\",{\"1\":{\"88\":1}}],[\"我们直接利用单元测试\",{\"1\":{\"542\":1}}],[\"我们直接去判断list中是否包含当前的要查询的数据\",{\"1\":{\"541\":1}}],[\"我们就可以通过canal去自动同步数据库的binlog数据日志文件\",{\"1\":{\"558\":1,\"565\":1}}],[\"我们就可以拿到数据往redis同步了\",{\"1\":{\"554\":1}}],[\"我们就能完成逐个遍历的效果了\",{\"1\":{\"540\":1}}],[\"我们就称之为订阅消息\",{\"1\":{\"484\":1}}],[\"我们把签到结果和1进行与操作\",{\"1\":{\"540\":1}}],[\"我们把x和y轴传入到redis做的经纬度位置去\",{\"1\":{\"536\":1}}],[\"我们只需要让得到的10进制数字和1做与运算就可以了\",{\"1\":{\"540\":1}}],[\"我们按月来统计用户签到信息\",{\"1\":{\"538\":1}}],[\"我们如何能够简化一点呢\",{\"1\":{\"538\":1}}],[\"我们针对签到功能完全可以通过mysql来完成\",{\"1\":{\"538\":1}}],[\"我们要做的事情是\",{\"1\":{\"536\":1}}],[\"我们要分析出查询出数据的最小时间戳\",{\"1\":{\"115\":1,\"535\":1}}],[\"我们此处是写死的\",{\"1\":{\"536\":1}}],[\"我们此时关注的是距离\",{\"1\":{\"536\":1}}],[\"我们先来改造当前的关注列表\",{\"1\":{\"532\":1}}],[\"我们的效果达到了\",{\"1\":{\"561\":1}}],[\"我们的重点在于共同关注功能\",{\"1\":{\"532\":1}}],[\"我们的请求参数中就需要携带\",{\"1\":{\"115\":1,\"535\":1}}],[\"我们接下来来对比一下这些集合的区别是什么\",{\"1\":{\"530\":1}}],[\"我们现在的逻辑\",{\"1\":{\"529\":1}}],[\"我们管这个数据的分类称之为主题\",{\"1\":{\"484\":1}}],[\"我们可以将数据库的数据\",{\"1\":{\"541\":1}}],[\"我们可以把list数据抽象成一个非常大的bitmap\",{\"1\":{\"541\":1}}],[\"我们可以把年和月作为bitmap的key\",{\"1\":{\"539\":1}}],[\"我们可以把两人的关注的人分别放入到一个set集合中\",{\"1\":{\"532\":1}}],[\"我们可以采用类似这样的方案来实现我们的签到需求\",{\"1\":{\"538\":1}}],[\"我们可以这样理解\",{\"1\":{\"476\":1}}],[\"我们可也传递其他的参数以改变查询结果\",{\"1\":{\"88\":1}}],[\"我们则可以将其编译成机器码\",{\"1\":{\"469\":1}}],[\"我们无需耗费时间将其编译成机器码\",{\"1\":{\"469\":1}}],[\"我们在使用\",{\"1\":{\"463\":1}}],[\"我们都知道\",{\"1\":{\"445\":1}}],[\"我们建议将\",{\"1\":{\"198\":1}}],[\"我们也可以将用户名\",{\"1\":{\"174\":1}}],[\"我们也可以说\",{\"1\":{\"56\":1}}],[\"我们不应该过度设计\",{\"1\":{\"592\":1}}],[\"我们不用去关心如何生成的\",{\"1\":{\"580\":1,\"600\":1,\"611\":1,\"654\":1,\"665\":1}}],[\"我们不再使用list\",{\"1\":{\"541\":1}}],[\"我们不可以再次对于相同名称的变量使用初始化声明\",{\"1\":{\"136\":1}}],[\"我们不能更新\",{\"1\":{\"89\":1}}],[\"我们需要首先引入依赖\",{\"1\":{\"581\":1,\"601\":1,\"612\":1,\"655\":1,\"666\":1}}],[\"我们需要做的操作就是\",{\"1\":{\"580\":1,\"600\":1,\"611\":1,\"654\":1,\"665\":1}}],[\"我们需要判断n3是否在集合\",{\"1\":{\"580\":1,\"600\":1,\"611\":1,\"654\":1,\"665\":1}}],[\"我们需要综合考虑很多因素\",{\"1\":{\"541\":1}}],[\"我们需要应用程序更加灵活\",{\"1\":{\"176\":1}}],[\"我们需要找到与上一次查询相同的查询个数作为偏移量\",{\"1\":{\"115\":1,\"535\":1}}],[\"我们需要记录每次操作的最后一条\",{\"1\":{\"115\":1,\"534\":1}}],[\"我们这个地方可以采用sortedset来做\",{\"1\":{\"115\":1,\"534\":1}}],[\"我们从t1时刻开始\",{\"1\":{\"115\":1,\"534\":1}}],[\"我们来读取第二页\",{\"1\":{\"115\":1,\"534\":1}}],[\"我们去读取第一页\",{\"1\":{\"115\":1,\"534\":1}}],[\"我们本次针对好友的操作\",{\"1\":{\"115\":1,\"533\":1}}],[\"我们是需要用户去通过搜索引擎或者是其他的方式去解锁想要看的内容\",{\"1\":{\"115\":1,\"533\":1}}],[\"我们已经将elasticsearch容器的\",{\"1\":{\"90\":1}}],[\"我们post一个json风格的查询请求体到\",{\"1\":{\"87\":1}}],[\"我们变为post也是一样的\",{\"1\":{\"87\":1}}],[\"我们一般都用来做修改操作\",{\"1\":{\"85\":1}}],[\"我们故意把后\",{\"1\":{\"59\":1}}],[\"我们有一种简单的解决方法就是\",{\"1\":{\"577\":1,\"597\":1,\"608\":1,\"651\":1,\"662\":1}}],[\"我们有\",{\"1\":{\"56\":1}}],[\"测试某元素是否存在于百万元素集合中\",{\"1\":{\"581\":1,\"601\":1,\"612\":1,\"655\":1,\"666\":1}}],[\"测试思路\",{\"1\":{\"542\":1}}],[\"测试百万数据的统计\",{\"0\":{\"542\":1}}],[\"测试结果如下\",{\"1\":{\"471\":2}}],[\"测试\",{\"1\":{\"176\":1,\"185\":1,\"189\":1}}],[\"测试分词器\",{\"1\":{\"90\":1}}],[\"测试数据地址https\",{\"1\":{\"85\":1}}],[\"结合哨兵系统或集群模式\",{\"1\":{\"622\":1}}],[\"结合使用\",{\"1\":{\"277\":1}}],[\"结构中有\",{\"1\":{\"425\":1}}],[\"结构体对象\",{\"1\":{\"93\":1}}],[\"结束\",{\"1\":{\"90\":1,\"537\":1,\"540\":1}}],[\"结果存储\",{\"1\":{\"545\":1,\"548\":1}}],[\"结果永远是旧值\",{\"1\":{\"478\":1}}],[\"结果是\",{\"1\":{\"474\":1}}],[\"结果中第二行\",{\"1\":{\"422\":1}}],[\"结果为\",{\"1\":{\"414\":1}}],[\"结果为false\",{\"1\":{\"341\":1}}],[\"结果在压入操作数栈中\",{\"1\":{\"410\":1}}],[\"结果已在编译期确定为ab\",{\"1\":{\"341\":1}}],[\"结果\",{\"1\":{\"333\":1,\"445\":1,\"537\":1}}],[\"结果过滤\",{\"1\":{\"88\":1}}],[\"结果的排序key\",{\"1\":{\"87\":1}}],[\"单个hll的内存永远小于16kb\",{\"1\":{\"541\":1}}],[\"单个的\",{\"1\":{\"441\":1}}],[\"单个变量操作\",{\"0\":{\"309\":1}}],[\"单次暂停时间特别长\",{\"1\":{\"396\":1}}],[\"单线程收集器\",{\"1\":{\"377\":2}}],[\"单线程\",{\"1\":{\"377\":2,\"379\":1}}],[\"单点登录\",{\"1\":{\"250\":1}}],[\"单块应用安全\",{\"0\":{\"248\":1}}],[\"单纯地给\",{\"1\":{\"136\":1}}],[\"单词\",{\"1\":{\"90\":1}}],[\"单位是32个位字\",{\"1\":{\"57\":1}}],[\"词条\",{\"1\":{\"90\":2}}],[\"词元\",{\"1\":{\"90\":1}}],[\"还需要命令其他从节点去复制新的主节点\",{\"1\":{\"620\":1}}],[\"还可能会出现问题\",{\"1\":{\"591\":1}}],[\"还支持kafka和rocketmq\",{\"1\":{\"553\":1}}],[\"还能够进行常量折叠\",{\"1\":{\"470\":1}}],[\"还用到了\",{\"1\":{\"441\":1}}],[\"还要额外做一个类型转换的操作\",{\"1\":{\"437\":1}}],[\"还未处理的\",{\"1\":{\"386\":1}}],[\"还是会出现问题\",{\"1\":{\"591\":1}}],[\"还是会执行finally\",{\"1\":{\"431\":1}}],[\"还是1\",{\"1\":{\"541\":1}}],[\"还是\",{\"1\":{\"411\":1}}],[\"还是并发地进行清理\",{\"1\":{\"384\":1}}],[\"还是从6后一点的5去拿\",{\"1\":{\"115\":1,\"534\":1}}],[\"还有一个执行\",{\"1\":{\"416\":1}}],[\"还有一个值得关注的点是\",{\"1\":{\"378\":1}}],[\"还有其他的idea插件可以直接查看\",{\"1\":{\"403\":1}}],[\"还有很多网站登录时\",{\"1\":{\"245\":1}}],[\"还会回收幸存区中的垃圾\",{\"1\":{\"371\":1}}],[\"还没有成为java字符串\",{\"1\":{\"341\":1}}],[\"还负责记录各个terms\",{\"1\":{\"90\":1}}],[\"还不会编写\",{\"1\":{\"10\":1}}],[\"它支持的是组件有\",{\"1\":{\"558\":1}}],[\"它支持多种类型的数据结构\",{\"1\":{\"511\":1,\"512\":1}}],[\"它允许用户在同一个二进制位序列中存储多个整数和位字段\",{\"1\":{\"521\":1}}],[\"它允许通过securityfilterchain将过滤器的工作委托给多个bean\",{\"1\":{\"169\":1}}],[\"它保证的是在多个线程之间\",{\"1\":{\"481\":1}}],[\"它可以用来修饰成员变量和静态成员变量\",{\"1\":{\"480\":1}}],[\"它可以被认为是一种惯用的方式来写多个if\",{\"1\":{\"142\":1}}],[\"它发现门被锁住了\",{\"1\":{\"476\":1}}],[\"它定义了主存\",{\"1\":{\"472\":1}}],[\"它内部又是由\",{\"1\":{\"466\":1}}],[\"它就是大名鼎鼎的\",{\"1\":{\"464\":1}}],[\"它首先也不会自己去尝试加载这个类\",{\"1\":{\"460\":1}}],[\"它首先不会自己去尝试加载这个类\",{\"1\":{\"460\":1}}],[\"它首先匹配securityfilterchain0的模式\",{\"1\":{\"171\":1}}],[\"它在类加载的链接阶段就已经根据方法的重写规则生成好了\",{\"1\":{\"417\":1,\"425\":1}}],[\"它所占据的内存资源会全部被释放掉\",{\"1\":{\"375\":1}}],[\"它存储每个类的结构\",{\"1\":{\"336\":1}}],[\"它没有参数\",{\"1\":{\"319\":1}}],[\"它比synchronized关键字和reentrantlock提供了更多的灵活性\",{\"1\":{\"314\":1}}],[\"它按照线程请求资源的顺序来分配许可\",{\"1\":{\"313\":1}}],[\"它提供了一种简洁而强大的方式来处理异步操作\",{\"1\":{\"318\":1}}],[\"它提供了一种更为复杂的方式来控制同时访问某些资源的线程数量\",{\"1\":{\"311\":1}}],[\"它提供了一种队列同步器的实现方式\",{\"1\":{\"310\":1}}],[\"它们的转换可以在编译期自动完成\",{\"1\":{\"436\":1}}],[\"它们也要求开发者更仔细地管理线程的生命周期和状态\",{\"1\":{\"319\":1}}],[\"它们利用底层硬件的原子指令来保证操作的原子性\",{\"1\":{\"283\":1}}],[\"它们是\",{\"1\":{\"283\":1}}],[\"它们之间的关系如下\",{\"1\":{\"222\":1}}],[\"它是一种\",{\"1\":{\"351\":1}}],[\"它是如何实现回收的呢\",{\"1\":{\"350\":1}}],[\"它是线程共享的\",{\"1\":{\"332\":1}}],[\"它是线程安全的\",{\"1\":{\"326\":1}}],[\"它是在spring\",{\"1\":{\"259\":1}}],[\"它是浏览器的保护机制\",{\"1\":{\"220\":1}}],[\"它适用于那些有后端的\",{\"1\":{\"252\":1}}],[\"它需要访问用户的受保护资源\",{\"1\":{\"242\":1}}],[\"它通常是一个表示用户的实体对象\",{\"1\":{\"222\":1}}],[\"它包含了用户的principal\",{\"1\":{\"222\":1}}],[\"它应该在您的系统上调整为大约1秒来验证一个密码\",{\"1\":{\"199\":3}}],[\"它会匹配true\",{\"1\":{\"142\":1}}],[\"它会将文本\",{\"1\":{\"90\":1}}],[\"它计算表达式并将其与可能匹配的列表进行比较\",{\"1\":{\"142\":1}}],[\"它的镜像类就是\",{\"1\":{\"448\":1}}],[\"它的重要\",{\"1\":{\"448\":1}}],[\"它的常量池信息就会放入运行时常量池\",{\"1\":{\"340\":1}}],[\"它的底层原理是传统的servlet过滤器\",{\"1\":{\"166\":1}}],[\"它的语法是\",{\"1\":{\"141\":1}}],[\"它的值都会自动加\",{\"1\":{\"139\":1}}],[\"它将处于锁定状态\",{\"1\":{\"476\":1}}],[\"它将用户的权限分配和管理与角色相关联\",{\"1\":{\"235\":1}}],[\"它将提供每个动作的状态\",{\"1\":{\"85\":1}}],[\"它将继续处理它后面剩余的动作\",{\"1\":{\"85\":1}}],[\"全量复制\",{\"1\":{\"621\":1}}],[\"全称page\",{\"1\":{\"541\":1}}],[\"全称unique\",{\"1\":{\"541\":1}}],[\"全局顺序\",{\"1\":{\"484\":1}}],[\"全局变量请使用var\",{\"1\":{\"134\":1}}],[\"全部迁移到指定位置即可\",{\"1\":{\"89\":1}}],[\"全文检索字段用\",{\"1\":{\"88\":1}}],[\"全文检索\",{\"1\":{\"88\":3,\"89\":1}}],[\"xbootclasspath\",{\"1\":{\"458\":5}}],[\"xc\",{\"1\":{\"397\":1}}],[\"x3==x4\",{\"1\":{\"343\":1}}],[\"x3=\",{\"1\":{\"343\":1}}],[\"x4\",{\"1\":{\"343\":1}}],[\"x4=new\",{\"1\":{\"343\":1}}],[\"x2\",{\"1\":{\"343\":1}}],[\"x2=new\",{\"1\":{\"343\":1}}],[\"x1==x2\",{\"1\":{\"343\":1}}],[\"x1=\",{\"1\":{\"343\":1}}],[\"xpp\",{\"1\":{\"333\":1,\"338\":1,\"343\":1}}],[\"xms20m\",{\"1\":{\"373\":1,\"374\":1,\"375\":1}}],[\"xms堆最大大小\",{\"1\":{\"373\":1}}],[\"xmn10m\",{\"1\":{\"373\":1,\"374\":1,\"375\":1}}],[\"xmn\",{\"1\":{\"373\":1,\"378\":1}}],[\"xmx\",{\"1\":{\"373\":1}}],[\"xmx20m\",{\"1\":{\"364\":2,\"373\":1,\"374\":1,\"375\":1}}],[\"xmx10m\",{\"1\":{\"345\":2}}],[\"xmx8m\",{\"1\":{\"333\":1}}],[\"xml中druid增加scope如下\",{\"1\":{\"568\":1}}],[\"xmlns=\",{\"1\":{\"267\":1}}],[\"xmlns\",{\"1\":{\"160\":1,\"204\":1,\"267\":2}}],[\"xml\",{\"1\":{\"90\":2,\"183\":3,\"526\":1}}],[\"xss256k\",{\"1\":{\"327\":1}}],[\"x++\",{\"1\":{\"303\":2,\"414\":1}}],[\"xxx\",{\"1\":{\"339\":1,\"383\":1}}],[\"xx\",{\"1\":{\"296\":1,\"303\":1,\"338\":3,\"345\":4,\"346\":1,\"351\":2,\"364\":1,\"373\":11,\"374\":3,\"375\":3,\"377\":2,\"378\":11,\"379\":6,\"380\":3,\"382\":1,\"383\":1,\"387\":1,\"388\":1,\"389\":2,\"390\":1,\"394\":2,\"395\":1,\"417\":2,\"469\":1,\"470\":4}}],[\"xhtml\",{\"1\":{\"267\":1}}],[\"xiaoymin<\",{\"1\":{\"195\":1}}],[\"x的数值\",{\"1\":{\"150\":1}}],[\"x\",{\"1\":{\"89\":2,\"136\":5,\"138\":1,\"143\":7,\"144\":9,\"148\":4,\"150\":6,\"264\":1,\"303\":1,\"341\":3,\"350\":2,\"414\":5,\"436\":6,\"437\":6,\"440\":2,\"441\":5,\"442\":3,\"446\":8,\"466\":3,\"470\":3,\"471\":4,\"480\":2,\"537\":7}}],[\"xlh\",{\"1\":{\"85\":1}}],[\"两项\",{\"1\":{\"400\":3}}],[\"两个线程一个\",{\"1\":{\"481\":1}}],[\"两个线程对初始值为\",{\"1\":{\"474\":1}}],[\"两个区域之间是\",{\"1\":{\"380\":1}}],[\"两个对象的计数都为1\",{\"0\":{\"354\":1}}],[\"两个不同type下的两个user\",{\"1\":{\"89\":1}}],[\"两用户求交集\",{\"0\":{\"109\":1},\"1\":{\"109\":1}}],[\"两行一组\",{\"1\":{\"85\":1}}],[\"关于使用bitmap来解决缓存穿透的方案\",{\"0\":{\"541\":1}}],[\"关于这些扩展\",{\"1\":{\"13\":1}}],[\"关闭逃逸分析\",{\"1\":{\"469\":1}}],[\"关闭csrf攻击防御\",{\"0\":{\"196\":1},\"1\":{\"196\":2}}],[\"关联的是应用程序类加载器\",{\"1\":{\"464\":1}}],[\"关联了引用队列\",{\"1\":{\"364\":1}}],[\"关联流程\",{\"0\":{\"289\":1}}],[\"关系\",{\"1\":{\"283\":1}}],[\"关系型数据库中两个数据表示是独立的\",{\"1\":{\"89\":1}}],[\"关键字\",{\"1\":{\"277\":2,\"283\":1}}],[\"关键字或\",{\"1\":{\"277\":1}}],[\"关注service\",{\"1\":{\"531\":1}}],[\"关注是user之间的关系\",{\"1\":{\"531\":1}}],[\"关注和取关接口\",{\"1\":{\"531\":1}}],[\"关注和取消关注\",{\"0\":{\"531\":1}}],[\"关注吞吐量新生代采用标记\",{\"1\":{\"376\":1}}],[\"关注推送\",{\"2\":{\"124\":1}}],[\"关注推送也叫做feed流\",{\"1\":{\"115\":1,\"533\":1}}],[\"关注的方法\",{\"1\":{\"106\":1}}],[\"关注\",{\"0\":{\"106\":1,\"110\":1},\"1\":{\"106\":1,\"110\":1,\"115\":1,\"531\":2,\"532\":1,\"535\":1}}],[\"哪个表\",{\"1\":{\"560\":1}}],[\"哪个字段\",{\"1\":{\"88\":1}}],[\"哪怕你单独去提取这个主键\",{\"1\":{\"541\":1}}],[\"哪假如说返回一个数字8\",{\"1\":{\"540\":1}}],[\"哪些是1呢\",{\"1\":{\"540\":1}}],[\"哪些属性包含数字\",{\"1\":{\"89\":1}}],[\"哪些字符串属性应该被看做全文本属性\",{\"1\":{\"89\":1}}],[\"映射到宿主机的\",{\"1\":{\"90\":1}}],[\"映射\",{\"1\":{\"89\":1}}],[\"⽤于全⽂索引\",{\"1\":{\"89\":1}}],[\"男女\",{\"1\":{\"88\":1}}],[\"男性的平均\",{\"1\":{\"88\":1}}],[\"复\",{\"1\":{\"619\":1}}],[\"复制超时时间\",{\"1\":{\"631\":1,\"641\":1}}],[\"复制策略以及监控机制\",{\"1\":{\"623\":1}}],[\"复制积压缓冲区自动释放前等待的秒数\",{\"1\":{\"632\":1,\"643\":1}}],[\"复制积压缓冲区\",{\"0\":{\"632\":1,\"643\":1},\"1\":{\"621\":1}}],[\"复制一份\",{\"1\":{\"433\":1}}],[\"复制一份栈顶\",{\"1\":{\"433\":1}}],[\"复制算法\",{\"1\":{\"379\":1}}],[\"复制算法服务端应用\",{\"1\":{\"376\":1}}],[\"复制算法jdk1\",{\"1\":{\"376\":1}}],[\"复制算法的多线程收集器\",{\"1\":{\"376\":1}}],[\"复制算法运行在\",{\"1\":{\"376\":2}}],[\"复制\",{\"0\":{\"369\":1},\"1\":{\"380\":1,\"635\":1}}],[\"复制到\",{\"1\":{\"349\":1,\"371\":1}}],[\"复杂的业务中不可能只有一个过滤器\",{\"1\":{\"169\":1}}],[\"复杂子聚合\",{\"1\":{\"88\":1}}],[\"复合语句之间可以互相嵌套\",{\"1\":{\"88\":1}}],[\"复合语句可以合并\",{\"1\":{\"88\":1}}],[\"写写的时候按顺序排好队\",{\"1\":{\"592\":1}}],[\"写屏障的指令会被执行\",{\"1\":{\"386\":1}}],[\"写操作\",{\"1\":{\"591\":1}}],[\"写操作之前执行\",{\"1\":{\"286\":1}}],[\"写操作在该屏障之后的所有读\",{\"1\":{\"286\":1}}],[\"写共享变量的副本\",{\"1\":{\"283\":1}}],[\"写入缓存\",{\"1\":{\"591\":1}}],[\"写入redis\",{\"1\":{\"536\":1,\"539\":1}}],[\"写入cache\",{\"1\":{\"165\":1}}],[\"写入x\",{\"1\":{\"165\":2}}],[\"写入strict\",{\"1\":{\"165\":1}}],[\"写入\",{\"1\":{\"90\":1}}],[\"写到一个聚合里是基于上个聚合进行子聚合\",{\"1\":{\"88\":1}}],[\"写作日期为\",{\"1\":{\"27\":1,\"675\":1}}],[\"看看内存占用和统计效果如何\",{\"1\":{\"542\":1}}],[\"看看\",{\"1\":{\"463\":1}}],[\"看是否被启动类加载器加载过\",{\"1\":{\"460\":1}}],[\"看是否被它的上级加载器加载过了\",{\"1\":{\"460\":1}}],[\"看到如下界面\",{\"1\":{\"423\":1}}],[\"看到该客户端有api\",{\"1\":{\"90\":1}}],[\"看一下几种不同的方法调用对应的字节码指令\",{\"1\":{\"416\":1}}],[\"看能否沿着gcroot对象为起点的引用链找到该对象\",{\"1\":{\"355\":1}}],[\"看gender分布\",{\"1\":{\"88\":1}}],[\"看age分布\",{\"1\":{\"88\":1}}],[\"看age值的平均\",{\"1\":{\"88\":1}}],[\"看分布\",{\"1\":{\"88\":1}}],[\"看balance的平均\",{\"1\":{\"88\":1}}],[\"看值的可能性分布\",{\"1\":{\"88\":1}}],[\"搜索content中包含的文档\",{\"1\":{\"94\":1}}],[\"搜索时需要匹配完整的值\",{\"1\":{\"89\":1}}],[\"搜索时会自动使用分词器进⾏分词再匹配\",{\"1\":{\"89\":1}}],[\"搜索\",{\"1\":{\"88\":1}}],[\"例\",{\"1\":{\"88\":3}}],[\"例如在$java\",{\"1\":{\"460\":1}}],[\"例如对于\",{\"1\":{\"474\":1}}],[\"例如对\",{\"1\":{\"448\":1}}],[\"例如运行时常量池\",{\"1\":{\"336\":1}}],[\"例如云冲印服务的实现\",{\"1\":{\"246\":1}}],[\"例如张三的权限是添加用户\",{\"1\":{\"226\":1}}],[\"例如密码\",{\"1\":{\"222\":1}}],[\"例如用户名\",{\"1\":{\"222\":1,\"235\":1}}],[\"例如md5\",{\"1\":{\"198\":1}}],[\"例如下面这个例子当中的变量\",{\"1\":{\"136\":1}}],[\"例如朋友圈\",{\"1\":{\"115\":1,\"533\":1}}],[\"例如\",{\"1\":{\"55\":1,\"56\":2,\"57\":1,\"90\":1,\"134\":1,\"136\":2,\"142\":1,\"163\":1,\"226\":1,\"271\":1,\"285\":1,\"286\":1,\"303\":1,\"376\":1,\"387\":1,\"413\":1,\"439\":1,\"441\":2,\"444\":2,\"469\":1}}],[\"有请求读到缓存\",{\"1\":{\"588\":1}}],[\"有小于0\",{\"1\":{\"541\":1}}],[\"有用户有时间我们就可以组织出对应的key\",{\"1\":{\"540\":1}}],[\"有交集并集补集的api\",{\"1\":{\"532\":1}}],[\"有strings\",{\"1\":{\"512\":1}}],[\"有序集合等\",{\"1\":{\"511\":1,\"512\":1}}],[\"有序性是指程序执行的顺序按照代码的先后顺序进行\",{\"1\":{\"283\":1}}],[\"有序性\",{\"1\":{\"283\":2,\"306\":1,\"472\":2,\"484\":1}}],[\"有\",{\"1\":{\"448\":1}}],[\"有可能相等\",{\"1\":{\"441\":1}}],[\"有可能黑色a被处理了以后未引用c\",{\"1\":{\"386\":1}}],[\"有一个类型转换的操作\",{\"1\":{\"437\":1}}],[\"有一定延时\",{\"1\":{\"81\":1,\"726\":1,\"729\":1}}],[\"有两个参数\",{\"1\":{\"422\":1}}],[\"有两种情况\",{\"1\":{\"301\":1}}],[\"有的没拷贝\",{\"1\":{\"383\":1}}],[\"有垃圾回收机制\",{\"1\":{\"332\":1}}],[\"有点像一个停车场\",{\"1\":{\"312\":1}}],[\"有竞争\",{\"1\":{\"302\":1}}],[\"有atomic子包\",{\"1\":{\"277\":1}}],[\"有效\",{\"1\":{\"253\":1}}],[\"有些\",{\"1\":{\"253\":1}}],[\"有了它可以快速破解各类密码\",{\"1\":{\"198\":1}}],[\"有中间件\",{\"1\":{\"98\":1,\"102\":1}}],[\"有异步\",{\"1\":{\"98\":1,\"102\":1}}],[\"有同步\",{\"1\":{\"98\":1,\"102\":1}}],[\"有执行搜索返回\",{\"1\":{\"88\":1}}],[\"聚合计算\",{\"1\":{\"515\":1}}],[\"聚合的名字\",{\"1\":{\"88\":1}}],[\"聚合函数\",{\"1\":{\"88\":1}}],[\"聚合提供了从数据中分组和提取数据的能力\",{\"1\":{\"88\":1}}],[\"最小值\",{\"1\":{\"523\":1}}],[\"最小值是4\",{\"1\":{\"200\":1}}],[\"最快的\",{\"0\":{\"393\":1}}],[\"最短\",{\"1\":{\"378\":1,\"379\":1}}],[\"最少设置为\",{\"1\":{\"346\":1}}],[\"最少要有一个新的变量被定义\",{\"1\":{\"136\":1}}],[\"最后数据库没有查询出该内容\",{\"1\":{\"576\":1,\"596\":1,\"607\":1,\"650\":1,\"661\":1}}],[\"最后在把数据返回给我们的页面\",{\"1\":{\"576\":1,\"596\":1,\"607\":1,\"650\":1,\"661\":1}}],[\"最后修改数据库employee表中的数据\",{\"1\":{\"569\":1}}],[\"最后再看看\",{\"1\":{\"413\":1}}],[\"最后就会造成内存溢出问题\",{\"1\":{\"367\":1}}],[\"最后的tostring方法的返回值是一个新的字符串\",{\"1\":{\"341\":1}}],[\"最后查询的帖子id\",{\"1\":{\"117\":1}}],[\"最大值\",{\"1\":{\"523\":1}}],[\"最大值范围的数会被放到运行时常量池中\",{\"1\":{\"410\":1}}],[\"最大值是31\",{\"1\":{\"200\":1}}],[\"最大表示2进制1111\",{\"1\":{\"371\":1}}],[\"最大寿命是15\",{\"1\":{\"371\":1}}],[\"最大堆空间的jvm虚拟机参数\",{\"1\":{\"333\":1}}],[\"最复杂\",{\"1\":{\"252\":1}}],[\"最初\",{\"1\":{\"198\":1}}],[\"最为简单\",{\"1\":{\"98\":1,\"102\":1}}],[\"最简单的聚合方法大致等于\",{\"1\":{\"88\":1}}],[\"最终导致崩溃\",{\"1\":{\"572\":1}}],[\"最终标记\",{\"1\":{\"383\":1}}],[\"最终stringtable\",{\"1\":{\"341\":1}}],[\"最终会按照评分进行排序\",{\"1\":{\"88\":1}}],[\"最终查询出\",{\"1\":{\"88\":1}}],[\"满足得分更高\",{\"1\":{\"88\":1}}],[\"满足条件最好\",{\"1\":{\"88\":1}}],[\"kernels\",{\"1\":{\"641\":1}}],[\"key的序列化\",{\"1\":{\"554\":1}}],[\"key的格式\",{\"1\":{\"106\":1}}],[\"keysuffix\",{\"1\":{\"539\":2,\"540\":2}}],[\"keysendfeedsetpf+strconv\",{\"1\":{\"117\":1}}],[\"keysendfeedsetpf\",{\"1\":{\"116\":1}}],[\"key2\",{\"1\":{\"532\":2}}],[\"keyfollowsetpf\",{\"1\":{\"106\":1,\"107\":1,\"108\":1,\"109\":2}}],[\"key=\",{\"1\":{\"90\":4}}],[\"key\",{\"1\":{\"88\":3,\"116\":3,\"117\":1,\"119\":1,\"122\":1,\"179\":1,\"267\":1,\"529\":5,\"530\":12,\"531\":1,\"532\":5,\"534\":3,\"535\":4,\"536\":5,\"537\":4,\"539\":4,\"540\":4}}],[\"keyword\",{\"1\":{\"88\":5,\"89\":10}}],[\"kind\",{\"1\":{\"637\":1}}],[\"kings\",{\"1\":{\"88\":1}}],[\"k\",{\"1\":{\"522\":2}}],[\"kafka\",{\"0\":{\"737\":1},\"1\":{\"553\":1,\"558\":2,\"560\":1,\"565\":1,\"567\":1,\"568\":1}}],[\"kafka提供的幂等性操作只能保证同一个生产者会话中同一个分区中的数据不会重复\",{\"1\":{\"484\":1}}],[\"kafka采用就是这种模型\",{\"1\":{\"484\":1}}],[\"kafka常用的组件\",{\"1\":{\"484\":1}}],[\"kafka是一款消息队列\",{\"1\":{\"484\":1}}],[\"kafka概念\",{\"0\":{\"484\":1},\"1\":{\"484\":1},\"2\":{\"485\":1,\"486\":1}}],[\"klass\",{\"1\":{\"448\":1}}],[\"字节的内存\",{\"1\":{\"538\":1}}],[\"字节就是对象的\",{\"1\":{\"421\":1}}],[\"字节是\",{\"1\":{\"421\":1}}],[\"字节码\",{\"1\":{\"434\":1}}],[\"字节码的过程中\",{\"1\":{\"434\":1}}],[\"字节码是\",{\"1\":{\"413\":1}}],[\"字节码指令\",{\"0\":{\"402\":1},\"1\":{\"402\":1,\"474\":1}}],[\"字节\",{\"1\":{\"398\":1,\"399\":1,\"400\":1,\"412\":1,\"421\":1,\"422\":1}}],[\"字面量等信息\",{\"1\":{\"340\":1}}],[\"字符类型\",{\"1\":{\"139\":1}}],[\"字符串的匹配用到了字符串的\",{\"1\":{\"441\":1}}],[\"字符串去重关注的是char\",{\"1\":{\"387\":1}}],[\"字符串对象的创建都是懒惰的\",{\"1\":{\"341\":1}}],[\"字符串对象\",{\"1\":{\"341\":3}}],[\"字符串常量拼接的原理是编译器优化\",{\"1\":{\"341\":1}}],[\"字符串变量拼接的原理是stringbuilder\",{\"1\":{\"341\":1}}],[\"字符串类型\",{\"1\":{\"139\":1}}],[\"字符串偏移量\",{\"1\":{\"90\":1}}],[\"字符串\",{\"0\":{\"441\":1},\"1\":{\"88\":2,\"148\":1}}],[\"字段优化\",{\"0\":{\"471\":1}}],[\"字段和方法数据\",{\"1\":{\"336\":1}}],[\"字段不能被检索\",{\"1\":{\"89\":1}}],[\"字段类型\",{\"1\":{\"89\":1}}],[\"字段匹配用\",{\"1\":{\"88\":1}}],[\"字段后面加上\",{\"1\":{\"88\":1}}],[\"字段\",{\"1\":{\"88\":1,\"196\":1}}],[\"拆分字符串进行检索\",{\"1\":{\"88\":1}}],[\"短语匹配\",{\"1\":{\"88\":1}}],[\"多个表之间用逗号分隔\",{\"1\":{\"560\":1,\"567\":1}}],[\"多个表用逗号隔开\",{\"1\":{\"553\":1}}],[\"多个读线程的情况\",{\"1\":{\"481\":1}}],[\"多个\",{\"0\":{\"428\":1}}],[\"多个线程交替使用\",{\"1\":{\"305\":1}}],[\"多个线程只对变量做读取操作\",{\"1\":{\"303\":1}}],[\"多态相关的\",{\"1\":{\"423\":1}}],[\"多态的原理\",{\"0\":{\"417\":1}}],[\"多核cpu\",{\"1\":{\"378\":1,\"379\":1}}],[\"多线程\",{\"1\":{\"377\":1,\"378\":2,\"379\":2}}],[\"多线程的环境下\",{\"1\":{\"324\":1}}],[\"多功能的监测工具\",{\"1\":{\"334\":1}}],[\"多次频繁的加锁解锁操作\",{\"1\":{\"304\":1}}],[\"多重赋值\",{\"1\":{\"138\":1}}],[\"多变量声明\",{\"0\":{\"135\":1}}],[\"多字段匹配\",{\"1\":{\"88\":1}}],[\"多字段排序\",{\"1\":{\"88\":1}}],[\"多少匹配文档被找到\",{\"1\":{\"87\":1}}],[\"多少分片被搜索了\",{\"1\":{\"87\":1}}],[\"代表数据向哪儿输出\",{\"1\":{\"568\":1}}],[\"代表地理坐标\",{\"1\":{\"535\":1}}],[\"代表jdk8\",{\"1\":{\"399\":1}}],[\"代表查询所有的索引\",{\"1\":{\"88\":1}}],[\"代码分析\",{\"0\":{\"582\":1,\"602\":1,\"613\":1,\"656\":1,\"667\":1}}],[\"代码热替换\",{\"1\":{\"461\":1}}],[\"代码\",{\"1\":{\"411\":1,\"476\":2,\"536\":1,\"539\":1,\"540\":1}}],[\"代码都可以访问的一块区域\",{\"1\":{\"349\":1}}],[\"代码块同步是使用monitorenter\",{\"1\":{\"476\":1}}],[\"代码块和成员变量赋值的代码\",{\"1\":{\"415\":1}}],[\"代码块\",{\"1\":{\"301\":2}}],[\"代码不能编译通过\",{\"1\":{\"133\":1}}],[\"代码如下\",{\"1\":{\"106\":1,\"107\":1}}],[\"代码编写简单不需要考虑增删改查\",{\"1\":{\"81\":1,\"726\":1,\"729\":1}}],[\"降序\",{\"1\":{\"88\":1}}],[\"从节点实际可访问的ip地址和端口可能与它们连接主节点时显示的不同\",{\"1\":{\"646\":1}}],[\"从节点宣告地址\",{\"0\":{\"646\":1}}],[\"从节点向主节点发送ping的心跳间隔\",{\"1\":{\"631\":1,\"641\":1}}],[\"从节点仍会尝试服务客户端\",{\"1\":{\"628\":1,\"638\":1}}],[\"从节点优先级\",{\"0\":{\"633\":1,\"644\":1},\"1\":{\"625\":1}}],[\"从节点是否只读\",{\"1\":{\"625\":1}}],[\"从节点的行为\",{\"1\":{\"625\":1}}],[\"从节点的数据可能会稍微滞后于主节点\",{\"1\":{\"623\":1}}],[\"从节点处理读操作\",{\"1\":{\"622\":1}}],[\"从节点定期向主节点发送ping命令\",{\"1\":{\"621\":1}}],[\"从节点接收后载入快照\",{\"1\":{\"621\":1}}],[\"从节点通过slaveof命令连接到主节点\",{\"1\":{\"621\":1}}],[\"从数十亿个垃圾邮件列表中判断某邮箱是否是垃圾邮件\",{\"1\":{\"579\":1,\"599\":1,\"610\":1,\"653\":1,\"664\":1}}],[\"从redis取出数据后判断时间是否过期\",{\"1\":{\"572\":1}}],[\"从最后一次签到开始向前统计\",{\"1\":{\"540\":1}}],[\"从官网的文档来看\",{\"1\":{\"512\":1}}],[\"从这些特点就可以知道redis应该应用在哪里场景\",{\"1\":{\"512\":1}}],[\"从这些特点就知道mysql肯定有它处理不了的场景\",{\"1\":{\"512\":1}}],[\"从字面上来看\",{\"1\":{\"512\":1}}],[\"从字节码分析\",{\"1\":{\"456\":1}}],[\"从字节码角度分析\",{\"1\":{\"411\":1}}],[\"从jvm规范中可以看到synchonized在jvm里的实现原理\",{\"1\":{\"476\":1}}],[\"从0开始算\",{\"1\":{\"472\":1}}],[\"从代码中的赋值语句中就可以看出来\",{\"1\":{\"439\":1}}],[\"从操作数栈弹掉了😂\",{\"1\":{\"416\":1}}],[\"从队列中获取无用的\",{\"1\":{\"364\":1}}],[\"从上直下逐一测试\",{\"1\":{\"142\":1}}],[\"从上向下\",{\"1\":{\"139\":1}}],[\"从信箱中取消息\",{\"0\":{\"117\":1,\"119\":1},\"1\":{\"115\":1,\"117\":1,\"119\":1}}],[\"从而可能并行传输rdb文件\",{\"1\":{\"630\":1,\"640\":1}}],[\"从而达到mysql和redis自动同步的功能\",{\"1\":{\"558\":1}}],[\"从而获取类的各种信息\",{\"1\":{\"448\":1}}],[\"从而不会影响其他线程的运行\",{\"1\":{\"375\":1}}],[\"从而提高了效率\",{\"1\":{\"349\":1}}],[\"从而减少了锁操作的开销\",{\"1\":{\"303\":1}}],[\"从而将其消除的优化过程\",{\"1\":{\"303\":1}}],[\"从而将密码安全地存储\",{\"1\":{\"198\":1}}],[\"从而防止数据竞争和不一致\",{\"1\":{\"277\":1}}],[\"从而使用户能够更加的节约时间\",{\"1\":{\"115\":1,\"533\":1}}],[\"从而订阅\",{\"1\":{\"81\":1,\"726\":1,\"729\":1}}],[\"从mysql获取\",{\"1\":{\"98\":1,\"102\":1,\"121\":1}}],[\"从\",{\"1\":{\"98\":1,\"102\":1,\"121\":1,\"423\":1,\"441\":1,\"442\":1,\"476\":1}}],[\"从第几条文档开始查\",{\"1\":{\"88\":1}}],[\"基\",{\"1\":{\"619\":1}}],[\"基数统计\",{\"1\":{\"522\":1}}],[\"基准测试请参考\",{\"1\":{\"471\":1}}],[\"基本无空间碎片可能存在空间浪费\",{\"1\":{\"376\":1}}],[\"基本概念\",{\"0\":{\"222\":1}}],[\"基本授权方式\",{\"1\":{\"190\":1}}],[\"基本数据类型转为string\",{\"1\":{\"139\":1}}],[\"基本数据类型之间的转换\",{\"1\":{\"139\":1}}],[\"基本数据类型的默认值\",{\"1\":{\"139\":1}}],[\"基本类型和字符串\",{\"1\":{\"455\":2}}],[\"基本类型和其包装类型的相互转换过程\",{\"1\":{\"436\":1}}],[\"基本类型那么最终生成的字节码是\",{\"1\":{\"437\":1}}],[\"基本类型赋值给包装类型\",{\"1\":{\"436\":1}}],[\"基本类型转包装类型→装箱\",{\"1\":{\"436\":1}}],[\"基本类型\",{\"1\":{\"88\":1}}],[\"基本语法格式\",{\"1\":{\"88\":1}}],[\"基于canal\",{\"1\":{\"592\":1}}],[\"基于mytest\",{\"1\":{\"568\":1}}],[\"基于mq\",{\"1\":{\"81\":1,\"592\":1,\"726\":1,\"729\":1}}],[\"基于mq消费确认机制保证数据\",{\"1\":{\"81\":1,\"726\":1,\"729\":1}}],[\"基于mq来实现\",{\"1\":{\"81\":1,\"726\":1,\"729\":1}}],[\"基于该表数据结构\",{\"1\":{\"531\":1}}],[\"基于内存能够提供非常高的读写速度\",{\"1\":{\"512\":1}}],[\"基于内存\",{\"1\":{\"512\":1}}],[\"基于内存的键值存储数据库\",{\"1\":{\"511\":1,\"512\":1}}],[\"基于内存的用户认证流程\",{\"0\":{\"177\":1}}],[\"基于内存的用户认证\",{\"0\":{\"175\":1}}],[\"基于复制算法的垃圾回收器\",{\"1\":{\"379\":1}}],[\"基于标记\",{\"1\":{\"379\":2}}],[\"基于aqs实现\",{\"1\":{\"306\":1}}],[\"基于方法的授权\",{\"0\":{\"236\":1}}],[\"基于角色的访问控制\",{\"1\":{\"235\":1}}],[\"基于request的授权\",{\"0\":{\"227\":1}}],[\"基于数据库的用户认证流程\",{\"0\":{\"187\":1}}],[\"基于数据库的用户认证\",{\"0\":{\"186\":1}}],[\"基于数据库的数据源\",{\"0\":{\"178\":1}}],[\"基于查询聚合\",{\"1\":{\"88\":1}}],[\"基于binlog日志\",{\"1\":{\"81\":1,\"726\":1,\"729\":1}}],[\"该handler中提供了insert\",{\"1\":{\"554\":1}}],[\"该收集器的目标是达到一个可控制的吞吐量\",{\"1\":{\"378\":1}}],[\"该字符串才会被创建并放入串池中\",{\"1\":{\"341\":1}}],[\"该数据在32位和64位jvm中长度都是32bit\",{\"1\":{\"293\":1}}],[\"该指针在32位jvm中的长度是32bit\",{\"1\":{\"292\":1}}],[\"该对象就可以被垃圾回收了\",{\"1\":{\"363\":1}}],[\"该对象就可以被回收\",{\"1\":{\"353\":1}}],[\"该对象才能被垃圾回收\",{\"1\":{\"359\":1}}],[\"该对象计数加一\",{\"1\":{\"353\":1}}],[\"该对象头的mark\",{\"1\":{\"288\":1}}],[\"该对象包含了authentication对象\",{\"1\":{\"222\":1}}],[\"该页面显示了一个用于github登录的链接\",{\"1\":{\"268\":1}}],[\"该应用就使用你的密码\",{\"1\":{\"254\":1}}],[\"该账号已从其他设备登录\",{\"1\":{\"225\":1}}],[\"该模式的核心含义就是\",{\"1\":{\"115\":1,\"533\":1}}],[\"该模式的实现方案有三种\",{\"1\":{\"115\":2,\"533\":2}}],[\"该tokenizer\",{\"1\":{\"90\":1}}],[\"该查询语言非常全面\",{\"1\":{\"88\":1}}],[\"该位为1的报文表示希望断开连接\",{\"1\":{\"57\":1}}],[\"qq\",{\"1\":{\"481\":1}}],[\"queued\",{\"1\":{\"639\":2,\"640\":1}}],[\"queue\",{\"1\":{\"364\":5,\"365\":4,\"385\":1}}],[\"queryshopbytype\",{\"1\":{\"537\":3}}],[\"queryuserbyid\",{\"1\":{\"532\":1}}],[\"queryblogoffollow\",{\"1\":{\"535\":3}}],[\"queryblogbyuserid\",{\"1\":{\"532\":1}}],[\"queryblogbyid\",{\"1\":{\"528\":1}}],[\"querybloglikes\",{\"1\":{\"529\":1,\"530\":3}}],[\"querybloguser\",{\"1\":{\"528\":1,\"535\":1}}],[\"querywrapper<follow>\",{\"1\":{\"531\":1,\"532\":1}}],[\"querywrapper<>\",{\"1\":{\"188\":1}}],[\"querywrapper<user>\",{\"1\":{\"188\":1}}],[\"querywrapper\",{\"1\":{\"188\":3}}],[\"query定义如何查询\",{\"1\":{\"88\":1}}],[\"query\",{\"0\":{\"88\":1},\"1\":{\"87\":1,\"88\":21,\"94\":3,\"420\":1,\"530\":1,\"531\":1,\"532\":1,\"534\":1,\"535\":1,\"537\":2}}],[\"quick\",{\"1\":{\"90\":3}}],[\"q=\",{\"1\":{\"87\":2}}],[\"列式数据库适合统计\",{\"1\":{\"680\":1}}],[\"列表结构存储旅行历史\",{\"1\":{\"545\":1,\"548\":1}}],[\"列表\",{\"1\":{\"511\":1,\"512\":1}}],[\"列名\",{\"1\":{\"235\":5}}],[\"列\",{\"1\":{\"87\":1}}],[\"花费多少ms搜索\",{\"1\":{\"87\":1}}],[\"花费了多少ms\",{\"1\":{\"85\":1}}],[\"说明已签到\",{\"1\":{\"540\":1}}],[\"说明未签到\",{\"1\":{\"540\":1}}],[\"说明轻量级锁进行了锁膨胀或已经升级为重量级锁\",{\"1\":{\"301\":1}}],[\"说明\",{\"1\":{\"87\":1,\"457\":1}}],[\"包下\",{\"1\":{\"464\":1}}],[\"包的\",{\"1\":{\"464\":1}}],[\"包\",{\"1\":{\"463\":1}}],[\"包拷贝到\",{\"1\":{\"459\":1}}],[\"包装类型赋值给基本类型\",{\"1\":{\"436\":1}}],[\"包装类型转基本类型→拆箱\",{\"1\":{\"436\":1}}],[\"包中的druid冲突了\",{\"1\":{\"568\":1}}],[\"包中的并发工具\",{\"1\":{\"286\":1}}],[\"包中的原子类\",{\"1\":{\"277\":1}}],[\"包含笔记中的标题\",{\"1\":{\"527\":1}}],[\"包含\",{\"1\":{\"519\":1,\"535\":1}}],[\"包含用户的基本信息\",{\"1\":{\"235\":1}}],[\"包含当前已认证用户的\",{\"1\":{\"222\":1}}],[\"包含mill\",{\"1\":{\"88\":2}}],[\"包括下面的延时双删也是不能保证100\",{\"1\":{\"590\":1}}],[\"包括用户名密码要修改为自己的\",{\"1\":{\"568\":1}}],[\"包括特殊方法\",{\"1\":{\"336\":1}}],[\"包括任务的串行执行\",{\"1\":{\"318\":1}}],[\"包括principal\",{\"1\":{\"222\":1}}],[\"包括符合语句\",{\"1\":{\"88\":1}}],[\"包括\",{\"1\":{\"87\":1}}],[\"包传给对端主机\",{\"1\":{\"57\":1}}],[\"检索时候进行分词匹配\",{\"1\":{\"89\":1}}],[\"检索\",{\"1\":{\"87\":1,\"89\":1}}],[\"u014494148\",{\"1\":{\"554\":1}}],[\"u14\",{\"1\":{\"540\":1}}],[\"u\",{\"1\":{\"540\":1}}],[\"uv统计\",{\"0\":{\"542\":1}}],[\"uv统计在服务端做会比较麻烦\",{\"1\":{\"541\":1}}],[\"uv\",{\"1\":{\"522\":1,\"541\":1}}],[\"ue\",{\"1\":{\"450\":1}}],[\"u2\",{\"1\":{\"397\":11,\"399\":2}}],[\"u4\",{\"1\":{\"397\":1,\"398\":1}}],[\"util\",{\"1\":{\"277\":4,\"286\":1,\"319\":1,\"333\":1,\"437\":4,\"438\":8,\"471\":2}}],[\"utf8\",{\"1\":{\"400\":24,\"406\":17}}],[\"utf\",{\"1\":{\"90\":1,\"183\":1,\"267\":1,\"561\":1}}],[\"ul>\",{\"1\":{\"267\":1}}],[\"uindex`\",{\"1\":{\"179\":1}}],[\"uint16\",{\"1\":{\"138\":2}}],[\"uuid\",{\"1\":{\"174\":1}}],[\"untrusted\",{\"1\":{\"638\":1}}],[\"understand\",{\"1\":{\"635\":1}}],[\"undefined\",{\"1\":{\"136\":1}}],[\"unsubscribe\",{\"1\":{\"637\":1}}],[\"unsupportedencodingexception\",{\"1\":{\"561\":1}}],[\"unsigned\",{\"1\":{\"540\":1}}],[\"unsafe\",{\"1\":{\"350\":4,\"351\":10}}],[\"unreservememory\",{\"1\":{\"350\":2}}],[\"unused\",{\"1\":{\"295\":3}}],[\"unparked\",{\"1\":{\"319\":1}}],[\"unpark可以先\",{\"1\":{\"283\":1}}],[\"unpark是以线程为单位来\",{\"1\":{\"283\":1}}],[\"unpark不必\",{\"1\":{\"283\":1}}],[\"unpark\",{\"1\":{\"280\":1,\"283\":1,\"300\":2,\"312\":1,\"319\":3}}],[\"unpark原理\",{\"0\":{\"280\":1}}],[\"units\",{\"1\":{\"303\":2,\"471\":2}}],[\"unique\",{\"1\":{\"179\":1}}],[\"unix\",{\"1\":{\"116\":1}}],[\"unknown\",{\"1\":{\"138\":1}}],[\"usually\",{\"1\":{\"644\":1}}],[\"useful\",{\"1\":{\"638\":1}}],[\"useunicode=true\",{\"1\":{\"568\":1}}],[\"usecompressedclasspointers\",{\"1\":{\"417\":1}}],[\"usecompressedoops\",{\"1\":{\"417\":1}}],[\"usebiasedlocking\",{\"1\":{\"296\":1}}],[\"use\",{\"1\":{\"179\":1,\"635\":1,\"641\":1,\"644\":1,\"645\":1}}],[\"used\",{\"1\":{\"136\":1,\"568\":1,\"639\":1,\"641\":1,\"643\":1,\"645\":4}}],[\"userholder\",{\"1\":{\"527\":1,\"529\":1,\"530\":2,\"531\":2,\"532\":2,\"534\":1,\"535\":1,\"539\":1,\"540\":1}}],[\"userdtos\",{\"1\":{\"530\":2}}],[\"userdto\",{\"1\":{\"527\":1,\"530\":2,\"532\":5,\"534\":1}}],[\"userdetails\",{\"1\":{\"188\":6,\"193\":4,\"194\":4,\"234\":1,\"238\":1}}],[\"userdetailspasswordservice\",{\"1\":{\"187\":1,\"188\":1}}],[\"userdetailsmanager\",{\"1\":{\"187\":1,\"188\":1}}],[\"userdetailsservice\",{\"1\":{\"176\":2,\"189\":2}}],[\"userdetailsservice用来管理用户信息\",{\"1\":{\"176\":1}}],[\"userinfouri\",{\"1\":{\"271\":1}}],[\"userid\",{\"1\":{\"98\":2,\"102\":2,\"105\":1,\"106\":2,\"107\":2,\"108\":1,\"109\":2,\"110\":2,\"111\":2,\"112\":4,\"117\":3,\"119\":2,\"121\":2,\"122\":2,\"529\":4,\"530\":6,\"531\":6,\"532\":9,\"534\":2,\"535\":2,\"539\":2,\"540\":2}}],[\"userattribute\",{\"1\":{\"267\":3}}],[\"userattributes\",{\"1\":{\"266\":1,\"267\":1}}],[\"userexists\",{\"1\":{\"188\":1}}],[\"usercontroller中添加方法\",{\"1\":{\"192\":1}}],[\"usercontroller\",{\"1\":{\"185\":1,\"532\":1,\"539\":1,\"540\":1}}],[\"user>\",{\"1\":{\"184\":1}}],[\"usermapper\",{\"1\":{\"183\":3,\"188\":3,\"194\":1}}],[\"usernameattributename\",{\"1\":{\"271\":1}}],[\"username属性显示github中获取的哪个属性的信息\",{\"1\":{\"271\":1}}],[\"usernamepasswordauthenticationfilter\",{\"1\":{\"206\":1}}],[\"usernameparameter\",{\"1\":{\"205\":1}}],[\"usernamenotfoundexception\",{\"1\":{\"188\":2}}],[\"username=root\",{\"1\":{\"181\":1}}],[\"username\",{\"1\":{\"176\":1,\"179\":1,\"182\":1,\"188\":6,\"193\":1,\"204\":2,\"205\":1,\"223\":3,\"235\":1,\"266\":1,\"267\":1,\"553\":1,\"554\":1,\"560\":1,\"561\":1,\"567\":1,\"568\":2,\"569\":1}}],[\"userservice接口中添加方法\",{\"1\":{\"193\":1}}],[\"userserviceimpl实现中添加方法\",{\"1\":{\"193\":1}}],[\"userserviceimpl\",{\"1\":{\"184\":1,\"539\":1,\"540\":1}}],[\"userservice\",{\"1\":{\"184\":2,\"185\":3,\"192\":1,\"239\":2,\"530\":1,\"532\":2,\"539\":1,\"540\":1}}],[\"users\",{\"1\":{\"112\":5,\"406\":2,\"532\":2}}],[\"user类型的切片\",{\"1\":{\"112\":1}}],[\"user\",{\"1\":{\"112\":5,\"118\":3,\"161\":1,\"165\":1,\"174\":3,\"176\":2,\"182\":1,\"185\":2,\"188\":10,\"192\":3,\"193\":7,\"194\":7,\"228\":2,\"229\":6,\"230\":4,\"232\":1,\"233\":2,\"234\":3,\"235\":5,\"238\":5,\"239\":5,\"271\":2,\"527\":2,\"530\":5,\"531\":8,\"532\":12,\"534\":5,\"539\":1,\"540\":1,\"552\":2,\"559\":2,\"560\":1,\"566\":2,\"567\":1,\"568\":1,\"635\":1}}],[\"usr\",{\"1\":{\"90\":3}}],[\"using\",{\"1\":{\"87\":1,\"636\":1,\"638\":1,\"641\":1,\"645\":1}}],[\"url\",{\"1\":{\"568\":1}}],[\"url=jdbc\",{\"1\":{\"181\":1}}],[\"url中的type参数为可选\",{\"1\":{\"89\":1}}],[\"uri+请求体行检索\",{\"1\":{\"87\":1}}],[\"uri+请求体\",{\"1\":{\"87\":1}}],[\"uri+检索参数\",{\"1\":{\"87\":1}}],[\"uri\",{\"1\":{\"87\":1,\"270\":1}}],[\"upsert\",{\"1\":{\"568\":1}}],[\"uploadimage\",{\"1\":{\"527\":1}}],[\"uploadcontroller\",{\"1\":{\"527\":1}}],[\"upload\",{\"1\":{\"527\":3}}],[\"up\",{\"1\":{\"350\":1,\"641\":1}}],[\"upper\",{\"1\":{\"88\":1}}],[\"update就覆盖\",{\"1\":{\"561\":1}}],[\"update方法\",{\"1\":{\"554\":1}}],[\"updateuser\",{\"1\":{\"188\":1}}],[\"updatepassword\",{\"1\":{\"188\":1}}],[\"updated\",{\"1\":{\"85\":1}}],[\"update会跟原数据对比\",{\"1\":{\"85\":1}}],[\"update的语法不同\",{\"1\":{\"85\":1}}],[\"update\",{\"1\":{\"85\":4,\"90\":2,\"238\":1,\"529\":6,\"530\":4,\"554\":1,\"561\":2}}],[\"支持join连表查询\",{\"1\":{\"568\":1}}],[\"支持快速读取和更新\",{\"1\":{\"545\":1,\"548\":1}}],[\"支持商品数量的增减\",{\"1\":{\"545\":1,\"548\":1}}],[\"支持以消费组形式消费数据\",{\"1\":{\"518\":1}}],[\"支持多种类型的数据结构\",{\"1\":{\"512\":1}}],[\"支持多种数据类型数据库\",{\"1\":{\"512\":1}}],[\"支持两种基本方式检索\",{\"1\":{\"87\":1}}],[\"支持为图片设置颜色模式和大小\",{\"1\":{\"20\":1}}],[\"进程依然正常\",{\"1\":{\"375\":1}}],[\"进程的id\",{\"1\":{\"357\":1}}],[\"进程\",{\"1\":{\"334\":1,\"419\":1}}],[\"进程id\",{\"1\":{\"328\":2,\"334\":1}}],[\"进入到config目录\",{\"1\":{\"568\":1}}],[\"进入println源码\",{\"1\":{\"480\":1}}],[\"进入了这个房间\",{\"1\":{\"476\":1}}],[\"进入命令行模式\",{\"1\":{\"422\":1,\"423\":1}}],[\"进入图形界面\",{\"1\":{\"419\":1}}],[\"进入\",{\"1\":{\"312\":1,\"419\":1,\"423\":1,\"427\":1}}],[\"进入锁膨胀流程\",{\"1\":{\"302\":1}}],[\"进入锁膨胀过程\",{\"1\":{\"301\":1}}],[\"进入重量级锁解锁流程\",{\"1\":{\"301\":1}}],[\"进行任务调度\",{\"1\":{\"545\":1,\"548\":1}}],[\"进行路由优化计算\",{\"1\":{\"545\":1,\"548\":1}}],[\"进行实时数据分析\",{\"1\":{\"523\":1}}],[\"进行抽奖\",{\"1\":{\"515\":1}}],[\"进行了扩展\",{\"1\":{\"465\":1}}],[\"进行计算得到\",{\"1\":{\"423\":1}}],[\"进行数据采样并动态调整\",{\"1\":{\"389\":1}}],[\"进行全面的回收\",{\"1\":{\"383\":1}}],[\"进行初始标记\",{\"1\":{\"382\":1}}],[\"进行\",{\"1\":{\"379\":1}}],[\"进行轻量级加锁时\",{\"1\":{\"302\":1}}],[\"进行用户认证\",{\"1\":{\"177\":1,\"187\":1}}],[\"进行登录\",{\"1\":{\"161\":1}}],[\"进行推送\",{\"1\":{\"98\":1,\"102\":1,\"121\":1}}],[\"进行检索\",{\"1\":{\"88\":1}}],[\"进行引用\",{\"1\":{\"28\":1,\"676\":1}}],[\"进阶检索\",{\"0\":{\"86\":1}}],[\"obtained\",{\"1\":{\"645\":1}}],[\"objfields\",{\"1\":{\"568\":1}}],[\"objcet\",{\"1\":{\"437\":1}}],[\"obj\",{\"1\":{\"289\":2,\"294\":4,\"302\":2,\"437\":1,\"476\":9}}],[\"object>\",{\"1\":{\"438\":1,\"554\":3,\"561\":1}}],[\"object类里看到的wait\",{\"1\":{\"298\":1}}],[\"object\",{\"0\":{\"283\":1},\"1\":{\"209\":1,\"223\":2,\"277\":1,\"283\":1,\"289\":3,\"294\":2,\"301\":3,\"302\":4,\"303\":2,\"338\":1,\"400\":1,\"406\":4,\"420\":1,\"424\":7,\"433\":4,\"435\":2,\"437\":8,\"438\":4,\"469\":1,\"472\":6,\"476\":2}}],[\"o超时\",{\"1\":{\"631\":1,\"641\":1}}],[\"o操作\",{\"1\":{\"630\":1,\"640\":1}}],[\"ok\",{\"1\":{\"429\":1,\"433\":2,\"446\":2,\"527\":2,\"528\":1,\"529\":1,\"530\":3,\"531\":2,\"532\":6,\"534\":1,\"535\":2,\"537\":4,\"539\":1,\"540\":3}}],[\"od\",{\"1\":{\"397\":1}}],[\"odd\",{\"1\":{\"141\":1}}],[\"o被划分为多个区域\",{\"1\":{\"385\":1}}],[\"old\",{\"1\":{\"378\":1,\"379\":2,\"384\":1}}],[\"old是serial收集器的老年代版本\",{\"1\":{\"377\":1}}],[\"old收集器\",{\"1\":{\"377\":1}}],[\"oldparallel\",{\"1\":{\"376\":1}}],[\"oldpassword\",{\"1\":{\"188\":1}}],[\"oldserial\",{\"1\":{\"376\":1}}],[\"owner\",{\"1\":{\"242\":1,\"254\":1,\"258\":1,\"278\":3,\"289\":3,\"302\":1}}],[\"oauth客户端访问github的获取用户信息的接口获取基本个人资料信息\",{\"1\":{\"268\":1}}],[\"oauthdemo\",{\"1\":{\"266\":1}}],[\"oauth\",{\"1\":{\"241\":1,\"242\":1,\"245\":2,\"251\":2,\"258\":1,\"267\":2,\"271\":2}}],[\"oauth2user\",{\"1\":{\"266\":4}}],[\"oauth2authorizedclient\",{\"1\":{\"266\":1}}],[\"oauth2客户端功能中包含oauth2\",{\"1\":{\"259\":1}}],[\"oauth2\",{\"1\":{\"259\":3,\"260\":3,\"263\":1,\"264\":1,\"265\":2,\"271\":1}}],[\"oauth2的四种授权模式\",{\"0\":{\"251\":1}}],[\"oauth2的使用场景\",{\"0\":{\"243\":1}}],[\"oauth2的角色\",{\"0\":{\"242\":1}}],[\"oauth2最简向导\",{\"1\":{\"241\":1}}],[\"oauth2是一种开放授权协议\",{\"1\":{\"241\":1}}],[\"oauth2是什么\",{\"0\":{\"241\":1}}],[\"oauth2简介\",{\"0\":{\"240\":1}}],[\"override\",{\"1\":{\"188\":7,\"193\":1,\"194\":1,\"209\":1,\"212\":1,\"215\":1,\"218\":1,\"225\":1,\"230\":2,\"417\":3,\"445\":1,\"446\":3,\"528\":1,\"529\":1,\"530\":2,\"531\":2,\"532\":2,\"534\":1,\"535\":1,\"537\":1,\"539\":1,\"540\":1,\"554\":3,\"561\":1,\"645\":1}}],[\"opsforvalue\",{\"1\":{\"539\":1,\"540\":1,\"554\":2,\"561\":1}}],[\"opsforgeo\",{\"1\":{\"536\":2,\"537\":1}}],[\"opsforzset\",{\"1\":{\"530\":5,\"534\":1,\"535\":1}}],[\"opsforset\",{\"1\":{\"529\":3,\"532\":3}}],[\"ops\",{\"1\":{\"471\":6}}],[\"optimize\",{\"1\":{\"641\":1}}],[\"option\",{\"1\":{\"640\":2,\"642\":1,\"644\":1}}],[\"optional>\",{\"1\":{\"554\":1}}],[\"optionsbuilder\",{\"1\":{\"471\":2}}],[\"options\",{\"1\":{\"471\":4,\"645\":2}}],[\"options以处理点击劫持攻击\",{\"1\":{\"165\":1}}],[\"options以处理嗅探攻击\",{\"1\":{\"165\":1}}],[\"opt\",{\"1\":{\"471\":2}}],[\"opcodes\",{\"1\":{\"338\":2}}],[\"op\",{\"1\":{\"303\":4}}],[\"openjdk\",{\"1\":{\"471\":8}}],[\"openapi3\",{\"1\":{\"195\":1}}],[\"open\",{\"1\":{\"85\":1,\"241\":1}}],[\"os++\",{\"1\":{\"535\":1}}],[\"os\",{\"1\":{\"151\":2,\"535\":6}}],[\"o\",{\"1\":{\"146\":1,\"148\":1,\"241\":1,\"303\":2,\"381\":2,\"383\":1,\"387\":2,\"437\":2,\"640\":1}}],[\"omitted\",{\"1\":{\"143\":1}}],[\"omega^i\",{\"1\":{\"18\":1}}],[\"omega^r\",{\"1\":{\"18\":1}}],[\"omega\",{\"1\":{\"18\":4}}],[\"one\",{\"1\":{\"639\":1,\"643\":1,\"644\":1}}],[\"onexpiredsessiondetected\",{\"1\":{\"225\":1}}],[\"once\",{\"1\":{\"639\":1,\"640\":1,\"642\":1}}],[\"online\",{\"1\":{\"644\":1}}],[\"only\",{\"1\":{\"568\":1,\"628\":1,\"629\":1,\"638\":5,\"639\":1,\"642\":1}}],[\"onlogoutsuccess\",{\"1\":{\"215\":1}}],[\"onmessage\",{\"1\":{\"561\":1}}],[\"onauthenticationfailure\",{\"1\":{\"212\":1}}],[\"onauthenticationsuccess\",{\"1\":{\"209\":1}}],[\"on\",{\"1\":{\"136\":1,\"179\":1,\"250\":1,\"526\":1,\"552\":2,\"559\":2,\"566\":2,\"635\":1,\"638\":2,\"639\":1,\"641\":3}}],[\"or\",{\"1\":{\"531\":1,\"568\":2,\"637\":2,\"638\":1,\"639\":1,\"641\":1,\"644\":2,\"645\":2}}],[\"ordinal\",{\"1\":{\"442\":8,\"443\":3}}],[\"ordering\",{\"1\":{\"283\":1}}],[\"order\",{\"1\":{\"88\":1,\"530\":2,\"535\":1,\"537\":1,\"640\":2,\"643\":1,\"645\":2}}],[\"originalfilename\",{\"1\":{\"527\":2}}],[\"origin\",{\"1\":{\"220\":1}}],[\"oracle\",{\"1\":{\"198\":1,\"403\":1,\"412\":1}}],[\"org\",{\"1\":{\"133\":1,\"160\":1,\"183\":2,\"188\":1,\"193\":1,\"204\":1,\"234\":1,\"238\":1,\"251\":1,\"267\":3,\"471\":5,\"561\":1}}],[\"offers\",{\"1\":{\"645\":1}}],[\"offset\",{\"1\":{\"90\":22,\"117\":4,\"119\":1,\"122\":3,\"289\":2,\"535\":9,\"538\":3,\"539\":1}}],[\"offsetstr\",{\"1\":{\"117\":3,\"119\":2,\"122\":2}}],[\"offsets\",{\"1\":{\"90\":1}}],[\"often\",{\"1\":{\"642\":1}}],[\"ofpattern\",{\"1\":{\"539\":1,\"540\":1}}],[\"of\",{\"1\":{\"122\":1,\"136\":1,\"289\":1,\"375\":1,\"464\":1,\"532\":1,\"535\":1,\"537\":1,\"635\":4,\"637\":2,\"638\":3,\"639\":1,\"640\":6,\"641\":1,\"642\":3,\"643\":3,\"644\":2,\"645\":5}}],[\"otherwise\",{\"1\":{\"636\":1,\"640\":1}}],[\"other\",{\"1\":{\"88\":1,\"644\":1,\"645\":1}}],[\"outeradapters\",{\"1\":{\"568\":2}}],[\"output\",{\"1\":{\"643\":1,\"645\":1}}],[\"outputstream\",{\"1\":{\"444\":1}}],[\"outputtimeunit\",{\"1\":{\"303\":1}}],[\"outside\",{\"1\":{\"400\":1}}],[\"outofmemoryerror\",{\"1\":{\"333\":3,\"338\":4,\"350\":2}}],[\"out<\",{\"1\":{\"160\":1}}],[\"out\",{\"1\":{\"87\":1,\"88\":1,\"200\":1,\"223\":5,\"316\":4,\"319\":2,\"324\":7,\"326\":2,\"333\":1,\"338\":1,\"341\":4,\"343\":5,\"345\":1,\"350\":1,\"351\":4,\"357\":3,\"364\":8,\"365\":6,\"375\":2,\"397\":1,\"400\":1,\"405\":1,\"406\":4,\"411\":4,\"414\":2,\"415\":3,\"417\":3,\"429\":1,\"431\":2,\"432\":1,\"433\":2,\"438\":2,\"439\":2,\"440\":4,\"441\":8,\"442\":4,\"444\":2,\"445\":1,\"446\":4,\"455\":9,\"456\":4,\"458\":3,\"459\":3,\"463\":1,\"469\":1,\"470\":4,\"472\":1,\"474\":1,\"476\":1,\"480\":1,\"525\":1,\"526\":1,\"581\":2,\"601\":2,\"612\":2,\"637\":1,\"655\":2,\"666\":2}}],[\"9712477\",{\"1\":{\"583\":1,\"603\":1,\"614\":1,\"657\":1,\"668\":1}}],[\"976\",{\"1\":{\"303\":1}}],[\"9876\",{\"1\":{\"560\":2,\"561\":1,\"567\":1}}],[\"984\",{\"1\":{\"471\":1}}],[\"9版本并不支持redis\",{\"1\":{\"537\":1}}],[\"91304\",{\"1\":{\"471\":1}}],[\"999\",{\"1\":{\"471\":1}}],[\"99162322\",{\"1\":{\"441\":1}}],[\"990\",{\"1\":{\"88\":2}}],[\"9项\",{\"1\":{\"400\":1}}],[\"9以后默认使用\",{\"1\":{\"380\":1}}],[\"90\",{\"1\":{\"142\":2}}],[\"9\",{\"0\":{\"346\":1,\"417\":1,\"443\":1},\"1\":{\"90\":1,\"148\":2,\"289\":2,\"299\":4,\"324\":1,\"341\":3,\"365\":1,\"389\":3,\"400\":1,\"406\":1,\"411\":1,\"412\":1,\"416\":1,\"427\":1,\"428\":2,\"431\":1,\"432\":1,\"433\":1,\"437\":1,\"438\":2,\"470\":4}}],[\"95\",{\"1\":{\"85\":2}}],[\"9200\",{\"1\":{\"66\":1,\"70\":1,\"74\":1,\"78\":1,\"85\":6,\"90\":1,\"98\":1,\"102\":1,\"126\":1,\"130\":1,\"488\":1,\"492\":1,\"496\":1,\"500\":1,\"504\":1,\"508\":1,\"568\":1}}],[\"81\",{\"1\":{\"541\":1}}],[\"847\",{\"1\":{\"471\":1}}],[\"83890\",{\"1\":{\"471\":1}}],[\"8后为元空间\",{\"1\":{\"448\":1}}],[\"8行的字节码指令\",{\"1\":{\"427\":1}}],[\"8项\",{\"1\":{\"400\":1}}],[\"8的串用2个字节来表示长度\",{\"1\":{\"400\":1}}],[\"8~9\",{\"1\":{\"400\":1}}],[\"8u60\",{\"0\":{\"389\":1}}],[\"8默认使用的垃圾回收器\",{\"1\":{\"378\":1}}],[\"8mb\",{\"1\":{\"373\":1,\"374\":2,\"375\":3}}],[\"8以后会导致元空间内存溢出java\",{\"1\":{\"338\":1}}],[\"8以前会导致永久代内存溢出java\",{\"1\":{\"338\":1}}],[\"8引入的一个异步编程工具类\",{\"1\":{\"318\":1}}],[\"8200\",{\"1\":{\"265\":1}}],[\"8进制\",{\"1\":{\"148\":1}}],[\"8\",{\"0\":{\"345\":1,\"416\":1,\"425\":1,\"442\":1},\"1\":{\"88\":1,\"89\":1,\"90\":2,\"139\":2,\"183\":1,\"209\":1,\"212\":1,\"215\":1,\"218\":1,\"225\":1,\"231\":1,\"267\":1,\"289\":1,\"299\":4,\"337\":1,\"338\":3,\"341\":7,\"343\":1,\"344\":1,\"373\":1,\"374\":1,\"375\":1,\"376\":1,\"390\":1,\"399\":1,\"400\":2,\"406\":4,\"410\":1,\"411\":1,\"412\":1,\"413\":3,\"416\":1,\"421\":2,\"427\":2,\"428\":2,\"429\":1,\"430\":1,\"431\":1,\"432\":1,\"433\":1,\"437\":1,\"438\":5,\"448\":2,\"457\":1,\"470\":1,\"474\":2,\"538\":2,\"561\":2}}],[\"8d\",{\"1\":{\"85\":1}}],[\"8b\",{\"1\":{\"85\":1}}],[\"8080\",{\"1\":{\"161\":2,\"185\":1,\"195\":1,\"268\":1,\"560\":1}}],[\"80\",{\"1\":{\"56\":1,\"90\":4,\"142\":1}}],[\"7以后就存储在\",{\"1\":{\"451\":1}}],[\"7以前是存储与instanceklass末尾\",{\"1\":{\"451\":1}}],[\"7项\",{\"1\":{\"400\":1}}],[\"79\",{\"1\":{\"397\":1,\"400\":2}}],[\"77\",{\"1\":{\"397\":1,\"400\":2}}],[\"76\",{\"1\":{\"397\":10,\"400\":17}}],[\"763\",{\"1\":{\"338\":1}}],[\"73\",{\"1\":{\"397\":6,\"400\":13}}],[\"72\",{\"1\":{\"397\":18,\"400\":35}}],[\"74\",{\"1\":{\"397\":21,\"400\":38}}],[\"7mb\",{\"1\":{\"373\":1,\"374\":1,\"375\":1}}],[\"7807cc3bb1534abce9f2\",{\"1\":{\"265\":1}}],[\"75\",{\"1\":{\"143\":1,\"397\":3,\"400\":7}}],[\"70\",{\"1\":{\"142\":1,\"397\":1,\"400\":2}}],[\"7\",{\"0\":{\"185\":1,\"202\":1,\"203\":1,\"204\":1,\"205\":1,\"220\":1,\"344\":1,\"415\":1,\"424\":1,\"441\":1},\"1\":{\"85\":1,\"88\":1,\"89\":1,\"90\":2,\"133\":1,\"139\":2,\"285\":1,\"299\":4,\"337\":1,\"341\":4,\"373\":1,\"374\":1,\"375\":1,\"396\":1,\"400\":2,\"406\":2,\"411\":1,\"414\":1,\"415\":2,\"416\":2,\"429\":1,\"430\":1,\"431\":1,\"432\":1,\"433\":1,\"437\":2,\"438\":2,\"441\":1,\"443\":1,\"444\":2}}],[\"新功能\",{\"1\":{\"519\":2,\"535\":2}}],[\"新生代内存设置为内容纳\",{\"1\":{\"394\":1}}],[\"新生代内存太大\",{\"1\":{\"394\":1}}],[\"新生代内存太小\",{\"1\":{\"394\":1}}],[\"新生代内存越大越好么\",{\"1\":{\"394\":1}}],[\"新生代内存不足发生的垃圾收集\",{\"1\":{\"384\":4}}],[\"新生代的特点\",{\"1\":{\"394\":1}}],[\"新生代调优\",{\"0\":{\"394\":1}}],[\"新生代回收时间略微增加\",{\"1\":{\"387\":1}}],[\"新生代回收的跨代引用\",{\"1\":{\"385\":1}}],[\"新生代回收+并发标记\",{\"1\":{\"380\":1}}],[\"新生代收集会产生\",{\"1\":{\"381\":1}}],[\"新生代存在\",{\"1\":{\"381\":1}}],[\"新生代垃圾收集同时会执行一些并发的标记\",{\"1\":{\"380\":1}}],[\"新生代伊甸园垃圾回收\",{\"1\":{\"380\":1}}],[\"新生代\",{\"1\":{\"379\":1,\"385\":1}}],[\"新生代放不下去\",{\"1\":{\"379\":1}}],[\"新生代serial\",{\"1\":{\"377\":1}}],[\"新生代复制\",{\"0\":{\"377\":1}}],[\"新生代采用标记\",{\"1\":{\"376\":1}}],[\"新生代和老年代的情况\",{\"1\":{\"373\":1}}],[\"新生代空间不足时\",{\"1\":{\"371\":1}}],[\"新生代有划分为伊甸园\",{\"1\":{\"370\":1}}],[\"新线程启动后会打印一条消息\",{\"1\":{\"319\":1}}],[\"新建的对象也是不可偏向的\",{\"1\":{\"300\":1}}],[\"新建完成\",{\"1\":{\"85\":1}}],[\"新的偏移量\",{\"1\":{\"117\":1}}],[\"新版本改变\",{\"1\":{\"89\":1}}],[\"新增笔记失败\",{\"1\":{\"534\":1}}],[\"新增数据\",{\"1\":{\"531\":1,\"532\":1}}],[\"新增了枚举类\",{\"1\":{\"443\":1}}],[\"新增这个数据\",{\"1\":{\"85\":1}}],[\"新增\",{\"1\":{\"85\":1}}],[\"所占的空间多少\",{\"1\":{\"580\":1,\"600\":1,\"611\":1,\"654\":1,\"665\":1}}],[\"所占空间越大\",{\"1\":{\"580\":1,\"600\":1,\"611\":1,\"654\":1,\"665\":1}}],[\"所对应的id写入到一个list集合中\",{\"1\":{\"541\":1}}],[\"所谓得发布订阅模型就是事先将传输的数据进行分类\",{\"1\":{\"484\":1}}],[\"所谓的误差率就是指当发生哈希冲突的时候\",{\"1\":{\"541\":1}}],[\"所谓的内联就是把方法内代码拷贝\",{\"1\":{\"470\":1}}],[\"所谓的双亲委派\",{\"1\":{\"460\":1}}],[\"所谓的\",{\"1\":{\"434\":1}}],[\"所谓第三方登录\",{\"1\":{\"245\":1}}],[\"所指示行号\",{\"1\":{\"427\":1}}],[\"所属类\",{\"1\":{\"400\":3}}],[\"所用时间远小于\",{\"1\":{\"394\":1}}],[\"所需要参数开启\",{\"1\":{\"380\":1}}],[\"所有点赞的人\",{\"1\":{\"530\":1}}],[\"所有这些参数只能在加载时设置\",{\"1\":{\"522\":1}}],[\"所有消费者共享一个消息队列\",{\"1\":{\"514\":1}}],[\"所有的\",{\"1\":{\"394\":1}}],[\"所有的语言分词\",{\"1\":{\"90\":1}}],[\"所有对象都经过并发标记后\",{\"1\":{\"388\":1}}],[\"所有被同步锁\",{\"1\":{\"356\":1}}],[\"所有等待获取锁的线程都会被挂起\",{\"1\":{\"305\":1}}],[\"所以缓存数据的时候加上过期时间\",{\"1\":{\"592\":1}}],[\"所以适合使用读写锁\",{\"1\":{\"592\":1}}],[\"所以衡量同一个网站的访问量\",{\"1\":{\"541\":1}}],[\"所以如果采用以上方案\",{\"1\":{\"541\":1}}],[\"所以我们只是单纯的把这两个值作为一个参考值\",{\"1\":{\"541\":1}}],[\"所以我们可以使用bitmap来减少list的存储空间\",{\"1\":{\"541\":1}}],[\"所以我们可以按照商户类型做分组\",{\"1\":{\"536\":1}}],[\"所以我们如何解决呢\",{\"1\":{\"541\":1}}],[\"所以我们无法根据type来对数据进行筛选\",{\"1\":{\"536\":1}}],[\"所以我们在这个地方存储他的id即可\",{\"1\":{\"536\":1}}],[\"所以我们应当使用set或者是sortedset\",{\"1\":{\"530\":1}}],[\"所以我们就通过\",{\"1\":{\"351\":1}}],[\"所以这个时候\",{\"1\":{\"530\":1}}],[\"所以这样做没有压力\",{\"1\":{\"115\":1,\"533\":1}}],[\"所以才会出现这个问题\",{\"1\":{\"529\":1}}],[\"所以kafka提供了幂等性操作解决数据重复\",{\"1\":{\"484\":1}}],[\"所以生产者生产完数据之后不用等待消费者处理\",{\"1\":{\"484\":1}}],[\"所以x不应该再发生变化了\",{\"1\":{\"446\":1}}],[\"所以调用\",{\"1\":{\"437\":1}}],[\"所以在取值时\",{\"1\":{\"437\":1}}],[\"所以不要在finally中进行返回操作\",{\"1\":{\"431\":1}}],[\"所以不能对已经声明的变量再次声明\",{\"1\":{\"134\":1}}],[\"所以局部变量表\",{\"1\":{\"428\":1}}],[\"所以虚拟机需要调用invokevirtual指令\",{\"1\":{\"417\":1}}],[\"所以会将两个数弹出操作数栈来进行运算\",{\"1\":{\"414\":1}}],[\"所以只有一个垃圾回收线程\",{\"1\":{\"377\":1}}],[\"所以可以适当增加hashtable桶的个数\",{\"1\":{\"346\":1}}],[\"所以需要创建一个数据库\",{\"1\":{\"552\":1,\"559\":1,\"566\":1}}],[\"所以需要使用stringbuilder来创建\",{\"1\":{\"341\":1}}],[\"所以需要用到本地方法\",{\"1\":{\"329\":1}}],[\"所以进行的操作和\",{\"1\":{\"341\":1}}],[\"所以s5直接从串池中获取值\",{\"1\":{\"341\":1}}],[\"所以当你使用了wait\",{\"1\":{\"298\":1}}],[\"所以称为隐藏式\",{\"1\":{\"253\":1}}],[\"所以\",{\"1\":{\"139\":1,\"364\":1,\"410\":1}}],[\"所以使用\",{\"1\":{\"136\":1}}],[\"所以此处会报错\",{\"1\":{\"134\":1}}],[\"所以有\",{\"1\":{\"115\":1}}],[\"所以feed流的分页\",{\"1\":{\"115\":1,\"534\":1}}],[\"所以数据的角标也在变化\",{\"1\":{\"115\":1,\"534\":1}}],[\"所以等他们上线时\",{\"1\":{\"115\":1,\"533\":1}}],[\"所以直接访问\",{\"1\":{\"90\":1}}],[\"所以比较方便的做法就是下载\",{\"1\":{\"90\":1}}],[\"所以您可以检查是否一个指定的动作是不是失败了\",{\"1\":{\"85\":1}}],[\"所代表的原始word\",{\"1\":{\"90\":1}}],[\"所确定\",{\"1\":{\"56\":1}}],[\"与geosearch功能一致\",{\"1\":{\"519\":1,\"535\":1}}],[\"与解释器的区别\",{\"1\":{\"469\":1}}],[\"与数组元素的关系\",{\"1\":{\"442\":1}}],[\"与吞吐量关系密切\",{\"1\":{\"378\":2}}],[\"与其他收集器的单线程相比\",{\"1\":{\"377\":1}}],[\"与其他自适应单向函数一样\",{\"1\":{\"199\":3}}],[\"与\",{\"0\":{\"283\":1},\"1\":{\"277\":1,\"316\":1,\"378\":3,\"379\":1,\"472\":1,\"538\":1}}],[\"与terms并列\",{\"1\":{\"88\":1}}],[\"与发送的顺序相同\",{\"1\":{\"85\":1}}],[\"与元素据对比\",{\"1\":{\"85\":1}}],[\"以适应nat或代理环境\",{\"1\":{\"646\":1}}],[\"以适应当前的上下文路径\",{\"1\":{\"160\":1,\"163\":1}}],[\"以满足特定应用场景的需求\",{\"1\":{\"623\":1}}],[\"以检测连接状态并获取可能的延迟命令\",{\"1\":{\"621\":1}}],[\"以达到与主节点数据一致的状态\",{\"1\":{\"621\":1}}],[\"以达到理想的运行速度\",{\"1\":{\"469\":1}}],[\"以数据的方式写binlog日志\",{\"1\":{\"552\":1,\"559\":1,\"566\":1}}],[\"以typeid为key存入同一个geo集合中即可\",{\"1\":{\"536\":1}}],[\"以当前坐标作为圆心\",{\"1\":{\"536\":1}}],[\"以为在mysql和sqlserver中任选一种就可以了\",{\"1\":{\"512\":1}}],[\"以接口全限定名名为文件\",{\"1\":{\"464\":1}}],[\"以前面的性别枚举为例\",{\"1\":{\"443\":1}}],[\"以看到\",{\"1\":{\"441\":1}}],[\"以下情况不会初始化\",{\"1\":{\"455\":1}}],[\"以下情况会初始化\",{\"1\":{\"455\":1}}],[\"以下代码的分析\",{\"1\":{\"434\":1}}],[\"以下是redis主从复制的主要特点和工作原理\",{\"1\":{\"618\":1}}],[\"以下是redis在不同行业中的应用场景与实际使用方案\",{\"1\":{\"545\":1,\"548\":1}}],[\"以下是park方法的一个基本示例\",{\"1\":{\"319\":1}}],[\"以下是一个基本的rbac数据库设计方案的示例\",{\"1\":{\"235\":1}}],[\"以\",{\"1\":{\"395\":1,\"457\":1,\"561\":2}}],[\"以免垃圾回收时移动对象地址\",{\"1\":{\"377\":1}}],[\"以上两个功能和共同关注没有什么关系\",{\"1\":{\"532\":1}}],[\"以上的结果可能是正数\",{\"1\":{\"474\":1}}],[\"以上的实现特点是\",{\"1\":{\"456\":1}}],[\"以上比较指令中没有\",{\"1\":{\"412\":1}}],[\"以上\",{\"1\":{\"346\":1}}],[\"以避免常见的并发问题\",{\"1\":{\"319\":1}}],[\"以避免数据不一致或竞态条件的问题\",{\"1\":{\"277\":1}}],[\"以后已废弃\",{\"1\":{\"519\":1,\"535\":1}}],[\"以后\",{\"1\":{\"344\":1,\"436\":1}}],[\"以后只要不发生竞争\",{\"1\":{\"294\":1}}],[\"以后的查询就根据后台结果作为条件\",{\"1\":{\"115\":1,\"535\":1}}],[\"以确保当调用\",{\"1\":{\"286\":1}}],[\"以此作为保护措施防止误操作\",{\"1\":{\"629\":1,\"639\":1}}],[\"以此保证变量的一致性\",{\"1\":{\"277\":1}}],[\"以此按顺序执行所有的\",{\"1\":{\"85\":1}}],[\"以决定是否授权访问资源\",{\"1\":{\"242\":1}}],[\"以逗号分隔\",{\"1\":{\"135\":1}}],[\"以字母或下划线开头\",{\"1\":{\"134\":1}}],[\"以及2个hash函数\",{\"1\":{\"580\":1,\"600\":1,\"611\":1,\"654\":1,\"665\":1}}],[\"以及数据内容以及old老数据\",{\"1\":{\"560\":1}}],[\"以及redis相关参数\",{\"1\":{\"554\":1}}],[\"以及分页信息\",{\"1\":{\"536\":1}}],[\"以及字符串常量\",{\"1\":{\"451\":1}}],[\"以及所有实现了\",{\"1\":{\"440\":1}}],[\"以及方法和构造函数的代码\",{\"1\":{\"336\":1}}],[\"以及那些需要更细粒度控制线程阻塞和唤醒的高级并发应用程序\",{\"1\":{\"319\":1}}],[\"以及\",{\"1\":{\"270\":1}}],[\"以及标准库包含的方法\",{\"1\":{\"133\":1}}],[\"以及term\",{\"1\":{\"90\":1}}],[\"以及它所包含的属性\",{\"1\":{\"89\":1}}],[\"以及多少成功\",{\"1\":{\"87\":1}}],[\"以便从节点能够成功进行身份验证并开始复制过程\",{\"1\":{\"627\":1,\"637\":1}}],[\"以便于接着往下执行\",{\"1\":{\"324\":1}}],[\"以便验证密码时大约需要1秒的时间\",{\"1\":{\"199\":1}}],[\"以便\",{\"1\":{\"9\":1}}],[\"第五步\",{\"1\":{\"554\":1}}],[\"第四步\",{\"1\":{\"554\":1}}],[\"第四种方式\",{\"0\":{\"255\":1}}],[\"第\",{\"1\":{\"400\":34}}],[\"第三方缓存实现\",{\"1\":{\"393\":1}}],[\"第三方登录\",{\"1\":{\"245\":1}}],[\"第三步\",{\"1\":{\"357\":1,\"554\":1}}],[\"第三种方式\",{\"0\":{\"254\":1}}],[\"第三种\",{\"1\":{\"134\":1,\"135\":1}}],[\"第一次调用\",{\"1\":{\"456\":1}}],[\"第一遍是根据字符串的\",{\"1\":{\"441\":1}}],[\"第一步\",{\"1\":{\"357\":1,\"537\":1,\"554\":1}}],[\"第一个问题是redis的高可用问题\",{\"1\":{\"620\":1}}],[\"第一个用来匹配字符串\",{\"1\":{\"441\":1}}],[\"第一个\",{\"1\":{\"139\":1}}],[\"第一个聚合的结果\",{\"1\":{\"88\":1}}],[\"第一种解决方案\",{\"1\":{\"541\":1}}],[\"第一种方式\",{\"0\":{\"252\":1}}],[\"第一种\",{\"1\":{\"134\":1,\"135\":1}}],[\"第一行为操作\",{\"1\":{\"85\":1}}],[\"第二\",{\"1\":{\"620\":1}}],[\"第二遍才是利用\",{\"1\":{\"441\":1}}],[\"第二个用来根据x的值来决定输出语句\",{\"1\":{\"441\":1}}],[\"第二个聚合的结果\",{\"1\":{\"88\":1}}],[\"第二次\",{\"1\":{\"363\":1}}],[\"第二步\",{\"1\":{\"357\":1,\"537\":1,\"554\":1}}],[\"第二种方案可以设置当前key逻辑过期\",{\"1\":{\"572\":1}}],[\"第二种方式\",{\"0\":{\"253\":1}}],[\"第二种解决方案\",{\"1\":{\"541\":1}}],[\"第二种\",{\"1\":{\"134\":1,\"135\":1}}],[\"第二页这个时候拿数据\",{\"1\":{\"115\":1,\"534\":1}}],[\"第二条记录\",{\"1\":{\"85\":1}}],[\"第二行为数据\",{\"1\":{\"85\":1}}],[\"第7版\",{\"1\":{\"62\":1}}],[\"6之后\",{\"1\":{\"621\":1}}],[\"6项\",{\"1\":{\"400\":1}}],[\"67\",{\"1\":{\"397\":9,\"400\":16}}],[\"6749\",{\"1\":{\"251\":1,\"253\":1,\"254\":1}}],[\"6a\",{\"1\":{\"397\":11,\"400\":20}}],[\"6844903785744056333\",{\"1\":{\"541\":1}}],[\"68\",{\"1\":{\"397\":3,\"400\":8}}],[\"6379\",{\"1\":{\"525\":1,\"526\":1,\"561\":1}}],[\"63649\",{\"1\":{\"471\":1}}],[\"63\",{\"1\":{\"397\":7,\"400\":15}}],[\"6c\",{\"1\":{\"397\":23,\"400\":44}}],[\"61\",{\"1\":{\"397\":34,\"400\":66}}],[\"6d\",{\"1\":{\"397\":8,\"400\":15}}],[\"65是\",{\"1\":{\"400\":2}}],[\"65\",{\"1\":{\"397\":19,\"400\":41}}],[\"6f\",{\"1\":{\"397\":15,\"400\":32}}],[\"6e\",{\"1\":{\"397\":17,\"400\":36}}],[\"697\",{\"1\":{\"471\":1}}],[\"69\",{\"1\":{\"397\":17,\"400\":42}}],[\"694\",{\"1\":{\"350\":1}}],[\"6mb\",{\"1\":{\"373\":4,\"374\":1,\"375\":1}}],[\"62\",{\"1\":{\"295\":2,\"397\":5,\"400\":14}}],[\"60163\",{\"1\":{\"471\":1}}],[\"6000\",{\"1\":{\"298\":1}}],[\"60\",{\"1\":{\"142\":1,\"630\":1,\"640\":1}}],[\"647\",{\"1\":{\"471\":1}}],[\"642\",{\"1\":{\"338\":1}}],[\"64\",{\"1\":{\"112\":1,\"117\":3,\"295\":1,\"397\":6,\"400\":15}}],[\"6\",{\"0\":{\"165\":1,\"184\":1,\"197\":1,\"198\":1,\"199\":1,\"200\":1,\"201\":1,\"217\":1,\"218\":1,\"219\":1,\"268\":1,\"341\":1,\"347\":1,\"348\":1,\"349\":1,\"351\":1,\"396\":1,\"414\":1,\"423\":1,\"432\":1,\"440\":1,\"467\":1,\"468\":1,\"472\":1},\"1\":{\"85\":1,\"88\":1,\"89\":1,\"90\":1,\"121\":1,\"122\":1,\"133\":1,\"143\":1,\"158\":1,\"264\":1,\"285\":1,\"289\":3,\"294\":1,\"299\":4,\"324\":1,\"337\":1,\"341\":6,\"343\":1,\"344\":1,\"373\":1,\"374\":1,\"375\":1,\"400\":3,\"401\":1,\"406\":2,\"412\":3,\"413\":2,\"416\":1,\"423\":5,\"429\":1,\"437\":1,\"438\":2,\"444\":1,\"519\":3,\"535\":4,\"537\":4,\"540\":2,\"580\":1,\"600\":1,\"611\":1,\"638\":1,\"654\":1,\"665\":1}}],[\"响应时间优先\",{\"0\":{\"379\":1}}],[\"响应\",{\"1\":{\"85\":1,\"394\":1}}],[\"删除命令\",{\"1\":{\"561\":1}}],[\"删除\",{\"1\":{\"531\":1,\"532\":1}}],[\"删除set中元素\",{\"1\":{\"107\":1}}],[\"删除customer索引\",{\"1\":{\"85\":1}}],[\"删除id=1的数据\",{\"1\":{\"85\":1}}],[\"删除文档\",{\"1\":{\"85\":1}}],[\"只读\",{\"1\":{\"629\":1,\"639\":1}}],[\"只读从节点\",{\"0\":{\"629\":1,\"639\":1}}],[\"只不过需要安装canaladapter来实现\",{\"1\":{\"565\":1}}],[\"只不过这里单独提出来了\",{\"1\":{\"407\":1}}],[\"只记录1次\",{\"1\":{\"541\":1}}],[\"只要对应是1\",{\"1\":{\"539\":1}}],[\"只要加载它们的类加载器不同\",{\"1\":{\"457\":1}}],[\"只触发父类初始化\",{\"1\":{\"455\":1}}],[\"只会触发父类的初始化\",{\"1\":{\"455\":1}}],[\"只是为了便于阅读\",{\"1\":{\"434\":1}}],[\"只是为了复制出配置\",{\"1\":{\"90\":1}}],[\"只是将\",{\"1\":{\"365\":1}}],[\"只需要提供client\",{\"1\":{\"271\":1}}],[\"只需要拿到我们关注用户的信息\",{\"1\":{\"115\":1,\"533\":1}}],[\"只能保证看到最新值\",{\"1\":{\"481\":1}}],[\"只能在门外等待\",{\"1\":{\"476\":1}}],[\"只能在运行期确定它的值\",{\"1\":{\"341\":1}}],[\"只能进入\",{\"1\":{\"428\":1}}],[\"只能随机唤醒一个等待线程\",{\"1\":{\"283\":1}}],[\"只能用于一些安全要求不高的场景\",{\"1\":{\"253\":1}}],[\"只能加密\",{\"1\":{\"198\":1}}],[\"只允许网页请求统一域名下的服务\",{\"1\":{\"220\":1}}],[\"只有一个消费者\",{\"1\":{\"484\":1}}],[\"只有在这两个类是由同一个类加载器加载的前提下才有意义\",{\"1\":{\"457\":1}}],[\"只有在运行期间才能确定\",{\"1\":{\"416\":1}}],[\"只有在被用到时才会转化为对象\",{\"1\":{\"341\":1}}],[\"只有所有\",{\"1\":{\"359\":1}}],[\"只有当运行到那一行字符串且在串池中不存在的时候\",{\"1\":{\"341\":1}}],[\"只有第一次使用\",{\"1\":{\"294\":1}}],[\"只有数组对象保存了这部分数据\",{\"1\":{\"293\":1}}],[\"只有数组对象才有\",{\"1\":{\"290\":1}}],[\"只有密码的单向哈希会被暴露\",{\"1\":{\"198\":1}}],[\"只有弄清tcp首部各字段的作用才能掌握tcp的工作原理\",{\"1\":{\"57\":1}}],[\"只提供了删除索引和文档的操作\",{\"1\":{\"85\":1}}],[\"发起了一个数据库不存在的\",{\"1\":{\"541\":1}}],[\"发起请求只是给数据库+1\",{\"1\":{\"529\":1}}],[\"发布探店笔记\",{\"0\":{\"527\":1},\"1\":{\"527\":1}}],[\"发布\",{\"1\":{\"484\":1}}],[\"发生的时机\",{\"0\":{\"455\":1}}],[\"发生\",{\"1\":{\"396\":1}}],[\"发现新建的对象是否逃逸\",{\"1\":{\"469\":1}}],[\"发现它最后是使用\",{\"1\":{\"464\":1}}],[\"发现没有\",{\"1\":{\"431\":1}}],[\"发现\",{\"1\":{\"424\":1}}],[\"发现是一个对象\",{\"1\":{\"410\":1}}],[\"发现有强引用引用它\",{\"1\":{\"386\":1}}],[\"发现相同\",{\"1\":{\"85\":1}}],[\"发展历史最悠久的收集器\",{\"1\":{\"377\":2}}],[\"发送消息失败重试次数\",{\"1\":{\"561\":1}}],[\"发送消息超时时间\",{\"1\":{\"561\":1}}],[\"发送控制命令到设备\",{\"1\":{\"545\":1,\"548\":1}}],[\"发送搜索参数\",{\"1\":{\"87\":1}}],[\"发送之后\",{\"1\":{\"85\":1}}],[\"发送方应用程序交给发送方的tcp共10个数据块\",{\"1\":{\"55\":1}}],[\"偶尔更新\",{\"1\":{\"85\":1}}],[\"带完全的profiling\",{\"1\":{\"469\":1}}],[\"带基本的profiling\",{\"1\":{\"469\":1}}],[\"带泛型的类型\",{\"1\":{\"438\":1}}],[\"带update\",{\"1\":{\"85\":1}}],[\"带\",{\"1\":{\"85\":1}}],[\"带有下划线开头的\",{\"1\":{\"85\":1}}],[\"注入redis\",{\"1\":{\"561\":1}}],[\"注重服务的响应速度的场景并发收集\",{\"1\":{\"376\":1}}],[\"注册驱动的集合\",{\"1\":{\"463\":1}}],[\"注册后会获取到一个clientid和clientsecrets\",{\"1\":{\"252\":1}}],[\"注册客户应用\",{\"1\":{\"252\":1,\"263\":1}}],[\"注销成功时的处理\",{\"1\":{\"216\":1}}],[\"注销成功\",{\"1\":{\"215\":1}}],[\"注销结果处理\",{\"0\":{\"215\":1}}],[\"注销响应\",{\"0\":{\"214\":1}}],[\"注意加上下面的\",{\"1\":{\"417\":1}}],[\"注意jstack查找出的线程id是16进制的\",{\"1\":{\"328\":1}}],[\"注意join\",{\"1\":{\"279\":1}}],[\"注意\",{\"1\":{\"289\":1,\"303\":1,\"316\":1,\"341\":1,\"367\":1,\"387\":1,\"400\":1,\"410\":1,\"411\":1,\"413\":1,\"430\":1,\"434\":1,\"439\":1,\"440\":1,\"441\":1,\"446\":1,\"448\":1,\"480\":1,\"527\":1,\"531\":1,\"535\":1,\"540\":1,\"552\":1,\"559\":1,\"561\":1,\"566\":1,\"569\":1}}],[\"注意事项\",{\"0\":{\"136\":1,\"162\":1,\"623\":1}}],[\"注意这里是tcp\",{\"1\":{\"567\":1}}],[\"注意这里的内容格式\",{\"1\":{\"560\":1}}],[\"注意这里\",{\"1\":{\"88\":1}}],[\"注意带不带\",{\"1\":{\"85\":1}}],[\"注释内容\",{\"1\":{\"88\":1}}],[\"注释之前的内容被视为文章摘要\",{\"1\":{\"25\":1,\"572\":1,\"575\":1,\"595\":1,\"606\":1,\"649\":1,\"660\":1,\"673\":1}}],[\"注\",{\"1\":{\"85\":1}}],[\"或\",{\"1\":{\"88\":2,\"144\":1,\"277\":1,\"278\":1,\"286\":1,\"298\":1,\"373\":2,\"538\":1}}],[\"或者去掉mysql\",{\"1\":{\"591\":1}}],[\"或者可以根据计算的需要进行扩展\",{\"1\":{\"336\":1}}],[\"或者类似于操作系统进程中的\",{\"1\":{\"336\":1}}],[\"或者第三方类库操作\",{\"1\":{\"327\":1}}],[\"或者程序员将数据库数据泄露的情况也可能发生\",{\"1\":{\"198\":1}}],[\"或者直接在dbuserdetailsmanager类上添加\",{\"1\":{\"189\":1}}],[\"或者最终结果为相同类型的表达式\",{\"1\":{\"142\":1}}],[\"或者执行其他逻辑\",{\"1\":{\"117\":1}}],[\"或者返回错误\",{\"1\":{\"117\":1}}],[\"或者从redis中获取都可以\",{\"1\":{\"98\":1,\"102\":1,\"121\":1}}],[\"或者\",{\"1\":{\"85\":2,\"88\":2,\"423\":1}}],[\"或插口\",{\"1\":{\"56\":1}}],[\"乐观锁是生效\",{\"1\":{\"85\":1}}],[\"乐观锁用法\",{\"1\":{\"85\":1}}],[\"示例代码参考\",{\"1\":{\"264\":1}}],[\"示例代码\",{\"1\":{\"134\":1,\"140\":1,\"141\":1,\"142\":1,\"143\":1,\"148\":1,\"151\":1}}],[\"示例2\",{\"1\":{\"85\":1}}],[\"示例1\",{\"1\":{\"85\":1}}],[\"示例\",{\"1\":{\"85\":1,\"88\":1,\"89\":1,\"90\":1,\"286\":1,\"397\":1}}],[\"会直接返回null\",{\"1\":{\"577\":1,\"597\":1,\"608\":1,\"651\":1,\"662\":1}}],[\"会直接覆盖这段内存\",{\"1\":{\"367\":1}}],[\"会作为文档id\",{\"1\":{\"568\":1}}],[\"会封装为employee实体\",{\"1\":{\"554\":1}}],[\"会回调对应的方法把数据传递进来\",{\"1\":{\"554\":1}}],[\"会回收最有价值的老年代\",{\"1\":{\"383\":1}}],[\"会回收新生代\",{\"1\":{\"351\":1}}],[\"会出现一系列的商家\",{\"1\":{\"536\":1}}],[\"会根据主题进行发送\",{\"1\":{\"484\":1}}],[\"会发现即使不加\",{\"1\":{\"480\":1}}],[\"会发生垃圾回收\",{\"1\":{\"345\":1}}],[\"会采用运行时生成的类代替掉最初的实现\",{\"1\":{\"472\":1}}],[\"会到\",{\"1\":{\"463\":1}}],[\"会初始化类\",{\"1\":{\"455\":1}}],[\"会导致\",{\"1\":{\"456\":1}}],[\"会导致初始化\",{\"1\":{\"455\":1}}],[\"会导致偏向锁被撤销\",{\"1\":{\"296\":1}}],[\"会被转换为\",{\"1\":{\"444\":1}}],[\"会被编译器转换为\",{\"1\":{\"441\":2}}],[\"会吞掉异常\",{\"1\":{\"431\":2}}],[\"会返回操作数栈顶的整型值\",{\"1\":{\"431\":1}}],[\"会抛出其他异常\",{\"1\":{\"430\":1}}],[\"会抛异常\",{\"1\":{\"364\":1}}],[\"会执行finally\",{\"1\":{\"430\":2}}],[\"会消耗掉栈顶一个引用\",{\"1\":{\"416\":1}}],[\"会更频繁地触发\",{\"1\":{\"394\":1}}],[\"会使得吞吐量下降\",{\"1\":{\"394\":1}}],[\"会使用extclassloader来尝试加载\",{\"1\":{\"460\":1}}],[\"会使用\",{\"1\":{\"12\":1}}],[\"会stw\",{\"1\":{\"383\":2}}],[\"会重新进入新生代收集\",{\"1\":{\"380\":1}}],[\"会先尝试触发minorgc\",{\"1\":{\"371\":1}}],[\"会晋升至老年代\",{\"1\":{\"371\":1}}],[\"会引发\",{\"1\":{\"371\":1,\"455\":2}}],[\"会占用双倍的内存空间\",{\"1\":{\"369\":1}}],[\"会触发\",{\"1\":{\"364\":1}}],[\"会造成程序执行的时间比较长\",{\"1\":{\"351\":1}}],[\"会加上下面的参数\",{\"1\":{\"351\":1}}],[\"会在系统内存中创建一个缓冲区\",{\"1\":{\"349\":1}}],[\"会在前序字段相等时后续字段内部排序\",{\"1\":{\"88\":1}}],[\"会把符号\",{\"1\":{\"341\":3}}],[\"会把串池中的对象返回\",{\"1\":{\"341\":2}}],[\"会\",{\"1\":{\"326\":2,\"394\":1}}],[\"会将堆划分为多个大小相等的\",{\"1\":{\"380\":1}}],[\"会将该对象直接晋升为老年代\",{\"1\":{\"374\":1}}],[\"会将该字符串对象复制一份\",{\"1\":{\"343\":1}}],[\"会将该字符串对象尝试放入到串池中\",{\"1\":{\"341\":1,\"343\":1}}],[\"会将\",{\"1\":{\"362\":1}}],[\"会将内存位置\",{\"1\":{\"309\":1}}],[\"会将偏向锁升级为轻量级锁\",{\"1\":{\"297\":1}}],[\"会这样觉得\",{\"1\":{\"299\":1,\"300\":1}}],[\"会插入一个内存屏障来防止指令重排序\",{\"1\":{\"286\":1}}],[\"会话管理\",{\"1\":{\"226\":1,\"545\":1,\"548\":1}}],[\"会话并发处理\",{\"0\":{\"224\":1}}],[\"会对e\",{\"1\":{\"383\":1}}],[\"会对新生代\",{\"1\":{\"380\":1}}],[\"会对于查询条件进行分词\",{\"1\":{\"88\":1}}],[\"会对检索条件进行分词匹配\",{\"1\":{\"88\":1}}],[\"会进行内联\",{\"1\":{\"470\":1}}],[\"会进行全文检索\",{\"1\":{\"88\":1}}],[\"会进行精确匹配\",{\"1\":{\"88\":1}}],[\"会报错\",{\"1\":{\"85\":1}}],[\"会自动生成\",{\"1\":{\"85\":1}}],[\"返回的是一个十进制的数字\",{\"1\":{\"540\":1}}],[\"返回的数据字段\",{\"1\":{\"88\":1}}],[\"返回id\",{\"1\":{\"527\":1,\"534\":1}}],[\"返回指定member的坐标\",{\"1\":{\"519\":1,\"535\":1}}],[\"返回操作数栈顶元素\",{\"1\":{\"432\":1}}],[\"返回字符串常量池的引用\",{\"1\":{\"342\":1}}],[\"返回true\",{\"1\":{\"313\":1}}],[\"返回令牌\",{\"1\":{\"270\":1}}],[\"返回401未经授权\",{\"1\":{\"165\":1}}],[\"返回查询到的结果\",{\"1\":{\"117\":1}}],[\"返回\",{\"1\":{\"110\":1,\"111\":1,\"118\":1,\"338\":1,\"530\":1,\"532\":1,\"537\":1}}],[\"返回users切片\",{\"1\":{\"109\":1}}],[\"返回nil\",{\"1\":{\"109\":1}}],[\"返回响应\",{\"1\":{\"98\":1,\"102\":1,\"121\":1,\"209\":1,\"212\":1,\"215\":1,\"218\":1,\"225\":1,\"231\":1}}],[\"返回结果\",{\"1\":{\"88\":1,\"90\":2,\"527\":1}}],[\"返回结果按哪个列排序\",{\"1\":{\"88\":1}}],[\"返回内容\",{\"1\":{\"87\":1}}],[\"返回时\",{\"1\":{\"85\":1}}],[\"返回数据\",{\"1\":{\"85\":4,\"537\":1}}],[\"返回顶部按钮\",{\"1\":{\"3\":1,\"6\":1,\"274\":1}}],[\"jianshu\",{\"1\":{\"583\":1,\"603\":1,\"614\":1,\"657\":1,\"668\":1}}],[\"jit2\",{\"1\":{\"470\":2}}],[\"jit\",{\"1\":{\"469\":1,\"478\":1}}],[\"jit1\",{\"1\":{\"469\":1}}],[\"just\",{\"1\":{\"637\":1,\"638\":1,\"639\":1,\"640\":1,\"642\":1,\"645\":1}}],[\"juejin\",{\"1\":{\"541\":1}}],[\"juc是指package\",{\"1\":{\"277\":1}}],[\"jedispooled\",{\"1\":{\"525\":2}}],[\"jedis\",{\"0\":{\"525\":1},\"1\":{\"525\":4,\"561\":1}}],[\"jre\",{\"1\":{\"457\":2,\"459\":2,\"460\":1,\"463\":2}}],[\"jclasslib\",{\"1\":{\"434\":1}}],[\"jconsole\",{\"1\":{\"334\":1}}],[\"jpg\",{\"1\":{\"398\":1}}],[\"jps\",{\"1\":{\"357\":1,\"418\":1}}],[\"jps工具\",{\"1\":{\"334\":1}}],[\"j++\",{\"1\":{\"338\":1,\"345\":1,\"469\":1,\"470\":1,\"474\":2,\"476\":2}}],[\"j\",{\"1\":{\"338\":2,\"345\":5,\"469\":2,\"470\":2,\"474\":4,\"476\":4}}],[\"jvisualvm\",{\"1\":{\"334\":1}}],[\"jvm要保证每个monitorenter必须有对应的monitorexit与之配对\",{\"1\":{\"476\":1}}],[\"jvm基于进入和退出monitor对象来实现方法同步和代码块同步\",{\"1\":{\"476\":1}}],[\"jvm>jar\",{\"1\":{\"459\":1}}],[\"jvm>java\",{\"1\":{\"458\":1}}],[\"jvm规范\",{\"1\":{\"450\":1}}],[\"jvms\",{\"1\":{\"412\":3}}],[\"jvm中的垃圾回收器通过可达性分析来探索所有存活的对象\",{\"1\":{\"355\":1}}],[\"jvm\",{\"1\":{\"286\":1,\"297\":1,\"299\":1,\"300\":1,\"324\":1,\"339\":2,\"351\":1,\"373\":1,\"382\":1,\"397\":1,\"400\":2,\"411\":1,\"417\":2,\"419\":1,\"420\":1,\"438\":2,\"442\":1,\"445\":2,\"451\":1,\"452\":2,\"455\":3,\"458\":5,\"459\":5,\"469\":1,\"474\":1},\"2\":{\"320\":1,\"321\":1,\"482\":1,\"483\":1}}],[\"jmh<\",{\"1\":{\"471\":2}}],[\"jmh\",{\"1\":{\"471\":9}}],[\"jmap\",{\"1\":{\"334\":2,\"357\":1}}],[\"jmm\",{\"1\":{\"283\":3,\"472\":4}}],[\"jmm定义了线程和主内存之间的抽象关系\",{\"1\":{\"283\":1}}],[\"jstack\",{\"1\":{\"328\":1}}],[\"json格式序列化\",{\"1\":{\"554\":1}}],[\"json\",{\"1\":{\"81\":1,\"85\":6,\"90\":1,\"209\":4,\"212\":4,\"215\":4,\"218\":4,\"225\":4,\"231\":4,\"512\":1,\"561\":3,\"726\":1,\"729\":1}}],[\"join\",{\"1\":{\"279\":1,\"297\":1,\"300\":1,\"474\":2,\"476\":2,\"530\":1,\"535\":1,\"537\":1}}],[\"join原理\",{\"0\":{\"279\":1}}],[\"john\",{\"1\":{\"85\":8}}],[\"jdi\",{\"1\":{\"419\":1}}],[\"jdk<1\",{\"1\":{\"376\":1}}],[\"jdk8\",{\"1\":{\"339\":1,\"380\":1}}],[\"jdk1\",{\"1\":{\"337\":1,\"344\":2,\"378\":1,\"396\":1}}],[\"jdk\",{\"0\":{\"389\":1},\"1\":{\"158\":1,\"380\":1,\"389\":3,\"419\":1,\"436\":3,\"437\":1,\"439\":1,\"440\":1,\"441\":1,\"443\":1,\"444\":1,\"457\":1}}],[\"jdbc等插件\",{\"1\":{\"98\":1,\"102\":1}}],[\"jdbc\",{\"1\":{\"98\":1,\"102\":1,\"181\":1,\"463\":5,\"464\":3,\"465\":1,\"568\":1}}],[\"jar\",{\"1\":{\"303\":4,\"419\":1,\"459\":2,\"463\":1,\"464\":1,\"472\":2,\"568\":10}}],[\"jakarta\",{\"1\":{\"195\":1}}],[\"java程序把数据同步到redis\",{\"0\":{\"561\":1}}],[\"javatool<\",{\"1\":{\"554\":1}}],[\"java逻辑代码\",{\"1\":{\"540\":1}}],[\"java有jedis\",{\"1\":{\"523\":1}}],[\"java并发编程的艺术\",{\"1\":{\"476\":1}}],[\"java并发包\",{\"0\":{\"277\":1}}],[\"java镜像类\",{\"1\":{\"448\":1}}],[\"javase\",{\"1\":{\"412\":1}}],[\"javajdk1\",{\"1\":{\"390\":1}}],[\"javap工具\",{\"0\":{\"403\":1}}],[\"javap\",{\"1\":{\"339\":2,\"403\":2,\"434\":1}}],[\"javac在编译期会进行优化\",{\"1\":{\"341\":1}}],[\"javac对应类的绝对路径\",{\"1\":{\"339\":1}}],[\"javac\",{\"1\":{\"339\":1,\"397\":1}}],[\"java虚拟机\",{\"0\":{\"322\":1}}],[\"java对象的类数据保存在方法区\",{\"1\":{\"292\":1}}],[\"java里面是基于内存共享来进行线程间的通信\",{\"1\":{\"277\":1}}],[\"java<\",{\"1\":{\"180\":1}}],[\"java自定义配置\",{\"1\":{\"176\":1}}],[\"java\",{\"0\":{\"154\":1,\"524\":1},\"1\":{\"90\":1,\"264\":1,\"277\":7,\"283\":4,\"286\":1,\"288\":1,\"289\":2,\"294\":1,\"303\":2,\"322\":2,\"327\":2,\"333\":15,\"334\":1,\"336\":2,\"338\":9,\"339\":3,\"341\":10,\"349\":5,\"350\":8,\"390\":1,\"397\":2,\"399\":1,\"400\":4,\"406\":15,\"410\":1,\"411\":5,\"414\":2,\"417\":1,\"419\":1,\"424\":3,\"427\":1,\"428\":4,\"429\":4,\"430\":1,\"433\":4,\"434\":5,\"435\":1,\"437\":7,\"438\":13,\"439\":1,\"444\":5,\"445\":4,\"448\":7,\"451\":1,\"457\":4,\"458\":3,\"459\":2,\"463\":3,\"471\":3,\"472\":7,\"474\":2,\"558\":1},\"2\":{\"155\":1,\"272\":1}}],[\"jane\",{\"1\":{\"85\":1}}],[\"索引库名字\",{\"1\":{\"568\":2}}],[\"索引文档\",{\"1\":{\"93\":1}}],[\"索引\",{\"1\":{\"85\":2}}],[\"索引下的\",{\"1\":{\"85\":1}}],[\"索引一个文档不再要求提供文档类型\",{\"1\":{\"89\":1}}],[\"索引一个文档\",{\"1\":{\"85\":1}}],[\"健康状况\",{\"1\":{\"85\":1}}],[\"博客园\",{\"1\":{\"81\":1,\"726\":1,\"729\":1}}],[\"古道轻风\",{\"1\":{\"81\":1,\"726\":1,\"729\":1}}],[\"查表得到方法的具体地址\",{\"1\":{\"425\":1}}],[\"查找bit数组中指定范围内第一个0或1出现的位置\",{\"1\":{\"538\":1}}],[\"查找类的规则\",{\"1\":{\"460\":1}}],[\"查找\",{\"1\":{\"423\":1}}],[\"查找某个对象\",{\"0\":{\"420\":1}}],[\"查数据库\",{\"1\":{\"98\":1,\"102\":1}}],[\"查出所有年龄分布\",{\"1\":{\"88\":1}}],[\"查几条文档\",{\"1\":{\"88\":1}}],[\"查询到以后释放锁\",{\"1\":{\"572\":1}}],[\"查询\",{\"1\":{\"538\":1}}],[\"查询redis\",{\"1\":{\"537\":1}}],[\"查询店铺信息\",{\"1\":{\"536\":1}}],[\"查询收件箱\",{\"1\":{\"535\":1}}],[\"查询收件箱数据时\",{\"1\":{\"534\":1}}],[\"查询笔记作者的所有粉丝\",{\"1\":{\"534\":1}}],[\"查询用户\",{\"1\":{\"532\":1}}],[\"查询用户的粉丝\",{\"0\":{\"118\":1},\"1\":{\"118\":1}}],[\"查询详情\",{\"1\":{\"532\":1}}],[\"查询是否关注\",{\"1\":{\"531\":1}}],[\"查询top5的点赞用户\",{\"1\":{\"530\":1}}],[\"查询blog是否被点赞\",{\"1\":{\"535\":1}}],[\"查询blog有关的用户\",{\"1\":{\"528\":1,\"535\":1}}],[\"查询blog\",{\"1\":{\"528\":1}}],[\"查询vtable找到方法的具体地址\",{\"1\":{\"417\":1}}],[\"查询分页数据\",{\"0\":{\"122\":1},\"1\":{\"122\":1}}],[\"查询该用户收件箱\",{\"1\":{\"117\":1,\"119\":1,\"122\":1}}],[\"查询并展示推送的blog信息\",{\"1\":{\"115\":1,\"535\":1}}],[\"查询不到信息\",{\"1\":{\"105\":1}}],[\"查询结果\",{\"1\":{\"88\":1}}],[\"查询出包含mill的\",{\"1\":{\"88\":1}}],[\"查询address中含有kings的文档\",{\"1\":{\"88\":1}}],[\"查询account\",{\"1\":{\"88\":1}}],[\"查询的字段\",{\"1\":{\"88\":1}}],[\"查询所有\",{\"1\":{\"87\":1}}],[\"查询文档\",{\"1\":{\"85\":1}}],[\"查询新增的数据写入\",{\"1\":{\"81\":1,\"726\":1,\"729\":1}}],[\"查看一下误判率\",{\"1\":{\"582\":1,\"602\":1,\"613\":1,\"656\":1,\"667\":1}}],[\"查看探店笔记\",{\"0\":{\"528\":1}}],[\"查看每个类的方法定义\",{\"1\":{\"424\":1}}],[\"查看类的\",{\"0\":{\"423\":1}}],[\"查看对象\",{\"0\":{\"422\":1}}],[\"查看对象内存结构\",{\"0\":{\"421\":1}}],[\"查看虚拟机参数命令\",{\"1\":{\"390\":1}}],[\"查看程序的进程\",{\"1\":{\"357\":1}}],[\"查看堆内存占用情况\",{\"1\":{\"334\":1}}],[\"查看当前系统中有哪些\",{\"1\":{\"334\":1}}],[\"查看用户列表\",{\"1\":{\"226\":1}}],[\"查看newbank中的数据\",{\"1\":{\"89\":1}}],[\"查看mapping信息\",{\"1\":{\"89\":1}}],[\"查看索引\",{\"1\":{\"85\":1}}],[\"查看所有索引\",{\"1\":{\"85\":1}}],[\"查看所有节点\",{\"1\":{\"85\":1}}],[\"查看主节点\",{\"1\":{\"85\":1}}],[\"查看\",{\"1\":{\"85\":1,\"393\":1,\"554\":1}}],[\"查看详情\",{\"1\":{\"15\":1,\"16\":1,\"17\":1,\"18\":1,\"19\":1,\"20\":1,\"21\":1}}],[\"实时报警\",{\"1\":{\"545\":1,\"548\":1}}],[\"实时监控能源消耗数据\",{\"1\":{\"545\":1,\"548\":1}}],[\"实时监控\",{\"1\":{\"545\":1,\"548\":1}}],[\"实时更新航班状态和酒店可用性\",{\"1\":{\"545\":1,\"548\":1}}],[\"实时更新货物的位置信息\",{\"1\":{\"545\":1,\"548\":1}}],[\"实时更新玩家积分\",{\"1\":{\"545\":1,\"548\":1}}],[\"实时数据流处理\",{\"1\":{\"545\":1,\"548\":1}}],[\"实时交易处理\",{\"1\":{\"545\":1,\"548\":1}}],[\"实时分析广告效果\",{\"1\":{\"545\":1,\"548\":1}}],[\"实时分析\",{\"1\":{\"523\":1}}],[\"实时性高\",{\"1\":{\"81\":1,\"726\":1,\"729\":1}}],[\"实验时请先全部注释\",{\"1\":{\"455\":1}}],[\"实际上是一种服务的冗余\",{\"1\":{\"619\":1}}],[\"实际上有一些类信息没被擦除\",{\"1\":{\"437\":1}}],[\"实际使用方案\",{\"1\":{\"545\":16,\"548\":16}}],[\"实际会产生如下的\",{\"1\":{\"474\":1}}],[\"实际就是\",{\"1\":{\"439\":1}}],[\"实际调用的是get\",{\"1\":{\"437\":1}}],[\"实际调用的是add\",{\"1\":{\"437\":1}}],[\"实际调用的是\",{\"1\":{\"437\":2}}],[\"实际的类型都当做了\",{\"1\":{\"437\":1}}],[\"实际是在编译期间计算好的\",{\"1\":{\"410\":1}}],[\"实际开发的过程中\",{\"1\":{\"176\":1}}],[\"实质就是\",{\"1\":{\"245\":1}}],[\"实体类\",{\"0\":{\"182\":1}}],[\"实现增量复制\",{\"1\":{\"621\":1}}],[\"实现自动序列化\",{\"1\":{\"554\":1}}],[\"实现快速的故障恢\",{\"1\":{\"619\":1}}],[\"实现快速访问控制\",{\"1\":{\"545\":1,\"548\":1}}],[\"实现快速更新和查询\",{\"1\":{\"545\":1,\"548\":1}}],[\"实现实时导航和位置服务\",{\"1\":{\"545\":1,\"548\":1}}],[\"实现排行榜功能\",{\"1\":{\"545\":1,\"548\":1}}],[\"实现下面接口\",{\"1\":{\"540\":1}}],[\"实现签到接口\",{\"1\":{\"539\":1}}],[\"实现签到功能\",{\"0\":{\"539\":1}}],[\"实现附近商户功能\",{\"0\":{\"537\":1}}],[\"实现分页查询收邮箱\",{\"0\":{\"535\":1}}],[\"实现共同关注功能\",{\"1\":{\"532\":1}}],[\"实现两个接口\",{\"1\":{\"531\":1}}],[\"实现思路\",{\"1\":{\"531\":1}}],[\"实现步骤\",{\"1\":{\"529\":1}}],[\"实现代码\",{\"1\":{\"528\":1}}],[\"实现查看发布探店笔记的接口\",{\"1\":{\"528\":1}}],[\"实现了\",{\"1\":{\"446\":1}}],[\"实现处理器接口\",{\"0\":{\"225\":1}}],[\"实现authenticationentrypoint接口\",{\"0\":{\"218\":1}}],[\"实现接口sessioninformationexpiredstrategy\",{\"1\":{\"225\":1}}],[\"实现接口\",{\"1\":{\"187\":1}}],[\"实现是inmemoryuserdetailsmanager\",{\"1\":{\"176\":1}}],[\"实现\",{\"1\":{\"168\":1,\"184\":1,\"472\":1}}],[\"实现对mysql的数据导入到es中\",{\"1\":{\"98\":1,\"102\":1}}],[\"实现数据冗余\",{\"1\":{\"624\":1}}],[\"实现数据的增量同步\",{\"1\":{\"81\":1,\"726\":1,\"729\":1}}],[\"实现数据同步\",{\"1\":{\"81\":1,\"726\":1,\"729\":1}}],[\"实例放在\",{\"1\":{\"168\":1}}],[\"实例\",{\"1\":{\"90\":1}}],[\"借助数据仓库的分析能力\",{\"1\":{\"680\":1,\"683\":1}}],[\"借助了\",{\"1\":{\"434\":1}}],[\"借助\",{\"1\":{\"81\":1,\"726\":1,\"729\":1}}],[\"written\",{\"1\":{\"638\":1}}],[\"writing\",{\"1\":{\"638\":2}}],[\"writes\",{\"1\":{\"635\":2,\"638\":1,\"639\":2,\"644\":2}}],[\"write\",{\"1\":{\"385\":1,\"634\":1,\"644\":3,\"645\":1}}],[\"woman\",{\"1\":{\"442\":2}}],[\"working\",{\"1\":{\"643\":1}}],[\"works\",{\"1\":{\"639\":1}}],[\"work\",{\"1\":{\"639\":1}}],[\"worker\",{\"1\":{\"81\":1,\"726\":1,\"729\":1}}],[\"world的时间更长\",{\"1\":{\"371\":1}}],[\"world\",{\"1\":{\"134\":2,\"136\":1,\"148\":1,\"371\":1,\"377\":2,\"379\":2,\"397\":1,\"400\":1,\"406\":3,\"439\":1,\"441\":3}}],[\"word\",{\"1\":{\"90\":10,\"288\":1,\"290\":1,\"294\":1,\"295\":1,\"301\":4,\"302\":1}}],[\"w\",{\"1\":{\"410\":1,\"441\":4}}],[\"way\",{\"1\":{\"645\":1}}],[\"ways\",{\"1\":{\"637\":1,\"639\":1,\"645\":1}}],[\"warning\",{\"1\":{\"639\":1}}],[\"warmup\",{\"1\":{\"303\":1,\"471\":1}}],[\"wants\",{\"1\":{\"642\":1}}],[\"want\",{\"1\":{\"635\":1}}],[\"wake\",{\"1\":{\"365\":6}}],[\"was\",{\"1\":{\"319\":1}}],[\"waits\",{\"1\":{\"639\":1,\"640\":2}}],[\"waitset\",{\"1\":{\"278\":1,\"279\":1,\"289\":1}}],[\"waiting\",{\"1\":{\"278\":3,\"289\":1,\"315\":1}}],[\"wait\",{\"0\":{\"278\":1,\"283\":1,\"298\":1},\"1\":{\"277\":2,\"278\":1,\"279\":1,\"283\":2,\"297\":2,\"298\":1,\"299\":1,\"315\":1,\"561\":1}}],[\"wallace\",{\"1\":{\"88\":1}}],[\"we\",{\"1\":{\"641\":1}}],[\"weixin\",{\"1\":{\"481\":1}}],[\"weight\",{\"1\":{\"267\":5}}],[\"weakreference<>\",{\"1\":{\"365\":2}}],[\"weakreference<byte\",{\"1\":{\"365\":5}}],[\"weakreferencetest\",{\"1\":{\"365\":1}}],[\"weakreference\",{\"1\":{\"365\":5}}],[\"web<\",{\"1\":{\"554\":1,\"561\":1}}],[\"websecurityconfig\",{\"1\":{\"176\":1}}],[\"website\",{\"1\":{\"85\":4}}],[\"web\",{\"1\":{\"158\":1,\"252\":1,\"253\":1,\"379\":1}}],[\"w3\",{\"1\":{\"267\":1}}],[\"www\",{\"1\":{\"156\":1,\"160\":1,\"204\":1,\"267\":3,\"481\":1,\"583\":3,\"603\":3,\"614\":3,\"657\":3,\"668\":3}}],[\"what\",{\"1\":{\"639\":1}}],[\"which\",{\"1\":{\"645\":1}}],[\"while\",{\"1\":{\"279\":1,\"286\":1,\"333\":1,\"350\":1,\"364\":1,\"365\":1,\"413\":5,\"414\":1,\"440\":1,\"464\":1,\"465\":1,\"478\":1,\"480\":1,\"540\":1,\"639\":1,\"642\":1}}],[\"whitespace\",{\"1\":{\"90\":1}}],[\"where\",{\"1\":{\"118\":1,\"530\":1,\"531\":2,\"532\":1,\"534\":1,\"568\":1,\"645\":1}}],[\"when\",{\"1\":{\"87\":1,\"400\":1,\"560\":1,\"561\":2,\"567\":1,\"637\":2,\"639\":2,\"640\":1,\"641\":1,\"642\":2,\"645\":1}}],[\"window\",{\"1\":{\"644\":1}}],[\"windows\",{\"1\":{\"422\":1,\"423\":1}}],[\"wiki\",{\"1\":{\"558\":1}}],[\"width\",{\"1\":{\"138\":2}}],[\"without\",{\"1\":{\"639\":1}}],[\"withdistance\",{\"1\":{\"537\":1}}],[\"withdefaults\",{\"1\":{\"190\":2,\"220\":1}}],[\"withdefaultpasswordencoder\",{\"1\":{\"176\":1,\"193\":1}}],[\"withusername\",{\"1\":{\"234\":1,\"238\":1}}],[\"with\",{\"0\":{\"444\":1},\"1\":{\"85\":1,\"98\":1,\"102\":1,\"121\":1,\"267\":1,\"338\":1,\"444\":3,\"568\":5,\"635\":4,\"637\":4,\"638\":1,\"639\":4,\"640\":1,\"641\":1,\"642\":1,\"643\":4,\"644\":1,\"645\":1}}],[\"will\",{\"1\":{\"26\":1,\"319\":1,\"636\":1,\"637\":2,\"638\":1,\"639\":3,\"640\":3,\"641\":3,\"642\":1,\"643\":2,\"644\":2,\"645\":1,\"674\":1}}],[\"没有从节点连接后\",{\"1\":{\"632\":1,\"643\":1}}],[\"没有任何签到结果\",{\"1\":{\"540\":1}}],[\"没有参数怎么确实是哪一天签到呢\",{\"1\":{\"539\":1}}],[\"没有下一页了\",{\"1\":{\"537\":1}}],[\"没有问题\",{\"1\":{\"474\":1}}],[\"没有命名冲突\",{\"1\":{\"445\":1}}],[\"没有抛出异常\",{\"1\":{\"431\":1}}],[\"没有全局变量\",{\"1\":{\"303\":1}}],[\"没有后端\",{\"1\":{\"253\":1}}],[\"没有权限\",{\"1\":{\"231\":1}}],[\"没有了类型\",{\"1\":{\"89\":1}}],[\"没有的话按照score排序\",{\"1\":{\"87\":1}}],[\"没有发生任何错误\",{\"1\":{\"85\":1}}],[\"没有业务强耦合\",{\"1\":{\"81\":1,\"726\":1,\"729\":1}}],[\"没有硬编码\",{\"1\":{\"81\":1,\"726\":1,\"729\":1}}],[\"没有侵入性\",{\"1\":{\"81\":1,\"726\":1,\"729\":1}}],[\"把列名和es进行一一映射\",{\"1\":{\"568\":1}}],[\"把对象从redis中删除\",{\"1\":{\"561\":1}}],[\"把对象存储到redis中\",{\"1\":{\"561\":1}}],[\"把mq消息封装成\",{\"1\":{\"561\":1}}],[\"把所有权限赋予canal\",{\"1\":{\"552\":1,\"559\":1,\"566\":1}}],[\"把数据转为实体类\",{\"1\":{\"561\":1}}],[\"把数据往redis同步\",{\"1\":{\"554\":1}}],[\"把数据从canal\",{\"1\":{\"551\":1}}],[\"把数字右移一位\",{\"1\":{\"540\":1}}],[\"把每一个bit位对应当月的每一天\",{\"1\":{\"538\":1}}],[\"把店铺分组\",{\"1\":{\"536\":1}}],[\"把这几个条件传入后台\",{\"1\":{\"536\":1}}],[\"把这个\",{\"1\":{\"90\":1}}],[\"把用户从redis的set集合移除\",{\"1\":{\"529\":1,\"530\":1}}],[\"把\",{\"1\":{\"416\":1,\"568\":1}}],[\"把unpark理解成出车\",{\"1\":{\"280\":1}}],[\"把park\",{\"1\":{\"280\":1}}],[\"把他关注人的信息全部都进行拉取\",{\"1\":{\"115\":1,\"533\":1}}],[\"把关注用户的id从redis集合中移除\",{\"1\":{\"532\":1}}],[\"把关注用户的id\",{\"1\":{\"110\":1,\"111\":1,\"532\":1}}],[\"把被关注的id加入该用户的set集合\",{\"1\":{\"106\":1}}],[\"把该用户所关注的用户id加入set集合\",{\"1\":{\"105\":1}}],[\"把该时间段内发生变化的数据提取出来\",{\"1\":{\"81\":1,\"726\":1,\"729\":1}}],[\"把bank\",{\"1\":{\"89\":1}}],[\"把一个响应中的所有\",{\"1\":{\"88\":1}}],[\"把它还原成有意义的应用层数据\",{\"1\":{\"55\":1}}],[\"操作数栈分配2个空间\",{\"1\":{\"414\":1}}],[\"操作数栈内容\",{\"1\":{\"410\":1}}],[\"操作分配内存都是非常廉价的\",{\"1\":{\"394\":1}}],[\"操作包含三个操作数\",{\"1\":{\"309\":1}}],[\"操作来尝试获取锁\",{\"1\":{\"305\":1}}],[\"操作无法成功\",{\"1\":{\"302\":1}}],[\"操作\",{\"1\":{\"294\":1,\"442\":1,\"538\":1}}],[\"操作不做任何变化\",{\"1\":{\"81\":1,\"726\":1,\"729\":1}}],[\"操作都会导致该字段的时间发生变化\",{\"1\":{\"81\":1,\"726\":1,\"729\":1}}],[\"任务队列\",{\"1\":{\"545\":1,\"548\":1}}],[\"任务列表\",{\"0\":{\"19\":1}}],[\"任何对象都有一个monitor与之关联\",{\"1\":{\"476\":1}}],[\"任何线程对volatile变量的修改\",{\"1\":{\"284\":1}}],[\"任何一个的\",{\"1\":{\"88\":1}}],[\"任何其他查询语句\",{\"1\":{\"88\":1}}],[\"任何\",{\"1\":{\"81\":1,\"726\":1,\"729\":1}}],[\"路由优化\",{\"1\":{\"545\":1,\"548\":1}}],[\"路由和加工\",{\"1\":{\"81\":1,\"726\":1,\"729\":1}}],[\"路况信息缓存\",{\"1\":{\"545\":1,\"548\":1}}],[\"路径下的资源\",{\"1\":{\"232\":1}}],[\"路径就会不正确\",{\"1\":{\"163\":1}}],[\"路径导航\",{\"1\":{\"3\":1,\"6\":1,\"274\":1}}],[\"执行它的\",{\"1\":{\"476\":1}}],[\"执行到\",{\"1\":{\"476\":1}}],[\"执行效率上简单比较一下\",{\"1\":{\"469\":1}}],[\"执行进行比较\",{\"1\":{\"441\":1}}],[\"执行了两遍\",{\"1\":{\"441\":1}}],[\"执行方法的字节码\",{\"1\":{\"417\":1,\"425\":1}}],[\"执行方法前是否需要\",{\"1\":{\"416\":1}}],[\"执行成功会将\",{\"1\":{\"416\":1}}],[\"执行完\",{\"1\":{\"476\":1}}],[\"执行完毕\",{\"1\":{\"410\":1}}],[\"执行完同步代码块的内容\",{\"1\":{\"289\":1}}],[\"执行新栈帧中的字节码\",{\"1\":{\"410\":1}}],[\"执行类的加载\",{\"1\":{\"338\":1}}],[\"执行线程的顶级接口\",{\"1\":{\"310\":1}}],[\"执行任务\",{\"1\":{\"286\":1}}],[\"执行unpark\",{\"1\":{\"281\":1,\"282\":1}}],[\"执行park\",{\"1\":{\"281\":1,\"282\":1}}],[\"执行\",{\"1\":{\"140\":1,\"289\":1,\"324\":1,\"397\":1,\"419\":1,\"420\":1,\"422\":1,\"423\":1}}],[\"执行以下命令\",{\"1\":{\"90\":1}}],[\"执行以下命令安装v8版本的\",{\"1\":{\"65\":1,\"69\":1,\"73\":1,\"77\":1,\"97\":1,\"101\":1,\"129\":1,\"487\":1,\"491\":1,\"495\":1,\"499\":1,\"503\":1,\"507\":1}}],[\"执行命令删除原容器\",{\"1\":{\"90\":1}}],[\"执行聚合\",{\"1\":{\"88\":1}}],[\"执行的核心流程\",{\"1\":{\"81\":1,\"726\":1,\"729\":1}}],[\"格式为replicaof\",{\"1\":{\"626\":1,\"636\":1}}],[\"格式化打印占位符\",{\"1\":{\"148\":1}}],[\"格式化打印中的常用占位符\",{\"1\":{\"148\":1}}],[\"格式化打印\",{\"1\":{\"148\":1}}],[\"格式化verb\",{\"1\":{\"146\":1}}],[\"格式\",{\"1\":{\"81\":1,\"726\":1,\"729\":1}}],[\"原文链接\",{\"1\":{\"554\":1}}],[\"原因分析完语法糖转换后的代码应当自然清楚\",{\"1\":{\"441\":1}}],[\"原因是\",{\"1\":{\"198\":1}}],[\"原始类型\",{\"1\":{\"438\":3}}],[\"原始为\",{\"1\":{\"81\":1,\"726\":1,\"729\":1}}],[\"原理\",{\"0\":{\"312\":1,\"466\":1,\"580\":1,\"600\":1,\"611\":1,\"654\":1,\"665\":1}}],[\"原理就是伪装成\",{\"1\":{\"81\":1,\"726\":1,\"729\":1}}],[\"原子性确保了当多个线程尝试同时修改同一变量时\",{\"1\":{\"283\":1}}],[\"原子性是指一个操作或者一系列操作要么全部执行并且在执行过程中不会被任何其他操作中断\",{\"1\":{\"283\":1}}],[\"原子性\",{\"0\":{\"473\":1},\"1\":{\"283\":2,\"472\":1}}],[\"原子操作\",{\"1\":{\"277\":1,\"286\":1}}],[\"原样输出\",{\"1\":{\"148\":1}}],[\"原来程序中的\",{\"1\":{\"81\":1,\"726\":1,\"729\":1}}],[\"解锁隐藏参数\",{\"1\":{\"470\":1}}],[\"解锁时\",{\"1\":{\"301\":2}}],[\"解释器\",{\"1\":{\"469\":1}}],[\"解释器会解释指令为机器码交给\",{\"1\":{\"324\":1}}],[\"解释执行\",{\"1\":{\"469\":1}}],[\"解决方案\",{\"1\":{\"541\":1}}],[\"解决方法\",{\"0\":{\"475\":1}}],[\"解决办法\",{\"0\":{\"479\":1}}],[\"解决并发问题\",{\"1\":{\"476\":1}}],[\"解决\",{\"1\":{\"89\":1,\"572\":3}}],[\"解析出id\",{\"1\":{\"537\":1}}],[\"解析出其中的用户id\",{\"1\":{\"530\":1}}],[\"解析数据\",{\"1\":{\"535\":1}}],[\"解析id集合\",{\"1\":{\"532\":1}}],[\"解析的含义\",{\"1\":{\"452\":1}}],[\"解析结果\",{\"1\":{\"112\":1}}],[\"解析和推送\",{\"1\":{\"81\":1,\"726\":1,\"729\":1}}],[\"解析\",{\"0\":{\"452\":1},\"1\":{\"81\":1,\"726\":1,\"729\":1}}],[\"解耦\",{\"1\":{\"81\":1,\"484\":1,\"726\":1,\"729\":1}}],[\"dynamictopic=mytest\",{\"1\":{\"560\":1,\"567\":1}}],[\"dangerous\",{\"1\":{\"638\":1}}],[\"dayofmonth\",{\"1\":{\"539\":2,\"540\":3}}],[\"day01\",{\"1\":{\"339\":2}}],[\"datetimeformatter\",{\"1\":{\"539\":1,\"540\":1}}],[\"date\",{\"1\":{\"316\":4,\"637\":1}}],[\"data<\",{\"1\":{\"537\":2}}],[\"datasourcekey\",{\"1\":{\"568\":1}}],[\"datasource\",{\"1\":{\"181\":4}}],[\"database\",{\"1\":{\"179\":1,\"561\":2}}],[\"databases\",{\"1\":{\"85\":1}}],[\"data\",{\"1\":{\"94\":3,\"98\":3,\"102\":3,\"116\":2,\"121\":2,\"122\":2,\"143\":1,\"182\":1,\"209\":1,\"223\":1,\"512\":1,\"535\":1,\"537\":3,\"554\":2,\"561\":4,\"627\":1,\"628\":1,\"637\":5,\"638\":3,\"640\":1,\"641\":3,\"642\":2}}],[\"during\",{\"1\":{\"640\":1,\"645\":1}}],[\"dubbo\",{\"1\":{\"465\":1}}],[\"dup\",{\"1\":{\"289\":1,\"341\":2,\"416\":2,\"433\":2,\"437\":1,\"438\":1}}],[\"dump\",{\"1\":{\"81\":2,\"357\":2,\"726\":2,\"729\":2}}],[\"differences\",{\"1\":{\"639\":1}}],[\"different\",{\"1\":{\"637\":1,\"639\":1,\"645\":2}}],[\"discover\",{\"1\":{\"645\":1}}],[\"disconnected\",{\"1\":{\"642\":4}}],[\"disks\",{\"1\":{\"639\":1}}],[\"disk\",{\"1\":{\"639\":5}}],[\"diskless\",{\"1\":{\"629\":1,\"630\":3,\"639\":6,\"640\":5}}],[\"distancemap\",{\"1\":{\"537\":3}}],[\"distance>\",{\"1\":{\"537\":1}}],[\"distance\",{\"1\":{\"537\":5}}],[\"disabled\",{\"1\":{\"644\":1}}],[\"disables\",{\"1\":{\"644\":1}}],[\"disable\",{\"1\":{\"196\":1,\"640\":1,\"641\":2,\"642\":1}}],[\"digest\",{\"1\":{\"522\":2}}],[\"dir\",{\"1\":{\"527\":2}}],[\"dirty\",{\"1\":{\"385\":1}}],[\"directly\",{\"1\":{\"639\":1}}],[\"directive\",{\"1\":{\"636\":1}}],[\"directmemorytest\",{\"1\":{\"351\":1}}],[\"directbytebuffer类\",{\"1\":{\"350\":1}}],[\"directbytebuffer\",{\"1\":{\"350\":4}}],[\"directbuffer\",{\"1\":{\"349\":1}}],[\"direct\",{\"1\":{\"350\":1}}],[\"div>\",{\"1\":{\"204\":3,\"267\":7}}],[\"dictionary\",{\"1\":{\"511\":1,\"512\":1}}],[\"dict\",{\"1\":{\"90\":2}}],[\"driverslist\",{\"1\":{\"464\":3}}],[\"driversiterator\",{\"1\":{\"464\":3}}],[\"drivers\",{\"1\":{\"464\":11}}],[\"drivermanager\",{\"1\":{\"463\":5,\"464\":3}}],[\"driver\",{\"1\":{\"181\":2,\"463\":4,\"464\":1}}],[\"db压力瞬时压力过重雪崩\",{\"1\":{\"572\":1}}],[\"dbpassword\",{\"1\":{\"553\":2,\"560\":2,\"567\":2}}],[\"dbusername\",{\"1\":{\"553\":2,\"560\":2,\"567\":2}}],[\"dbuserdetailsmanager中的loaduserbyusername方法\",{\"1\":{\"230\":1,\"234\":1,\"238\":1}}],[\"dbuserdetailsmanager中添加方法\",{\"1\":{\"194\":1}}],[\"dbuserdetailsmanager\",{\"1\":{\"188\":1,\"189\":2,\"193\":3}}],[\"db=mysql\",{\"1\":{\"552\":1,\"559\":1,\"566\":1}}],[\"db=canaldb\",{\"1\":{\"552\":1,\"559\":1,\"566\":1}}],[\"db\",{\"1\":{\"91\":7,\"118\":1}}],[\"dtd\",{\"1\":{\"90\":2,\"183\":3}}],[\"d\",{\"1\":{\"90\":2,\"94\":1,\"138\":1,\"139\":2,\"140\":1,\"142\":2,\"148\":6,\"150\":3,\"297\":7,\"298\":8,\"299\":9,\"300\":14,\"303\":1,\"343\":1,\"390\":1,\"397\":1,\"415\":3,\"416\":1,\"420\":2,\"438\":1,\"444\":2,\"451\":4,\"452\":4,\"469\":2,\"470\":3}}],[\"dsl\",{\"0\":{\"88\":1},\"1\":{\"88\":1}}],[\"dno5jy9ttrghdsjimkvqya\",{\"1\":{\"85\":1}}],[\"deepin\",{\"0\":{\"742\":1}}],[\"detected\",{\"1\":{\"640\":1,\"645\":1}}],[\"detail\",{\"1\":{\"560\":1}}],[\"details\",{\"1\":{\"481\":2,\"554\":1}}],[\"develop\",{\"1\":{\"512\":1}}],[\"deﬁneclass\",{\"1\":{\"461\":1}}],[\"deallocator\",{\"1\":{\"350\":1}}],[\"deadline\",{\"1\":{\"319\":1}}],[\"defineclass1\",{\"1\":{\"338\":1}}],[\"defineclass\",{\"1\":{\"338\":3}}],[\"defaultds\",{\"1\":{\"568\":3}}],[\"defaultvalue\",{\"1\":{\"532\":1,\"535\":1,\"537\":1}}],[\"defaultsecurityfilterchain\",{\"0\":{\"173\":1}}],[\"default\",{\"1\":{\"142\":3,\"143\":1,\"144\":2,\"179\":2,\"441\":4,\"442\":2,\"537\":3,\"637\":1,\"638\":2,\"640\":2,\"641\":2,\"643\":1,\"644\":1}}],[\"delay\",{\"1\":{\"630\":1,\"640\":5,\"641\":2}}],[\"delta\",{\"1\":{\"289\":2}}],[\"delegatingmethodaccessorimpl\",{\"1\":{\"472\":2}}],[\"delegatingpasswordencoder\",{\"0\":{\"201\":1}}],[\"delegatingfilterproxy\",{\"0\":{\"168\":1},\"1\":{\"168\":3}}],[\"deleted\",{\"1\":{\"638\":1}}],[\"deleteuser\",{\"1\":{\"188\":1}}],[\"deletefollow\",{\"1\":{\"111\":3}}],[\"delete\",{\"1\":{\"85\":5,\"90\":2,\"531\":1,\"532\":1,\"554\":3,\"561\":3}}],[\"depending\",{\"1\":{\"635\":1}}],[\"dependency>\",{\"1\":{\"180\":4,\"195\":1,\"207\":1,\"260\":3,\"471\":2,\"525\":1,\"526\":1,\"537\":3,\"554\":6,\"561\":4,\"568\":1,\"581\":1,\"601\":1,\"612\":1,\"655\":1,\"666\":1}}],[\"dependencies>\",{\"1\":{\"554\":1,\"561\":1,\"581\":1,\"601\":1,\"612\":1,\"655\":1,\"666\":1}}],[\"dependencies\",{\"1\":{\"158\":1,\"568\":5}}],[\"dept\",{\"1\":{\"553\":1}}],[\"deployer\",{\"1\":{\"553\":1,\"560\":1,\"567\":1}}],[\"deployment\",{\"1\":{\"461\":1}}],[\"deprecated\",{\"1\":{\"85\":1}}],[\"deprecation\",{\"1\":{\"85\":1}}],[\"demo8$1\",{\"1\":{\"446\":1}}],[\"demo3\",{\"1\":{\"405\":1,\"411\":1,\"412\":1,\"413\":3,\"417\":1,\"428\":1,\"429\":2,\"472\":1}}],[\"demo1\",{\"1\":{\"364\":1,\"474\":1,\"476\":1,\"480\":1}}],[\"demo`\",{\"1\":{\"179\":2}}],[\"demo\",{\"1\":{\"158\":1,\"163\":1,\"181\":1,\"185\":1,\"195\":1,\"264\":1}}],[\"declared\",{\"1\":{\"136\":1,\"400\":6}}],[\"debug\",{\"1\":{\"98\":1,\"102\":1,\"121\":1,\"297\":4,\"298\":4,\"299\":5,\"300\":10,\"315\":8,\"472\":1,\"527\":1,\"638\":1}}],[\"designed\",{\"1\":{\"638\":1}}],[\"destination\",{\"1\":{\"554\":1,\"568\":1}}],[\"dest\",{\"1\":{\"89\":3}}],[\"descriptor\",{\"1\":{\"406\":2,\"411\":1,\"428\":1,\"429\":1,\"438\":2}}],[\"description\",{\"1\":{\"235\":2}}],[\"desc\",{\"1\":{\"87\":1,\"88\":1}}],[\"dotnetcore\",{\"1\":{\"558\":1}}],[\"dont\",{\"1\":{\"471\":1}}],[\"dosum\",{\"1\":{\"471\":10}}],[\"double\",{\"1\":{\"400\":1,\"412\":1,\"455\":1,\"530\":2,\"537\":4,\"581\":1,\"601\":1,\"612\":1,\"655\":1,\"666\":1}}],[\"doprivileged\",{\"1\":{\"350\":1,\"464\":2}}],[\"dog\",{\"1\":{\"297\":2,\"298\":2,\"299\":3,\"300\":5,\"417\":2,\"420\":1,\"423\":3,\"424\":2}}],[\"domain\",{\"1\":{\"88\":1}}],[\"doctype\",{\"1\":{\"90\":1,\"183\":1,\"204\":1,\"267\":1}}],[\"docker\",{\"1\":{\"90\":5}}],[\"document\",{\"1\":{\"89\":1,\"90\":2,\"93\":3,\"94\":1}}],[\"docs\",{\"1\":{\"87\":1,\"156\":1,\"412\":1,\"512\":1}}],[\"doc\",{\"1\":{\"85\":3,\"88\":5,\"89\":1,\"90\":1,\"195\":1,\"568\":2,\"569\":2}}],[\"does\",{\"1\":{\"635\":1,\"644\":1}}],[\"doescapeanalysis\",{\"1\":{\"469\":1}}],[\"doe2\",{\"1\":{\"85\":1}}],[\"doew\",{\"1\":{\"85\":1}}],[\"doe\",{\"1\":{\"85\":6}}],[\"do\",{\"1\":{\"66\":1,\"70\":1,\"74\":1,\"78\":1,\"90\":6,\"92\":1,\"93\":1,\"94\":1,\"98\":1,\"102\":1,\"126\":1,\"130\":1,\"413\":2,\"464\":1,\"488\":1,\"492\":1,\"496\":1,\"500\":1,\"504\":1,\"508\":1,\"552\":1,\"559\":1,\"566\":1,\"639\":1}}],[\"来确定哪些命令需要补发给从节点\",{\"1\":{\"621\":1}}],[\"来帮助我们实现布隆过滤器\",{\"1\":{\"581\":1,\"601\":1,\"612\":1,\"655\":1,\"666\":1}}],[\"来整合canal\",{\"1\":{\"554\":1}}],[\"来进行指定\",{\"1\":{\"535\":1}}],[\"来\",{\"1\":{\"469\":1}}],[\"来得到实现类\",{\"1\":{\"465\":1}}],[\"来说\",{\"1\":{\"448\":1}}],[\"来判断是否匹配\",{\"1\":{\"441\":1}}],[\"来判断某个\",{\"1\":{\"144\":1}}],[\"来观察\",{\"1\":{\"373\":1}}],[\"来释放弱引用自身\",{\"1\":{\"361\":1}}],[\"来释放软引用自身\",{\"1\":{\"360\":1}}],[\"来释放直接内存\",{\"1\":{\"350\":1}}],[\"来监测\",{\"1\":{\"350\":1}}],[\"来清除直接内存中占用的内存\",{\"1\":{\"350\":1}}],[\"来实现了大量数据的表示\",{\"1\":{\"538\":1}}],[\"来实现直接内存的释放\",{\"1\":{\"350\":1}}],[\"来实现数据订阅\",{\"1\":{\"81\":1,\"726\":1,\"729\":1}}],[\"来减少字符串放入串池所需要的时间\",{\"1\":{\"346\":1}}],[\"来避免重复创建字符串对象\",{\"1\":{\"341\":1}}],[\"来避免网络往返\",{\"1\":{\"88\":1}}],[\"来唤醒它\",{\"1\":{\"319\":1}}],[\"来分析如下代码\",{\"1\":{\"303\":1}}],[\"来执行不可中断的操作\",{\"1\":{\"277\":1}}],[\"来保证同一时间只有一个线程可以访问特定的代码块或资源\",{\"1\":{\"277\":1}}],[\"来定义\",{\"1\":{\"89\":1}}],[\"来发送它们\",{\"1\":{\"87\":1}}],[\"来解析\",{\"1\":{\"12\":1}}],[\"将读操作分发到从节点\",{\"1\":{\"624\":1}}],[\"将缓存中数据删除\",{\"1\":{\"588\":1}}],[\"将所有可能的数据缓存放到布隆过滤器中\",{\"1\":{\"579\":1,\"599\":1,\"610\":1,\"653\":1,\"664\":1}}],[\"将所有新分配的字符串\",{\"1\":{\"387\":1}}],[\"将去查询数据库\",{\"1\":{\"572\":1}}],[\"将当前用户当天签到信息保存到redis中\",{\"1\":{\"539\":1}}],[\"将多个bitmap的结果做位运算\",{\"1\":{\"538\":1}}],[\"将指定member的坐标转为hash字符串形式并返回\",{\"1\":{\"519\":1,\"535\":1}}],[\"将对象的字段映射到哈希表的字段\",{\"1\":{\"516\":1}}],[\"将对应位置枚举元素的值赋给\",{\"1\":{\"442\":1}}],[\"将会尝试获取对象所对应的monitor的所有权\",{\"1\":{\"476\":1}}],[\"将修改后的值存入静态变量i\",{\"1\":{\"474\":8,\"481\":2}}],[\"将一些字节码编译为机器码\",{\"1\":{\"469\":1}}],[\"将一个\",{\"1\":{\"410\":4}}],[\"将字节码解释为机器码\",{\"1\":{\"469\":1}}],[\"将字符串的转换为相应\",{\"1\":{\"441\":1}}],[\"将执行状态分成了\",{\"1\":{\"469\":1}}],[\"将常量池中的符号引用解析为直接引用\",{\"1\":{\"452\":1}}],[\"将常数\",{\"1\":{\"414\":2}}],[\"将类的字节码载入方法区\",{\"1\":{\"448\":1}}],[\"将x的值赋值给了candy11$1对象的vala属性\",{\"1\":{\"446\":1}}],[\"将object转换成了integer\",{\"1\":{\"437\":1}}],[\"将栈顶的对象地址方法\",{\"1\":{\"433\":1}}],[\"将局部变量\",{\"1\":{\"414\":2}}],[\"将局部变量表\",{\"1\":{\"414\":1}}],[\"将局部变量表中\",{\"1\":{\"410\":2}}],[\"将数据库表中的数据导入到redis中去\",{\"1\":{\"536\":1}}],[\"将数据读到系统缓冲区\",{\"1\":{\"349\":1}}],[\"将数字\",{\"1\":{\"414\":1}}],[\"将操作数栈顶元素弹出\",{\"1\":{\"433\":1}}],[\"将操作数栈中的数放入到局部变量表的\",{\"1\":{\"414\":1}}],[\"将操作数栈中的两个元素弹出栈并相加\",{\"1\":{\"410\":1}}],[\"将操作数栈中的元素弹出\",{\"1\":{\"410\":2}}],[\"将操作数栈栈顶元素弹出\",{\"1\":{\"410\":1}}],[\"将其加载到操作数栈中\",{\"1\":{\"410\":1}}],[\"将老年代内存预设调大\",{\"1\":{\"395\":1}}],[\"将老年代垃圾进行标记\",{\"1\":{\"379\":1}}],[\"将c放入一个队列当中\",{\"1\":{\"386\":1}}],[\"将client组件伪装成从库\",{\"1\":{\"81\":1,\"726\":1,\"729\":1}}],[\"将堆内存分为新生代和老年代\",{\"1\":{\"370\":1}}],[\"将被gc\",{\"1\":{\"369\":1}}],[\"将内存分为等大小的两个区域\",{\"1\":{\"369\":1}}],[\"将可用的对象移动到一起\",{\"1\":{\"368\":1}}],[\"将软引用的对象回收\",{\"1\":{\"364\":1}}],[\"将这个字符串对象尝试放入串池\",{\"1\":{\"341\":3}}],[\"将轻量级锁变为重量级锁\",{\"1\":{\"302\":1}}],[\"将线程\",{\"1\":{\"294\":1}}],[\"将\",{\"1\":{\"289\":3,\"301\":2,\"302\":1,\"439\":1,\"446\":1,\"459\":1}}],[\"将访问令牌包含在url锚点中的好处\",{\"1\":{\"253\":1}}],[\"将角色与权限关联起来\",{\"1\":{\"235\":1}}],[\"将用户与角色关联起来\",{\"1\":{\"235\":1}}],[\"将容器内的配置文件拷贝到当前目录\",{\"1\":{\"90\":1}}],[\"将之分割为独立的tokens\",{\"1\":{\"90\":1}}],[\"将已存在的索引下的类型数据\",{\"1\":{\"89\":1}}],[\"将索引从多类型迁移到单类型\",{\"1\":{\"89\":1}}],[\"将需要匹配的值当成一整个单词\",{\"1\":{\"88\":1}}],[\"将你的个人介绍和档案放置在此处\",{\"1\":{\"0\":1}}],[\"耦合度高\",{\"1\":{\"81\":1,\"726\":1,\"729\":1}}],[\"创建映射\",{\"1\":{\"569\":1}}],[\"创建项目\",{\"1\":{\"561\":1}}],[\"创建用户cannal\",{\"1\":{\"552\":1,\"559\":1,\"566\":1}}],[\"创建用户表\",{\"1\":{\"179\":1}}],[\"创建该类的数组不会触发初始化\",{\"1\":{\"455\":1}}],[\"创建该类对象的数组\",{\"1\":{\"455\":1}}],[\"创建了一个额外的类\",{\"1\":{\"446\":1}}],[\"创建了一个空数组\",{\"1\":{\"439\":1}}],[\"创建资源对象\",{\"1\":{\"444\":1}}],[\"创建与回收\",{\"1\":{\"351\":1}}],[\"创建锁记录\",{\"1\":{\"301\":1}}],[\"创建html页面\",{\"0\":{\"267\":1}}],[\"创建controller\",{\"0\":{\"266\":1}}],[\"创建时引入如下依赖\",{\"1\":{\"264\":1}}],[\"创建测试项目\",{\"0\":{\"264\":1}}],[\"创建应用\",{\"0\":{\"263\":1}}],[\"创建结果对象\",{\"1\":{\"209\":1,\"212\":1,\"215\":1,\"218\":1,\"223\":1,\"225\":1,\"231\":1}}],[\"创建登录页面\",{\"0\":{\"204\":1}}],[\"创建登录controller\",{\"0\":{\"203\":1}}],[\"创建dbuserdetailsmanager类\",{\"1\":{\"187\":1}}],[\"创建数据库\",{\"1\":{\"179\":1}}],[\"创建三个数据库表并插入测试数据\",{\"1\":{\"179\":1}}],[\"创建user对象\",{\"1\":{\"177\":1}}],[\"创建inmemoryuserdetailsmanager对象\",{\"1\":{\"177\":1}}],[\"创建index\",{\"0\":{\"160\":1}}],[\"创建indexcontroller\",{\"0\":{\"159\":1}}],[\"创建一个计数为1的semaphore\",{\"1\":{\"314\":1}}],[\"创建一个springboot项目oauth2\",{\"1\":{\"264\":1}}],[\"创建一个application\",{\"1\":{\"263\":1}}],[\"创建一个websecurityconfig文件\",{\"1\":{\"176\":1}}],[\"创建一个数据报socket\",{\"1\":{\"56\":1}}],[\"创建自定义配置\",{\"0\":{\"176\":1}}],[\"创建spring\",{\"0\":{\"158\":1}}],[\"创建帖子的同时\",{\"1\":{\"115\":1}}],[\"创建帖子的处理函数\",{\"0\":{\"121\":1},\"1\":{\"98\":1,\"102\":1,\"121\":1}}],[\"创建帖子\",{\"1\":{\"98\":1,\"102\":1,\"121\":1}}],[\"创建客户端\",{\"1\":{\"90\":1,\"523\":1}}],[\"创建客户端连接\",{\"1\":{\"66\":1,\"70\":1,\"74\":1,\"78\":1,\"90\":1,\"98\":2,\"102\":2,\"126\":1,\"130\":1,\"488\":1,\"492\":1,\"496\":1,\"500\":1,\"504\":1,\"508\":1}}],[\"创建新的\",{\"1\":{\"90\":1}}],[\"创建newbank索引\",{\"1\":{\"89\":1}}],[\"创建\",{\"1\":{\"85\":1,\"471\":1}}],[\"创建索引库和映射\",{\"1\":{\"569\":1}}],[\"创建索引并指定映射\",{\"1\":{\"89\":1}}],[\"创建索引\",{\"0\":{\"92\":1},\"1\":{\"66\":2,\"70\":2,\"74\":2,\"78\":2,\"92\":1,\"98\":2,\"102\":2,\"126\":2,\"130\":2,\"488\":2,\"492\":2,\"496\":2,\"500\":2,\"504\":2,\"508\":2}}],[\"n3在集合\",{\"1\":{\"580\":1,\"600\":1,\"611\":1,\"654\":1,\"665\":1}}],[\"n2的值\",{\"1\":{\"580\":1,\"600\":1,\"611\":1,\"654\":1,\"665\":1}}],[\"n2\",{\"1\":{\"580\":6,\"600\":6,\"611\":6,\"654\":6,\"665\":6}}],[\"n1\",{\"1\":{\"580\":6,\"600\":6,\"611\":6,\"654\":6,\"665\":6}}],[\"never\",{\"1\":{\"642\":2,\"643\":1}}],[\"needed\",{\"1\":{\"642\":1}}],[\"need\",{\"1\":{\"635\":1,\"639\":1,\"642\":1,\"644\":1,\"645\":2}}],[\"needs\",{\"1\":{\"635\":1}}],[\"networks\",{\"1\":{\"639\":1}}],[\"network\",{\"1\":{\"635\":1,\"645\":1}}],[\"net\",{\"1\":{\"471\":1,\"481\":2,\"554\":1}}],[\"nextint\",{\"1\":{\"471\":1}}],[\"nextname\",{\"1\":{\"466\":2}}],[\"nextservice\",{\"1\":{\"466\":1}}],[\"next\",{\"1\":{\"440\":1,\"464\":1,\"465\":1,\"635\":1,\"640\":1}}],[\"newgeosearchargs\",{\"1\":{\"537\":1}}],[\"newline\",{\"1\":{\"480\":1}}],[\"newinstance\",{\"1\":{\"466\":1}}],[\"newsize=size\",{\"1\":{\"373\":1}}],[\"newstringbuilder\",{\"1\":{\"343\":1}}],[\"newpassword\",{\"1\":{\"188\":2}}],[\"newreader\",{\"1\":{\"151\":1}}],[\"newoffset++\",{\"1\":{\"117\":1}}],[\"newoffset\",{\"1\":{\"117\":3,\"119\":1,\"122\":2}}],[\"newbank\",{\"1\":{\"89\":4}}],[\"new\",{\"1\":{\"89\":2,\"98\":1,\"102\":1,\"105\":2,\"110\":1,\"121\":1,\"136\":1,\"176\":1,\"188\":4,\"189\":1,\"194\":1,\"200\":1,\"209\":1,\"210\":1,\"212\":1,\"213\":1,\"215\":1,\"216\":1,\"218\":1,\"219\":1,\"223\":1,\"225\":1,\"226\":1,\"230\":3,\"231\":2,\"271\":1,\"289\":1,\"294\":1,\"297\":3,\"298\":3,\"299\":4,\"300\":6,\"302\":1,\"303\":2,\"314\":1,\"315\":4,\"316\":3,\"319\":1,\"326\":2,\"333\":2,\"338\":2,\"341\":8,\"343\":1,\"350\":5,\"357\":1,\"364\":12,\"365\":7,\"373\":6,\"374\":1,\"375\":4,\"387\":2,\"394\":1,\"415\":1,\"416\":3,\"417\":2,\"433\":2,\"437\":2,\"438\":1,\"439\":2,\"440\":1,\"442\":1,\"443\":3,\"444\":4,\"446\":4,\"451\":2,\"452\":2,\"455\":2,\"456\":1,\"463\":1,\"464\":2,\"466\":2,\"469\":1,\"471\":3,\"472\":1,\"474\":2,\"476\":3,\"478\":1,\"480\":1,\"525\":1,\"527\":2,\"531\":2,\"532\":3,\"535\":2,\"536\":4,\"537\":4,\"554\":3,\"561\":1,\"639\":5,\"640\":1}}],[\"newtypedclient\",{\"1\":{\"66\":2,\"70\":2,\"74\":2,\"78\":2,\"90\":2,\"98\":4,\"102\":4,\"126\":2,\"130\":2,\"488\":2,\"492\":2,\"496\":2,\"500\":2,\"504\":2,\"508\":2}}],[\"newdefaultclient\",{\"1\":{\"65\":2,\"69\":2,\"73\":2,\"77\":2,\"97\":2,\"101\":2,\"125\":2,\"129\":2,\"487\":2,\"491\":2,\"495\":2,\"499\":2,\"503\":2,\"507\":2}}],[\"nio\",{\"1\":{\"350\":3}}],[\"nil\",{\"1\":{\"66\":2,\"70\":2,\"74\":2,\"78\":2,\"90\":1,\"92\":1,\"93\":1,\"94\":1,\"98\":10,\"102\":10,\"106\":2,\"107\":2,\"109\":2,\"110\":2,\"111\":1,\"112\":2,\"117\":5,\"121\":6,\"122\":3,\"126\":2,\"130\":2,\"144\":1,\"488\":2,\"492\":2,\"496\":2,\"500\":2,\"504\":2,\"508\":2}}],[\"nyima\",{\"1\":{\"339\":2}}],[\"ns\",{\"1\":{\"303\":4}}],[\"nat\",{\"1\":{\"645\":1,\"646\":1}}],[\"nativemethodaccessorimpl\",{\"1\":{\"472\":3}}],[\"native\",{\"1\":{\"338\":1,\"424\":2,\"472\":1}}],[\"nanotime\",{\"1\":{\"460\":2,\"469\":2,\"470\":2}}],[\"nanos\",{\"1\":{\"319\":1}}],[\"nanoseconds\",{\"1\":{\"303\":1}}],[\"namesrv\",{\"1\":{\"560\":2,\"567\":1}}],[\"namespace\",{\"1\":{\"560\":1,\"567\":1}}],[\"namespace=\",{\"1\":{\"183\":1}}],[\"nameandtype\",{\"1\":{\"400\":1,\"406\":3}}],[\"name必须为\",{\"1\":{\"204\":2}}],[\"name=\",{\"1\":{\"204\":2}}],[\"name=com\",{\"1\":{\"181\":1}}],[\"name=user\",{\"1\":{\"174\":1}}],[\"name3\",{\"1\":{\"135\":3}}],[\"name2\",{\"1\":{\"135\":4}}],[\"name1\",{\"1\":{\"135\":4}}],[\"name\",{\"1\":{\"85\":9,\"88\":2,\"89\":2,\"90\":4,\"134\":4,\"174\":1,\"235\":2,\"239\":1,\"267\":1,\"289\":1,\"400\":1,\"411\":1,\"428\":1,\"429\":1,\"438\":3,\"443\":4,\"460\":6,\"561\":1,\"568\":6}}],[\"nbsp\",{\"1\":{\"267\":2}}],[\"ntlmchall\",{\"1\":{\"198\":1}}],[\"ntlm\",{\"1\":{\"198\":1}}],[\"n次\",{\"1\":{\"139\":1}}],[\"nginx\",{\"1\":{\"90\":18}}],[\"numinvocations\",{\"1\":{\"472\":2}}],[\"num的定义在if里\",{\"1\":{\"141\":1}}],[\"num\",{\"1\":{\"141\":4,\"143\":9,\"540\":5}}],[\"number\",{\"1\":{\"85\":1,\"87\":2,\"88\":3,\"89\":1,\"141\":1,\"289\":1,\"445\":5,\"464\":1,\"635\":1,\"641\":1,\"643\":2,\"644\":1}}],[\"null结果缓存\",{\"1\":{\"572\":1}}],[\"nullpointerexception\",{\"1\":{\"428\":3}}],[\"null\",{\"1\":{\"88\":1,\"179\":4,\"188\":2,\"289\":1,\"301\":2,\"302\":1,\"338\":2,\"350\":3,\"351\":2,\"357\":1,\"364\":1,\"365\":1,\"429\":2,\"438\":1,\"439\":1,\"444\":3,\"458\":1,\"460\":4,\"463\":1,\"464\":3,\"466\":2,\"472\":1,\"528\":1,\"530\":4,\"532\":2,\"535\":1,\"537\":3,\"540\":2}}],[\"nodelay选项\",{\"1\":{\"642\":1}}],[\"nodelay\",{\"1\":{\"641\":2,\"642\":1}}],[\"nodes\",{\"1\":{\"85\":1}}],[\"noargsconstructor\",{\"1\":{\"561\":2}}],[\"non\",{\"1\":{\"460\":1}}],[\"none\",{\"1\":{\"267\":1}}],[\"nosuchelementexception\",{\"1\":{\"466\":1}}],[\"nosuchmethodexception\",{\"1\":{\"429\":2,\"438\":1,\"472\":1}}],[\"nosuchfieldexception\",{\"1\":{\"351\":2}}],[\"normally\",{\"1\":{\"645\":2}}],[\"normal\",{\"1\":{\"295\":1}}],[\"now\",{\"1\":{\"116\":1,\"319\":2,\"539\":4,\"540\":4}}],[\"note\",{\"1\":{\"638\":1,\"642\":1}}],[\"nothing\",{\"1\":{\"464\":1}}],[\"notify相比\",{\"0\":{\"283\":1}}],[\"notify原理\",{\"0\":{\"278\":1}}],[\"notifyall\",{\"1\":{\"277\":2,\"278\":1,\"283\":2}}],[\"notify\",{\"0\":{\"298\":1},\"1\":{\"277\":2,\"278\":1,\"283\":4,\"297\":2,\"298\":5,\"299\":1}}],[\"not仅仅是一个filter\",{\"1\":{\"88\":1}}],[\"not所列举的所有条件\",{\"1\":{\"88\":1}}],[\"not\",{\"1\":{\"87\":1,\"88\":2,\"136\":1,\"179\":2,\"400\":3,\"460\":1,\"466\":3,\"531\":1,\"635\":2,\"638\":2,\"639\":1,\"640\":1,\"642\":1,\"643\":1,\"644\":2,\"732\":1}}],[\"no变成2\",{\"1\":{\"85\":1}}],[\"no=1\",{\"1\":{\"85\":3}}],[\"no\",{\"1\":{\"85\":4,\"136\":1,\"400\":1,\"629\":1,\"637\":1,\"639\":1,\"641\":2,\"642\":1,\"643\":1,\"645\":1}}],[\"n\",{\"1\":{\"66\":3,\"70\":3,\"74\":3,\"78\":3,\"85\":4,\"90\":1,\"92\":2,\"93\":2,\"94\":3,\"98\":5,\"102\":5,\"126\":3,\"130\":3,\"138\":2,\"140\":2,\"142\":6,\"148\":15,\"150\":5,\"151\":1,\"171\":1,\"393\":1,\"438\":1,\"469\":1,\"470\":1,\"488\":3,\"492\":3,\"496\":3,\"500\":3,\"504\":3,\"508\":3,\"644\":3}}],[\"n是整数\",{\"1\":{\"57\":1}}],[\"vd\",{\"1\":{\"481\":1}}],[\"vtable\",{\"0\":{\"423\":1},\"1\":{\"423\":2,\"425\":1,\"448\":1}}],[\"vm\",{\"1\":{\"350\":1}}],[\"vector<>\",{\"1\":{\"299\":1,\"300\":1}}],[\"vector<dog>\",{\"1\":{\"299\":1,\"300\":1}}],[\"very\",{\"1\":{\"641\":1}}],[\"verbose\",{\"1\":{\"345\":2,\"364\":1,\"373\":2,\"374\":1,\"375\":1}}],[\"verb\",{\"1\":{\"146\":1}}],[\"version>\",{\"1\":{\"180\":3,\"195\":1,\"207\":1,\"471\":2,\"525\":1,\"526\":1,\"537\":2,\"554\":3,\"561\":2,\"581\":1,\"601\":1,\"612\":1,\"655\":1,\"666\":1}}],[\"version=\",{\"1\":{\"90\":1,\"183\":1}}],[\"version不增加\",{\"1\":{\"85\":1}}],[\"version\",{\"1\":{\"85\":4,\"390\":1,\"397\":2,\"399\":2,\"406\":2,\"471\":2,\"526\":1}}],[\"volatilecounter\",{\"1\":{\"285\":1}}],[\"volatile变量的写操作会强制将数据写入主内存\",{\"1\":{\"285\":1}}],[\"volatile关键字用来修饰变量\",{\"1\":{\"284\":1}}],[\"volatile关键字有两个作用\",{\"1\":{\"283\":1}}],[\"volatile\",{\"0\":{\"480\":1},\"1\":{\"277\":1,\"283\":2,\"285\":4,\"286\":5,\"471\":1,\"480\":3,\"481\":1}}],[\"void\",{\"1\":{\"188\":4,\"192\":1,\"193\":2,\"194\":1,\"200\":1,\"209\":1,\"212\":1,\"215\":1,\"218\":1,\"225\":1,\"239\":1,\"285\":1,\"286\":2,\"289\":1,\"294\":3,\"297\":1,\"298\":1,\"299\":1,\"300\":1,\"302\":1,\"303\":2,\"315\":1,\"319\":1,\"326\":5,\"333\":1,\"338\":1,\"341\":4,\"343\":1,\"345\":1,\"350\":4,\"351\":4,\"357\":1,\"364\":5,\"365\":3,\"373\":1,\"374\":1,\"375\":1,\"397\":1,\"405\":1,\"406\":1,\"411\":2,\"412\":1,\"413\":3,\"414\":1,\"415\":2,\"416\":5,\"417\":5,\"424\":2,\"427\":1,\"428\":2,\"429\":3,\"430\":1,\"431\":2,\"432\":1,\"433\":1,\"436\":3,\"437\":1,\"438\":2,\"439\":4,\"440\":4,\"441\":4,\"442\":2,\"444\":4,\"445\":1,\"446\":8,\"451\":1,\"452\":1,\"455\":1,\"456\":1,\"458\":1,\"464\":2,\"469\":1,\"470\":1,\"471\":7,\"472\":3,\"474\":1,\"476\":1,\"478\":1,\"480\":2,\"530\":1,\"536\":1,\"554\":4,\"561\":1,\"581\":1,\"601\":1,\"612\":1,\"655\":1,\"666\":1}}],[\"vip\",{\"1\":{\"560\":1,\"567\":1}}],[\"view\",{\"1\":{\"541\":1,\"640\":3}}],[\"visitor\",{\"1\":{\"541\":1}}],[\"visit\",{\"1\":{\"338\":1}}],[\"visibility\",{\"1\":{\"283\":1}}],[\"via\",{\"1\":{\"267\":1,\"640\":1,\"645\":1}}],[\"video\",{\"1\":{\"156\":1,\"481\":1}}],[\"v3\",{\"1\":{\"135\":2}}],[\"v2\",{\"1\":{\"135\":2}}],[\"v1\",{\"1\":{\"122\":1,\"135\":2,\"338\":1}}],[\"val$x\",{\"1\":{\"446\":3}}],[\"val3\",{\"1\":{\"142\":1}}],[\"val2\",{\"1\":{\"142\":3}}],[\"val1\",{\"1\":{\"142\":3}}],[\"val\",{\"1\":{\"117\":2}}],[\"validator\",{\"1\":{\"98\":1,\"102\":1,\"121\":1}}],[\"value的序列化\",{\"1\":{\"554\":1}}],[\"valueat\",{\"1\":{\"540\":1}}],[\"value存储\",{\"1\":{\"512\":1}}],[\"valueof\",{\"1\":{\"345\":1,\"436\":2,\"437\":1,\"438\":1,\"443\":2,\"530\":1,\"532\":1,\"535\":1,\"537\":1}}],[\"value=\",{\"1\":{\"204\":1,\"267\":1}}],[\"values\",{\"1\":{\"179\":1,\"443\":1,\"471\":3,\"645\":1}}],[\"value\",{\"1\":{\"87\":1,\"88\":6,\"89\":1,\"94\":1,\"134\":3,\"138\":1,\"182\":1,\"267\":1,\"400\":2,\"405\":1,\"410\":2,\"441\":1,\"530\":1,\"532\":1,\"535\":1,\"536\":3,\"537\":3,\"635\":1,\"640\":3,\"642\":1,\"644\":1}}],[\"var0\",{\"1\":{\"441\":4}}],[\"var2\",{\"1\":{\"350\":2,\"441\":4}}],[\"varchar\",{\"1\":{\"179\":2,\"235\":7}}],[\"var1\",{\"1\":{\"142\":2}}],[\"variables\",{\"1\":{\"136\":1}}],[\"var\",{\"1\":{\"90\":1,\"98\":1,\"102\":1,\"105\":1,\"110\":1,\"134\":8,\"135\":3,\"136\":1,\"138\":1,\"140\":1,\"142\":2,\"144\":1,\"150\":2}}],[\"v\",{\"0\":{\"454\":1},\"1\":{\"66\":3,\"70\":3,\"74\":3,\"78\":3,\"90\":4,\"92\":2,\"93\":2,\"94\":2,\"98\":5,\"102\":5,\"116\":2,\"117\":3,\"126\":3,\"130\":3,\"138\":2,\"148\":7,\"309\":3,\"339\":2,\"341\":2,\"400\":3,\"403\":1,\"406\":12,\"410\":1,\"411\":3,\"414\":1,\"415\":5,\"416\":6,\"428\":1,\"429\":2,\"433\":2,\"435\":1,\"437\":1,\"438\":4,\"454\":1,\"488\":3,\"492\":3,\"496\":3,\"500\":3,\"504\":3,\"508\":3}}],[\"v7\",{\"1\":{\"65\":1,\"69\":1,\"73\":1,\"77\":1,\"97\":1,\"101\":1,\"125\":1,\"129\":1,\"487\":1,\"491\":1,\"495\":1,\"499\":1,\"503\":1,\"507\":1}}],[\"v8\",{\"1\":{\"65\":4,\"69\":4,\"73\":4,\"77\":4,\"94\":2,\"97\":4,\"98\":1,\"101\":4,\"102\":1,\"125\":1,\"129\":4,\"487\":4,\"491\":4,\"495\":4,\"499\":4,\"503\":4,\"507\":4}}],[\"vue\",{\"1\":{\"29\":2,\"677\":2}}],[\"vuepress\",{\"0\":{\"13\":1},\"1\":{\"9\":2,\"11\":2,\"12\":1,\"13\":2,\"14\":1,\"28\":1,\"676\":1}}],[\"ephemeral\",{\"1\":{\"638\":1}}],[\"epoch\",{\"1\":{\"295\":1}}],[\"etl\",{\"1\":{\"680\":1,\"683\":1}}],[\"etlcondition\",{\"1\":{\"568\":1}}],[\"etc\",{\"1\":{\"90\":2}}],[\"e2\",{\"1\":{\"444\":2}}],[\"e1\",{\"1\":{\"444\":3}}],[\"easily\",{\"1\":{\"638\":1}}],[\"eat\",{\"1\":{\"417\":4,\"424\":2}}],[\"each=\",{\"1\":{\"267\":1}}],[\"every\",{\"1\":{\"640\":1,\"644\":1}}],[\"event\",{\"1\":{\"225\":2}}],[\"eventsink\",{\"1\":{\"81\":1,\"726\":1,\"729\":1}}],[\"even\",{\"1\":{\"141\":2}}],[\"evacuation\",{\"1\":{\"383\":1}}],[\"eda2e7897356a975438fe5899c0b4a6c\",{\"1\":{\"406\":1}}],[\"eden\",{\"1\":{\"378\":1,\"381\":1}}],[\"edwmoohzzs7\",{\"1\":{\"179\":3,\"201\":1}}],[\"eclipse\",{\"1\":{\"357\":2}}],[\"ef\",{\"1\":{\"343\":1}}],[\"eo\",{\"1\":{\"328\":1}}],[\"e\",{\"1\":{\"139\":2,\"148\":4,\"231\":1,\"289\":3,\"297\":4,\"298\":4,\"299\":2,\"316\":5,\"319\":2,\"333\":2,\"343\":1,\"345\":2,\"381\":2,\"387\":2,\"427\":1,\"428\":6,\"429\":4,\"430\":1,\"437\":1,\"440\":4,\"444\":8,\"456\":7,\"458\":1,\"459\":1,\"460\":1,\"527\":2,\"561\":2}}],[\"elapse\",{\"1\":{\"642\":1}}],[\"elasticsearch提供了很多内置的分词器\",{\"1\":{\"90\":1}}],[\"elasticsearch提供了一个可以执行查询的json风格的dsl\",{\"1\":{\"88\":1}}],[\"elasticsearch是基于lucene开发的搜索引擎\",{\"1\":{\"89\":1}}],[\"elasticsearch会自动检查场景并且优化查询的执行\",{\"1\":{\"88\":1}}],[\"elasticsearch并没有提供删除类型的操作\",{\"1\":{\"85\":1}}],[\"elasticsearch8\",{\"1\":{\"65\":2,\"69\":2,\"73\":2,\"77\":2,\"97\":2,\"101\":2,\"125\":2,\"129\":2,\"487\":2,\"491\":2,\"495\":2,\"499\":2,\"503\":2,\"507\":2}}],[\"elasticsearch7\",{\"1\":{\"65\":2,\"69\":2,\"73\":2,\"77\":2,\"89\":1,\"97\":2,\"101\":2,\"125\":2,\"129\":2,\"487\":2,\"491\":2,\"495\":2,\"499\":2,\"503\":2,\"507\":2}}],[\"elasticsearch\",{\"0\":{\"565\":1},\"1\":{\"65\":5,\"66\":4,\"69\":5,\"70\":4,\"73\":5,\"74\":4,\"77\":5,\"78\":4,\"88\":1,\"89\":2,\"90\":9,\"92\":1,\"93\":1,\"94\":3,\"97\":5,\"98\":11,\"101\":5,\"102\":11,\"125\":2,\"126\":4,\"129\":5,\"130\":4,\"487\":5,\"488\":4,\"491\":5,\"492\":4,\"495\":5,\"496\":4,\"499\":5,\"500\":4,\"503\":5,\"504\":4,\"507\":5,\"508\":4,\"558\":1,\"565\":1,\"568\":1},\"2\":{\"68\":1,\"72\":1,\"76\":1,\"80\":1,\"82\":1,\"83\":1,\"95\":1,\"96\":1,\"100\":1,\"132\":1,\"490\":1,\"494\":1,\"498\":1,\"502\":1,\"506\":1,\"510\":1,\"682\":1,\"685\":1,\"727\":1,\"728\":1,\"730\":1,\"731\":1}}],[\"elastic\",{\"1\":{\"65\":5,\"69\":5,\"73\":5,\"77\":5,\"94\":2,\"97\":5,\"98\":1,\"101\":5,\"102\":1,\"125\":2,\"129\":5,\"487\":5,\"491\":5,\"495\":5,\"499\":5,\"503\":5,\"507\":5}}],[\"element\",{\"1\":{\"471\":2}}],[\"elements\",{\"1\":{\"471\":10}}],[\"eliminatelocks\",{\"1\":{\"303\":1}}],[\"else子句\",{\"1\":{\"142\":1}}],[\"else语句块中使用\",{\"1\":{\"141\":1}}],[\"else\",{\"1\":{\"117\":1,\"140\":3,\"141\":1,\"188\":1,\"350\":1,\"412\":1,\"441\":1,\"444\":1,\"460\":1,\"529\":1,\"530\":1,\"531\":1,\"532\":1,\"535\":1,\"540\":1,\"561\":1}}],[\"exact\",{\"1\":{\"635\":1}}],[\"example\",{\"1\":{\"286\":1,\"553\":1,\"554\":1,\"560\":1,\"561\":1,\"567\":1,\"568\":2,\"644\":1,\"645\":1}}],[\"exist\",{\"1\":{\"529\":1}}],[\"exit\",{\"1\":{\"338\":1,\"350\":1}}],[\"ex\",{\"1\":{\"464\":3}}],[\"experimental\",{\"1\":{\"639\":1}}],[\"exposure\",{\"1\":{\"644\":1}}],[\"exposed\",{\"1\":{\"638\":1}}],[\"exports\",{\"1\":{\"638\":1}}],[\"expiredsessionstrategy\",{\"1\":{\"226\":1}}],[\"expression\",{\"1\":{\"143\":1}}],[\"exchanger\",{\"0\":{\"317\":1}}],[\"excutor\",{\"1\":{\"277\":1}}],[\"exceptionhandling\",{\"1\":{\"219\":1,\"231\":1}}],[\"exception\",{\"1\":{\"190\":1,\"212\":2,\"219\":2,\"231\":3,\"289\":1,\"303\":2,\"338\":1,\"345\":1,\"350\":1,\"427\":4,\"428\":5,\"429\":1,\"430\":3,\"431\":1,\"432\":1,\"433\":1,\"444\":4,\"464\":2}}],[\"exclusions>\",{\"1\":{\"180\":1,\"537\":1,\"561\":1}}],[\"exclusion>\",{\"1\":{\"180\":1,\"537\":2,\"561\":1}}],[\"execute\",{\"1\":{\"420\":1}}],[\"executequery\",{\"1\":{\"393\":1}}],[\"executorservice\",{\"1\":{\"310\":1}}],[\"executors\",{\"1\":{\"310\":1}}],[\"executor\",{\"1\":{\"310\":1}}],[\"exec\",{\"1\":{\"116\":1}}],[\"extras\",{\"1\":{\"267\":1}}],[\"extent\",{\"1\":{\"638\":1}}],[\"extension\",{\"1\":{\"457\":1,\"460\":1}}],[\"extends\",{\"1\":{\"183\":1,\"184\":2,\"223\":1,\"338\":1,\"364\":1,\"365\":1,\"417\":2,\"443\":1,\"445\":2,\"455\":1,\"472\":1}}],[\"external\",{\"1\":{\"85\":18}}],[\"ext\",{\"1\":{\"90\":4,\"457\":1,\"459\":4}}],[\"equal\",{\"1\":{\"644\":1}}],[\"equals\",{\"1\":{\"424\":2,\"441\":9,\"464\":1,\"561\":3}}],[\"eq\",{\"1\":{\"88\":1,\"89\":1,\"188\":1,\"529\":3,\"530\":2,\"531\":4,\"532\":3,\"534\":1,\"537\":1}}],[\"e8\",{\"1\":{\"85\":1}}],[\"e6\",{\"1\":{\"85\":3}}],[\"empty\",{\"1\":{\"637\":1}}],[\"emptylist\",{\"1\":{\"530\":1,\"532\":1,\"537\":2}}],[\"emp\",{\"1\":{\"554\":3}}],[\"employee表中的数据\",{\"1\":{\"554\":1}}],[\"employeehandler\",{\"1\":{\"554\":1}}],[\"employee\",{\"1\":{\"89\":1,\"553\":1,\"554\":10,\"561\":4,\"568\":4,\"569\":3}}],[\"employer\",{\"1\":{\"85\":1,\"89\":1}}],[\"email\",{\"1\":{\"85\":1,\"89\":2,\"235\":1}}],[\"euron\",{\"1\":{\"85\":2}}],[\"erro\",{\"1\":{\"430\":1}}],[\"error\",{\"1\":{\"88\":1,\"98\":11,\"102\":11,\"106\":1,\"107\":1,\"110\":1,\"111\":1,\"116\":1,\"117\":1,\"118\":1,\"119\":1,\"120\":1,\"121\":8,\"148\":3,\"150\":3,\"204\":1,\"205\":1,\"303\":2,\"350\":1,\"430\":1,\"466\":1,\"471\":2,\"637\":1}}],[\"errors\",{\"1\":{\"85\":1,\"105\":2,\"110\":1}}],[\"errnotfollowrepeated\",{\"1\":{\"105\":1}}],[\"errfollowrepeated\",{\"1\":{\"105\":1,\"110\":2}}],[\"err\",{\"1\":{\"66\":8,\"70\":8,\"74\":8,\"78\":8,\"90\":4,\"92\":4,\"93\":4,\"94\":4,\"98\":31,\"102\":31,\"106\":3,\"107\":3,\"109\":2,\"110\":8,\"111\":4,\"112\":4,\"116\":2,\"117\":9,\"118\":2,\"119\":1,\"121\":15,\"122\":6,\"126\":8,\"130\":8,\"148\":3,\"150\":3,\"350\":1,\"488\":8,\"492\":8,\"496\":8,\"500\":8,\"504\":8,\"508\":8}}],[\"es创建索引库和映射\",{\"0\":{\"569\":1}}],[\"escore模块\",{\"1\":{\"568\":1}}],[\"esconfig\",{\"1\":{\"98\":1,\"102\":1}}],[\"es的type\",{\"1\":{\"568\":2}}],[\"es的批量操作\",{\"1\":{\"85\":1}}],[\"esmapping\",{\"1\":{\"568\":1}}],[\"es配置\",{\"1\":{\"568\":1}}],[\"es6x\",{\"1\":{\"568\":6}}],[\"es6因为我使用的是es6\",{\"1\":{\"568\":1}}],[\"es6\",{\"1\":{\"568\":1}}],[\"es直接同步\",{\"1\":{\"98\":1,\"102\":1}}],[\"es连接没有关闭方法\",{\"1\":{\"98\":1,\"102\":1}}],[\"esdb\",{\"1\":{\"98\":5,\"102\":5}}],[\"es中可以在query中组合非常多的查询类型完成复杂查询\",{\"1\":{\"88\":1}}],[\"es\",{\"0\":{\"66\":1,\"70\":1,\"74\":1,\"78\":1,\"98\":1,\"102\":1,\"126\":1,\"130\":1,\"488\":1,\"492\":1,\"496\":1,\"500\":1,\"504\":1,\"508\":1,\"735\":1},\"1\":{\"66\":2,\"70\":2,\"74\":2,\"78\":2,\"81\":3,\"85\":2,\"87\":1,\"90\":3,\"98\":4,\"102\":4,\"126\":2,\"130\":2,\"488\":2,\"492\":2,\"496\":2,\"500\":2,\"504\":2,\"508\":2,\"726\":3,\"729\":3}}],[\"es8\",{\"1\":{\"65\":1,\"69\":1,\"73\":1,\"77\":1,\"97\":1,\"101\":1,\"125\":1,\"129\":1,\"487\":1,\"491\":1,\"495\":1,\"499\":1,\"503\":1,\"507\":1}}],[\"es7\",{\"1\":{\"65\":1,\"69\":1,\"73\":1,\"77\":1,\"97\":1,\"101\":1,\"125\":1,\"129\":1,\"487\":1,\"491\":1,\"495\":1,\"499\":1,\"503\":1,\"507\":1}}],[\"es客户端\",{\"1\":{\"65\":1,\"69\":1,\"73\":1,\"77\":1,\"97\":1,\"101\":1,\"125\":1,\"129\":1,\"487\":1,\"491\":1,\"495\":1,\"499\":1,\"503\":1,\"507\":1}}],[\"enough\",{\"1\":{\"642\":1,\"644\":1}}],[\"enum<sex>\",{\"1\":{\"443\":1}}],[\"enum\",{\"1\":{\"400\":2,\"442\":2,\"443\":2}}],[\"ensurecapacityinternal\",{\"1\":{\"333\":1}}],[\"encode\",{\"1\":{\"200\":1}}],[\"encoder\",{\"1\":{\"200\":3}}],[\"encoding=\",{\"1\":{\"90\":1,\"183\":1}}],[\"en\",{\"1\":{\"183\":1}}],[\"enable\",{\"1\":{\"560\":1,\"561\":1,\"567\":1}}],[\"enablemethodsecurity\",{\"1\":{\"237\":1}}],[\"enabled\",{\"1\":{\"182\":1,\"560\":1,\"567\":1,\"640\":1}}],[\"enablewebsecurity\",{\"1\":{\"176\":1}}],[\"entirely\",{\"1\":{\"640\":1}}],[\"entity\",{\"1\":{\"182\":1}}],[\"entries\",{\"1\":{\"289\":1}}],[\"entryhandler<employee>\",{\"1\":{\"554\":2}}],[\"entryset\",{\"1\":{\"536\":1}}],[\"entry\",{\"1\":{\"536\":3}}],[\"entry<long\",{\"1\":{\"536\":1}}],[\"entrylist\",{\"1\":{\"278\":1,\"289\":3,\"302\":2}}],[\"entry>\",{\"1\":{\"90\":4}}],[\"end的部分\",{\"1\":{\"537\":1}}],[\"end\",{\"1\":{\"90\":11,\"315\":4,\"357\":1,\"469\":2,\"470\":2,\"537\":2}}],[\"endpoint\",{\"1\":{\"55\":1}}],[\"enhance\",{\"1\":{\"14\":1}}],[\"guarantee\",{\"1\":{\"644\":1}}],[\"guava<\",{\"1\":{\"581\":1,\"601\":1,\"612\":1,\"655\":1,\"666\":1}}],[\"guide\",{\"1\":{\"241\":1}}],[\"gz\",{\"1\":{\"568\":1}}],[\"gz版本\",{\"1\":{\"553\":1,\"560\":1,\"567\":1}}],[\"g1会跟踪老年代所有incoming引用\",{\"1\":{\"389\":1}}],[\"g1不会对巨型对象进行拷贝\",{\"1\":{\"389\":1}}],[\"g1并发检查是否有重复的字符串\",{\"1\":{\"387\":1}}],[\"g1\",{\"1\":{\"384\":1,\"392\":1,\"568\":2}}],[\"g1heapregionsize=size\",{\"1\":{\"380\":1}}],[\"garbage\",{\"0\":{\"380\":1}}],[\"gc是不发生gc\",{\"0\":{\"393\":1}}],[\"gc自适应调节策略\",{\"1\":{\"378\":2}}],[\"gctimeratio=rario\",{\"1\":{\"378\":1}}],[\"gctimeratio=ratio\",{\"1\":{\"378\":1}}],[\"gctest\",{\"1\":{\"373\":1}}],[\"gcfullgc\",{\"1\":{\"373\":1}}],[\"gc\",{\"0\":{\"372\":1},\"1\":{\"295\":1,\"345\":3,\"351\":8,\"357\":1,\"359\":1,\"363\":1,\"364\":2,\"371\":2,\"373\":3,\"374\":1,\"375\":1,\"378\":1,\"379\":2,\"381\":1,\"382\":2,\"384\":8,\"390\":1,\"391\":1,\"393\":1,\"394\":5,\"395\":2,\"396\":4}}],[\"grep\",{\"1\":{\"328\":1}}],[\"greater\",{\"1\":{\"143\":3,\"640\":1}}],[\"grant\",{\"1\":{\"552\":3,\"559\":3,\"566\":3}}],[\"grantedauthority>\",{\"1\":{\"223\":1}}],[\"grantedauthority\",{\"1\":{\"222\":1,\"230\":2}}],[\"grade\",{\"1\":{\"142\":11}}],[\"groups\",{\"1\":{\"568\":1}}],[\"groupid\",{\"1\":{\"568\":2}}],[\"groupid>\",{\"1\":{\"180\":5,\"195\":1,\"207\":1,\"260\":3,\"471\":2,\"525\":1,\"526\":1,\"537\":5,\"554\":7,\"561\":6,\"568\":1,\"581\":1,\"601\":1,\"612\":1,\"655\":1,\"666\":1}}],[\"groupingby\",{\"1\":{\"536\":1}}],[\"group\",{\"1\":{\"88\":1,\"118\":1,\"560\":1,\"561\":1,\"567\":1}}],[\"g\",{\"1\":{\"139\":2,\"459\":8}}],[\"given\",{\"1\":{\"635\":1}}],[\"giuhub社交登录案例\",{\"0\":{\"262\":1}}],[\"gin使用redis\",{\"0\":{\"125\":1},\"2\":{\"124\":1,\"128\":1}}],[\"gin使用redis实现简单关注推送\",{\"0\":{\"115\":1},\"1\":{\"115\":1}}],[\"gin使用redis实现共同关注\",{\"0\":{\"105\":1},\"1\":{\"105\":1},\"2\":{\"114\":1}}],[\"gin使用rabbitmq实现异步双写\",{\"0\":{\"101\":1},\"1\":{\"101\":1},\"2\":{\"103\":1}}],[\"gin\",{\"1\":{\"98\":1,\"102\":1,\"121\":1,\"122\":1}}],[\"git\",{\"1\":{\"458\":1,\"459\":1}}],[\"gitee\",{\"1\":{\"85\":1}}],[\"github向客户应用发送回调请求\",{\"1\":{\"271\":1}}],[\"github用户数据登录\",{\"1\":{\"270\":1}}],[\"github返回用户数据\",{\"1\":{\"270\":1}}],[\"github\",{\"1\":{\"65\":5,\"69\":5,\"73\":5,\"77\":5,\"90\":1,\"94\":2,\"97\":5,\"98\":1,\"101\":5,\"102\":1,\"125\":5,\"129\":5,\"157\":1,\"195\":1,\"264\":1,\"265\":2,\"270\":6,\"271\":7,\"487\":5,\"491\":5,\"495\":5,\"499\":5,\"503\":5,\"507\":5,\"553\":1,\"558\":4,\"560\":1,\"567\":1,\"568\":2}}],[\"gte\",{\"1\":{\"88\":1}}],[\"georeference\",{\"1\":{\"537\":1}}],[\"georesults<redisgeocommands\",{\"1\":{\"537\":1}}],[\"georadius\",{\"1\":{\"519\":1,\"535\":1}}],[\"geolocation<>\",{\"1\":{\"536\":1}}],[\"geolocation<string>>>\",{\"1\":{\"537\":1}}],[\"geolocation<string>>\",{\"1\":{\"536\":1,\"537\":1}}],[\"geo\",{\"1\":{\"536\":1,\"537\":1,\"545\":2,\"548\":2}}],[\"geo在redis中就一个menber和一个经纬度\",{\"1\":{\"536\":1}}],[\"geo就是geolocation的简写形式\",{\"1\":{\"535\":1}}],[\"geosearchcommandargs\",{\"1\":{\"537\":1}}],[\"geosearchstore\",{\"1\":{\"519\":1,\"535\":1}}],[\"geosearch\",{\"1\":{\"519\":1,\"535\":1,\"537\":1}}],[\"geospatial\",{\"1\":{\"512\":1}}],[\"geopos\",{\"1\":{\"519\":1,\"535\":1}}],[\"geohash\",{\"1\":{\"519\":1,\"535\":1}}],[\"geodist\",{\"1\":{\"519\":1,\"535\":1}}],[\"geoadd\",{\"1\":{\"519\":1,\"535\":1,\"536\":1}}],[\"genericfastjsonredisserializer\",{\"1\":{\"554\":2}}],[\"generated\",{\"1\":{\"639\":1}}],[\"generatedmethodaccessor1\",{\"1\":{\"472\":1}}],[\"generatedmethodaccessor\",{\"1\":{\"472\":2}}],[\"generatemethod\",{\"1\":{\"472\":1}}],[\"generator\",{\"1\":{\"471\":1}}],[\"genderagg\",{\"1\":{\"88\":1}}],[\"gender必须是m\",{\"1\":{\"88\":1}}],[\"gender\",{\"1\":{\"85\":1,\"88\":2,\"89\":1}}],[\"gettype\",{\"1\":{\"561\":3}}],[\"gettypeid\",{\"1\":{\"536\":1}}],[\"getdata\",{\"1\":{\"561\":2}}],[\"getdayofmonth\",{\"1\":{\"539\":1,\"540\":1}}],[\"getdistance\",{\"1\":{\"537\":1}}],[\"getdeclaringclass\",{\"1\":{\"472\":2}}],[\"getdeclaredmethods\",{\"1\":{\"445\":1}}],[\"getdeclaredfield\",{\"1\":{\"351\":1}}],[\"gety\",{\"1\":{\"536\":2}}],[\"getx\",{\"1\":{\"536\":2}}],[\"getkey\",{\"1\":{\"536\":1}}],[\"getvalue\",{\"1\":{\"535\":1,\"536\":1,\"537\":1}}],[\"getbody\",{\"1\":{\"561\":1}}],[\"getbit\",{\"1\":{\"538\":1}}],[\"getbyid\",{\"1\":{\"528\":1,\"532\":1}}],[\"getbuilder\",{\"1\":{\"271\":2}}],[\"getoriginalfilename\",{\"1\":{\"527\":1}}],[\"getexceptiontypes\",{\"1\":{\"472\":1}}],[\"getenabled\",{\"1\":{\"188\":1}}],[\"getfindclasses\",{\"1\":{\"460\":1}}],[\"getfindclasstime\",{\"1\":{\"460\":1}}],[\"getfollowpostlistbyids\",{\"1\":{\"122\":1}}],[\"getfollowcommons\",{\"1\":{\"109\":2,\"112\":3}}],[\"getid\",{\"1\":{\"527\":2,\"529\":1,\"530\":3,\"531\":2,\"532\":2,\"534\":4,\"535\":1,\"536\":2,\"537\":1,\"539\":1,\"540\":1,\"554\":3,\"561\":2}}],[\"getinstance\",{\"1\":{\"456\":2}}],[\"getisfollow\",{\"1\":{\"108\":1,\"110\":1}}],[\"getrawtype\",{\"1\":{\"438\":1}}],[\"getrecords\",{\"1\":{\"532\":1,\"537\":1}}],[\"getreturntype\",{\"1\":{\"472\":1}}],[\"getresponse\",{\"1\":{\"225\":1}}],[\"getrediskey\",{\"1\":{\"106\":1,\"107\":1,\"108\":1,\"109\":2,\"116\":1,\"117\":1}}],[\"getgenericparametertypes\",{\"1\":{\"438\":1}}],[\"getmodifiers\",{\"1\":{\"472\":1}}],[\"getmethod\",{\"1\":{\"429\":1,\"438\":1,\"472\":1}}],[\"getmapping\",{\"1\":{\"159\":1,\"185\":1,\"203\":1,\"223\":1,\"239\":1,\"266\":1,\"529\":1,\"530\":1,\"531\":1,\"532\":2,\"535\":1,\"537\":1,\"540\":1}}],[\"getscore\",{\"1\":{\"535\":1}}],[\"getsystemclassloader\",{\"1\":{\"464\":2}}],[\"getsimplename\",{\"1\":{\"417\":1,\"471\":1}}],[\"getstatic\",{\"1\":{\"289\":2,\"324\":1,\"406\":1,\"410\":1,\"411\":2,\"414\":1,\"433\":1,\"474\":8,\"481\":7}}],[\"getactualtypearguments\",{\"1\":{\"438\":1}}],[\"getattributes\",{\"1\":{\"266\":1}}],[\"getauthority\",{\"1\":{\"230\":2}}],[\"getauthorities\",{\"1\":{\"223\":1}}],[\"getauthentication\",{\"1\":{\"223\":1}}],[\"getname\",{\"1\":{\"223\":1,\"266\":1,\"472\":1,\"537\":1}}],[\"getclassloadinglock\",{\"1\":{\"460\":1}}],[\"getclassloader\",{\"1\":{\"451\":1,\"452\":1,\"458\":1,\"463\":1}}],[\"getclass\",{\"1\":{\"417\":1}}],[\"getclientname\",{\"1\":{\"266\":1}}],[\"getclientregistration\",{\"1\":{\"266\":1}}],[\"getcontent\",{\"1\":{\"537\":2}}],[\"getcontextclassloader\",{\"1\":{\"455\":2,\"466\":1}}],[\"getcontext\",{\"1\":{\"223\":1}}],[\"getcount\",{\"1\":{\"315\":3}}],[\"getcredentials\",{\"1\":{\"223\":1}}],[\"getcurrentuserid\",{\"1\":{\"98\":1,\"102\":1,\"121\":1,\"122\":1}}],[\"getlocalizedmessage\",{\"1\":{\"212\":1,\"218\":1}}],[\"getlist\",{\"1\":{\"185\":1,\"239\":1}}],[\"getwriter\",{\"1\":{\"209\":1,\"212\":1,\"215\":1,\"218\":1,\"225\":1,\"231\":1}}],[\"getproperty\",{\"1\":{\"464\":1}}],[\"getprincipal\",{\"1\":{\"209\":1,\"223\":1}}],[\"getparametertypes\",{\"1\":{\"472\":1}}],[\"getparentdelegationtime\",{\"1\":{\"460\":1}}],[\"getpassword\",{\"1\":{\"188\":1,\"193\":1,\"194\":1,\"234\":1,\"238\":1}}],[\"getpostfollowhandler\",{\"1\":{\"122\":2}}],[\"getpostbyid\",{\"1\":{\"98\":2,\"102\":2}}],[\"getuserid\",{\"1\":{\"534\":1}}],[\"getuser\",{\"1\":{\"527\":1,\"529\":1,\"530\":2,\"531\":2,\"532\":2,\"534\":1,\"535\":1,\"539\":1,\"540\":1}}],[\"getusername\",{\"1\":{\"188\":1,\"193\":1,\"194\":1,\"234\":1,\"238\":1}}],[\"getuserbyid\",{\"1\":{\"112\":1}}],[\"get请求不能携带请求体\",{\"1\":{\"87\":1}}],[\"get\",{\"1\":{\"62\":1,\"65\":1,\"69\":1,\"73\":1,\"77\":1,\"85\":8,\"87\":3,\"88\":12,\"89\":2,\"90\":1,\"97\":1,\"101\":1,\"122\":1,\"125\":1,\"129\":1,\"299\":1,\"300\":2,\"351\":1,\"364\":4,\"365\":3,\"437\":8,\"438\":1,\"487\":1,\"491\":1,\"495\":1,\"499\":1,\"503\":1,\"507\":1,\"525\":1,\"526\":3,\"537\":1,\"540\":4}}],[\"good\",{\"1\":{\"641\":1}}],[\"google\",{\"1\":{\"133\":1,\"146\":1,\"151\":1,\"581\":1,\"601\":1,\"612\":1,\"655\":1,\"666\":1}}],[\"go客户端\",{\"1\":{\"558\":1}}],[\"goto\",{\"1\":{\"289\":1,\"412\":2,\"413\":2,\"414\":1,\"427\":1,\"428\":3,\"429\":1,\"430\":2,\"433\":1}}],[\"go里面switch默认相当于每个case最后带有break\",{\"1\":{\"142\":1}}],[\"go将自动能够使用初始值来推断该变量的类型\",{\"1\":{\"134\":1}}],[\"golang里面的协程\",{\"1\":{\"277\":1}}],[\"golang中文网在线标准库文档\",{\"1\":{\"133\":1}}],[\"golang\",{\"1\":{\"133\":1,\"146\":1,\"151\":1}}],[\"go编译器是一行行进行编译的\",{\"1\":{\"133\":1}}],[\"go语言是静态语言\",{\"1\":{\"136\":1}}],[\"go语言提供了大量的标准库\",{\"1\":{\"133\":1}}],[\"go语言会在每行后自动加分号\",{\"1\":{\"133\":1}}],[\"go语法基础\",{\"0\":{\"133\":1},\"2\":{\"153\":1}}],[\"go提供了2种两种客户端\",{\"1\":{\"90\":1}}],[\"go\",{\"0\":{\"65\":1,\"69\":1,\"73\":1,\"77\":1,\"97\":1,\"129\":1,\"487\":1,\"491\":1,\"495\":1,\"499\":1,\"503\":1,\"507\":1,\"736\":1},\"1\":{\"65\":9,\"69\":9,\"73\":9,\"77\":9,\"90\":3,\"94\":2,\"97\":9,\"98\":2,\"101\":8,\"102\":2,\"115\":1,\"125\":8,\"129\":9,\"133\":2,\"487\":9,\"491\":9,\"495\":9,\"499\":9,\"503\":9,\"507\":9,\"558\":1},\"2\":{\"67\":1,\"71\":1,\"75\":1,\"79\":1,\"99\":1,\"113\":1,\"123\":1,\"127\":1,\"131\":1,\"152\":1,\"489\":1,\"493\":1,\"497\":1,\"501\":1,\"505\":1,\"509\":1}}],[\"三个问题属于redis的分布式问题\",{\"1\":{\"620\":1}}],[\"三个函数\",{\"1\":{\"115\":1}}],[\"三报文握手\",{\"1\":{\"62\":1}}],[\"三次握手\",{\"1\":{\"62\":1}}],[\"拥塞控制\",{\"0\":{\"62\":1},\"1\":{\"62\":1}}],[\"据已经收到了\",{\"1\":{\"59\":1}}],[\"现代微服务安全\",{\"0\":{\"247\":1}}],[\"现在有100万不存在的数据\",{\"1\":{\"582\":1,\"602\":1,\"613\":1,\"656\":1,\"667\":1}}],[\"现在的问题是这个主键其实并没有那么短\",{\"1\":{\"541\":1}}],[\"现在的确认号不是501\",{\"1\":{\"57\":1}}],[\"现在\",{\"1\":{\"198\":1}}],[\"现在站在收件人这端来看\",{\"1\":{\"115\":1,\"533\":1}}],[\"现假定a收到了b发来的确认报文段\",{\"1\":{\"59\":1}}],[\"面向接口编程+解耦\",{\"1\":{\"465\":1}}],[\"面向字节流\",{\"1\":{\"55\":2}}],[\"面试题\",{\"1\":{\"343\":1}}],[\"面积为\",{\"1\":{\"138\":2}}],[\"面图5\",{\"1\":{\"59\":1}}],[\"滑动窗口\",{\"0\":{\"59\":1},\"1\":{\"62\":1}}],[\"窗口是20字节\",{\"1\":{\"59\":1}}],[\"窗口值表示发送本报文段的一方的接受窗口\",{\"1\":{\"57\":1}}],[\"窗口值在\",{\"1\":{\"57\":1}}],[\"窗口\",{\"1\":{\"57\":1}}],[\"则在同步过程中返回错误\",{\"1\":{\"628\":1,\"638\":1}}],[\"则将数组下标为2\",{\"1\":{\"580\":1,\"600\":1,\"611\":1,\"654\":1,\"665\":1}}],[\"则数组越长\",{\"1\":{\"580\":1,\"600\":1,\"611\":1,\"654\":1,\"665\":1}}],[\"则优先考虑的高可用性\",{\"1\":{\"572\":1}}],[\"则需要指定一个属性为主键属性\",{\"1\":{\"568\":1}}],[\"则记录多次pv\",{\"1\":{\"541\":1}}],[\"则直接放行\",{\"1\":{\"541\":1}}],[\"则直接返回\",{\"1\":{\"541\":1}}],[\"则说明不是一次缓存穿透数据\",{\"1\":{\"541\":1}}],[\"则此时就无法生效\",{\"1\":{\"541\":1}}],[\"则这张表一年的数据量为\",{\"1\":{\"538\":1}}],[\"则点赞按钮高亮显示\",{\"1\":{\"529\":1}}],[\"则不会进行上面的优化\",{\"1\":{\"471\":1}}],[\"则不会再次加载\",{\"1\":{\"459\":1}}],[\"则还有自动拆箱的操作\",{\"1\":{\"437\":1}}],[\"则还有一个变体\",{\"1\":{\"141\":1}}],[\"则通过\",{\"1\":{\"427\":1}}],[\"则卸载它所加载的所有类\",{\"1\":{\"388\":1}}],[\"则该区域被称为脏卡\",{\"1\":{\"385\":1}}],[\"则该状态会变为updated\",{\"1\":{\"85\":1}}],[\"则移除\",{\"1\":{\"364\":1}}],[\"则表示可以回收\",{\"1\":{\"355\":1}}],[\"则表明\",{\"1\":{\"57\":1}}],[\"则放入失败\",{\"1\":{\"341\":1,\"343\":1}}],[\"则放入成功\",{\"1\":{\"341\":1}}],[\"则返回false\",{\"1\":{\"313\":1}}],[\"则线程会被阻塞\",{\"1\":{\"313\":1}}],[\"则会报出异常classnotfoundexception\",{\"1\":{\"460\":1}}],[\"则会使用appclassloader来加载\",{\"1\":{\"460\":1}}],[\"则会再次触发\",{\"1\":{\"371\":1}}],[\"则会撤销偏向模式\",{\"1\":{\"305\":1}}],[\"则会得到编译错误\",{\"1\":{\"136\":1}}],[\"则解锁成功\",{\"1\":{\"301\":1}}],[\"则被认为是switch\",{\"1\":{\"143\":1}}],[\"则可以收缩\",{\"1\":{\"336\":1}}],[\"则可以是同类型的任意值\",{\"1\":{\"142\":1}}],[\"则可以省略变量声明中的类型\",{\"1\":{\"134\":1}}],[\"则执行以下语句\",{\"1\":{\"140\":1}}],[\"则必须显式恢复\",{\"1\":{\"139\":1}}],[\"则与上一行非空常量右值相同\",{\"1\":{\"138\":1}}],[\"则退化为赋值操作\",{\"1\":{\"136\":1}}],[\"则之后的声明初始化\",{\"1\":{\"136\":1}}],[\"则应在响应的报文段中使syn=1和ack=1\",{\"1\":{\"57\":1}}],[\"表名\",{\"1\":{\"560\":1,\"567\":1}}],[\"表单中会自动生成\",{\"1\":{\"204\":1}}],[\"表单授权方式\",{\"1\":{\"190\":1}}],[\"表中存储的密码形式\",{\"1\":{\"201\":1}}],[\"表明被保存数据的id\",{\"1\":{\"85\":1}}],[\"表明该数据在哪个类型下\",{\"1\":{\"85\":1}}],[\"表明该数据在哪个数据库下\",{\"1\":{\"85\":1}}],[\"表明这是一个连接请求报文段\",{\"1\":{\"57\":1}}],[\"表示使用基于磁盘的复制方式\",{\"1\":{\"630\":1,\"640\":1}}],[\"表示接受url地址栏传参的注解\",{\"1\":{\"535\":1}}],[\"表示接口的数量\",{\"1\":{\"401\":1}}],[\"表示将当前目录追加至\",{\"1\":{\"458\":1}}],[\"表示设置\",{\"1\":{\"458\":1}}],[\"表示枚举对象的序号\",{\"1\":{\"442\":1}}],[\"表示根据常量池中\",{\"1\":{\"401\":2}}],[\"表示该\",{\"1\":{\"401\":1}}],[\"表示该首部有多大\",{\"1\":{\"57\":1}}],[\"表示长度\",{\"1\":{\"400\":23}}],[\"表示它的类加载器是\",{\"1\":{\"463\":1}}],[\"表示它引用了常量池中\",{\"1\":{\"400\":6}}],[\"表示它是否是\",{\"1\":{\"398\":1}}],[\"表示一个字符串常量名称\",{\"1\":{\"400\":1}}],[\"表示一个\",{\"1\":{\"400\":33}}],[\"表示一次只允许一个线程访问资源\",{\"1\":{\"314\":1}}],[\"表示常量池有\",{\"1\":{\"400\":1}}],[\"表示常量池长度\",{\"1\":{\"400\":1}}],[\"表示是\",{\"1\":{\"399\":1}}],[\"表示类的版本\",{\"1\":{\"399\":1}}],[\"表示同时允许访问资源的线程数量\",{\"1\":{\"313\":1}}],[\"表示重入计数减一\",{\"1\":{\"301\":1}}],[\"表示有重入\",{\"1\":{\"301\":1}}],[\"表示由该线程给对象加锁\",{\"1\":{\"301\":1}}],[\"表示\",{\"1\":{\"241\":2}}],[\"表示用户被授予的权限\",{\"1\":{\"222\":1}}],[\"表示用户的凭证信息\",{\"1\":{\"222\":1}}],[\"表示用户的身份标识\",{\"1\":{\"222\":1}}],[\"表示用户的身份认证信息\",{\"1\":{\"222\":1}}],[\"表示最多可以接受多少个字节\",{\"1\":{\"57\":1}}],[\"时就好比\",{\"1\":{\"476\":1}}],[\"时代\",{\"1\":{\"461\":1}}],[\"时老年代内存占用\",{\"1\":{\"395\":1}}],[\"时会对\",{\"1\":{\"382\":1}}],[\"时才能回收被引用对象\",{\"1\":{\"363\":1}}],[\"时唤醒\",{\"1\":{\"278\":1}}],[\"时执行\",{\"1\":{\"140\":4}}],[\"时间序列数据存储\",{\"1\":{\"523\":1}}],[\"时间\",{\"1\":{\"387\":1}}],[\"时间片\",{\"1\":{\"278\":1}}],[\"时间戳\",{\"1\":{\"116\":1,\"117\":1,\"535\":2}}],[\"时间线\",{\"1\":{\"115\":1}}],[\"时刻\",{\"1\":{\"115\":2,\"534\":2}}],[\"时效快\",{\"1\":{\"115\":1,\"533\":1}}],[\"时效性较差\",{\"1\":{\"81\":1,\"726\":1,\"729\":1}}],[\"时\",{\"1\":{\"57\":1,\"286\":1,\"316\":1,\"341\":4,\"344\":1,\"394\":1,\"463\":1,\"472\":2,\"476\":1}}],[\"0表示该从节点不应被晋升\",{\"1\":{\"633\":1,\"644\":1}}],[\"0层\",{\"1\":{\"469\":1}}],[\"0x1b8\",{\"1\":{\"423\":1}}],[\"0x1000\",{\"1\":{\"400\":1}}],[\"0x9b\",{\"1\":{\"412\":1}}],[\"0x9a\",{\"1\":{\"412\":1}}],[\"0x99\",{\"1\":{\"412\":1}}],[\"0x4000\",{\"1\":{\"400\":1}}],[\"0x2000\",{\"1\":{\"400\":1}}],[\"0x0400\",{\"1\":{\"400\":1}}],[\"0x0200\",{\"1\":{\"400\":1}}],[\"0x000000001b7d3fa8\",{\"1\":{\"423\":1,\"424\":1}}],[\"0x000000001b7d35e8\",{\"1\":{\"423\":1,\"424\":1}}],[\"0x000000001b7d4208\",{\"1\":{\"423\":1}}],[\"0x000000001b7d4200\",{\"1\":{\"423\":1}}],[\"0x000000001b7d41f8\",{\"1\":{\"423\":1}}],[\"0x000000001b7d41f0\",{\"1\":{\"423\":1}}],[\"0x000000001b7d41e8\",{\"1\":{\"423\":1}}],[\"0x000000001b7d41e0\",{\"1\":{\"423\":3}}],[\"0x000000001b7d4028\",{\"1\":{\"422\":1,\"423\":1}}],[\"0x000000001b3d1678\",{\"1\":{\"423\":1,\"424\":1}}],[\"0x000000001b3d1540\",{\"1\":{\"423\":1,\"424\":1}}],[\"0x000000001b3d15e8\",{\"1\":{\"423\":1,\"424\":1}}],[\"0x000000001b3d1b10\",{\"1\":{\"423\":1,\"424\":1}}],[\"0x00000001299b4978\",{\"1\":{\"422\":1}}],[\"0x0009\",{\"1\":{\"411\":1}}],[\"0x0001\",{\"1\":{\"400\":1}}],[\"0x0020\",{\"1\":{\"400\":1}}],[\"0x0010\",{\"1\":{\"400\":1}}],[\"0xc04200a2b0\",{\"1\":{\"136\":2}}],[\"0~3\",{\"1\":{\"398\":1}}],[\"0e\",{\"1\":{\"397\":1}}],[\"0d\",{\"1\":{\"397\":1}}],[\"02\",{\"1\":{\"397\":8,\"400\":1,\"401\":4}}],[\"0b\",{\"1\":{\"397\":3,\"400\":2}}],[\"0c\",{\"1\":{\"397\":6,\"400\":14}}],[\"0f\",{\"1\":{\"397\":3,\"400\":8}}],[\"0fxo\",{\"1\":{\"179\":3,\"201\":1}}],[\"04\",{\"1\":{\"397\":6,\"400\":15}}],[\"03\",{\"1\":{\"397\":3,\"400\":7}}],[\"07\",{\"1\":{\"397\":8,\"400\":29}}],[\"0a\",{\"1\":{\"397\":6,\"398\":1,\"399\":2,\"400\":13}}],[\"09\",{\"1\":{\"365\":1,\"397\":6,\"398\":1,\"399\":2,\"400\":4}}],[\"091\",{\"1\":{\"303\":1}}],[\"08\",{\"1\":{\"364\":1,\"397\":4,\"400\":11}}],[\"06\",{\"1\":{\"351\":1,\"397\":5,\"398\":1,\"399\":2,\"400\":10,\"401\":5}}],[\"05\",{\"1\":{\"345\":1,\"397\":4,\"400\":1,\"401\":5}}],[\"056\",{\"1\":{\"303\":1}}],[\"00100000\",{\"1\":{\"299\":19}}],[\"000\",{\"1\":{\"471\":1}}],[\"0000760\",{\"1\":{\"397\":1}}],[\"0000740\",{\"1\":{\"397\":1}}],[\"0000720\",{\"1\":{\"397\":1}}],[\"0000700\",{\"1\":{\"397\":1}}],[\"0000660\",{\"1\":{\"397\":1,\"400\":1,\"401\":4}}],[\"0000640\",{\"1\":{\"397\":1,\"400\":1}}],[\"0000620\",{\"1\":{\"397\":1,\"400\":2}}],[\"0000600\",{\"1\":{\"397\":1,\"400\":1}}],[\"0000560\",{\"1\":{\"397\":1,\"400\":2}}],[\"0000540\",{\"1\":{\"397\":1,\"400\":2}}],[\"0000520\",{\"1\":{\"397\":1,\"400\":2}}],[\"0000500\",{\"1\":{\"397\":1,\"400\":2}}],[\"0000460\",{\"1\":{\"397\":1,\"400\":2}}],[\"0000440\",{\"1\":{\"397\":1,\"400\":1}}],[\"0000420\",{\"1\":{\"397\":1,\"400\":3}}],[\"0000400\",{\"1\":{\"397\":1,\"400\":2}}],[\"0000360\",{\"1\":{\"397\":1,\"400\":4}}],[\"0000340\",{\"1\":{\"397\":1,\"400\":2}}],[\"0000320\",{\"1\":{\"397\":1,\"400\":2}}],[\"0000300\",{\"1\":{\"397\":1,\"400\":2}}],[\"0000260\",{\"1\":{\"397\":1,\"400\":1}}],[\"0000240\",{\"1\":{\"397\":1,\"400\":3}}],[\"0000220\",{\"1\":{\"397\":1,\"400\":1}}],[\"0000200\",{\"1\":{\"397\":1,\"400\":3}}],[\"0000160\",{\"1\":{\"397\":1,\"400\":1}}],[\"0000140\",{\"1\":{\"397\":1,\"400\":2}}],[\"0000120\",{\"1\":{\"397\":1,\"400\":2}}],[\"0000100\",{\"1\":{\"397\":1,\"400\":2}}],[\"00001101\",{\"1\":{\"298\":1}}],[\"0000060\",{\"1\":{\"397\":1,\"400\":3}}],[\"0000040\",{\"1\":{\"397\":1,\"400\":3}}],[\"0000020\",{\"1\":{\"397\":1,\"400\":5}}],[\"0000000\",{\"1\":{\"397\":1,\"398\":1,\"399\":2,\"400\":3}}],[\"00000001\",{\"1\":{\"297\":1,\"299\":19}}],[\"00000000\",{\"1\":{\"297\":19,\"298\":15,\"299\":556}}],[\"00000101\",{\"1\":{\"297\":2,\"298\":2,\"299\":82}}],[\"0001120\",{\"1\":{\"397\":1}}],[\"0001100\",{\"1\":{\"397\":1}}],[\"00011100\",{\"1\":{\"298\":1}}],[\"00011111\",{\"1\":{\"297\":3,\"298\":1,\"299\":82}}],[\"0001060\",{\"1\":{\"397\":1}}],[\"0001040\",{\"1\":{\"397\":1}}],[\"0001020\",{\"1\":{\"397\":1}}],[\"0001000\",{\"1\":{\"397\":1}}],[\"00010000\",{\"1\":{\"297\":2}}],[\"00\",{\"1\":{\"295\":1,\"301\":1,\"397\":142,\"398\":6,\"399\":16,\"400\":187,\"401\":36}}],[\"008dc141879134433f4db7f62b693c4a5361771b\",{\"1\":{\"265\":1}}],[\"01相差无几\",{\"1\":{\"582\":1,\"602\":1,\"613\":1,\"656\":1,\"667\":1}}],[\"010314\",{\"1\":{\"582\":1,\"602\":1,\"613\":1,\"656\":1,\"667\":1}}],[\"01011000\",{\"1\":{\"299\":19}}],[\"01000000\",{\"1\":{\"297\":1}}],[\"01000001\",{\"1\":{\"297\":2}}],[\"01\",{\"1\":{\"295\":2,\"397\":34,\"400\":79,\"401\":4,\"581\":1,\"601\":1,\"612\":1,\"655\":1,\"666\":1}}],[\"0<\",{\"1\":{\"195\":1,\"581\":1,\"601\":1,\"612\":1,\"655\":1,\"666\":1}}],[\"0以后写法\",{\"1\":{\"89\":1}}],[\"0\",{\"1\":{\"57\":2,\"85\":6,\"88\":10,\"89\":1,\"90\":7,\"116\":2,\"117\":5,\"118\":1,\"138\":1,\"139\":5,\"141\":1,\"143\":2,\"148\":2,\"158\":2,\"171\":1,\"180\":2,\"183\":2,\"207\":1,\"209\":1,\"215\":1,\"223\":1,\"241\":1,\"251\":2,\"267\":3,\"279\":1,\"285\":1,\"289\":6,\"295\":1,\"299\":6,\"300\":3,\"302\":2,\"303\":4,\"312\":4,\"324\":1,\"333\":1,\"338\":4,\"339\":1,\"341\":3,\"345\":2,\"350\":8,\"351\":1,\"364\":3,\"365\":2,\"400\":1,\"401\":1,\"406\":6,\"411\":4,\"412\":7,\"413\":9,\"414\":14,\"415\":9,\"416\":1,\"427\":3,\"428\":5,\"429\":8,\"430\":3,\"431\":9,\"432\":5,\"433\":1,\"437\":7,\"438\":13,\"440\":1,\"441\":4,\"442\":2,\"443\":1,\"444\":1,\"455\":3,\"469\":2,\"470\":3,\"471\":5,\"472\":2,\"474\":5,\"476\":3,\"530\":2,\"531\":1,\"535\":3,\"540\":9,\"541\":1,\"554\":5,\"558\":1,\"560\":5,\"561\":6,\"567\":3,\"568\":8,\"581\":3,\"582\":2,\"601\":3,\"602\":2,\"612\":3,\"613\":2,\"640\":1,\"642\":1,\"643\":2,\"644\":2,\"655\":3,\"656\":2,\"666\":3,\"667\":2}}],[\"当使用无盘复制时\",{\"1\":{\"630\":1,\"640\":1}}],[\"当主节点出现问题时\",{\"1\":{\"619\":1}}],[\"当修改了数据库的数据也要同时更新缓存的数据\",{\"1\":{\"587\":1}}],[\"当黑客访问不存在的缓存时\",{\"1\":{\"579\":1,\"599\":1,\"610\":1,\"653\":1,\"664\":1}}],[\"当查询的时候\",{\"1\":{\"572\":1}}],[\"当监听到某张表的相关操作后\",{\"1\":{\"554\":1}}],[\"当方法上参数的名称和url地址栏不相同时\",{\"1\":{\"535\":1}}],[\"当需要存储多个布尔值或小的整数时\",{\"1\":{\"521\":1}}],[\"当需要fips认证时\",{\"1\":{\"199\":1}}],[\"当发送者发送消息以后\",{\"1\":{\"484\":1}}],[\"当发生某一条执行发生失败时\",{\"1\":{\"85\":1}}],[\"当且一个monitor被持有后\",{\"1\":{\"476\":1}}],[\"当且仅当预期值\",{\"1\":{\"309\":1}}],[\"当线程\",{\"1\":{\"476\":1}}],[\"当线程获得了\",{\"1\":{\"312\":1}}],[\"当调用到第\",{\"1\":{\"472\":1}}],[\"当extclassloader加载一个class时\",{\"1\":{\"460\":1}}],[\"当appclassloader加载一个class时\",{\"1\":{\"460\":1}}],[\"当应用程序类加载器发现拓展类加载器已将该同名类加载过了\",{\"1\":{\"459\":1}}],[\"当执行\",{\"1\":{\"425\":1}}],[\"当执行到\",{\"1\":{\"341\":3}}],[\"当前线程正常返回数据\",{\"1\":{\"572\":1}}],[\"当前活跃对象+需要晋升的对象\",{\"1\":{\"394\":1}}],[\"当前的argon2passwordencoder实现需要使用bouncycastle库\",{\"1\":{\"199\":1}}],[\"当一个类加载器的所有类都不再使用\",{\"1\":{\"388\":1}}],[\"当一个对象引用没有被其他变量引用时\",{\"1\":{\"353\":1}}],[\"当一个对象被其他变量引用\",{\"1\":{\"353\":1}}],[\"当新生代回收时\",{\"1\":{\"387\":1}}],[\"当开关打开时不需要手动指定新生代的大小\",{\"1\":{\"378\":1}}],[\"当老年代空间不足\",{\"1\":{\"371\":1}}],[\"当对象寿命超过阈值时\",{\"1\":{\"371\":1}}],[\"当软引用所关联的\",{\"1\":{\"364\":1}}],[\"当软引用引用的对象被回收了\",{\"1\":{\"364\":1}}],[\"当内存不足时\",{\"1\":{\"364\":1}}],[\"当某个变量不在引用该对象\",{\"1\":{\"353\":1}}],[\"当该类被加载\",{\"1\":{\"340\":1}}],[\"当个数不足时\",{\"1\":{\"316\":1}}],[\"当等待的线程数满足\",{\"1\":{\"316\":1}}],[\"当锁处于这个状态时\",{\"1\":{\"305\":1}}],[\"当jvm确定某个锁对象不会发生竞争时\",{\"1\":{\"303\":1}}],[\"当退出\",{\"1\":{\"301\":2}}],[\"当撤销偏向锁阈值超过\",{\"1\":{\"299\":1,\"300\":1}}],[\"当有其它线程使用偏向锁对象时\",{\"1\":{\"297\":1}}],[\"当我们点击美食之后\",{\"1\":{\"536\":1}}],[\"当我们配置github客户端时\",{\"1\":{\"271\":1}}],[\"当我们关注了用户后\",{\"1\":{\"115\":1,\"533\":1}}],[\"当访问一个需要认证之后才能访问的接口的时候\",{\"1\":{\"218\":1}}],[\"当用户过来访问的时候\",{\"1\":{\"541\":1}}],[\"当用户操作过之后\",{\"1\":{\"529\":1}}],[\"当用户尝试访问系统资源时\",{\"1\":{\"235\":1}}],[\"当用户尝试进行身份验证时\",{\"1\":{\"198\":1}}],[\"当用户读取数据时才去关注的人里边去读取数据\",{\"1\":{\"115\":1,\"533\":1}}],[\"当点入主页时\",{\"1\":{\"115\":1}}],[\"当张三写了一个内容\",{\"1\":{\"115\":1,\"533\":1}}],[\"当张三和李四和王五发了消息后\",{\"1\":{\"115\":1,\"533\":1}}],[\"当\",{\"1\":{\"85\":1,\"289\":1,\"302\":2,\"476\":1}}],[\"当seq\",{\"1\":{\"85\":1}}],[\"当syn\",{\"1\":{\"57\":1}}],[\"当序列号匹配的时候\",{\"1\":{\"85\":1}}],[\"当接收到错误连接时会发送rst位置为1的报文\",{\"1\":{\"57\":1}}],[\"当然两种方案各有利弊\",{\"1\":{\"572\":1}}],[\"当然是使用我们之前学习过的set集合咯\",{\"1\":{\"532\":1}}],[\"当然这也是很耗费时间的\",{\"1\":{\"379\":1}}],[\"当然\",{\"1\":{\"55\":1,\"558\":1}}],[\"用逗号隔开\",{\"1\":{\"553\":1}}],[\"用0和1标示业务状态\",{\"1\":{\"538\":1}}],[\"用在需要高速读取的场景\",{\"1\":{\"512\":1}}],[\"用解释器将字节码翻译为机器码\",{\"1\":{\"469\":1}}],[\"用额外创建的类来创建匿名内部类对象\",{\"1\":{\"446\":1}}],[\"用下面反射代码来验证\",{\"1\":{\"445\":1}}],[\"用第二个\",{\"1\":{\"441\":1}}],[\"用到了新生代的幸存区\",{\"1\":{\"378\":1}}],[\"用\",{\"1\":{\"350\":1,\"450\":1,\"458\":1,\"476\":1}}],[\"用ps命令进一步定位是哪个线程引起的cpu占用过高\",{\"1\":{\"328\":1}}],[\"用top定位哪个进程对cpu的占用过高\",{\"1\":{\"328\":1}}],[\"用term\",{\"1\":{\"88\":1}}],[\"用法\",{\"1\":{\"139\":1}}],[\"用户数据\",{\"1\":{\"592\":1}}],[\"用户进入博客详情页\",{\"1\":{\"576\":1,\"596\":1,\"607\":1,\"650\":1,\"661\":1}}],[\"用户进行身份认证后\",{\"1\":{\"156\":1}}],[\"用户话单缓存\",{\"1\":{\"545\":1,\"548\":1}}],[\"用户行为追踪\",{\"1\":{\"545\":1,\"548\":1}}],[\"用户动态缓存\",{\"1\":{\"545\":1,\"548\":1}}],[\"用户位置记录\",{\"1\":{\"545\":1,\"548\":1}}],[\"用户多次打开页面\",{\"1\":{\"541\":1}}],[\"用户每访问网站的一个页面\",{\"1\":{\"541\":1}}],[\"用户一次签到\",{\"1\":{\"538\":1}}],[\"用户签到\",{\"0\":{\"538\":1,\"539\":1,\"540\":1}}],[\"用户未登录\",{\"1\":{\"530\":1}}],[\"用户点赞数等\",{\"1\":{\"513\":1}}],[\"用户程序在继续运行\",{\"1\":{\"376\":1}}],[\"用户线程和垃圾回收线程可以同时进行\",{\"1\":{\"376\":1}}],[\"用户线程才恢复运行\",{\"1\":{\"371\":1}}],[\"用户同意\",{\"1\":{\"270\":1}}],[\"用户会看到授权页面\",{\"1\":{\"268\":1}}],[\"用户想要登录\",{\"1\":{\"245\":1}}],[\"用户需要提供用户名和密码\",{\"1\":{\"245\":1}}],[\"用户必须有\",{\"1\":{\"239\":2}}],[\"用户可以被分配一个或多个角色\",{\"1\":{\"235\":1}}],[\"用户可以在这里配置远程扩展停止词字典\",{\"1\":{\"90\":1}}],[\"用户可以在这里配置远程扩展字典\",{\"1\":{\"90\":1}}],[\"用户可以在这里配置自己的扩展停止词字典\",{\"1\":{\"90\":1}}],[\"用户可以在这里配置自己的扩展字典\",{\"1\":{\"90\":1}}],[\"用户角色关联id\",{\"1\":{\"235\":1}}],[\"用户角色关联表\",{\"1\":{\"235\":1}}],[\"用户id\",{\"1\":{\"235\":2}}],[\"用户表\",{\"1\":{\"235\":1}}],[\"用户\",{\"0\":{\"228\":1,\"232\":1,\"235\":1},\"1\":{\"226\":2}}],[\"用户的凭证信息\",{\"1\":{\"222\":1}}],[\"用户的身份标识\",{\"1\":{\"222\":1}}],[\"用户认证信息\",{\"0\":{\"221\":1}}],[\"用户认证流程\",{\"0\":{\"206\":1}}],[\"用户名是\",{\"1\":{\"239\":1}}],[\"用户名\",{\"1\":{\"204\":1,\"223\":1,\"235\":1}}],[\"用户是否未被锁定\",{\"1\":{\"188\":1}}],[\"用户凭证是否过期\",{\"1\":{\"188\":1}}],[\"用户账号是否过期\",{\"1\":{\"188\":1}}],[\"用户无法访问没有权限的资源\",{\"1\":{\"156\":1}}],[\"用户信箱\",{\"1\":{\"117\":1}}],[\"用户粘度很高\",{\"1\":{\"115\":1,\"533\":1}}],[\"用户不感兴趣的内容\",{\"1\":{\"115\":1,\"533\":1}}],[\"用户不一定感兴趣\",{\"1\":{\"115\":1,\"533\":1}}],[\"用作分词表\",{\"1\":{\"90\":1}}],[\"用于控制主节点\",{\"1\":{\"635\":1}}],[\"用于控制多个线程访问共享资源\",{\"1\":{\"277\":1}}],[\"用于部分重同步\",{\"1\":{\"632\":1,\"643\":1}}],[\"用于设置从节点要复制的主节点的ip地址和端口号\",{\"1\":{\"626\":1,\"636\":1}}],[\"用于风险控制和欺诈检测\",{\"1\":{\"545\":1,\"548\":1}}],[\"用于导航和位置服务\",{\"1\":{\"545\":1,\"548\":1}}],[\"用于缓存或数据持久化\",{\"1\":{\"545\":1,\"548\":1}}],[\"用于确定非常大的集合的基数\",{\"1\":{\"541\":1}}],[\"用于检查一个元素是否可能存在于集合中\",{\"1\":{\"522\":1}}],[\"用于检查集合中元素的存在\",{\"1\":{\"522\":1}}],[\"用于检查集合中某个元素的存在\",{\"1\":{\"522\":1}}],[\"用于估计集合中不同元素的个数\",{\"1\":{\"522\":1}}],[\"用于估计数据流中元素的频率\",{\"1\":{\"522\":1}}],[\"用于有限的计数场景\",{\"1\":{\"521\":1}}],[\"用于快速检索\",{\"1\":{\"513\":1}}],[\"用于\",{\"1\":{\"442\":1}}],[\"用于比较的数字\",{\"1\":{\"442\":1}}],[\"用于加锁时消耗\",{\"1\":{\"433\":1}}],[\"用于函数消耗\",{\"1\":{\"433\":1}}],[\"用于保存新生代对象对应的脏卡\",{\"1\":{\"385\":1}}],[\"用于指定最长的停顿时间\",{\"1\":{\"383\":1}}],[\"用于移除引用为空的软引用对象\",{\"1\":{\"364\":1}}],[\"用于数据缓冲区\",{\"1\":{\"348\":1}}],[\"用于类和实例初始化以及接口初始化方法区域是在虚拟机启动时创建的\",{\"1\":{\"336\":1}}],[\"用于线程之间的线程阻塞和唤醒操作\",{\"1\":{\"319\":1}}],[\"用于处理异步任务的结果和执行流程\",{\"1\":{\"318\":1}}],[\"用于定时任务的线程池接口\",{\"1\":{\"310\":1}}],[\"用于创建不同类型的线程池\",{\"1\":{\"310\":1}}],[\"用于实现多线程环境下的同步操作\",{\"1\":{\"309\":1}}],[\"用于描述多线程环境下的内存访问行为\",{\"1\":{\"283\":1}}],[\"用于防止csrf攻击\",{\"1\":{\"204\":1}}],[\"用于告诉开发者如何使用这些标准库\",{\"1\":{\"133\":1}}],[\"用于高亮显示搜索的内容\",{\"1\":{\"90\":1}}],[\"用于phrase短语和word\",{\"1\":{\"90\":1}}],[\"用kibana之中的dev\",{\"1\":{\"85\":1}}],[\"用以指示连接的终止\",{\"1\":{\"57\":1}}],[\"用以指示连接的建立\",{\"1\":{\"57\":1}}],[\"用以指示连接的强制拆除\",{\"1\":{\"57\":1}}],[\"用以指示确认字段中的值是有效的\",{\"1\":{\"57\":1}}],[\"用来映射枚举的\",{\"1\":{\"442\":1}}],[\"用来获取集合的迭代器\",{\"1\":{\"440\":1}}],[\"用来进行跳转到指定行号的字节码\",{\"1\":{\"412\":1}}],[\"用来进行线程协作\",{\"1\":{\"316\":1}}],[\"用来进行线程同步协作\",{\"1\":{\"315\":1}}],[\"用来设置初始值\",{\"1\":{\"389\":1}}],[\"用来让计数减一\",{\"1\":{\"315\":1}}],[\"用来等待计数归零\",{\"1\":{\"315\":1}}],[\"用来限制对某些资源的并发访问\",{\"1\":{\"311\":1}}],[\"用来管理基于内存的用户信息\",{\"1\":{\"176\":1}}],[\"用来做乐观锁\",{\"1\":{\"85\":1}}],[\"用来解决网络包乱序问题\",{\"1\":{\"57\":1}}],[\"用来临时存放双向通信的数据\",{\"1\":{\"55\":1}}],[\"若是网络延迟\",{\"1\":{\"591\":1}}],[\"若值有一个不位于上图的红色部分\",{\"1\":{\"580\":1,\"600\":1,\"611\":1,\"654\":1,\"665\":1}}],[\"若值恰巧都位于上图的红色位置\",{\"1\":{\"580\":1,\"600\":1,\"611\":1,\"654\":1,\"665\":1}}],[\"若extclassloader也加载失败\",{\"1\":{\"460\":1}}],[\"若新生代的伊甸园又满了\",{\"1\":{\"371\":1}}],[\"若不赋值\",{\"1\":{\"135\":1}}],[\"若确认号=n\",{\"1\":{\"57\":1}}],[\"若ip地址是192\",{\"1\":{\"56\":1}}],[\"应该把给该笔记点赞的人显示出来\",{\"1\":{\"530\":1}}],[\"应该多看看官方文档再结合其他人的理解来学\",{\"1\":{\"512\":1}}],[\"应该调整其参数\",{\"1\":{\"199\":1}}],[\"应该满足should所列举的条件\",{\"1\":{\"88\":1}}],[\"应当记住\",{\"1\":{\"57\":1}}],[\"应用程序类加载器\",{\"1\":{\"457\":1}}],[\"应用程序在把数据传送给tcp的缓存后\",{\"1\":{\"55\":1}}],[\"应用程序在使用tcp协议之前\",{\"1\":{\"55\":1}}],[\"应用是纯前端应用\",{\"1\":{\"253\":1}}],[\"应用\",{\"1\":{\"252\":1}}],[\"应用场景\",{\"1\":{\"85\":2,\"379\":1,\"521\":1,\"522\":1,\"523\":1,\"545\":16,\"548\":16}}],[\"应用进程之间的通信好像在\",{\"1\":{\"55\":1}}],[\"其测量结果是概率性的\",{\"1\":{\"541\":1}}],[\"其次我们需要排序\",{\"1\":{\"530\":1}}],[\"其作为依赖项包含在应用程序中\",{\"1\":{\"525\":1}}],[\"其\",{\"1\":{\"440\":1}}],[\"其长度会补齐\",{\"1\":{\"410\":2}}],[\"其与string\",{\"1\":{\"387\":1}}],[\"其计数减一\",{\"1\":{\"353\":1}}],[\"其实布隆过滤器的核心思想其实并不难\",{\"1\":{\"581\":1,\"601\":1,\"612\":1,\"655\":1,\"666\":1}}],[\"其实只需要到小卡片上看一看就知道了\",{\"1\":{\"538\":1}}],[\"其实可以考虑小时候一个挺常见的方案\",{\"1\":{\"538\":1}}],[\"其实发生在双亲委派模型出现之前\",{\"1\":{\"461\":1}}],[\"其实是一个\",{\"1\":{\"439\":1}}],[\"其实是objectmonitor对象的方法\",{\"1\":{\"298\":1}}],[\"其实循环控制还是前面介绍的那些指令\",{\"1\":{\"413\":1}}],[\"其实就是指\",{\"1\":{\"434\":1}}],[\"其实就是参数为字符串数组\",{\"1\":{\"400\":1}}],[\"其实就是表示无参\",{\"1\":{\"400\":1}}],[\"其实我们又把他叫做feed流\",{\"1\":{\"115\":1,\"533\":1}}],[\"其它线程使用对象\",{\"0\":{\"297\":1}}],[\"其他人获取到锁\",{\"1\":{\"572\":1}}],[\"其他人等待\",{\"1\":{\"572\":1}}],[\"其他省略\",{\"1\":{\"561\":1}}],[\"其他的不用管\",{\"1\":{\"553\":1,\"560\":1,\"567\":1,\"568\":1}}],[\"其他的数据仍然能够接着执行\",{\"1\":{\"85\":1}}],[\"其他数字都是0\",{\"1\":{\"540\":1}}],[\"其他用户对探店笔记的评价\",{\"1\":{\"527\":1}}],[\"其他线程进入阻塞状态\",{\"1\":{\"377\":1}}],[\"其他线程可以共享读操作\",{\"1\":{\"592\":1}}],[\"其他线程可以立即看到这个变化\",{\"1\":{\"285\":1}}],[\"其他线程可能会拿到这个线程的引用\",{\"1\":{\"326\":1}}],[\"其他线程能够立即看到这个修改\",{\"1\":{\"283\":1}}],[\"其他线程不会同时修改这个资源\",{\"1\":{\"277\":1}}],[\"其他非\",{\"1\":{\"88\":1}}],[\"其底层实现原理就是根据配置定期使用\",{\"1\":{\"81\":1,\"726\":1,\"729\":1}}],[\"其中有两个重要的参数\",{\"1\":{\"582\":1,\"602\":1,\"613\":1,\"656\":1,\"667\":1}}],[\"其中创建客户端时可以指定连接参数\",{\"1\":{\"523\":1}}],[\"其中桥接方法比较特殊\",{\"1\":{\"445\":1}}],[\"其中资源对象需要实现\",{\"1\":{\"444\":1}}],[\"其中thread是当前线程的引用\",{\"1\":{\"319\":1}}],[\"其中构造参数用来初始化等待计数值\",{\"1\":{\"315\":1}}],[\"其中包含了securitycontext对象\",{\"1\":{\"222\":1}}],[\"其中\",{\"1\":{\"59\":1,\"81\":1,\"458\":1,\"726\":1,\"729\":1}}],[\"其序号字段值是501\",{\"1\":{\"57\":1}}],[\"其返回值称为socket描述符\",{\"1\":{\"56\":1}}],[\"bv1ye411z7ap\",{\"1\":{\"481\":1}}],[\"bv14b4y1a7wz\",{\"1\":{\"156\":1}}],[\"bm\",{\"1\":{\"441\":4}}],[\"b6\",{\"1\":{\"397\":1}}],[\"b2\",{\"1\":{\"397\":1}}],[\"b1\",{\"1\":{\"397\":2}}],[\"b7\",{\"1\":{\"397\":1}}],[\"b对象不再引用a4对象\",{\"1\":{\"363\":1}}],[\"b对象不再引用bytebuffer对象\",{\"1\":{\"362\":1}}],[\"btk76klw\",{\"1\":{\"179\":3,\"201\":1}}],[\"bcrypt故意设计得较慢\",{\"1\":{\"199\":1}}],[\"bcryptpasswordencoder的默认实现使用强度10\",{\"1\":{\"199\":1}}],[\"bcryptpasswordencoder\",{\"1\":{\"199\":1,\"200\":1}}],[\"bcrypt\",{\"1\":{\"179\":3,\"201\":2}}],[\"bigger\",{\"1\":{\"642\":1}}],[\"bitpos\",{\"1\":{\"538\":1}}],[\"bitop\",{\"1\":{\"538\":1}}],[\"bitfieldtype\",{\"1\":{\"540\":1}}],[\"bitfield\",{\"1\":{\"538\":2,\"540\":3}}],[\"bitfieldsubcommands\",{\"1\":{\"540\":2}}],[\"bitfields可以非常紧凑地存储这些信息\",{\"1\":{\"521\":1}}],[\"bitfields\",{\"1\":{\"512\":1}}],[\"bitcount\",{\"1\":{\"538\":1}}],[\"bitmap返回的数据是10进制\",{\"1\":{\"540\":1}}],[\"bitmap中bit数组中的指定位置\",{\"1\":{\"538\":1}}],[\"bitmap的操作命令有\",{\"1\":{\"538\":1}}],[\"bitmap\",{\"1\":{\"538\":1,\"541\":1}}],[\"bitmap功能演示\",{\"0\":{\"538\":1}}],[\"bitmaps\",{\"1\":{\"512\":1}}],[\"bits\",{\"1\":{\"295\":1,\"350\":6}}],[\"bipush\",{\"1\":{\"411\":1,\"412\":2,\"413\":3,\"414\":1,\"415\":5,\"427\":2,\"428\":4,\"430\":5,\"431\":3,\"432\":3,\"437\":1,\"438\":1}}],[\"biased\",{\"1\":{\"295\":3}}],[\"bilibili\",{\"1\":{\"156\":1,\"481\":1}}],[\"bin目录下的\",{\"1\":{\"553\":1,\"560\":1,\"567\":1}}],[\"bin=mysql\",{\"1\":{\"552\":1,\"559\":1,\"566\":1}}],[\"bin\",{\"0\":{\"552\":1,\"559\":1,\"566\":1},\"1\":{\"357\":2,\"390\":1,\"552\":1,\"559\":1,\"566\":1,\"567\":2,\"568\":1}}],[\"bin>javac\",{\"1\":{\"339\":1}}],[\"binding\",{\"1\":{\"91\":3,\"98\":1,\"102\":1,\"121\":1}}],[\"binlog\",{\"1\":{\"81\":5,\"552\":3,\"558\":1,\"559\":3,\"566\":3,\"726\":5,\"729\":5}}],[\"b=1\",{\"1\":{\"139\":1}}],[\"b\",{\"1\":{\"134\":4,\"138\":4,\"139\":4,\"142\":3,\"148\":6,\"294\":1,\"303\":4,\"309\":1,\"326\":2,\"341\":14,\"343\":3,\"357\":1,\"379\":1,\"405\":2,\"411\":3,\"415\":10,\"445\":5,\"455\":17,\"456\":3}}],[\"bluebell\",{\"1\":{\"98\":1,\"102\":1}}],[\"bloomfilter\",{\"1\":{\"581\":4,\"601\":4,\"612\":4,\"655\":4,\"666\":4}}],[\"bloomfilter<integer>\",{\"1\":{\"581\":1,\"601\":1,\"612\":1,\"655\":1,\"666\":1}}],[\"bloom\",{\"1\":{\"522\":3}}],[\"blocked\",{\"1\":{\"278\":2,\"289\":1,\"302\":2}}],[\"blob\",{\"1\":{\"85\":1}}],[\"blogs\",{\"1\":{\"535\":3}}],[\"blogserviceimpl\",{\"1\":{\"528\":1,\"530\":1,\"535\":1}}],[\"blogservice\",{\"1\":{\"527\":2,\"529\":1,\"530\":2,\"532\":1,\"535\":1}}],[\"blogid\",{\"1\":{\"535\":1}}],[\"blogcontroller\",{\"1\":{\"527\":2,\"530\":1,\"532\":1,\"535\":1}}],[\"blog\",{\"1\":{\"85\":8,\"481\":2,\"527\":9,\"528\":5,\"529\":1,\"530\":7,\"534\":6,\"535\":4,\"554\":1}}],[\"bridge\",{\"1\":{\"445\":1}}],[\"browser\",{\"1\":{\"423\":1,\"424\":1}}],[\"brown\",{\"1\":{\"90\":3}}],[\"brokenbarrierexception\",{\"1\":{\"316\":2}}],[\"break\",{\"1\":{\"112\":2,\"441\":12,\"442\":6,\"540\":1}}],[\"bradshawmckenzie\",{\"1\":{\"85\":1}}],[\"bradshaw\",{\"1\":{\"85\":1}}],[\"but\",{\"1\":{\"635\":1,\"637\":1,\"638\":1,\"641\":3,\"642\":1,\"644\":1}}],[\"buffer\",{\"1\":{\"350\":1,\"394\":1,\"642\":2}}],[\"bufio包中都是io操作的方法\",{\"1\":{\"151\":1}}],[\"bufio包读取\",{\"0\":{\"151\":1}}],[\"bufio\",{\"1\":{\"151\":3}}],[\"builder\",{\"1\":{\"271\":10}}],[\"build\",{\"1\":{\"176\":1,\"190\":1,\"193\":1,\"234\":1,\"238\":1,\"471\":1}}],[\"buckets\",{\"1\":{\"88\":1}}],[\"bulk\",{\"1\":{\"85\":7,\"640\":1}}],[\"byradius\",{\"1\":{\"537\":1}}],[\"bylonlat\",{\"1\":{\"537\":1}}],[\"by\",{\"1\":{\"88\":1,\"118\":1,\"400\":1,\"420\":1,\"444\":1,\"530\":2,\"535\":1,\"537\":1,\"552\":3,\"554\":1,\"559\":3,\"566\":3,\"638\":2,\"639\":1,\"640\":1,\"641\":1,\"643\":4,\"644\":1,\"645\":6}}],[\"bytecodetest\",{\"1\":{\"414\":1}}],[\"bytecode\",{\"1\":{\"411\":1,\"417\":1,\"420\":1}}],[\"bytes\",{\"1\":{\"406\":1}}],[\"bytebuffer就会被回收\",{\"1\":{\"362\":1}}],[\"bytebuffer\",{\"1\":{\"350\":12,\"351\":8,\"362\":1}}],[\"byte\",{\"1\":{\"81\":1,\"338\":2,\"350\":1,\"351\":1,\"364\":6,\"365\":3,\"373\":5,\"374\":1,\"375\":2,\"410\":1,\"412\":1,\"441\":3,\"726\":1,\"729\":1}}],[\"both\",{\"1\":{\"645\":2}}],[\"bold\",{\"1\":{\"267\":5}}],[\"bootclasspath>\",{\"1\":{\"458\":1}}],[\"bootclasspath\",{\"1\":{\"458\":2}}],[\"bootstrap\",{\"1\":{\"457\":1,\"458\":3,\"463\":1}}],[\"boot<\",{\"1\":{\"260\":3,\"537\":1,\"554\":4,\"561\":3}}],[\"boot\",{\"1\":{\"180\":1,\"195\":1,\"260\":3,\"264\":1,\"472\":1,\"537\":1,\"554\":6,\"561\":4}}],[\"boot项目\",{\"0\":{\"158\":1}}],[\"booleanutil\",{\"1\":{\"529\":1}}],[\"boolean\",{\"1\":{\"179\":1,\"182\":1,\"188\":1,\"286\":1,\"350\":1,\"424\":1,\"455\":1,\"460\":1,\"478\":1,\"480\":1,\"529\":4,\"530\":2,\"531\":3,\"532\":3,\"534\":1}}],[\"bool类型\",{\"1\":{\"148\":1}}],[\"bool\",{\"1\":{\"88\":5,\"108\":1,\"134\":1,\"144\":2,\"148\":1}}],[\"boundary\",{\"1\":{\"350\":1}}],[\"bound\",{\"1\":{\"88\":1}}],[\"body>\",{\"1\":{\"160\":1,\"204\":1,\"267\":1}}],[\"body\",{\"1\":{\"85\":2,\"87\":1}}],[\"b0\",{\"1\":{\"85\":1}}],[\"b5\",{\"1\":{\"85\":1}}],[\"banana\",{\"0\":{\"741\":1}}],[\"bandwidth\",{\"1\":{\"639\":1,\"641\":2}}],[\"bank\",{\"1\":{\"85\":2,\"87\":4,\"88\":12,\"89\":2}}],[\"backed\",{\"1\":{\"639\":2}}],[\"backlog\",{\"1\":{\"621\":1,\"631\":1,\"632\":2,\"635\":1,\"642\":11,\"643\":2}}],[\"background\",{\"1\":{\"66\":1,\"70\":1,\"74\":1,\"78\":1,\"92\":1,\"93\":1,\"94\":1,\"98\":1,\"102\":1,\"126\":1,\"130\":1,\"488\":1,\"492\":1,\"496\":1,\"500\":1,\"504\":1,\"508\":1}}],[\"bat\",{\"1\":{\"553\":1,\"560\":1,\"567\":1,\"568\":1}}],[\"bar\",{\"1\":{\"525\":2,\"526\":2}}],[\"barried\",{\"1\":{\"385\":1}}],[\"ba\",{\"1\":{\"397\":1,\"398\":2,\"399\":2,\"400\":3}}],[\"basic\",{\"1\":{\"271\":1}}],[\"base\",{\"1\":{\"350\":8,\"351\":3}}],[\"baseurl\",{\"1\":{\"263\":1,\"271\":1}}],[\"based\",{\"1\":{\"235\":1}}],[\"basemapper<user>\",{\"1\":{\"183\":1}}],[\"baomidou<\",{\"1\":{\"180\":1}}],[\"balance字段的平均值是34\",{\"1\":{\"88\":1}}],[\"balanceavg\",{\"1\":{\"88\":3}}],[\"balance\",{\"1\":{\"85\":1,\"87\":1,\"88\":6,\"89\":1}}],[\"b期望收到a的下一个数据序号是701\",{\"1\":{\"57\":1}}],[\"b正确收到了a发送过来的一个报文段\",{\"1\":{\"57\":1}}],[\"between\",{\"1\":{\"640\":1}}],[\"better\",{\"1\":{\"639\":1,\"643\":1}}],[\"because\",{\"1\":{\"638\":2}}],[\"below\",{\"1\":{\"636\":1}}],[\"begin\",{\"1\":{\"315\":3}}],[\"benchmark1\",{\"1\":{\"471\":8}}],[\"benchmarks\",{\"1\":{\"303\":2}}],[\"benchmark\",{\"1\":{\"303\":4,\"471\":7}}],[\"benchmarkmode\",{\"1\":{\"303\":1}}],[\"before\",{\"1\":{\"283\":1,\"554\":1,\"636\":1,\"639\":1}}],[\"beanutil\",{\"1\":{\"530\":1,\"532\":2}}],[\"bean\",{\"1\":{\"176\":2,\"189\":1,\"190\":1,\"554\":1}}],[\"be\",{\"1\":{\"26\":1,\"397\":1,\"398\":2,\"399\":2,\"400\":5,\"466\":1,\"635\":1,\"637\":1,\"638\":3,\"639\":3,\"640\":2,\"641\":3,\"642\":6,\"643\":1,\"644\":2,\"645\":2,\"674\":1}}],[\"就应该查数据库\",{\"1\":{\"592\":1}}],[\"就很难引发集体失效的事件\",{\"1\":{\"572\":1}}],[\"就把签到结果向右移动一位\",{\"1\":{\"540\":1}}],[\"就能统计出来他连续签到的次数了\",{\"1\":{\"540\":1}}],[\"就能拿到所有的数据了\",{\"1\":{\"540\":1}}],[\"就能知道哪些类不再被使用\",{\"1\":{\"388\":1}}],[\"就表明说明这一天已经签到了\",{\"1\":{\"539\":1}}],[\"就抛出异常\",{\"1\":{\"460\":1}}],[\"就得到了下图\",{\"1\":{\"580\":1,\"600\":1,\"611\":1,\"654\":1,\"665\":1}}],[\"就得到了\",{\"1\":{\"423\":1}}],[\"就跳转到\",{\"1\":{\"414\":1}}],[\"就称为巨型对象\",{\"1\":{\"389\":1}}],[\"就让他们引用同一个字符串对象\",{\"1\":{\"387\":1}}],[\"就算新生代的伊甸园为空\",{\"1\":{\"374\":1}}],[\"就像是获得了停车位\",{\"1\":{\"312\":1}}],[\"就好像停车位数量\",{\"1\":{\"312\":1}}],[\"就自己这个线程\",{\"1\":{\"294\":1}}],[\"就不那么\",{\"1\":{\"283\":1}}],[\"就不用再去临时拉取了\",{\"1\":{\"115\":1,\"533\":1}}],[\"就需要\",{\"1\":{\"245\":1}}],[\"就添加fallthrough\",{\"1\":{\"143\":1}}],[\"就可以获得当前月的签到总天数了\",{\"1\":{\"540\":1}}],[\"就可以直接锁定使用sortedset啦\",{\"1\":{\"530\":1}}],[\"就可以将nba篮球消息数据发送到nba主题中\",{\"1\":{\"484\":1}}],[\"就可以安全地消除对该锁的获取和释放操作\",{\"1\":{\"303\":1}}],[\"就可以实现滚动分页了\",{\"1\":{\"115\":1,\"534\":1}}],[\"就可以做自己的事\",{\"1\":{\"55\":1}}],[\"就拿到了5\",{\"1\":{\"115\":1,\"534\":1}}],[\"就是能够迅速判断一个元素是否存在一个集合中\",{\"1\":{\"579\":1,\"599\":1,\"610\":1,\"653\":1,\"664\":1}}],[\"就是误差率\",{\"1\":{\"541\":1}}],[\"就是连续签到天数\",{\"1\":{\"540\":1}}],[\"就是小时候\",{\"1\":{\"538\":1}}],[\"就是一条记录\",{\"1\":{\"538\":1}}],[\"就是一张表\",{\"1\":{\"340\":1}}],[\"就是在redis中并没有存储type\",{\"1\":{\"536\":1}}],[\"就是我们在保存完探店笔记后\",{\"1\":{\"534\":1}}],[\"就是咱们的sortedset\",{\"1\":{\"530\":1}}],[\"就是key\",{\"1\":{\"512\":1}}],[\"就是应用程序类加载器\",{\"1\":{\"464\":1}}],[\"就是指调用类加载器的\",{\"1\":{\"460\":1}}],[\"就是\",{\"1\":{\"423\":1}}],[\"就是不被允许的\",{\"1\":{\"136\":1}}],[\"就是6\",{\"1\":{\"115\":1,\"534\":1}}],[\"就是说不要匹配只有mill或只有road的\",{\"1\":{\"88\":1}}],[\"就修改\",{\"1\":{\"85\":1}}],[\"就会有数据\",{\"1\":{\"572\":1}}],[\"就会处理它\",{\"1\":{\"386\":1}}],[\"就会给c加一个写屏障\",{\"1\":{\"386\":1}}],[\"就会导致停顿的时候长\",{\"1\":{\"384\":1}}],[\"就会退化为\",{\"1\":{\"379\":1}}],[\"就会调用cleaner的clean方法\",{\"1\":{\"350\":1}}],[\"就会进入entrylist\",{\"1\":{\"289\":1}}],[\"就会将\",{\"1\":{\"289\":1}}],[\"就会重定向回\",{\"1\":{\"270\":1}}],[\"就会写很多分数据到粉丝那边去\",{\"1\":{\"115\":1,\"533\":1}}],[\"就会变化\",{\"1\":{\"85\":1}}],[\"就会修改这个数据\",{\"1\":{\"85\":1}}],[\"就累加一次该序列号的大小\",{\"1\":{\"57\":1}}],[\"序号501~700\",{\"1\":{\"57\":1}}],[\"序号\",{\"1\":{\"57\":1}}],[\"下载canal源码\",{\"1\":{\"568\":1}}],[\"下载好之后解压\",{\"1\":{\"553\":1,\"560\":1,\"567\":1,\"568\":1}}],[\"下载地址\",{\"1\":{\"90\":1}}],[\"下做如下配置\",{\"1\":{\"552\":1,\"559\":1,\"566\":1}}],[\"下显然没有\",{\"1\":{\"463\":1}}],[\"下搜索类\",{\"1\":{\"463\":1}}],[\"下找该类\",{\"1\":{\"460\":1}}],[\"下有同名类\",{\"1\":{\"459\":1}}],[\"下次遇到相同的代码\",{\"1\":{\"469\":1}}],[\"下次即使遇到相同的字节码\",{\"1\":{\"469\":1}}],[\"下次分配内存的时候\",{\"1\":{\"367\":1}}],[\"下次查询时\",{\"1\":{\"115\":1,\"535\":1}}],[\"下来的\",{\"1\":{\"312\":1}}],[\"下了个订单\",{\"1\":{\"281\":1}}],[\"下图展示了处理一个http请求时\",{\"1\":{\"167\":1}}],[\"下划线组成\",{\"1\":{\"134\":1}}],[\"下\",{\"1\":{\"90\":1}}],[\"下所有信息\",{\"1\":{\"87\":1}}],[\"下面我提供一份打包好的\",{\"1\":{\"568\":1}}],[\"下面各个方法会不会造成线程安全问题\",{\"1\":{\"326\":1}}],[\"下面的\",{\"1\":{\"561\":1}}],[\"下面的字节码省略了不重要的部分\",{\"1\":{\"427\":1}}],[\"下面的y就是新定义的变量\",{\"1\":{\"136\":1}}],[\"下面的变量类型可以是不同的类型\",{\"1\":{\"135\":1}}],[\"下面提供了示例全是基于全类型的\",{\"1\":{\"90\":1}}],[\"下面放的所有资源可以直接访问\",{\"1\":{\"90\":1}}],[\"下面求每个age分布的平均balance\",{\"1\":{\"88\":1}}],[\"下面是redis中的数据\",{\"1\":{\"554\":1}}],[\"下面是表中的数据\",{\"1\":{\"554\":1}}],[\"下面是一个使用park和unpark的简单示例\",{\"1\":{\"319\":1}}],[\"下面是\",{\"1\":{\"81\":1,\"726\":1,\"729\":1}}],[\"下面讨论tcp报文段的首部格式\",{\"1\":{\"57\":1}}],[\"下一篇\",{\"1\":{\"3\":1,\"274\":1}}],[\"一般软引用需要搭配一个引用队列一起使用\",{\"1\":{\"364\":1}}],[\"一般用\",{\"1\":{\"351\":1}}],[\"一致性\",{\"1\":{\"623\":1},\"2\":{\"594\":1}}],[\"一致性要求高的数据\",{\"1\":{\"592\":1}}],[\"一致性要求超高的\",{\"1\":{\"592\":1}}],[\"一致\",{\"1\":{\"341\":1}}],[\"一些带有native关键字的方法就是需要java去调用本地的c或者c++方法\",{\"1\":{\"329\":1}}],[\"一旦从节点完成初始同步\",{\"1\":{\"621\":1}}],[\"一旦主节点出现故障\",{\"1\":{\"620\":1}}],[\"一旦数据发送过程中\",{\"1\":{\"484\":1}}],[\"一旦这个范围内的字节码执行出现异常\",{\"1\":{\"427\":1}}],[\"一旦分配较大内存的对象\",{\"1\":{\"367\":1}}],[\"一旦\",{\"1\":{\"350\":1}}],[\"一旦某个线程修改了volatile变量\",{\"1\":{\"285\":1}}],[\"一旦搜索的结果被返回elasticsearch就完成了这次请求\",{\"1\":{\"87\":1}}],[\"一起使用\",{\"1\":{\"283\":1}}],[\"一\",{\"0\":{\"145\":1},\"1\":{\"535\":1,\"586\":1}}],[\"一次发送\",{\"1\":{\"116\":1}}],[\"一种以获取最短回收停顿时间为目标的老年代收集器特点\",{\"1\":{\"379\":1}}],[\"一种是基于消息传递的\",{\"1\":{\"277\":1}}],[\"一种是基于共享内存的\",{\"1\":{\"277\":1}}],[\"一种是全类型api\",{\"1\":{\"90\":1}}],[\"一种是低级api\",{\"1\":{\"90\":1}}],[\"一种改进方法是将轮询放到压力不大的从库上\",{\"1\":{\"81\":1,\"726\":1,\"729\":1}}],[\"一样\",{\"1\":{\"88\":1}}],[\"一个被数字\",{\"1\":{\"711\":1}}],[\"一个被星标了的苹果文章\",{\"1\":{\"691\":1}}],[\"一个月则最多需要600多字节\",{\"1\":{\"538\":1}}],[\"一个\",{\"1\":{\"481\":1}}],[\"一个做自减\",{\"1\":{\"474\":1}}],[\"一个是要配合\",{\"1\":{\"416\":1}}],[\"一个是通过使用\",{\"1\":{\"87\":1}}],[\"一个简单的\",{\"1\":{\"397\":1}}],[\"一个对象大于region的一半时\",{\"1\":{\"389\":1}}],[\"一个区域512k\",{\"1\":{\"385\":1}}],[\"一个存在于堆内存之中\",{\"1\":{\"341\":1}}],[\"一个存在于串池之中\",{\"1\":{\"341\":1}}],[\"一个list\",{\"1\":{\"333\":1}}],[\"一个线程对\",{\"1\":{\"481\":1}}],[\"一个线程对共享变量的修改可能对其他线程不可见\",{\"1\":{\"283\":1}}],[\"一个线程需要知道另一个线程是否已经初始化了某些资源或者是否正在执行特定的任务\",{\"1\":{\"286\":1}}],[\"一个线程可以调用\",{\"1\":{\"277\":1}}],[\"一个浮点类型\",{\"1\":{\"150\":1}}],[\"一个tokenizer\",{\"1\":{\"90\":1}}],[\"一个tcp报文段分为首部和数据两部分\",{\"1\":{\"57\":1}}],[\"一份顾客银行账户信息的虚构的\",{\"1\":{\"85\":1}}],[\"一对一\",{\"1\":{\"55\":1}}],[\"如之前解释\",{\"1\":{\"634\":1,\"645\":1}}],[\"如餐馆\",{\"1\":{\"545\":1,\"548\":1}}],[\"如何从后向前遍历每个bit位\",{\"1\":{\"540\":1}}],[\"如何得到本月到今天为止的所有签到数据\",{\"1\":{\"540\":1}}],[\"如何判断对象可以回收\",{\"0\":{\"352\":1}}],[\"如计算时间窗口内的平均值\",{\"1\":{\"523\":1}}],[\"如实时监控和报警系统\",{\"1\":{\"523\":1}}],[\"如股票价格\",{\"1\":{\"523\":1}}],[\"如网页的独立访客数\",{\"1\":{\"522\":1}}],[\"如网站访问量\",{\"1\":{\"513\":1}}],[\"如hyperloglog和布隆过滤器\",{\"1\":{\"522\":1}}],[\"如每日访问次数限制\",{\"1\":{\"521\":1}}],[\"如在线\",{\"1\":{\"521\":1}}],[\"如打车软件中记录司机和乘客的位置\",{\"1\":{\"519\":1}}],[\"如字符串\",{\"1\":{\"511\":1,\"512\":1}}],[\"如上图\",{\"1\":{\"362\":1,\"363\":1}}],[\"如死锁\",{\"1\":{\"319\":1}}],[\"如reentrantlock\",{\"1\":{\"310\":1}}],[\"如内存\",{\"1\":{\"277\":1}}],[\"如google\",{\"1\":{\"271\":1}}],[\"如下图所示\",{\"1\":{\"580\":1,\"600\":1,\"611\":1,\"654\":1,\"665\":1}}],[\"如下所示\",{\"1\":{\"525\":1,\"526\":1}}],[\"如下代码\",{\"1\":{\"436\":1}}],[\"如下\",{\"1\":{\"196\":1,\"364\":1,\"560\":2}}],[\"如需贯通后续的case\",{\"1\":{\"143\":1}}],[\"如sort\",{\"1\":{\"88\":1}}],[\"如重启\",{\"1\":{\"85\":1}}],[\"如果设置为yes\",{\"1\":{\"628\":1,\"638\":1}}],[\"如果主节点设置了访问密码\",{\"1\":{\"627\":1,\"637\":1}}],[\"如果从节点断线后重新连接到主节点\",{\"1\":{\"621\":1}}],[\"如果选择key的逻辑删除\",{\"1\":{\"572\":1}}],[\"如果选择数据的强一致性\",{\"1\":{\"572\":1}}],[\"如果过期则开通另外一个线程进行数据同步\",{\"1\":{\"572\":1}}],[\"如果这个key在大量请求同时进来前刚好失效\",{\"1\":{\"572\":1}}],[\"如果这个类还有父类没有加载\",{\"1\":{\"448\":1}}],[\"如果这些key可能在某些时间内被超高并发的访问\",{\"1\":{\"572\":1}}],[\"如果list中包含对应查询的id数据\",{\"1\":{\"541\":1}}],[\"如果说用户要查询的id数据并不在list集合中\",{\"1\":{\"541\":1}}],[\"如果数据库是空\",{\"1\":{\"541\":1}}],[\"如果为0\",{\"1\":{\"540\":1}}],[\"如果存海量数据\",{\"1\":{\"536\":1}}],[\"如果已点赞\",{\"1\":{\"529\":1,\"530\":1}}],[\"如果未点赞\",{\"1\":{\"529\":1,\"530\":1}}],[\"如果当前用户已经点赞\",{\"1\":{\"529\":1}}],[\"如果当用户需要存入一个很大的对象时\",{\"1\":{\"379\":1}}],[\"如果您使用\",{\"1\":{\"526\":1}}],[\"如果因为网络阻塞或不稳定\",{\"1\":{\"484\":1}}],[\"如果禁用重试机制\",{\"1\":{\"484\":1}}],[\"如果发现\",{\"1\":{\"470\":1}}],[\"如果发生数据泄露\",{\"1\":{\"198\":1}}],[\"如果发生错误\",{\"1\":{\"109\":1}}],[\"如果还是没找到\",{\"1\":{\"460\":1}}],[\"如果还是没有找到\",{\"1\":{\"460\":1}}],[\"如果appclassloader也加载失败\",{\"1\":{\"460\":1}}],[\"如果bootstrapclassloader加载失败\",{\"1\":{\"460\":1}}],[\"如果父类还没初始化\",{\"1\":{\"455\":2}}],[\"如果变化\",{\"1\":{\"446\":1}}],[\"如果变量具有初始值\",{\"1\":{\"134\":1}}],[\"如果我们代码没有异常\",{\"1\":{\"444\":1}}],[\"如果我们代码有异常\",{\"1\":{\"444\":1}}],[\"如果我们在配置文件中添加如下内容\",{\"1\":{\"163\":1}}],[\"如果要将返回结果赋值给一个\",{\"1\":{\"437\":1}}],[\"如果要全量同步\",{\"1\":{\"98\":1,\"102\":1}}],[\"如果前面的\",{\"1\":{\"437\":1}}],[\"如果出现异常\",{\"1\":{\"431\":1}}],[\"如果一致\",{\"1\":{\"427\":1}}],[\"如果一个对象虽然有多线程要加锁\",{\"1\":{\"301\":1}}],[\"如果一个变量有一个初始值\",{\"1\":{\"134\":1}}],[\"如果一个单个的动作因任何原因而失败\",{\"1\":{\"85\":1}}],[\"如果下面的数大于上面的数\",{\"1\":{\"414\":1}}],[\"如果老年代incoming引用为0的巨型对象就可以在新生代垃圾回收时处理掉\",{\"1\":{\"389\":1}}],[\"如果老年代内存到达一定的阈值了\",{\"1\":{\"380\":1}}],[\"如果字符串的值一样\",{\"1\":{\"387\":1}}],[\"如果该区域引用了新生代对象\",{\"1\":{\"385\":1}}],[\"如果该表达式被省略\",{\"1\":{\"143\":1}}],[\"如果垃圾产生速度快于垃圾回收速度\",{\"1\":{\"384\":1}}],[\"如果垃圾产生速度慢于垃圾回收速度\",{\"1\":{\"384\":1}}],[\"如果之后空间仍不足\",{\"1\":{\"371\":1}}],[\"如果找不到\",{\"1\":{\"355\":1}}],[\"如果虚引用的实际对象\",{\"1\":{\"350\":1}}],[\"如果操作的是对象和变量是不会放入常量池中的\",{\"1\":{\"343\":1}}],[\"如果串池中没有该字符串对象\",{\"1\":{\"341\":1,\"343\":1}}],[\"如果没有被加载过\",{\"1\":{\"460\":1}}],[\"如果没有\",{\"1\":{\"395\":1}}],[\"如果没有会把此对象复制一份\",{\"1\":{\"341\":1}}],[\"如果没有则放入串池\",{\"1\":{\"341\":2}}],[\"如果方法内部的变量没有逃离方法的作用范围\",{\"1\":{\"326\":1}}],[\"如果两个线程发生了上下文切换\",{\"1\":{\"324\":1}}],[\"如果获取成功\",{\"1\":{\"313\":1}}],[\"如果计数器为0\",{\"1\":{\"313\":1}}],[\"如果计数器大于0\",{\"1\":{\"313\":1}}],[\"如果失败\",{\"1\":{\"305\":1,\"313\":1}}],[\"如果cas操作成功\",{\"1\":{\"305\":1}}],[\"如果在前面示例的死循环中加入\",{\"1\":{\"480\":1}}],[\"如果在\",{\"1\":{\"431\":1}}],[\"如果在同一段代码逻辑中\",{\"1\":{\"304\":1}}],[\"如果在尝试加轻量级锁的过程中\",{\"1\":{\"302\":1}}],[\"如果在相同的代码块中\",{\"1\":{\"136\":1}}],[\"如果对高可用性要求较高\",{\"1\":{\"624\":1}}],[\"如果对所有老年代都进行回收\",{\"1\":{\"383\":1}}],[\"如果对象虽然被多个线程访问\",{\"1\":{\"299\":1}}],[\"如果对实时性要求不高的情况下\",{\"1\":{\"81\":1,\"726\":1,\"729\":1}}],[\"如果不存在内容\",{\"1\":{\"576\":1,\"596\":1,\"607\":1,\"650\":1,\"661\":1}}],[\"如果不需要\",{\"1\":{\"568\":1}}],[\"如果不为0\",{\"1\":{\"540\":1}}],[\"如果不是\",{\"1\":{\"446\":1}}],[\"如果不用\",{\"1\":{\"297\":1}}],[\"如果不指定\",{\"1\":{\"85\":1}}],[\"如果调用的是\",{\"1\":{\"439\":1}}],[\"如果调用\",{\"1\":{\"296\":1}}],[\"如果\",{\"1\":{\"289\":1,\"301\":2,\"444\":1,\"451\":2,\"459\":1,\"471\":1}}],[\"如果使用\",{\"1\":{\"288\":1}}],[\"如果有内容就直接访问\",{\"1\":{\"576\":1,\"596\":1,\"607\":1,\"650\":1,\"661\":1}}],[\"如果有基础类型又要调用回用户的代码\",{\"1\":{\"461\":1}}],[\"如果有如下代码\",{\"1\":{\"441\":1}}],[\"如果有元素\",{\"1\":{\"364\":1}}],[\"如果有该字符串对象\",{\"1\":{\"341\":1,\"343\":1}}],[\"如果有则并不会放入\",{\"1\":{\"341\":3}}],[\"如果有其他线程尝试获取偏向锁\",{\"1\":{\"305\":1}}],[\"如果有取值为\",{\"1\":{\"301\":1}}],[\"如果有一项不同\",{\"1\":{\"220\":1}}],[\"如果有重复\",{\"1\":{\"117\":1}}],[\"如果请求的url是\",{\"1\":{\"171\":1}}],[\"如果它出现在中间的某个地方\",{\"1\":{\"143\":1}}],[\"如果其中包含一个可选的语句组件\",{\"1\":{\"141\":1}}],[\"如果条件为\",{\"1\":{\"140\":1}}],[\"如果中断iota自增\",{\"1\":{\"139\":1}}],[\"如果你使用maven\",{\"1\":{\"525\":1}}],[\"如果你高度信任某个应用\",{\"1\":{\"254\":1}}],[\"如果你声明了一个局部变量却没有在相同的代码块中使用它\",{\"1\":{\"136\":1}}],[\"如果你在定义变量\",{\"1\":{\"136\":1}}],[\"如果你是一个新手\",{\"1\":{\"10\":1}}],[\"如果分数没有重复\",{\"1\":{\"117\":1}}],[\"如果粉丝量很多\",{\"1\":{\"115\":1}}],[\"如果算法不精准\",{\"1\":{\"115\":1,\"533\":1}}],[\"如果实际类型不同\",{\"1\":{\"94\":1}}],[\"如果只有filter条件的话\",{\"1\":{\"88\":1}}],[\"如果是菜单\",{\"1\":{\"592\":1}}],[\"如果是用户纬度数据\",{\"1\":{\"592\":1}}],[\"如果是insert或者update\",{\"1\":{\"561\":1}}],[\"如果是0则表明这一位上的数据一定不存在\",{\"1\":{\"541\":1}}],[\"如果是不同的id那就可以防止下次过来直击数据\",{\"1\":{\"541\":1}}],[\"如果是单线程以上\",{\"1\":{\"474\":1}}],[\"如果是集合使用\",{\"1\":{\"440\":1}}],[\"如果是局部变量引用了对象\",{\"1\":{\"326\":1}}],[\"如果是自己执行了\",{\"1\":{\"301\":1}}],[\"如果是其它线程已经持有了该\",{\"1\":{\"301\":1}}],[\"如果是活跃粉丝\",{\"1\":{\"115\":1,\"533\":1}}],[\"如果是大v\",{\"1\":{\"115\":1,\"533\":1}}],[\"如果是个普通的人\",{\"1\":{\"115\":1,\"533\":1}}],[\"如果是字符串\",{\"1\":{\"88\":1}}],[\"如果是非字符串\",{\"1\":{\"88\":1}}],[\"如果针对于某个字段\",{\"1\":{\"88\":1}}],[\"如果重新put一条数据\",{\"1\":{\"85\":1}}],[\"如\",{\"1\":{\"56\":1,\"277\":2,\"283\":1,\"286\":1,\"341\":1,\"379\":1,\"441\":1}}],[\"并加入短暂过期时间\",{\"1\":{\"572\":1}}],[\"并通过发布订阅模式进行状态更新通知\",{\"1\":{\"545\":1,\"548\":1}}],[\"并以十进制形式返回\",{\"1\":{\"538\":1}}],[\"并对它们进行操作\",{\"1\":{\"521\":1}}],[\"并按照与指定点之间的距离排序后返回\",{\"1\":{\"519\":1,\"535\":1}}],[\"并按照与圆心之间的距离排序后返回\",{\"1\":{\"519\":1,\"535\":1}}],[\"并同步至主存\",{\"1\":{\"478\":1}}],[\"并反手锁住了门\",{\"1\":{\"476\":1}}],[\"并优化这些热点代码\",{\"1\":{\"469\":1}}],[\"并存入\",{\"1\":{\"469\":1}}],[\"并先初始化类\",{\"1\":{\"455\":1}}],[\"并给\",{\"1\":{\"441\":1}}],[\"并给出相关性得分\",{\"1\":{\"88\":1}}],[\"并执行拆箱操作\",{\"1\":{\"437\":1}}],[\"并执行相应的代码块\",{\"1\":{\"143\":1}}],[\"并将其引用放入操作数栈中\",{\"1\":{\"410\":1}}],[\"并将c变为\",{\"1\":{\"386\":1}}],[\"并将此密码记录在控制台上\",{\"1\":{\"165\":1}}],[\"并行\",{\"1\":{\"376\":1,\"378\":2}}],[\"并行并发\",{\"1\":{\"376\":1}}],[\"并行执行\",{\"1\":{\"318\":1}}],[\"并让幸存区中的对象寿命加1\",{\"1\":{\"371\":1}}],[\"并移除\",{\"1\":{\"364\":1}}],[\"并放入串池中\",{\"1\":{\"341\":3}}],[\"并把里面的符号地址变为真实地址\",{\"1\":{\"340\":1}}],[\"并把这个指针数组返回\",{\"1\":{\"112\":1}}],[\"并逃离了方法的范围\",{\"1\":{\"326\":1}}],[\"并尝试用\",{\"1\":{\"301\":1}}],[\"并发读会产生脏数据\",{\"1\":{\"591\":1}}],[\"并发量\",{\"1\":{\"394\":1}}],[\"并发清除\",{\"1\":{\"379\":1}}],[\"并发标记必须在堆空间占满前完成\",{\"1\":{\"389\":1}}],[\"并发标记起始时间的调整\",{\"1\":{\"389\":1}}],[\"并发标记\",{\"1\":{\"379\":1,\"382\":1}}],[\"并发\",{\"1\":{\"379\":1}}],[\"并发收集\",{\"1\":{\"376\":1,\"379\":1}}],[\"并发包\",{\"1\":{\"277\":1}}],[\"并发控制字段\",{\"1\":{\"85\":1}}],[\"并携带授权码\",{\"1\":{\"271\":1}}],[\"并携带参数clientid\",{\"1\":{\"270\":1}}],[\"并建立一个已认证的会话\",{\"1\":{\"268\":1}}],[\"并根据匹配执行代码块\",{\"1\":{\"142\":1}}],[\"并没有重复读取\",{\"1\":{\"115\":1,\"533\":1}}],[\"并填充到users切片\",{\"1\":{\"112\":1}}],[\"并转换为models\",{\"1\":{\"112\":1}}],[\"并不是编译器还会转换出中间的\",{\"1\":{\"434\":1}}],[\"并不是默认开启的\",{\"1\":{\"380\":1}}],[\"并不是所有的查询都需要产生分数\",{\"1\":{\"88\":1}}],[\"并不友好\",{\"1\":{\"90\":1}}],[\"并新增版本号\",{\"1\":{\"85\":1}}],[\"并且内存占用极小\",{\"1\":{\"542\":1}}],[\"并且幂等性操作要求必须开启重试功能和ack取值为\",{\"1\":{\"484\":1}}],[\"并且长度不太长时\",{\"1\":{\"470\":1}}],[\"并且与原来的\",{\"1\":{\"445\":1}}],[\"并且回收需要主动调用\",{\"1\":{\"350\":1}}],[\"并且如果不需要更大的方法区域\",{\"1\":{\"336\":1}}],[\"并且令牌的有效期必须非常短\",{\"1\":{\"253\":1}}],[\"并且\",{\"1\":{\"239\":1}}],[\"并且看到的页面是这样的\",{\"1\":{\"164\":1}}],[\"并且每个case表达式都被计算为true\",{\"1\":{\"143\":1}}],[\"并且还可以记录当前获取数据时间戳最小值\",{\"1\":{\"115\":1,\"534\":1}}],[\"并且实现也相对简单\",{\"1\":{\"115\":1,\"533\":1}}],[\"并且这些年龄段中m的平均薪资和f的平均薪资以及这个年龄段的总体平均薪资\",{\"1\":{\"88\":1}}],[\"并且求这些年龄段的这些人的平均薪资\",{\"1\":{\"88\":1}}],[\"并且在给定哈希的情况下只能通过暴力破解的方式猜测密码\",{\"1\":{\"198\":1}}],[\"并且在一次使用中得到各自的\",{\"1\":{\"88\":1}}],[\"并且在查询过程中\",{\"1\":{\"88\":1}}],[\"并且同时返回聚合结果\",{\"1\":{\"88\":1}}],[\"并且不会维护任何服务端的资源或者结果的cursor\",{\"1\":{\"87\":1}}],[\"并且版本号也会发生变化\",{\"1\":{\"85\":1}}],[\"并且按序到达\",{\"1\":{\"55\":1}}],[\"并创建客户端连接\",{\"1\":{\"66\":1,\"70\":1,\"74\":1,\"78\":1,\"98\":1,\"102\":1,\"126\":1,\"130\":1,\"488\":1,\"492\":1,\"496\":1,\"500\":1,\"504\":1,\"508\":1}}],[\"并简称为socket\",{\"1\":{\"56\":1}}],[\"among\",{\"1\":{\"645\":1}}],[\"amount\",{\"1\":{\"635\":1,\"639\":1,\"642\":1}}],[\"away\",{\"1\":{\"641\":1}}],[\"await\",{\"1\":{\"315\":2,\"316\":3}}],[\"a++\",{\"1\":{\"411\":3,\"413\":2}}],[\"a|ppend\",{\"1\":{\"341\":1,\"343\":1}}],[\"aqs是java并发编程中的重要概念\",{\"1\":{\"310\":1}}],[\"aqs的实现方式是通过继承来扩展\",{\"1\":{\"310\":1}}],[\"aqs的核心思想是使用一个fifo的等待队列来管理线程的获取和释放锁的顺序\",{\"1\":{\"310\":1}}],[\"aqs\",{\"0\":{\"310\":1},\"1\":{\"310\":1,\"312\":1}}],[\"available\",{\"1\":{\"644\":1,\"645\":1}}],[\"averagetime\",{\"1\":{\"303\":1}}],[\"avgt\",{\"1\":{\"303\":4}}],[\"avg\",{\"1\":{\"88\":5}}],[\"always\",{\"1\":{\"642\":1}}],[\"also\",{\"1\":{\"638\":1}}],[\"alt+r\",{\"1\":{\"423\":1}}],[\"aload\",{\"1\":{\"289\":3,\"324\":5,\"341\":4,\"406\":1,\"415\":8,\"416\":3,\"429\":2,\"430\":1,\"432\":1,\"433\":4,\"437\":2,\"438\":3}}],[\"ali\",{\"1\":{\"445\":2,\"451\":1}}],[\"alive\",{\"1\":{\"279\":1}}],[\"alibaba<\",{\"1\":{\"554\":1,\"568\":1}}],[\"alibaba\",{\"1\":{\"207\":1,\"553\":1,\"558\":1,\"560\":1,\"567\":1,\"568\":2}}],[\"allargsconstructor\",{\"1\":{\"561\":2}}],[\"allimpls\",{\"1\":{\"465\":2}}],[\"allowed\",{\"1\":{\"400\":1}}],[\"allocation\",{\"1\":{\"394\":1}}],[\"allocated\",{\"1\":{\"642\":1}}],[\"allocatedirect的实现\",{\"1\":{\"350\":1}}],[\"allocatedirect\",{\"1\":{\"350\":4,\"351\":2}}],[\"allocatememory\",{\"1\":{\"350\":1,\"351\":1}}],[\"all查询类型\",{\"1\":{\"88\":1}}],[\"all\",{\"1\":{\"87\":2,\"88\":3,\"89\":1,\"552\":1,\"559\":1,\"566\":1,\"637\":1,\"638\":2,\"639\":1}}],[\"au9ofl\",{\"1\":{\"179\":3,\"201\":1}}],[\"automatically\",{\"1\":{\"635\":1}}],[\"automatic\",{\"1\":{\"635\":1}}],[\"autowired\",{\"1\":{\"554\":1,\"561\":1}}],[\"autocloseable\",{\"1\":{\"444\":3}}],[\"auto\",{\"1\":{\"179\":1,\"182\":1,\"645\":1}}],[\"auth\",{\"1\":{\"241\":1,\"568\":1,\"637\":1}}],[\"authexception\",{\"1\":{\"218\":2}}],[\"authenticate\",{\"1\":{\"636\":1}}],[\"authenticated\",{\"1\":{\"190\":2,\"229\":1,\"233\":1}}],[\"authentication=\",{\"1\":{\"267\":1}}],[\"authenticationprincipal\",{\"1\":{\"266\":1}}],[\"authenticationentrypoint\",{\"1\":{\"218\":1,\"219\":1,\"231\":1}}],[\"authenticationexception\",{\"1\":{\"212\":1,\"218\":1}}],[\"authenticationfailurehandler\",{\"1\":{\"206\":1,\"212\":1}}],[\"authenticationsuccesshandler\",{\"1\":{\"206\":1,\"209\":1}}],[\"authentication\",{\"0\":{\"157\":1},\"1\":{\"156\":1,\"209\":3,\"215\":2,\"218\":1,\"222\":4,\"223\":5,\"239\":1}}],[\"authorize=\",{\"1\":{\"267\":1}}],[\"authorizedclient\",{\"1\":{\"266\":2}}],[\"authorize\",{\"1\":{\"190\":2,\"229\":2,\"231\":1,\"233\":2,\"271\":1}}],[\"authorizerequests\",{\"1\":{\"190\":2,\"229\":1,\"233\":1}}],[\"authorizationuri\",{\"1\":{\"271\":1}}],[\"authorization\",{\"1\":{\"156\":1,\"241\":1,\"242\":1,\"251\":2,\"252\":1,\"258\":1,\"259\":1,\"260\":1}}],[\"authorities\",{\"1\":{\"188\":2,\"223\":2,\"230\":5,\"238\":1}}],[\"authorid\",{\"1\":{\"91\":1,\"93\":1,\"98\":2,\"102\":2,\"121\":2}}],[\"author\",{\"1\":{\"91\":2}}],[\"adpater\",{\"1\":{\"568\":1}}],[\"adapapter\",{\"1\":{\"568\":1}}],[\"adapter安装目录的plugin目录中\",{\"1\":{\"568\":1}}],[\"adapter配置的索引库\",{\"1\":{\"569\":1}}],[\"adapter配置\",{\"1\":{\"568\":1}}],[\"adapter\",{\"0\":{\"568\":1},\"1\":{\"568\":8}}],[\"adriver\",{\"1\":{\"464\":3}}],[\"admim\",{\"1\":{\"239\":1}}],[\"administrative\",{\"1\":{\"638\":2}}],[\"admin\",{\"1\":{\"179\":1,\"233\":1,\"234\":1,\"238\":1,\"239\":3,\"568\":1}}],[\"addr\",{\"1\":{\"560\":2,\"567\":1}}],[\"address=192\",{\"1\":{\"553\":1,\"560\":1,\"567\":1}}],[\"address为mill\",{\"1\":{\"88\":1}}],[\"address必须包含mill\",{\"1\":{\"88\":1}}],[\"address\",{\"1\":{\"85\":1,\"88\":11,\"89\":1,\"350\":5,\"553\":1,\"560\":1,\"567\":1,\"645\":6}}],[\"addresses\",{\"1\":{\"66\":1,\"70\":1,\"74\":1,\"78\":1,\"90\":1,\"98\":2,\"102\":2,\"126\":1,\"130\":1,\"488\":1,\"492\":1,\"496\":1,\"500\":1,\"504\":1,\"508\":1}}],[\"addelapsedtimefrom\",{\"1\":{\"460\":1}}],[\"adders\",{\"1\":{\"98\":1,\"102\":1}}],[\"addtime\",{\"1\":{\"460\":1}}],[\"addsuppressed\",{\"1\":{\"444\":2}}],[\"addattribute\",{\"1\":{\"266\":3}}],[\"add接口\",{\"1\":{\"228\":1}}],[\"add权限的用户可以访问\",{\"1\":{\"228\":1,\"229\":1}}],[\"add\",{\"1\":{\"192\":2,\"229\":3,\"230\":6,\"238\":1,\"239\":4,\"299\":1,\"300\":1,\"333\":1,\"350\":1,\"357\":3,\"364\":3,\"365\":2,\"373\":5,\"374\":1,\"375\":2,\"437\":3,\"438\":1,\"529\":1,\"530\":1,\"532\":1,\"534\":1,\"535\":1,\"536\":3,\"537\":1,\"641\":1}}],[\"a>\",{\"1\":{\"160\":1}}],[\"athrow\",{\"1\":{\"289\":1,\"430\":1,\"431\":2,\"432\":1,\"433\":1}}],[\"atomiclong\",{\"1\":{\"283\":1}}],[\"atomicity\",{\"1\":{\"283\":1}}],[\"atomicinteger\",{\"1\":{\"277\":1,\"283\":1}}],[\"atomicreference\",{\"1\":{\"277\":1}}],[\"atomic\",{\"1\":{\"277\":1}}],[\"attached\",{\"1\":{\"645\":1}}],[\"attach\",{\"1\":{\"419\":1}}],[\"attacks\",{\"1\":{\"156\":1}}],[\"attribute\",{\"1\":{\"397\":1}}],[\"attributes\",{\"1\":{\"267\":1,\"397\":3}}],[\"att\",{\"1\":{\"350\":1}}],[\"at\",{\"1\":{\"264\":1,\"333\":5,\"338\":4,\"350\":4,\"444\":3,\"635\":1,\"639\":1,\"642\":1,\"644\":1}}],[\"atguigu\",{\"1\":{\"159\":1,\"176\":1,\"182\":1,\"183\":2,\"184\":2,\"185\":1,\"188\":1,\"203\":1,\"209\":1,\"212\":1,\"215\":1,\"218\":1,\"223\":1,\"225\":1,\"266\":1}}],[\"a=0\",{\"1\":{\"139\":1}}],[\"article\",{\"1\":{\"481\":2,\"554\":1}}],[\"artifactid>\",{\"1\":{\"180\":5,\"195\":1,\"207\":1,\"260\":3,\"471\":2,\"525\":1,\"526\":1,\"537\":5,\"554\":7,\"561\":6,\"568\":1,\"581\":1,\"601\":1,\"612\":1,\"655\":1,\"666\":1}}],[\"arthas\",{\"1\":{\"472\":2}}],[\"arrive\",{\"1\":{\"639\":1,\"640\":1}}],[\"arriving\",{\"1\":{\"639\":1,\"640\":1}}],[\"arr\",{\"1\":{\"439\":5}}],[\"array\",{\"1\":{\"440\":5,\"568\":1}}],[\"arraylist\",{\"1\":{\"357\":1,\"437\":2,\"438\":2}}],[\"arraylist<softreference<byte\",{\"1\":{\"364\":2}}],[\"arraylist<string>\",{\"1\":{\"333\":1}}],[\"arraylist<byte\",{\"1\":{\"364\":1,\"374\":1,\"375\":1}}],[\"arraylist<object>\",{\"1\":{\"357\":1}}],[\"arraylist<>\",{\"1\":{\"188\":1,\"230\":1,\"333\":1,\"350\":1,\"357\":1,\"364\":4,\"365\":2,\"373\":1,\"374\":1,\"375\":1,\"437\":1,\"535\":1,\"536\":1,\"537\":1}}],[\"arrays\",{\"1\":{\"333\":2,\"440\":2}}],[\"arithmeticexception\",{\"1\":{\"428\":3,\"444\":1}}],[\"are\",{\"1\":{\"267\":1,\"635\":1,\"638\":3,\"639\":1,\"641\":1,\"642\":1,\"643\":1,\"644\":2}}],[\"area\",{\"1\":{\"138\":3}}],[\"architecture\",{\"1\":{\"218\":1}}],[\"args\",{\"1\":{\"289\":3,\"298\":1,\"315\":1,\"319\":1,\"326\":2,\"333\":1,\"338\":1,\"341\":6,\"343\":1,\"345\":1,\"350\":1,\"351\":1,\"357\":1,\"364\":2,\"365\":1,\"373\":1,\"374\":1,\"375\":1,\"397\":1,\"400\":1,\"405\":1,\"406\":2,\"411\":3,\"412\":1,\"413\":3,\"414\":2,\"415\":4,\"416\":2,\"417\":1,\"427\":2,\"428\":3,\"429\":3,\"430\":2,\"431\":3,\"432\":2,\"433\":2,\"436\":3,\"437\":2,\"438\":4,\"439\":9,\"440\":4,\"441\":2,\"442\":2,\"444\":3,\"445\":1,\"446\":2,\"451\":1,\"452\":1,\"455\":1,\"456\":1,\"458\":1,\"469\":1,\"470\":1,\"471\":1,\"472\":4,\"474\":1,\"476\":1,\"478\":1,\"480\":1,\"554\":2,\"581\":1,\"601\":1,\"612\":1,\"655\":1,\"666\":1}}],[\"argon2是一种故意缓慢的算法\",{\"1\":{\"199\":1}}],[\"argon2是密码哈希比赛的获胜者\",{\"1\":{\"199\":1}}],[\"argon2passwordencoder\",{\"1\":{\"199\":1}}],[\"arguments\",{\"1\":{\"438\":3}}],[\"argument\",{\"1\":{\"88\":2}}],[\"able\",{\"1\":{\"635\":1,\"639\":1,\"642\":2,\"643\":1,\"645\":1}}],[\"about\",{\"1\":{\"635\":1}}],[\"above\",{\"1\":{\"89\":1}}],[\"abnormally\",{\"1\":{\"350\":1}}],[\"ab3初始化时直接从串池中获取字符串\",{\"1\":{\"341\":1}}],[\"ab\",{\"1\":{\"341\":17,\"343\":3}}],[\"abstract\",{\"1\":{\"400\":2,\"417\":2}}],[\"abstractstringbuilder\",{\"1\":{\"333\":4}}],[\"abstractqueuedsynchronizer\",{\"1\":{\"310\":1}}],[\"aba问题\",{\"0\":{\"309\":1}}],[\"abc\",{\"1\":{\"136\":3,\"138\":4,\"179\":1,\"342\":2}}],[\"another\",{\"1\":{\"635\":1,\"645\":1}}],[\"announce\",{\"1\":{\"645\":2,\"646\":2}}],[\"annotations\",{\"1\":{\"471\":1}}],[\"annotation\",{\"1\":{\"400\":2}}],[\"annprocess<\",{\"1\":{\"471\":1}}],[\"anewarray\",{\"1\":{\"429\":2}}],[\"animal\",{\"1\":{\"417\":7,\"424\":1}}],[\"an\",{\"1\":{\"400\":3,\"637\":1,\"639\":1,\"643\":1}}],[\"and\",{\"1\":{\"136\":1,\"143\":2,\"239\":1,\"250\":1,\"305\":1,\"309\":1,\"319\":2,\"531\":2,\"532\":1,\"635\":2,\"637\":1,\"638\":1,\"639\":5,\"640\":3,\"641\":2,\"642\":2,\"644\":1,\"645\":6}}],[\"anyrequest\",{\"1\":{\"190\":2,\"229\":1,\"233\":1}}],[\"any\",{\"1\":{\"98\":1,\"102\":1,\"121\":1,\"289\":2,\"430\":2,\"431\":1,\"432\":1,\"433\":2}}],[\"analysistest\",{\"1\":{\"451\":2}}],[\"analysis\",{\"1\":{\"90\":2}}],[\"analyzer\",{\"0\":{\"357\":1},\"1\":{\"90\":6,\"357\":2,\"569\":1}}],[\"analyzers\",{\"1\":{\"90\":1}}],[\"analyze\",{\"1\":{\"90\":4}}],[\"again\",{\"1\":{\"319\":1,\"642\":1}}],[\"against\",{\"1\":{\"156\":1,\"638\":2}}],[\"aggname子聚合\",{\"1\":{\"88\":1}}],[\"aggname\",{\"1\":{\"88\":1}}],[\"aggs\",{\"1\":{\"88\":8}}],[\"aggregations\",{\"1\":{\"88\":2}}],[\"age分布的平均\",{\"1\":{\"88\":1}}],[\"agebalanceavg\",{\"1\":{\"88\":1}}],[\"age为38的有2条\",{\"1\":{\"88\":1}}],[\"ageavg\",{\"1\":{\"88\":3}}],[\"ageagg\",{\"1\":{\"88\":4}}],[\"age必须不等于18\",{\"1\":{\"88\":1}}],[\"age\",{\"1\":{\"85\":1,\"88\":6,\"89\":2,\"295\":2}}],[\"ae\",{\"1\":{\"85\":1}}],[\"after\",{\"1\":{\"554\":2,\"635\":1,\"638\":1,\"641\":1,\"642\":1}}],[\"af\",{\"1\":{\"85\":1}}],[\"apache\",{\"1\":{\"181\":1,\"561\":1}}],[\"apple\",{\"0\":{\"740\":1}}],[\"applicable\",{\"1\":{\"87\":1}}],[\"application\",{\"1\":{\"85\":4,\"209\":1,\"212\":1,\"215\":1,\"218\":1,\"225\":1,\"231\":1,\"265\":1,\"457\":1,\"568\":1}}],[\"applicationprogramminginterface\",{\"1\":{\"56\":1}}],[\"appear\",{\"1\":{\"641\":2}}],[\"appears\",{\"1\":{\"635\":1}}],[\"append\",{\"1\":{\"94\":1,\"117\":1,\"303\":4,\"326\":9,\"333\":2,\"341\":9,\"343\":1}}],[\"apps\",{\"1\":{\"263\":1}}],[\"api\",{\"1\":{\"85\":2,\"87\":1,\"88\":1,\"171\":2,\"271\":1,\"561\":1}}],[\"actually\",{\"1\":{\"645\":1}}],[\"act\",{\"1\":{\"637\":1}}],[\"action=\",{\"1\":{\"204\":2,\"267\":2}}],[\"action\",{\"1\":{\"85\":3,\"271\":1}}],[\"aclass\",{\"1\":{\"458\":2}}],[\"aconst\",{\"1\":{\"429\":1}}],[\"acquire\",{\"1\":{\"313\":2,\"314\":1}}],[\"accumulate\",{\"1\":{\"642\":1}}],[\"accumulates\",{\"1\":{\"642\":1}}],[\"acc\",{\"1\":{\"338\":1,\"400\":8,\"406\":5,\"411\":2,\"428\":2,\"429\":2,\"438\":3}}],[\"accessed\",{\"1\":{\"400\":1}}],[\"accesscontroller\",{\"1\":{\"350\":1,\"464\":2}}],[\"access\",{\"1\":{\"235\":1,\"250\":1,\"271\":1,\"397\":1}}],[\"accessdeniedhandler\",{\"1\":{\"231\":1}}],[\"accepting\",{\"1\":{\"635\":1,\"644\":1}}],[\"accept\",{\"1\":{\"85\":1,\"638\":1,\"644\":1}}],[\"account下的文档迁移到newbank下\",{\"1\":{\"89\":1}}],[\"account\",{\"1\":{\"85\":2,\"87\":1,\"88\":2,\"89\":2}}],[\"ack应答机制\",{\"1\":{\"484\":1}}],[\"acknowledged\",{\"1\":{\"85\":1}}],[\"ack\",{\"1\":{\"57\":2,\"640\":1}}],[\"a\",{\"1\":{\"85\":1,\"134\":3,\"136\":8,\"138\":2,\"139\":4,\"140\":5,\"142\":2,\"148\":10,\"150\":3,\"245\":2,\"253\":1,\"270\":6,\"294\":1,\"303\":4,\"309\":2,\"326\":2,\"333\":6,\"341\":15,\"343\":4,\"357\":1,\"400\":1,\"405\":2,\"410\":1,\"411\":4,\"412\":4,\"413\":4,\"415\":10,\"445\":3,\"455\":10,\"456\":3,\"458\":3,\"466\":1,\"526\":1,\"568\":1,\"635\":9,\"637\":1,\"638\":7,\"639\":5,\"640\":3,\"641\":4,\"642\":8,\"643\":6,\"644\":3,\"645\":5}}],[\"a就构造出自己的发送窗口\",{\"1\":{\"59\":1}}],[\"asap\",{\"1\":{\"635\":1,\"640\":1}}],[\"asynchronous\",{\"1\":{\"635\":1}}],[\"asynchronously\",{\"1\":{\"526\":1}}],[\"async\",{\"1\":{\"526\":1,\"561\":1}}],[\"asynccommands\",{\"1\":{\"526\":3}}],[\"asm\",{\"1\":{\"472\":1}}],[\"aslist\",{\"1\":{\"440\":2}}],[\"astore\",{\"1\":{\"289\":2,\"324\":1,\"341\":12,\"416\":2,\"427\":2,\"428\":3,\"429\":2,\"430\":2,\"431\":1,\"432\":1,\"433\":3,\"437\":2,\"438\":2}}],[\"assert\",{\"1\":{\"200\":1}}],[\"asc\",{\"1\":{\"87\":3}}],[\"as\",{\"1\":{\"26\":1,\"400\":2,\"638\":1,\"639\":2,\"643\":1,\"674\":1}}],[\"因其出色的读写速度和丰富的数据结构\",{\"1\":{\"545\":1,\"548\":1}}],[\"因为删除缓存和更新数据库不是原子操作\",{\"1\":{\"591\":1}}],[\"因为数据有变更\",{\"1\":{\"591\":1}}],[\"因为canal可以直接同步到elasticsearch\",{\"1\":{\"565\":1}}],[\"因为要判断该用户是否已经统计过了\",{\"1\":{\"541\":1}}],[\"因为1只有遇见1\",{\"1\":{\"540\":1}}],[\"因为我们的数据是不能重复的\",{\"1\":{\"529\":1}}],[\"因为我们的数据会随时发生变化\",{\"1\":{\"115\":1,\"534\":1}}],[\"因为没有内置的唯一id生成机制\",{\"1\":{\"514\":1}}],[\"因为队列的存在\",{\"1\":{\"484\":1}}],[\"因为在创建candy11$1对象时\",{\"1\":{\"446\":1}}],[\"因为在创建\",{\"1\":{\"446\":1}}],[\"因为字符串的\",{\"1\":{\"441\":1}}],[\"因为集合的遍历需要用到迭代器\",{\"1\":{\"440\":1}}],[\"因为异常出现时\",{\"1\":{\"428\":1}}],[\"因为普通成员方法需要在运行时才能确定具体的内容\",{\"1\":{\"417\":1}}],[\"因为普通的人他的粉丝关注量比较小\",{\"1\":{\"115\":1,\"533\":1}}],[\"因为编译期间无法确定该方法的内容\",{\"1\":{\"416\":1}}],[\"因为涉及运算操作\",{\"1\":{\"414\":1}}],[\"因为操作数栈都是\",{\"1\":{\"412\":1}}],[\"因为只能在操作数栈中执行运算操作\",{\"1\":{\"410\":1}}],[\"因为只需调整角色和权限的分配即可\",{\"1\":{\"235\":1}}],[\"因为指定了最大停顿时间\",{\"1\":{\"383\":1}}],[\"因为是串行的\",{\"1\":{\"377\":1}}],[\"因为java对象头只用4个bit来表示\",{\"1\":{\"371\":1}}],[\"因为java有时候没法直接和操作系统底层交互\",{\"1\":{\"329\":1}}],[\"因为stringtable是由hashtable实现的\",{\"1\":{\"346\":1}}],[\"因为s3是存在于串池之中\",{\"1\":{\"341\":1}}],[\"因为内容是变量\",{\"1\":{\"341\":1}}],[\"因为内容是常量\",{\"1\":{\"341\":1}}],[\"因为物理内存是一定的\",{\"1\":{\"326\":1}}],[\"因为它们避免了使用重量级的锁机制\",{\"1\":{\"319\":1}}],[\"因为\",{\"1\":{\"297\":1,\"349\":1,\"364\":1,\"410\":1,\"456\":1,\"474\":1,\"478\":1}}],[\"因为变量的值可能被缓存在寄存器或者线程私有内存中\",{\"1\":{\"283\":1}}],[\"因为对于每个盐和密码的组合\",{\"1\":{\"198\":1}}],[\"因为这是给相同的变量赋予一个新的值\",{\"1\":{\"136\":1}}],[\"因为赵六在读信息时\",{\"1\":{\"115\":1,\"533\":1}}],[\"因为随着互联网的不断发展以及网络技术的进步\",{\"1\":{\"56\":1}}],[\"因此说主从复制是\",{\"1\":{\"619\":1}}],[\"因此次他有如下几个使用场景\",{\"1\":{\"579\":1,\"599\":1,\"610\":1,\"653\":1,\"664\":1}}],[\"因此最大上限是512m\",{\"1\":{\"538\":1}}],[\"因此返回结果肯定以\",{\"1\":{\"431\":1}}],[\"因此编译器就会帮我们省去这些锁\",{\"1\":{\"303\":1}}],[\"因此只有对象头的\",{\"1\":{\"421\":1}}],[\"因此只适用于其他授权方式都无法采用的情况\",{\"1\":{\"254\":1}}],[\"因此只调用securityfilterchain\",{\"1\":{\"171\":1}}],[\"因此filterchainproxy是spring\",{\"1\":{\"169\":1}}],[\"因此我们可以使用下面这种方案来同步数据\",{\"1\":{\"558\":1}}],[\"因此我们可以在过滤器中对请求进行修改或增强\",{\"1\":{\"167\":1}}],[\"因此我们需要提示其版本\",{\"1\":{\"537\":1}}],[\"因此我们定义类实现authenticationentrypoint接口\",{\"1\":{\"218\":1}}],[\"因此我们一行就写一条语句\",{\"1\":{\"133\":1}}],[\"因此无法获取地址\",{\"1\":{\"139\":1}}],[\"因此不能采用传统的分页模式\",{\"1\":{\"115\":1,\"534\":1}}],[\"因此采用timeline的模式\",{\"1\":{\"115\":2,\"533\":2}}],[\"因此tcp首部的最小长度是20字节\",{\"1\":{\"57\":1}}],[\"因此可以借助于\",{\"1\":{\"12\":1}}],[\"因此\",{\"1\":{\"9\":1,\"56\":1,\"57\":3,\"133\":1,\"134\":1,\"198\":2,\"253\":1,\"271\":2,\"312\":1,\"464\":1}}],[\"同理\",{\"1\":{\"579\":1,\"580\":1,\"599\":1,\"600\":1,\"610\":1,\"611\":1,\"653\":1,\"654\":1,\"664\":1,\"665\":1}}],[\"同学们在操作时\",{\"1\":{\"527\":1}}],[\"同\",{\"1\":{\"439\":1}}],[\"同样是单线程收集器\",{\"1\":{\"377\":1}}],[\"同样会得到编译错误\",{\"1\":{\"136\":1}}],[\"同一域名指=>协议\",{\"1\":{\"220\":1}}],[\"同一个用户只能点赞一次\",{\"1\":{\"529\":1}}],[\"同一个作用于域内不能冲突\",{\"1\":{\"136\":1}}],[\"同一个名词socket却可表示多种不同的意思\",{\"1\":{\"56\":1}}],[\"同一个ip地址可以有多个不同的tcp连接\",{\"1\":{\"56\":1}}],[\"同时\",{\"1\":{\"680\":1,\"683\":1}}],[\"同时需要修改应用方的主节点地址\",{\"1\":{\"620\":1}}],[\"同时配置rocketmq地址\",{\"1\":{\"558\":1}}],[\"同时创建了一个employee表作为演示\",{\"1\":{\"552\":1,\"559\":1,\"566\":1}}],[\"同时绑定相同的店家类型type\",{\"1\":{\"536\":1}}],[\"同时当取消关注时\",{\"1\":{\"532\":1}}],[\"同时注重吞吐量\",{\"1\":{\"380\":1}}],[\"同时使用一个volatile变量来表示锁的状态\",{\"1\":{\"310\":1}}],[\"同时发回一个授权码\",{\"1\":{\"270\":1}}],[\"同时把数据放进redis\",{\"1\":{\"110\":1,\"111\":1}}],[\"同时每个页面包含\",{\"1\":{\"6\":1}}],[\"同上\",{\"1\":{\"85\":1}}],[\"同步策略\",{\"0\":{\"630\":1,\"640\":1}}],[\"同步还是异步\",{\"1\":{\"586\":1}}],[\"同步多个表\",{\"1\":{\"553\":1}}],[\"同步所有表\",{\"1\":{\"553\":1}}],[\"同步的数据库\",{\"1\":{\"568\":1}}],[\"同步的数据库名\",{\"1\":{\"552\":1,\"559\":1,\"566\":1}}],[\"同步的表的规则\",{\"1\":{\"553\":1}}],[\"同步关键字\",{\"0\":{\"476\":1}}],[\"同步\",{\"1\":{\"316\":1}}],[\"同步块\",{\"1\":{\"294\":3,\"302\":1}}],[\"同步数据到\",{\"1\":{\"81\":1,\"726\":1,\"729\":1}}],[\"同步写es\",{\"1\":{\"98\":1,\"102\":1}}],[\"同步写\",{\"1\":{\"81\":1,\"84\":1,\"726\":1,\"729\":1}}],[\"接着安装好canal去同步bin\",{\"1\":{\"558\":1}}],[\"接着修改canal\",{\"1\":{\"553\":1,\"560\":1,\"567\":1}}],[\"接着看\",{\"1\":{\"466\":1}}],[\"接\",{\"1\":{\"312\":1}}],[\"接下来需要编写一个java程序来消费mq中的消息同步到redis\",{\"1\":{\"561\":1}}],[\"接下来我们需要在项目中整合canal\",{\"1\":{\"554\":1}}],[\"接下来我们来看看共同关注如何实现\",{\"1\":{\"532\":1}}],[\"接下来修改instance\",{\"1\":{\"553\":1,\"560\":1,\"567\":1}}],[\"接下来禁用\",{\"1\":{\"471\":1}}],[\"接下来\",{\"1\":{\"312\":1}}],[\"接口类型\",{\"1\":{\"465\":1}}],[\"接口方法\",{\"1\":{\"448\":1}}],[\"接口的集合类一起使用\",{\"1\":{\"440\":1}}],[\"接口的实现\",{\"1\":{\"277\":1}}],[\"接口实现\",{\"1\":{\"277\":1}}],[\"接口\",{\"1\":{\"183\":1,\"184\":1,\"440\":1,\"444\":1,\"446\":1}}],[\"接口性能下降\",{\"1\":{\"81\":1,\"726\":1,\"729\":1}}],[\"接收者在成功接收消息后会向发送者发送接收成功的消息\",{\"1\":{\"484\":1}}],[\"接收并验证客户端的访问令牌\",{\"1\":{\"242\":1}}],[\"接收一个字符流\",{\"1\":{\"90\":1}}],[\"接收方的应用程序必须有能力识别收到的字节流\",{\"1\":{\"55\":1}}],[\"接的端点是个很抽象的套接字\",{\"1\":{\"56\":1}}],[\"虽然名为\",{\"1\":{\"629\":1,\"639\":1}}],[\"虽然redis本身不直接支持时间序列数据结构\",{\"1\":{\"523\":1}}],[\"虽然从字节码指令看来\",{\"1\":{\"430\":1}}],[\"虽然有时为了方便\",{\"1\":{\"56\":1}}],[\"虽然应用程序和tcp的交互是一次一个数据块\",{\"1\":{\"55\":1}}],[\"可将变更记录投递到\",{\"1\":{\"558\":1}}],[\"可让您找到数据流中最常见的项目\",{\"1\":{\"522\":1}}],[\"可让您估计数据流的百分位数\",{\"1\":{\"522\":1}}],[\"可靠性\",{\"1\":{\"484\":1}}],[\"可通过在控制台输入指令\",{\"1\":{\"458\":1}}],[\"可变参数也是\",{\"1\":{\"439\":1}}],[\"可变参数\",{\"0\":{\"439\":1},\"1\":{\"439\":1}}],[\"可参考\",{\"1\":{\"402\":1}}],[\"可防止多个线程创建对象时的干扰\",{\"1\":{\"394\":1}}],[\"可预测的停顿时间标记\",{\"1\":{\"376\":1}}],[\"可达性分析算法\",{\"0\":{\"355\":1}}],[\"可能任然会有新的垃圾产生\",{\"1\":{\"379\":1}}],[\"可能导致cpu的占用过高\",{\"1\":{\"328\":1}}],[\"可能会导致数据库直接宕机\",{\"1\":{\"576\":1,\"596\":1,\"607\":1,\"650\":1,\"661\":1}}],[\"可能会有其他线程使用这个对象\",{\"1\":{\"326\":1}}],[\"可能会唤醒等待的线程\",{\"1\":{\"313\":1}}],[\"可能起到反作用\",{\"1\":{\"115\":1,\"533\":1}}],[\"可扩展的线程池类\",{\"1\":{\"310\":1}}],[\"可重入性\",{\"1\":{\"306\":1}}],[\"可见性是指当一个线程修改了共享变量的值\",{\"1\":{\"283\":1}}],[\"可见性是并发编程中非常重要的基础概念\",{\"1\":{\"283\":1}}],[\"可见性\",{\"0\":{\"477\":1,\"481\":1},\"1\":{\"283\":1,\"306\":1,\"472\":1}}],[\"可见套接字\",{\"1\":{\"56\":1}}],[\"可选项\",{\"1\":{\"553\":1,\"560\":1,\"567\":1}}],[\"可选\",{\"1\":{\"144\":1}}],[\"可以配置的内容\",{\"0\":{\"625\":1}}],[\"可以配合\",{\"1\":{\"360\":1,\"361\":1}}],[\"可以考虑使用哨兵模式或cluster模式\",{\"1\":{\"624\":1}}],[\"可以考虑用定时器来处理\",{\"1\":{\"81\":1,\"726\":1,\"729\":1}}],[\"可以提高系统的读取性能和扩展性\",{\"1\":{\"622\":1}}],[\"可以进一步监控主从节点的健康状态\",{\"1\":{\"621\":1}}],[\"可以进行范围查询\",{\"1\":{\"115\":1,\"534\":1}}],[\"可以大大提高\",{\"1\":{\"619\":1}}],[\"可以由主节点提供写服务\",{\"1\":{\"619\":1}}],[\"可以由从节点提供服务\",{\"1\":{\"619\":1}}],[\"可以从两大方式去讨论\",{\"1\":{\"586\":1}}],[\"可以借助于\",{\"1\":{\"558\":1}}],[\"可以实现故障自动转移\",{\"1\":{\"622\":1}}],[\"可以实现分页查询\",{\"1\":{\"534\":1}}],[\"可以实现灵活的权限管理和访问控制\",{\"1\":{\"235\":1}}],[\"可以对用户进行关注和取消关注功能\",{\"1\":{\"531\":1}}],[\"可以点赞\",{\"1\":{\"529\":1,\"530\":1}}],[\"可以将序列化后的对象存储为字符串\",{\"1\":{\"513\":1}}],[\"可以把\",{\"1\":{\"476\":1}}],[\"可以节省\",{\"1\":{\"471\":1}}],[\"可以顺利完成类加载\",{\"1\":{\"464\":1}}],[\"可以\",{\"1\":{\"445\":1}}],[\"可以不用写\",{\"1\":{\"444\":1}}],[\"可以作用于字符串和枚举类\",{\"1\":{\"441\":1}}],[\"可以作为\",{\"0\":{\"356\":1}}],[\"可以得到相同的结果\",{\"1\":{\"423\":1}}],[\"可以看改类的静态代码块是否被执行\",{\"1\":{\"455\":1}}],[\"可以看出加了synchronized\",{\"1\":{\"480\":1}}],[\"可以看出\",{\"1\":{\"439\":1}}],[\"可以看到\",{\"1\":{\"430\":1,\"438\":1}}],[\"可以看到多出来一个\",{\"1\":{\"427\":1}}],[\"可以看到在调用invokestatic\",{\"1\":{\"416\":1}}],[\"可以看下go语言的垃圾三色标记机制\",{\"1\":{\"371\":1}}],[\"可以动态调整\",{\"1\":{\"389\":1}}],[\"可以控制一次回收多少个小区间\",{\"1\":{\"381\":1}}],[\"可以搭配\",{\"1\":{\"379\":1}}],[\"可以连续监测\",{\"1\":{\"334\":1}}],[\"可以支持更多的递归调用\",{\"1\":{\"326\":1}}],[\"可以被比\",{\"1\":{\"316\":1}}],[\"可以被用作枚举值\",{\"1\":{\"139\":1}}],[\"可以创建一个公平的semaphore\",{\"1\":{\"313\":1}}],[\"可以用单个位来表示对象的状态\",{\"1\":{\"521\":1}}],[\"可以用string类型存储用户会话信息\",{\"1\":{\"513\":1}}],[\"可以用这个办法替换核心类\",{\"1\":{\"458\":1}}],[\"可以用来加载类的二进制字节码\",{\"1\":{\"338\":1}}],[\"可以用来构建custom\",{\"1\":{\"90\":1}}],[\"可以用于构建各种同步器\",{\"1\":{\"310\":1}}],[\"可以禁止某些重排序\",{\"1\":{\"283\":1}}],[\"可以先park\",{\"1\":{\"280\":1}}],[\"可以避免令牌泄漏\",{\"1\":{\"252\":1}}],[\"可以帮助应用程序实现以下两种常见的授权需求\",{\"1\":{\"226\":1}}],[\"可以通过后台代码直接获取即可\",{\"1\":{\"539\":1}}],[\"可以通过requestparam\",{\"1\":{\"535\":1}}],[\"可以通过前面介绍的\",{\"1\":{\"448\":1}}],[\"可以通过hsdb工具查看\",{\"1\":{\"448\":1}}],[\"可以通过管道进行消息传递来实现协程间的通信\",{\"1\":{\"277\":1}}],[\"可以通过\",{\"1\":{\"201\":1,\"346\":1,\"422\":1,\"472\":1}}],[\"可以有多个securityfilterchain的配置\",{\"1\":{\"171\":1}}],[\"可以在评论区说出你的见解\",{\"1\":{\"561\":1}}],[\"可以在springsecurity中创建自定义配置文件\",{\"1\":{\"176\":1}}],[\"可以在\",{\"1\":{\"168\":1}}],[\"可以自动处理url为正确的相对路径\",{\"1\":{\"163\":1}}],[\"可以自行进行显示指定类型\",{\"1\":{\"139\":1}}],[\"可以省略\",{\"1\":{\"143\":1}}],[\"可以是任何类型\",{\"1\":{\"142\":1}}],[\"可以简写为如下形式\",{\"1\":{\"139\":1}}],[\"可以认为是一个可以被编译器修改的常量\",{\"1\":{\"139\":1}}],[\"可以查询到对应的用户信息\",{\"1\":{\"112\":1}}],[\"可以使用阿里的\",{\"1\":{\"472\":1}}],[\"可以使用\",{\"1\":{\"377\":1,\"469\":1}}],[\"可以使用如下命令将堆内存信息转储成一个文件\",{\"1\":{\"357\":1}}],[\"可以使用intern方法\",{\"1\":{\"341\":1}}],[\"可以使用锁粗化方式来优化\",{\"1\":{\"304\":1}}],[\"可以使用mysql结合redis记录用户关注的关系\",{\"1\":{\"105\":1}}],[\"可以使用logstash\",{\"1\":{\"98\":1,\"102\":1}}],[\"可以表达非常复杂的逻辑\",{\"1\":{\"88\":1}}],[\"可以新增可以修改\",{\"1\":{\"85\":1}}],[\"可以根据参数去查询具体的信息\",{\"1\":{\"390\":1}}],[\"可以根据实际需求导入不同的客户端版本\",{\"1\":{\"65\":1,\"69\":1,\"73\":1,\"77\":1,\"97\":1,\"101\":1,\"125\":1,\"129\":1,\"487\":1,\"491\":1,\"495\":1,\"499\":1,\"503\":1,\"507\":1}}],[\"可以根据文件结构将它们转换为不同的页面\",{\"1\":{\"9\":1}}],[\"可简称为socket\",{\"1\":{\"56\":1}}],[\"而非再次进行全量复制\",{\"1\":{\"621\":1}}],[\"而非公平的semaphore则可能允许线程饥饿\",{\"1\":{\"313\":1}}],[\"而数据重复\",{\"1\":{\"484\":1}}],[\"而数据长度是200字节\",{\"1\":{\"57\":1}}],[\"而通过阻塞队列来进行通信\",{\"1\":{\"484\":1}}],[\"而消费者从主题中获取消息\",{\"1\":{\"484\":1}}],[\"而monitorexit是插入到方法结束处和异常处\",{\"1\":{\"476\":1}}],[\"而must\",{\"1\":{\"88\":1}}],[\"而对应\",{\"1\":{\"474\":1}}],[\"而言\",{\"1\":{\"474\":1}}],[\"而垃圾收集程序运行在另一个cpu上\",{\"1\":{\"376\":1}}],[\"而softreference和byte数组则是软引用\",{\"1\":{\"364\":2}}],[\"而创建ab的时候已经在串池中放入了\",{\"1\":{\"341\":1}}],[\"而线程通信关注的是线程之间如何协作完成任务\",{\"1\":{\"283\":1}}],[\"而且触发\",{\"1\":{\"394\":1}}],[\"而且替代了cms\",{\"1\":{\"380\":1}}],[\"而且其他线程可以从主内存中读取最新的值\",{\"1\":{\"284\":1}}],[\"而且必须是用户高度信任的应用\",{\"1\":{\"254\":1}}],[\"而且所有与资源服务器的通信都在后端完成\",{\"1\":{\"252\":1}}],[\"而且读取完之后可以把他的收件箱进行清楚\",{\"1\":{\"115\":1,\"533\":1}}],[\"而不需要存储其所有值\",{\"1\":{\"541\":1}}],[\"而不需要针对每个用户进行单独的设置\",{\"1\":{\"235\":1}}],[\"而不是同步到mq\",{\"1\":{\"553\":1}}],[\"而不是直接传递的\",{\"1\":{\"439\":1}}],[\"而不是在各个线程的缓存中\",{\"1\":{\"277\":1}}],[\"而不是针对用户的\",{\"1\":{\"255\":1}}],[\"而不可以用于全局变量的声明与赋值\",{\"1\":{\"134\":1}}],[\"而每个角色又可以具有一个或多个权限\",{\"1\":{\"235\":1}}],[\"而如果switch没有表达式\",{\"1\":{\"142\":1}}],[\"而如果是普通的粉丝\",{\"1\":{\"115\":1,\"533\":1}}],[\"而是将db中的id数据利用哈希思想\",{\"1\":{\"541\":1}}],[\"而是很长的一个\",{\"1\":{\"541\":1}}],[\"而是直接从阻塞队列里取\",{\"1\":{\"484\":1}}],[\"而是采取解释执行的方式运行\",{\"1\":{\"469\":1}}],[\"而是把类加载请求委派给bootstrapclassloader去完成\",{\"1\":{\"460\":1}}],[\"而是把类加载请求委派给父类加载器extclassloader去完成\",{\"1\":{\"460\":1}}],[\"而是记录这段内存的起始地址\",{\"1\":{\"367\":1}}],[\"而是通过unsafe\",{\"1\":{\"350\":1}}],[\"而是为每个用户的密码生成随机字节\",{\"1\":{\"198\":1}}],[\"而是跳出整个switch\",{\"1\":{\"142\":1}}],[\"而是系统分析用户到底想要什么\",{\"1\":{\"115\":1,\"533\":1}}],[\"而是701\",{\"1\":{\"57\":1}}],[\"而es中不同type下名称相同的filed最终在lucene中的处理方式是一样的\",{\"1\":{\"89\":1}}],[\"而序号30为止的数\",{\"1\":{\"59\":1}}],[\"而确认号是31\",{\"1\":{\"59\":1}}],[\"而tcp的全部功能都体现在它首部中各字段的作用\",{\"1\":{\"57\":1}}],[\"而tcp在合适的时候把数据发送出去\",{\"1\":{\"55\":1}}],[\"而同一个端口号也可以出现在多个不同的tcp连接中\",{\"1\":{\"56\":1}}],[\"而\",{\"1\":{\"56\":1,\"57\":1,\"142\":1,\"283\":3,\"312\":1,\"441\":1,\"474\":1,\"478\":1}}],[\"分担服务器负载\",{\"1\":{\"619\":1}}],[\"分页\",{\"1\":{\"537\":1}}],[\"分批完成写入redis\",{\"1\":{\"536\":1}}],[\"分布式锁\",{\"1\":{\"513\":1,\"572\":1}}],[\"分片存储\",{\"1\":{\"484\":1}}],[\"分数越高的更好\",{\"1\":{\"471\":1}}],[\"分层编译\",{\"0\":{\"469\":1}}],[\"分别是我们要预计插入的数据和我们所期望的误判率\",{\"1\":{\"582\":1,\"602\":1,\"613\":1,\"656\":1,\"667\":1}}],[\"分别是两个端点主机中的端口号\",{\"1\":{\"56\":1}}],[\"分别是两个端点主机的ip地址\",{\"1\":{\"56\":1}}],[\"分别放入\",{\"1\":{\"430\":1}}],[\"分两次压入\",{\"1\":{\"410\":1}}],[\"分区则是将堆空间划分连续几个不同小区间\",{\"1\":{\"381\":1}}],[\"分代是按对象的生命周期划分\",{\"1\":{\"381\":1}}],[\"分代垃圾回收\",{\"0\":{\"370\":1}}],[\"分析对象头\",{\"1\":{\"417\":1,\"425\":1}}],[\"分析过程\",{\"1\":{\"400\":1}}],[\"分析的\",{\"1\":{\"357\":1}}],[\"分析\",{\"0\":{\"357\":1,\"372\":1,\"411\":1},\"1\":{\"411\":1,\"471\":1}}],[\"分配空间在准备阶段完成\",{\"1\":{\"451\":1}}],[\"分配\",{\"1\":{\"410\":1}}],[\"分配栈帧内存\",{\"0\":{\"409\":1}}],[\"分配内存\",{\"1\":{\"373\":1}}],[\"分配完毕\",{\"1\":{\"351\":2}}],[\"分配回收成本较高\",{\"1\":{\"348\":1}}],[\"分支都是唯一的\",{\"1\":{\"142\":1}}],[\"分支语句\",{\"1\":{\"139\":1}}],[\"分割为\",{\"1\":{\"90\":1}}],[\"分词效果\",{\"1\":{\"90\":1}}],[\"分词结果\",{\"1\":{\"90\":1}}],[\"分词器\",{\"1\":{\"90\":2}}],[\"分词\",{\"0\":{\"90\":1}}],[\"分隔开的能力\",{\"1\":{\"88\":1}}],[\"分类为\",{\"1\":{\"27\":1,\"675\":1}}],[\"即写\",{\"1\":{\"619\":1}}],[\"即多个实例同时更新会出事\",{\"1\":{\"592\":1}}],[\"即尝试获得对象的锁\",{\"1\":{\"476\":1}}],[\"即时编译器\",{\"1\":{\"469\":2}}],[\"即时编译器编译执行\",{\"1\":{\"469\":4}}],[\"即时编译\",{\"0\":{\"468\":1}}],[\"即jdk1\",{\"1\":{\"461\":1}}],[\"即类加载器\",{\"1\":{\"448\":1}}],[\"即常量池\",{\"1\":{\"448\":1}}],[\"即方法\",{\"1\":{\"448\":1}}],[\"即成员变量\",{\"1\":{\"448\":1}}],[\"即父类\",{\"1\":{\"448\":1}}],[\"即枚举元素对应所在的位置\",{\"1\":{\"442\":1}}],[\"即未传递参数时\",{\"1\":{\"439\":1}}],[\"即泛型信息在编译为字节码之后就丢失了\",{\"1\":{\"437\":1}}],[\"即调用\",{\"1\":{\"435\":1}}],[\"即调用父类\",{\"1\":{\"435\":1}}],[\"即支持多态\",{\"1\":{\"416\":2}}],[\"即cpu用于运行用户代码的时间与cpu总消耗时间的比值\",{\"1\":{\"376\":1}}],[\"即一般说的native方法\",{\"1\":{\"356\":1}}],[\"即一次握手交换3个报文\",{\"1\":{\"62\":1}}],[\"即计数变为0时\",{\"1\":{\"353\":1}}],[\"即没有可用的许可\",{\"1\":{\"313\":1}}],[\"即发生竞争\",{\"1\":{\"305\":1}}],[\"即按照\",{\"1\":{\"302\":1}}],[\"即为\",{\"1\":{\"302\":1,\"422\":1}}],[\"即语法仍然是\",{\"1\":{\"301\":1}}],[\"即可进入\",{\"1\":{\"278\":1}}],[\"即有可能多个用户共享同一个令牌\",{\"1\":{\"255\":1}}],[\"即在命令行下请求令牌\",{\"1\":{\"255\":1}}],[\"即用户\",{\"1\":{\"242\":1}}],[\"即使数据可能陈旧或不完整\",{\"1\":{\"628\":1,\"638\":1}}],[\"即使慢点\",{\"1\":{\"592\":1}}],[\"即使这两个类来源于同一个\",{\"1\":{\"457\":1}}],[\"即使\",{\"1\":{\"285\":1}}],[\"即使明文密码相同\",{\"1\":{\"200\":1}}],[\"即使他们里面有相同名称的列也不影响使用\",{\"1\":{\"89\":1}}],[\"即该报文段包括一个对已被成功接收的报文段的确认\",{\"1\":{\"57\":1}}],[\"即15\",{\"1\":{\"57\":1}}],[\"即4个字节\",{\"1\":{\"57\":1}}],[\"即运输层和应用层之间的一种接口\",{\"1\":{\"56\":1}}],[\"即\",{\"1\":{\"56\":2,\"285\":1,\"410\":1,\"422\":1,\"442\":1,\"448\":1,\"464\":1,\"472\":1}}],[\"即两个套接字\",{\"1\":{\"56\":1}}],[\"套接字socket=\",{\"1\":{\"56\":1}}],[\"套接字的表示方法是在点分十进制的\",{\"1\":{\"56\":1}}],[\"cc\",{\"1\":{\"554\":1}}],[\"ccanal\",{\"1\":{\"553\":1}}],[\"central\",{\"1\":{\"526\":1}}],[\"c1\",{\"1\":{\"469\":4}}],[\"cvf\",{\"1\":{\"459\":1}}],[\"c2\",{\"1\":{\"455\":2,\"469\":2}}],[\"c++\",{\"1\":{\"448\":1}}],[\"cinittest\",{\"1\":{\"415\":1}}],[\"cinit\",{\"1\":{\"415\":3,\"456\":1}}],[\"city\",{\"1\":{\"85\":1,\"89\":1}}],[\"cm\",{\"1\":{\"382\":1}}],[\"cms收集器的运行过程分为下列4步\",{\"1\":{\"379\":1}}],[\"cms\",{\"1\":{\"379\":2,\"384\":1,\"392\":1,\"395\":2,\"396\":1}}],[\"cmsinitiatingoccupancyfraction=percent\",{\"1\":{\"379\":1,\"395\":1}}],[\"cms多线程的垃圾收集器\",{\"1\":{\"376\":1}}],[\"cmd\",{\"1\":{\"117\":3}}],[\"cd\",{\"1\":{\"343\":1}}],[\"cdots\",{\"1\":{\"18\":1}}],[\"cw\",{\"1\":{\"338\":3}}],[\"cb\",{\"1\":{\"316\":3}}],[\"cyclicbarrier\",{\"0\":{\"316\":1},\"1\":{\"277\":2,\"316\":5}}],[\"credential可以通过authentication对象的getcredentials\",{\"1\":{\"222\":1}}],[\"credentials\",{\"1\":{\"222\":1,\"223\":2,\"251\":1,\"254\":1,\"255\":1}}],[\"credential和authority信息\",{\"1\":{\"222\":1}}],[\"creates\",{\"1\":{\"639\":2}}],[\"createnewfilename\",{\"1\":{\"527\":1}}],[\"createuser\",{\"1\":{\"176\":1,\"188\":1,\"193\":1,\"194\":1}}],[\"createpost\",{\"1\":{\"98\":2,\"102\":2,\"110\":1,\"121\":2}}],[\"createposthandler\",{\"0\":{\"121\":1},\"1\":{\"98\":2,\"102\":2,\"121\":2}}],[\"createtime\",{\"1\":{\"91\":1,\"93\":1}}],[\"created\",{\"1\":{\"85\":3}}],[\"create\",{\"1\":{\"66\":2,\"70\":2,\"74\":2,\"78\":2,\"85\":1,\"90\":1,\"91\":2,\"92\":2,\"98\":3,\"102\":3,\"121\":1,\"126\":2,\"130\":2,\"179\":3,\"350\":1,\"488\":2,\"492\":2,\"496\":2,\"500\":2,\"504\":2,\"508\":2,\"526\":1,\"540\":1,\"552\":1,\"559\":1,\"566\":1,\"581\":1,\"601\":1,\"612\":1,\"655\":1,\"666\":1}}],[\"createindex\",{\"1\":{\"66\":2,\"70\":2,\"74\":2,\"78\":2,\"92\":2,\"98\":2,\"102\":2,\"126\":2,\"130\":2,\"488\":2,\"492\":2,\"496\":2,\"500\":2,\"504\":2,\"508\":2}}],[\"cross\",{\"1\":{\"220\":1}}],[\"cj\",{\"1\":{\"181\":1}}],[\"csdn\",{\"1\":{\"481\":2,\"554\":1}}],[\"css是一个cdn地址\",{\"1\":{\"164\":1}}],[\"csrf隐藏字段\",{\"1\":{\"204\":1}}],[\"csrf\",{\"1\":{\"156\":1,\"165\":1,\"196\":4}}],[\"child\",{\"1\":{\"639\":1,\"640\":1}}],[\"choose\",{\"1\":{\"441\":2}}],[\"chop\",{\"1\":{\"289\":1}}],[\"checking\",{\"1\":{\"645\":1}}],[\"check\",{\"1\":{\"526\":1}}],[\"checkcast\",{\"1\":{\"437\":1,\"438\":1}}],[\"checksum\",{\"1\":{\"406\":1}}],[\"checks\",{\"1\":{\"141\":1}}],[\"change\",{\"1\":{\"640\":1}}],[\"changepassword\",{\"1\":{\"188\":1}}],[\"channel\",{\"1\":{\"560\":1,\"567\":1}}],[\"charset=\",{\"1\":{\"267\":1}}],[\"charset=utf\",{\"1\":{\"209\":1,\"212\":1,\"215\":1,\"218\":1,\"225\":1,\"231\":1}}],[\"char\",{\"1\":{\"90\":4,\"387\":2,\"412\":1}}],[\"c=2\",{\"1\":{\"139\":1}}],[\"c\",{\"1\":{\"98\":13,\"102\":13,\"121\":12,\"122\":8,\"134\":3,\"138\":2,\"139\":4,\"142\":2,\"148\":6,\"294\":1,\"303\":5,\"326\":2,\"343\":1,\"405\":2,\"406\":2,\"441\":4,\"451\":4,\"452\":4,\"455\":2,\"456\":3,\"460\":8,\"466\":4,\"558\":1,\"568\":1}}],[\"cluster\",{\"1\":{\"568\":1}}],[\"clustering\",{\"1\":{\"561\":1}}],[\"cli\",{\"1\":{\"554\":1}}],[\"clients\",{\"1\":{\"638\":2}}],[\"clients<\",{\"1\":{\"525\":1,\"561\":1}}],[\"clientexample\",{\"1\":{\"558\":1}}],[\"client在不同尝试获取数据\",{\"1\":{\"554\":1}}],[\"client提供了entryhandler\",{\"1\":{\"554\":1}}],[\"client来同步canal\",{\"1\":{\"554\":1}}],[\"client客户端监听canal\",{\"1\":{\"551\":1}}],[\"clientauthenticationmethod\",{\"1\":{\"271\":1}}],[\"clientregistration\",{\"1\":{\"271\":2}}],[\"clientname\",{\"1\":{\"266\":1,\"267\":1,\"271\":1}}],[\"client<\",{\"1\":{\"260\":1}}],[\"client\",{\"0\":{\"554\":1},\"1\":{\"66\":3,\"70\":3,\"74\":3,\"78\":3,\"90\":1,\"92\":2,\"93\":2,\"94\":2,\"98\":3,\"102\":3,\"106\":1,\"107\":1,\"108\":1,\"109\":1,\"116\":1,\"117\":1,\"126\":3,\"130\":3,\"242\":1,\"251\":1,\"255\":1,\"258\":1,\"259\":1,\"265\":3,\"267\":1,\"271\":1,\"376\":1,\"488\":3,\"492\":3,\"496\":3,\"500\":3,\"504\":3,\"508\":3,\"552\":1,\"554\":1,\"558\":2,\"559\":1,\"566\":1,\"568\":4,\"637\":1}}],[\"cl\",{\"1\":{\"455\":2,\"466\":2}}],[\"clone\",{\"1\":{\"424\":2,\"443\":1}}],[\"close\",{\"1\":{\"98\":1,\"102\":1,\"444\":8}}],[\"clean\",{\"1\":{\"350\":2}}],[\"cleaner\",{\"1\":{\"350\":5}}],[\"classpath\",{\"1\":{\"457\":1,\"459\":3,\"460\":1,\"461\":1}}],[\"class<s>\",{\"1\":{\"466\":1}}],[\"class<\",{\"1\":{\"451\":1,\"452\":1,\"458\":1,\"460\":2,\"466\":1}}],[\"classnotfoundexception\",{\"1\":{\"451\":1,\"452\":1,\"455\":1,\"458\":1,\"460\":3,\"466\":1}}],[\"class结构中有vtable\",{\"1\":{\"417\":1}}],[\"classfile\",{\"1\":{\"406\":1}}],[\"class文件\",{\"1\":{\"339\":2}}],[\"classwriter\",{\"1\":{\"338\":3}}],[\"classloader\",{\"1\":{\"322\":1,\"338\":6,\"451\":3,\"452\":3,\"455\":2,\"457\":3,\"461\":1,\"463\":1,\"464\":2,\"466\":1}}],[\"classlayout\",{\"1\":{\"297\":4,\"298\":3,\"299\":4,\"300\":8}}],[\"class\",{\"0\":{\"422\":1},\"1\":{\"159\":1,\"176\":1,\"181\":1,\"182\":1,\"184\":1,\"185\":1,\"188\":1,\"203\":1,\"209\":1,\"212\":1,\"215\":1,\"218\":1,\"223\":1,\"225\":1,\"266\":1,\"285\":1,\"286\":1,\"289\":3,\"297\":4,\"303\":1,\"319\":1,\"322\":1,\"326\":2,\"333\":1,\"338\":3,\"339\":1,\"340\":1,\"341\":6,\"343\":1,\"345\":1,\"350\":1,\"351\":3,\"364\":2,\"365\":1,\"373\":1,\"374\":1,\"375\":1,\"397\":5,\"398\":2,\"400\":6,\"401\":1,\"403\":2,\"405\":1,\"406\":7,\"411\":1,\"412\":1,\"413\":3,\"414\":1,\"415\":2,\"416\":2,\"417\":4,\"421\":1,\"422\":1,\"423\":4,\"424\":1,\"425\":2,\"427\":2,\"428\":4,\"429\":5,\"430\":2,\"431\":2,\"432\":1,\"433\":2,\"434\":2,\"435\":2,\"436\":3,\"437\":3,\"438\":8,\"439\":2,\"440\":4,\"441\":4,\"442\":3,\"443\":2,\"444\":4,\"445\":4,\"446\":6,\"448\":3,\"450\":1,\"451\":4,\"452\":4,\"455\":10,\"456\":4,\"457\":1,\"458\":3,\"459\":4,\"460\":2,\"463\":3,\"464\":3,\"465\":1,\"466\":2,\"469\":1,\"470\":1,\"471\":2,\"472\":3,\"474\":1,\"476\":1,\"480\":1,\"527\":2,\"530\":1,\"532\":2,\"535\":1,\"554\":5,\"561\":4}}],[\"cpu占用过高\",{\"1\":{\"328\":1}}],[\"cpu\",{\"1\":{\"278\":1,\"324\":1,\"328\":1,\"376\":1,\"377\":2,\"387\":1,\"391\":1,\"472\":4}}],[\"cp\",{\"1\":{\"90\":1,\"397\":1,\"419\":1}}],[\"cnady6\",{\"1\":{\"441\":1}}],[\"cn\",{\"1\":{\"90\":11,\"146\":1,\"151\":1,\"400\":1,\"411\":1,\"417\":1,\"420\":1,\"438\":1,\"445\":2,\"451\":1,\"452\":2,\"455\":3,\"458\":4,\"459\":4,\"466\":6,\"541\":1}}],[\"cnblogs\",{\"1\":{\"81\":1,\"583\":2,\"603\":2,\"614\":2,\"657\":2,\"668\":2,\"726\":1,\"729\":1}}],[\"customized\",{\"1\":{\"560\":1,\"567\":1}}],[\"customer\",{\"1\":{\"85\":20}}],[\"cuckoo过滤器是一种概率数据结构\",{\"1\":{\"522\":1}}],[\"cuckoo\",{\"1\":{\"522\":1}}],[\"currently\",{\"1\":{\"639\":1}}],[\"currenttimemillis\",{\"1\":{\"530\":1,\"534\":1}}],[\"currentthread\",{\"1\":{\"455\":2,\"466\":1}}],[\"current\",{\"1\":{\"471\":1,\"532\":3,\"537\":7,\"639\":2}}],[\"curd\",{\"1\":{\"81\":2,\"726\":2,\"729\":2}}],[\"calculated\",{\"1\":{\"644\":1}}],[\"called\",{\"1\":{\"639\":1}}],[\"callback\",{\"1\":{\"253\":1}}],[\"cause\",{\"1\":{\"638\":1}}],[\"cache\",{\"1\":{\"469\":1}}],[\"ca\",{\"1\":{\"397\":1,\"398\":2,\"399\":2,\"400\":3}}],[\"card\",{\"1\":{\"385\":1}}],[\"cap\",{\"1\":{\"350\":7}}],[\"capacity\",{\"1\":{\"350\":3}}],[\"cast\",{\"1\":{\"466\":1}}],[\"cas\",{\"0\":{\"309\":1},\"1\":{\"294\":3,\"301\":4,\"302\":2,\"309\":3,\"312\":1}}],[\"case后可以有多个常量值\",{\"1\":{\"143\":1}}],[\"case后的常量值不能重复\",{\"1\":{\"143\":1}}],[\"case中的表达式是可选的\",{\"1\":{\"143\":1}}],[\"case\",{\"1\":{\"142\":12,\"143\":5,\"144\":7,\"441\":11,\"442\":6,\"644\":1}}],[\"catch块执行完\",{\"1\":{\"430\":1}}],[\"catch块\",{\"1\":{\"430\":1}}],[\"catch\",{\"0\":{\"427\":1,\"428\":1,\"429\":1},\"1\":{\"297\":2,\"298\":2,\"299\":1,\"316\":3,\"319\":1,\"333\":1,\"345\":1,\"350\":2,\"427\":1,\"428\":3,\"429\":1,\"430\":3,\"444\":7,\"460\":1,\"464\":3,\"466\":2,\"527\":1,\"561\":1}}],[\"cat\",{\"1\":{\"85\":6,\"417\":2}}],[\"can\",{\"1\":{\"635\":1,\"637\":1,\"638\":2,\"639\":3,\"641\":1,\"642\":1,\"645\":1}}],[\"cannot\",{\"1\":{\"466\":1}}],[\"cannel\",{\"1\":{\"81\":1,\"726\":1,\"729\":1}}],[\"candy9\",{\"1\":{\"444\":3}}],[\"candy7\",{\"1\":{\"442\":2}}],[\"candy6\",{\"1\":{\"441\":5}}],[\"candy5\",{\"1\":{\"440\":6}}],[\"candy4\",{\"1\":{\"439\":3}}],[\"candy\",{\"1\":{\"438\":2}}],[\"candy3\",{\"1\":{\"437\":1,\"438\":2}}],[\"candy2\",{\"1\":{\"436\":3}}],[\"candy11$1\",{\"1\":{\"446\":5}}],[\"candy11\",{\"1\":{\"446\":2}}],[\"candy10$1\",{\"1\":{\"446\":2}}],[\"candy10\",{\"1\":{\"446\":2}}],[\"candy1\",{\"1\":{\"435\":3}}],[\"canaladapters\",{\"1\":{\"568\":1}}],[\"canalapplication\",{\"1\":{\"554\":2}}],[\"canal支持把数据同步到的组件有\",{\"1\":{\"565\":1}}],[\"canal同步\",{\"1\":{\"561\":1}}],[\"canalsynlistenner\",{\"1\":{\"561\":1}}],[\"canalsyndto\",{\"1\":{\"561\":11}}],[\"canalsyndto对象是根据mq中的消息内容进行封装的\",{\"1\":{\"561\":1}}],[\"canalsharp\",{\"1\":{\"558\":1}}],[\"canal会把消息推送给mq\",{\"1\":{\"558\":1}}],[\"canalclient\",{\"1\":{\"558\":1}}],[\"canaltable\",{\"1\":{\"554\":2}}],[\"canal的地址\",{\"1\":{\"554\":1,\"568\":1}}],[\"canaldb\",{\"1\":{\"552\":1,\"553\":1,\"559\":1,\"566\":1,\"568\":1}}],[\"canal解决mysql和redis数据同步\",{\"0\":{\"551\":1,\"557\":1,\"564\":1}}],[\"canal\",{\"0\":{\"568\":1},\"1\":{\"81\":5,\"552\":6,\"553\":13,\"554\":4,\"558\":9,\"559\":6,\"560\":17,\"561\":1,\"566\":6,\"567\":17,\"568\":12,\"569\":1,\"726\":5,\"729\":5},\"2\":{\"556\":1,\"563\":1,\"571\":1}}],[\"canal也是这个原理\",{\"1\":{\"81\":1,\"726\":1,\"729\":1}}],[\"cfg\",{\"1\":{\"66\":2,\"70\":2,\"74\":2,\"78\":2,\"90\":3,\"98\":4,\"102\":4,\"126\":2,\"130\":2,\"488\":2,\"492\":2,\"496\":2,\"500\":2,\"504\":2,\"508\":2}}],[\"could\",{\"1\":{\"466\":1}}],[\"countdown\",{\"1\":{\"315\":4}}],[\"countdownlatch等\",{\"1\":{\"310\":1}}],[\"countdownlatch\",{\"0\":{\"315\":1},\"1\":{\"277\":1,\"315\":2,\"316\":1}}],[\"count++\",{\"1\":{\"285\":1,\"476\":1,\"540\":1,\"581\":1,\"601\":1,\"612\":1,\"655\":1,\"666\":1}}],[\"counter++\",{\"1\":{\"289\":1}}],[\"counter\",{\"1\":{\"280\":2,\"289\":1,\"324\":1}}],[\"count\",{\"1\":{\"88\":5,\"117\":2,\"119\":1,\"122\":1,\"285\":1,\"397\":10,\"476\":1,\"522\":2,\"531\":4,\"535\":1,\"540\":3,\"581\":2,\"601\":2,\"612\":2,\"655\":2,\"666\":2}}],[\"copyproperties\",{\"1\":{\"530\":1,\"532\":2}}],[\"copyonwritearraylist<>\",{\"1\":{\"463\":1}}],[\"copyonwritearraylist<driverinfo>\",{\"1\":{\"463\":1}}],[\"copyof\",{\"1\":{\"333\":1}}],[\"copy\",{\"1\":{\"371\":1,\"635\":2}}],[\"correctly\",{\"1\":{\"642\":1,\"643\":1}}],[\"cors\",{\"1\":{\"220\":2}}],[\"core<\",{\"1\":{\"471\":1,\"526\":1,\"537\":2,\"561\":1}}],[\"core\",{\"1\":{\"188\":1,\"193\":1,\"234\":1,\"238\":1}}],[\"collectors\",{\"1\":{\"530\":2,\"532\":2,\"536\":1}}],[\"collect\",{\"1\":{\"530\":2,\"532\":2,\"536\":1}}],[\"collections\",{\"1\":{\"530\":1,\"532\":1,\"537\":2}}],[\"collection\",{\"0\":{\"381\":1,\"385\":1},\"1\":{\"380\":3}}],[\"collection<\",{\"1\":{\"223\":1}}],[\"collection<grantedauthority>\",{\"1\":{\"188\":1,\"230\":1}}],[\"columbus\",{\"1\":{\"85\":1}}],[\"codebear\",{\"1\":{\"583\":1,\"603\":1,\"614\":1,\"657\":1,\"668\":1}}],[\"code\",{\"1\":{\"209\":1,\"212\":1,\"215\":1,\"218\":1,\"223\":1,\"225\":1,\"231\":1,\"251\":1,\"252\":1,\"263\":1,\"265\":1,\"271\":1,\"289\":1,\"338\":4,\"341\":2,\"345\":1,\"351\":1,\"364\":1,\"365\":1,\"373\":1,\"400\":2,\"406\":3,\"411\":1,\"414\":2,\"415\":2,\"416\":1,\"427\":1,\"428\":1,\"429\":1,\"430\":1,\"431\":1,\"432\":1,\"433\":2,\"437\":1,\"438\":3,\"451\":2,\"469\":1,\"471\":1}}],[\"codeserverbusy\",{\"1\":{\"98\":4,\"102\":4,\"121\":3}}],[\"codeneedlogin\",{\"1\":{\"98\":1,\"102\":1,\"121\":1,\"122\":1}}],[\"codeinvalidparam\",{\"1\":{\"98\":1,\"102\":1,\"121\":1,\"122\":2}}],[\"co\",{\"1\":{\"85\":1}}],[\"connected\",{\"1\":{\"635\":1,\"642\":2,\"644\":1}}],[\"connect\",{\"1\":{\"526\":1,\"645\":1}}],[\"connections\",{\"1\":{\"645\":1}}],[\"connection\",{\"1\":{\"444\":1,\"526\":2,\"637\":1}}],[\"connector\",{\"1\":{\"180\":1,\"463\":1}}],[\"considered\",{\"1\":{\"643\":1}}],[\"consumerproperties\",{\"1\":{\"568\":1}}],[\"consumer\",{\"1\":{\"561\":1,\"568\":1}}],[\"consumergroup\",{\"1\":{\"561\":1}}],[\"console\",{\"1\":{\"422\":1,\"423\":1}}],[\"constants\",{\"1\":{\"448\":1}}],[\"constant\",{\"1\":{\"397\":3,\"400\":15,\"406\":1,\"470\":1}}],[\"const\",{\"1\":{\"138\":8,\"139\":3}}],[\"cond\",{\"1\":{\"280\":2}}],[\"conditions\",{\"1\":{\"641\":1}}],[\"condition\",{\"1\":{\"141\":2,\"277\":1}}],[\"concgcthreads=threads\",{\"1\":{\"379\":1}}],[\"concurrent\",{\"1\":{\"277\":4,\"286\":1,\"319\":1,\"379\":2,\"380\":1,\"385\":1,\"471\":1}}],[\"concatenatedwith\",{\"1\":{\"56\":1}}],[\"conf\",{\"1\":{\"90\":3,\"553\":2,\"560\":2,\"567\":2,\"568\":1}}],[\"configurable\",{\"1\":{\"639\":1}}],[\"configuration\",{\"1\":{\"176\":1,\"181\":1,\"522\":1,\"554\":1,\"636\":1,\"641\":1}}],[\"configures\",{\"1\":{\"642\":1}}],[\"configure\",{\"1\":{\"635\":2,\"638\":1,\"640\":1}}],[\"config中的ikanalyzer\",{\"1\":{\"90\":1}}],[\"config\",{\"1\":{\"66\":1,\"70\":1,\"74\":1,\"78\":1,\"90\":1,\"98\":2,\"102\":2,\"126\":1,\"130\":1,\"176\":1,\"188\":1,\"209\":1,\"212\":1,\"215\":1,\"218\":1,\"225\":1,\"488\":1,\"492\":1,\"496\":1,\"500\":1,\"504\":1,\"508\":1,\"560\":2,\"567\":2,\"568\":1,\"637\":1,\"638\":1}}],[\"control\",{\"1\":{\"235\":1}}],[\"control头来保护经过身份验证的资源\",{\"1\":{\"165\":1}}],[\"controller\",{\"0\":{\"185\":1,\"192\":1},\"1\":{\"122\":1,\"159\":2,\"185\":1,\"203\":2,\"223\":2,\"266\":2}}],[\"continue\",{\"1\":{\"117\":1,\"639\":1}}],[\"container\",{\"1\":{\"90\":1}}],[\"content\",{\"1\":{\"85\":4,\"91\":3,\"93\":1,\"94\":1,\"165\":1}}],[\"context\",{\"1\":{\"66\":1,\"70\":1,\"74\":1,\"78\":1,\"90\":6,\"92\":1,\"93\":1,\"94\":2,\"98\":2,\"102\":2,\"121\":1,\"122\":1,\"126\":1,\"130\":1,\"163\":1,\"223\":2,\"488\":1,\"492\":1,\"496\":1,\"500\":1,\"504\":1,\"508\":1}}],[\"computernetwork\",{\"0\":{\"734\":1}}],[\"component\",{\"1\":{\"554\":1,\"561\":1}}],[\"component注解\",{\"1\":{\"189\":1}}],[\"compilercontrol\",{\"1\":{\"471\":4}}],[\"compilecommand=dontinline\",{\"1\":{\"470\":1}}],[\"compiled\",{\"1\":{\"406\":1}}],[\"completablefuture是java\",{\"1\":{\"318\":1}}],[\"completablefuture\",{\"0\":{\"318\":1}}],[\"compare\",{\"1\":{\"305\":1,\"309\":1}}],[\"communicated\",{\"1\":{\"645\":1}}],[\"community\",{\"1\":{\"91\":2}}],[\"communityid\",{\"1\":{\"91\":1,\"93\":1,\"110\":1}}],[\"command\",{\"1\":{\"637\":1,\"638\":1,\"645\":1}}],[\"commands\",{\"1\":{\"637\":1,\"638\":2}}],[\"command增强安全性\",{\"1\":{\"629\":1,\"639\":1}}],[\"commitbatch\",{\"1\":{\"568\":1}}],[\"comments\",{\"1\":{\"527\":1}}],[\"comment>\",{\"1\":{\"90\":1}}],[\"commence\",{\"1\":{\"218\":1}}],[\"commonoauth2provider是一个预定义的通用oauth2provider\",{\"1\":{\"271\":1}}],[\"commonoauth2provider\",{\"0\":{\"271\":1}}],[\"commonid\",{\"1\":{\"109\":2,\"112\":2}}],[\"common\",{\"1\":{\"85\":1,\"156\":1}}],[\"com\",{\"1\":{\"65\":5,\"69\":5,\"73\":5,\"77\":5,\"81\":1,\"85\":2,\"90\":2,\"94\":2,\"97\":5,\"98\":1,\"101\":5,\"102\":1,\"125\":5,\"129\":5,\"133\":1,\"156\":1,\"159\":1,\"176\":1,\"182\":1,\"183\":2,\"184\":2,\"185\":1,\"188\":1,\"203\":1,\"209\":1,\"212\":1,\"215\":1,\"218\":1,\"223\":1,\"225\":1,\"251\":1,\"253\":1,\"264\":1,\"266\":1,\"271\":3,\"333\":1,\"338\":1,\"339\":2,\"343\":1,\"412\":1,\"463\":3,\"481\":1,\"487\":5,\"491\":5,\"495\":5,\"499\":5,\"503\":5,\"507\":5,\"553\":1,\"558\":4,\"560\":1,\"567\":1,\"568\":2,\"583\":3,\"603\":3,\"614\":3,\"657\":3,\"668\":3,\"726\":1,\"729\":1}}],[\"也常称作slave\",{\"1\":{\"635\":1}}],[\"也有可能产生死锁的问题\",{\"1\":{\"572\":1}}],[\"也需要从set集合中进行删除\",{\"1\":{\"532\":1}}],[\"也\",{\"1\":{\"480\":1}}],[\"也同时保证代码块内变量的可见性\",{\"1\":{\"480\":1}}],[\"也运行到了\",{\"1\":{\"476\":1}}],[\"也没有值\",{\"1\":{\"400\":1}}],[\"也无法容纳该对象时\",{\"1\":{\"374\":1}}],[\"也是类似\",{\"1\":{\"474\":1}}],[\"也是可以让\",{\"1\":{\"463\":1}}],[\"也是java并发包中的核心组件之一\",{\"1\":{\"310\":1}}],[\"也是最安全的\",{\"1\":{\"252\":1}}],[\"也就是rest模式\",{\"1\":{\"568\":1}}],[\"也就是我们经常说到的削峰\",{\"1\":{\"484\":1}}],[\"也就是如果在\",{\"1\":{\"431\":1}}],[\"也就是检测2~4行\",{\"1\":{\"427\":1}}],[\"也就是\",{\"1\":{\"376\":1}}],[\"也就是没有竞争\",{\"1\":{\"301\":1}}],[\"也就是说一个消息\",{\"1\":{\"484\":1}}],[\"也就是说彼此之间是独立的\",{\"1\":{\"85\":1}}],[\"也就是说\",{\"1\":{\"55\":1,\"484\":1}}],[\"也来执行\",{\"1\":{\"289\":1}}],[\"也不能保证线程安全\",{\"1\":{\"285\":1}}],[\"也不是700\",{\"1\":{\"57\":1}}],[\"也不是运输层的协议端口\",{\"1\":{\"56\":1}}],[\"也可以去使用canal订阅binlog的方式\",{\"1\":{\"592\":1}}],[\"也可以使用9300\",{\"1\":{\"568\":1}}],[\"也可以使用离线api\",{\"1\":{\"133\":1}}],[\"也可以追加\",{\"1\":{\"458\":1}}],[\"也可以在idea控制台输入\",{\"1\":{\"339\":1}}],[\"也可以先unpark后park\",{\"1\":{\"280\":1}}],[\"也允许用户把用户名和密码\",{\"1\":{\"254\":1}}],[\"也叫页面访问量或点击量\",{\"1\":{\"541\":1}}],[\"也叫独立访客量\",{\"1\":{\"541\":1}}],[\"也叫客户端模式\",{\"1\":{\"255\":1}}],[\"也叫简化模式\",{\"1\":{\"253\":1}}],[\"也叫默认值\",{\"1\":{\"136\":1}}],[\"也叫做读写混合\",{\"1\":{\"115\":1,\"533\":1}}],[\"也叫做读扩散\",{\"1\":{\"115\":1,\"533\":1}}],[\"也叫做写扩散\",{\"1\":{\"115\":1,\"533\":1}}],[\"也还是会存在一定时间的延迟\",{\"1\":{\"81\":1,\"726\":1,\"729\":1}}],[\"也还应记住\",{\"1\":{\"56\":1}}],[\"也支持在一个项目中导入不同的客户端版本\",{\"1\":{\"65\":1,\"69\":1,\"73\":1,\"77\":1,\"97\":1,\"101\":1,\"125\":1,\"129\":1,\"487\":1,\"491\":1,\"495\":1,\"499\":1,\"503\":1,\"507\":1}}],[\"​\",{\"1\":{\"56\":5,\"88\":1,\"253\":1}}],[\"但请注意\",{\"1\":{\"629\":1,\"639\":1}}],[\"但在主节点故障时需要手动切换\",{\"1\":{\"624\":1}}],[\"但在jdk\",{\"1\":{\"451\":1}}],[\"但也存在一些问题\",{\"1\":{\"620\":1}}],[\"但我们不能把所有的数据都放入到menber中去\",{\"1\":{\"536\":1}}],[\"但确实存在以下问题\",{\"1\":{\"514\":1}}],[\"但两者的实现细节不一样\",{\"1\":{\"476\":1}}],[\"但多线程下这\",{\"1\":{\"474\":1}}],[\"但如果\",{\"1\":{\"471\":1}}],[\"但不能保证原子性\",{\"1\":{\"480\":1}}],[\"但不做任何处理\",{\"1\":{\"460\":1}}],[\"但不显示这些人的详情\",{\"1\":{\"88\":1}}],[\"但会加载\",{\"1\":{\"455\":2}}],[\"但属于引用类型\",{\"1\":{\"451\":1}}],[\"但\",{\"1\":{\"437\":1,\"448\":2,\"463\":1,\"480\":1}}],[\"但未被exception捕获\",{\"1\":{\"430\":1}}],[\"但目前看不到它的实际地址\",{\"1\":{\"421\":1}}],[\"但原始构造方法内的代码总是在后\",{\"1\":{\"415\":1}}],[\"但此时用户线程\",{\"1\":{\"376\":1}}],[\"但其内部配合\",{\"1\":{\"363\":1}}],[\"但jvm并不能回收直接内存中的内容\",{\"1\":{\"350\":1}}],[\"但读写性能高\",{\"1\":{\"348\":1}}],[\"但字符串的值和拼接的字符串一致\",{\"1\":{\"341\":1}}],[\"但这是a\",{\"1\":{\"341\":1}}],[\"但这个前提是\",{\"1\":{\"136\":1}}],[\"但简单的实现可能不会选择垃圾收集或压缩它\",{\"1\":{\"336\":1}}],[\"但由于\",{\"1\":{\"312\":1}}],[\"但加锁的时间是错开的\",{\"1\":{\"301\":1}}],[\"但没有竞争\",{\"1\":{\"299\":1}}],[\"但偏向锁的对象\",{\"1\":{\"296\":1}}],[\"但条件不满足进入\",{\"1\":{\"289\":1}}],[\"但它显示为null\",{\"1\":{\"460\":1}}],[\"但它在java程序中起到的作用却远超类加载阶段\",{\"1\":{\"457\":1}}],[\"但它的使用场景有限\",{\"1\":{\"286\":1}}],[\"但它并不保证复合操作的原子性\",{\"1\":{\"285\":1}}],[\"但它们的关注点不同\",{\"1\":{\"283\":1}}],[\"但唤醒后并不意味者立刻获得锁\",{\"1\":{\"278\":1}}],[\"但必须是相同的类型\",{\"1\":{\"142\":1}}],[\"但是数据同步这块做不到强一致\",{\"1\":{\"572\":1}}],[\"但是数据库也无此记录\",{\"1\":{\"572\":1}}],[\"但是我在启动的时候出现了一个问题\",{\"1\":{\"568\":1}}],[\"但是如果每个访问的用户都保存到redis中\",{\"1\":{\"541\":1}}],[\"但是如果是普通的\",{\"1\":{\"163\":1}}],[\"但是这个时候还有一个问题\",{\"1\":{\"536\":1}}],[\"但是这些分词器针对于中文的分词\",{\"1\":{\"90\":1}}],[\"但是set集合是不能排序的\",{\"1\":{\"530\":1}}],[\"但是跨分区的幂等性操作是无法实现的\",{\"1\":{\"484\":1}}],[\"但是finally块中的代码只会被执行一次\",{\"1\":{\"430\":1}}],[\"但是在11年左右\",{\"1\":{\"541\":1}}],[\"但是在并发标记过程中\",{\"1\":{\"386\":1}}],[\"但是在单线程运行环境下\",{\"1\":{\"303\":1}}],[\"但是会产生内存碎片\",{\"1\":{\"379\":1}}],[\"但是会占用双倍的内存空间\",{\"1\":{\"369\":1}}],[\"但是软引用还存在\",{\"1\":{\"364\":1}}],[\"但是直接内存中的内存还未被回收\",{\"1\":{\"362\":1}}],[\"但是两个不同的字符串\",{\"1\":{\"341\":1}}],[\"但是可能存在一些非法用户\",{\"1\":{\"576\":1,\"596\":1,\"607\":1,\"650\":1,\"661\":1}}],[\"但是可以通过redis的数据结构和一些模块来实现时间序列数据的存储和分析\",{\"1\":{\"523\":1}}],[\"但是可以使用fallthrough强制执行后面的case代码\",{\"1\":{\"142\":1}}],[\"但是可执行的线程数就会越少\",{\"1\":{\"326\":1}}],[\"但是恶意用户可能会通过sql注入等手段获取到明文密码\",{\"1\":{\"198\":1}}],[\"但是不保证原子性\",{\"1\":{\"283\":1}}],[\"但是不影响登录功能的执行\",{\"1\":{\"164\":1}}],[\"但是不会影响我们之前记录的6\",{\"1\":{\"115\":1,\"534\":1}}],[\"但是\",{\"1\":{\"136\":1}}],[\"但es中不是这样的\",{\"1\":{\"89\":1}}],[\"但重传时间的选择却是tcp最复杂的问题之一\",{\"1\":{\"60\":1}}],[\"但tcp传送的数据单元却是报文段\",{\"1\":{\"57\":1}}],[\"但tcp把应用程序交下来的数据仅仅看成是一连串的无结构的字节流\",{\"1\":{\"55\":1}}],[\"但一定要记住\",{\"1\":{\"56\":1}}],[\"但接收方应用程序收到的字节流必须和发送方应用程序发出的字节流完全一样\",{\"1\":{\"55\":1}}],[\"但接收方的tcp可能只用了4个数据块就把收到的字节流交付上层的应用程序\",{\"1\":{\"55\":1}}],[\"指查询一个不存在的数据\",{\"1\":{\"572\":1}}],[\"指用户线程与垃圾收集线程同时工作\",{\"1\":{\"376\":1}}],[\"指多条垃圾收集线程并行工作\",{\"1\":{\"376\":1}}],[\"指令并行优化的影响\",{\"1\":{\"472\":1}}],[\"指令优化等\",{\"1\":{\"472\":1}}],[\"指令时\",{\"1\":{\"425\":1,\"476\":1}}],[\"指令来调用\",{\"1\":{\"416\":1}}],[\"指令\",{\"1\":{\"412\":1,\"416\":1}}],[\"指令是直接在局部变量\",{\"1\":{\"411\":1}}],[\"指令的执行地址行号\",{\"1\":{\"324\":1}}],[\"指令可能会以不同于编写代码时的顺序执行\",{\"1\":{\"283\":1}}],[\"指向rocketmq的地址\",{\"1\":{\"560\":1}}],[\"指向重量级锁地址\",{\"1\":{\"302\":1}}],[\"指向锁对象\",{\"1\":{\"301\":1}}],[\"指向类的指针\",{\"1\":{\"290\":1}}],[\"指针\",{\"1\":{\"289\":1,\"421\":1}}],[\"指的是以tcp协议把数据同步数据\",{\"1\":{\"553\":1}}],[\"指的是一些非常\",{\"1\":{\"461\":1}}],[\"指的是第三方应用先申请一个授权码\",{\"1\":{\"252\":1}}],[\"指的是流入到进程或从进程流出的字节序列\",{\"1\":{\"55\":1}}],[\"指定圆心\",{\"1\":{\"519\":1,\"535\":1}}],[\"指定堆内存大小\",{\"1\":{\"345\":1}}],[\"指定元空间大小\",{\"1\":{\"338\":1}}],[\"指定永久代内存大小\",{\"1\":{\"338\":1}}],[\"指定栈内存大小\",{\"1\":{\"327\":1}}],[\"指定变量类型\",{\"1\":{\"134\":1}}],[\"指定条件搜索文档\",{\"1\":{\"94\":1}}],[\"指定为keyword\",{\"1\":{\"89\":1}}],[\"指定\",{\"1\":{\"85\":1}}],[\"指定用哪个唯一标识put\",{\"1\":{\"85\":1}}],[\"指定要连接\",{\"1\":{\"66\":1,\"70\":1,\"74\":1,\"78\":1,\"98\":1,\"102\":1,\"126\":1,\"130\":1,\"488\":1,\"492\":1,\"496\":1,\"500\":1,\"504\":1,\"508\":1}}],[\"指端口号拼接到ip地址\",{\"1\":{\"56\":1}}],[\"指南\",{\"2\":{\"7\":1}}],[\"smaller\",{\"1\":{\"641\":1}}],[\"small\",{\"1\":{\"635\":1}}],[\"smart\",{\"1\":{\"90\":2,\"569\":1}}],[\"skip\",{\"1\":{\"537\":1,\"552\":1,\"559\":1,\"566\":1}}],[\"skipped\",{\"1\":{\"88\":1}}],[\"sketch\",{\"1\":{\"522\":2}}],[\"square\",{\"1\":{\"470\":6}}],[\"sql映射\",{\"1\":{\"568\":2}}],[\"sql日志\",{\"1\":{\"181\":1}}],[\"sqlstr\",{\"1\":{\"118\":2}}],[\"sql\",{\"0\":{\"179\":1},\"1\":{\"81\":1,\"88\":2,\"568\":2,\"726\":1,\"729\":1}}],[\"s6=s4\",{\"1\":{\"343\":1}}],[\"s5==s3\",{\"1\":{\"341\":1}}],[\"s5=\",{\"1\":{\"341\":1,\"343\":2}}],[\"s4是由stringbuffer的tostring方法所返回的一个对象\",{\"1\":{\"341\":1}}],[\"s4=s1+s2\",{\"1\":{\"341\":2,\"343\":2}}],[\"s3==s6\",{\"1\":{\"343\":1}}],[\"s3==s5\",{\"1\":{\"343\":1}}],[\"s3==s4\",{\"1\":{\"341\":1,\"343\":1}}],[\"s3=\",{\"1\":{\"341\":1,\"343\":1}}],[\"s3\",{\"1\":{\"341\":2,\"343\":1,\"415\":3}}],[\"s2=\",{\"1\":{\"343\":1}}],[\"s2\",{\"1\":{\"341\":4,\"387\":1,\"415\":2}}],[\"srcdatasources\",{\"1\":{\"568\":2}}],[\"src\",{\"1\":{\"339\":2,\"406\":2}}],[\"srem\",{\"1\":{\"107\":1}}],[\"sb\",{\"1\":{\"326\":15}}],[\"sbuffer\",{\"1\":{\"303\":5}}],[\"slow\",{\"1\":{\"639\":1}}],[\"slot\",{\"1\":{\"289\":4,\"410\":1,\"411\":2,\"415\":2,\"428\":2,\"429\":1,\"438\":3}}],[\"slave\",{\"1\":{\"552\":1,\"559\":1,\"566\":1,\"618\":1}}],[\"slf4j\",{\"1\":{\"527\":1,\"554\":1,\"561\":1}}],[\"sleep\",{\"1\":{\"298\":1,\"315\":3,\"316\":1,\"319\":1,\"375\":2,\"478\":1,\"480\":1}}],[\"sso\",{\"1\":{\"250\":1}}],[\"sweep\",{\"1\":{\"379\":2}}],[\"swap\",{\"1\":{\"305\":1,\"309\":1,\"461\":1}}],[\"swagger测试地址\",{\"1\":{\"195\":1}}],[\"swagger测试\",{\"1\":{\"195\":1}}],[\"switch的注意事项\",{\"1\":{\"143\":1}}],[\"switch是一个条件语句\",{\"1\":{\"142\":1}}],[\"switch语句\",{\"0\":{\"142\":1}}],[\"switch\",{\"0\":{\"144\":1,\"441\":1,\"442\":1},\"1\":{\"139\":1,\"142\":5,\"143\":2,\"144\":4,\"441\":11,\"442\":2}}],[\"save\",{\"1\":{\"531\":1,\"532\":1,\"534\":1}}],[\"saveblog\",{\"1\":{\"527\":2,\"534\":1}}],[\"saveuserdetails\",{\"1\":{\"192\":1,\"193\":2,\"239\":1}}],[\"sa\",{\"1\":{\"419\":1,\"554\":1}}],[\"samples\",{\"1\":{\"157\":1,\"264\":2,\"303\":2,\"471\":2}}],[\"sadd\",{\"1\":{\"106\":1,\"110\":1,\"111\":1,\"532\":1}}],[\"s1=\",{\"1\":{\"343\":1}}],[\"s1\",{\"1\":{\"151\":2,\"341\":2,\"387\":1,\"415\":2}}],[\"simple\",{\"1\":{\"526\":1}}],[\"simplest\",{\"1\":{\"241\":1}}],[\"sipush\",{\"1\":{\"410\":1}}],[\"since\",{\"1\":{\"638\":1,\"640\":1,\"642\":1}}],[\"singleton\",{\"1\":{\"456\":5}}],[\"single\",{\"0\":{\"428\":1},\"1\":{\"250\":1}}],[\"sinter\",{\"1\":{\"109\":1}}],[\"signcount\",{\"1\":{\"540\":3}}],[\"signature\",{\"1\":{\"289\":1,\"411\":1,\"428\":1,\"429\":1,\"438\":3}}],[\"sign\",{\"1\":{\"161\":1,\"250\":1,\"539\":5,\"540\":3}}],[\"side\",{\"1\":{\"136\":1,\"641\":2}}],[\"sismember\",{\"1\":{\"108\":1}}],[\"size=3\",{\"1\":{\"415\":1}}],[\"size=0\",{\"1\":{\"415\":1,\"431\":1,\"432\":1}}],[\"size=1\",{\"1\":{\"289\":1,\"341\":2,\"406\":2,\"411\":1,\"414\":1,\"416\":1,\"427\":1,\"428\":1,\"429\":1,\"430\":1,\"433\":1,\"437\":1,\"438\":2}}],[\"size=5\",{\"1\":{\"115\":1,\"534\":1}}],[\"size\",{\"1\":{\"88\":8,\"115\":1,\"350\":7,\"364\":3,\"406\":1,\"471\":3,\"532\":1,\"534\":1,\"535\":1,\"536\":1,\"537\":6,\"541\":1,\"561\":1,\"581\":2,\"601\":2,\"612\":2,\"632\":1,\"635\":1,\"642\":2,\"643\":1,\"655\":2,\"666\":2}}],[\"spm\",{\"1\":{\"481\":1}}],[\"spm=1001\",{\"1\":{\"481\":1}}],[\"split\",{\"1\":{\"464\":1}}],[\"spi\",{\"0\":{\"464\":1},\"1\":{\"464\":2,\"465\":1}}],[\"specs\",{\"1\":{\"412\":1}}],[\"special\",{\"1\":{\"643\":1}}],[\"specially\",{\"1\":{\"400\":1}}],[\"specified\",{\"1\":{\"640\":2,\"644\":2}}],[\"specific\",{\"1\":{\"88\":1,\"645\":1}}],[\"specifying\",{\"1\":{\"85\":1}}],[\"spawn\",{\"1\":{\"640\":1}}],[\"space\",{\"1\":{\"333\":3,\"338\":1}}],[\"span>\",{\"1\":{\"267\":6}}],[\"span><span\",{\"1\":{\"267\":1}}],[\"springapplication\",{\"1\":{\"554\":1}}],[\"springdataredis的2\",{\"1\":{\"537\":1}}],[\"spring中的实现\",{\"0\":{\"259\":1}}],[\"spring中的oauth2\",{\"0\":{\"257\":1}}],[\"springframework\",{\"1\":{\"188\":1,\"193\":1,\"234\":1,\"238\":1,\"260\":3,\"537\":3,\"554\":4,\"561\":3}}],[\"spring<\",{\"1\":{\"180\":2}}],[\"spring项目总需要添加此注解\",{\"1\":{\"176\":1}}],[\"springbootapplication\",{\"1\":{\"554\":1}}],[\"springboot项目中不需要\",{\"1\":{\"176\":1}}],[\"springboot\",{\"1\":{\"158\":1}}],[\"spring\",{\"0\":{\"165\":1,\"166\":1},\"1\":{\"156\":2,\"157\":2,\"158\":2,\"166\":2,\"168\":3,\"174\":2,\"181\":4,\"195\":1,\"197\":1,\"198\":2,\"218\":2,\"222\":1,\"231\":1,\"239\":1,\"259\":4,\"264\":4,\"265\":1,\"267\":1,\"465\":1,\"554\":3,\"561\":2},\"2\":{\"272\":1}}],[\"springsecurity5\",{\"1\":{\"267\":1}}],[\"springsecurity自动进行登录认证\",{\"1\":{\"204\":1}}],[\"springsecurity自动使用dbuserdetailsmanager的loaduserbyusername方法从数据库中获取user对象\",{\"1\":{\"187\":1}}],[\"springsecurity自动使用inmemoryuserdetailsmanager的loaduserbyusername方法从内存中获取user对象\",{\"1\":{\"177\":1}}],[\"springsecurity的默认配置\",{\"0\":{\"190\":1}}],[\"springsecurity\",{\"0\":{\"156\":1},\"1\":{\"156\":1},\"2\":{\"273\":1}}],[\"sprintf\",{\"1\":{\"94\":1}}],[\"s\",{\"1\":{\"94\":1,\"138\":1,\"142\":1,\"144\":3,\"148\":3,\"341\":3,\"379\":1,\"381\":2,\"383\":1,\"438\":1,\"466\":2,\"471\":6,\"638\":1,\"640\":1}}],[\"systemconstants\",{\"1\":{\"527\":1,\"532\":1,\"537\":3}}],[\"system\",{\"1\":{\"90\":1,\"198\":1,\"200\":1,\"223\":5,\"297\":1,\"316\":4,\"319\":2,\"324\":1,\"326\":2,\"333\":1,\"338\":1,\"341\":4,\"343\":5,\"345\":1,\"350\":3,\"351\":13,\"357\":5,\"364\":9,\"365\":6,\"375\":1,\"397\":1,\"400\":1,\"405\":1,\"406\":4,\"411\":4,\"414\":2,\"415\":3,\"417\":4,\"418\":1,\"429\":1,\"431\":2,\"432\":1,\"433\":2,\"438\":2,\"439\":2,\"440\":4,\"441\":8,\"442\":4,\"444\":2,\"445\":1,\"446\":4,\"451\":1,\"452\":1,\"455\":9,\"456\":4,\"458\":2,\"459\":2,\"460\":2,\"463\":1,\"464\":1,\"469\":3,\"470\":6,\"472\":1,\"474\":1,\"476\":1,\"480\":1,\"525\":1,\"526\":1,\"530\":1,\"534\":1,\"581\":2,\"601\":2,\"612\":2,\"655\":2,\"666\":2}}],[\"synchronization\",{\"1\":{\"636\":1,\"637\":1,\"639\":1}}],[\"synchronized关键字\",{\"1\":{\"356\":1}}],[\"synchronized和reentrantlock对比\",{\"0\":{\"307\":1}}],[\"synchronized消除锁的策略是比较保守的\",{\"1\":{\"303\":1}}],[\"synchronized开始\",{\"1\":{\"289\":1}}],[\"synchronized\",{\"0\":{\"287\":1,\"305\":1,\"433\":1,\"476\":1},\"1\":{\"277\":1,\"279\":1,\"283\":2,\"286\":2,\"288\":1,\"289\":5,\"294\":3,\"297\":4,\"298\":2,\"299\":4,\"300\":3,\"301\":4,\"302\":1,\"303\":1,\"305\":1,\"433\":1,\"460\":1,\"476\":7,\"480\":2}}],[\"sync\",{\"1\":{\"629\":1,\"630\":2,\"637\":1,\"639\":2,\"640\":4,\"641\":1}}],[\"synctest\",{\"1\":{\"433\":1}}],[\"synthetic\",{\"1\":{\"400\":2,\"445\":1}}],[\"syn置为1就表示这是一个连接请求或连接接受报文\",{\"1\":{\"57\":1}}],[\"syn\",{\"1\":{\"57\":2,\"561\":1}}],[\"scrollresult\",{\"1\":{\"535\":3}}],[\"scrypt是一种故意缓慢的算法\",{\"1\":{\"199\":1}}],[\"scryptpasswordencoder\",{\"1\":{\"199\":1}}],[\"scrypt和argon2\",{\"1\":{\"198\":1}}],[\"scavenge\",{\"1\":{\"376\":2,\"378\":3}}],[\"scavenge使用标记\",{\"1\":{\"376\":1}}],[\"scavengebeforefullgc\",{\"1\":{\"374\":1,\"375\":1}}],[\"scanln\",{\"1\":{\"150\":2}}],[\"scanf\",{\"1\":{\"150\":2}}],[\"scan\",{\"1\":{\"150\":1}}],[\"scheduledexecutorservice\",{\"1\":{\"310\":1}}],[\"schema\",{\"1\":{\"85\":1}}],[\"scope>\",{\"1\":{\"471\":1,\"568\":1}}],[\"scope\",{\"1\":{\"271\":1,\"471\":1}}],[\"score\",{\"1\":{\"87\":2,\"88\":1,\"89\":1,\"116\":1,\"117\":1,\"303\":4,\"471\":4,\"530\":7}}],[\"see\",{\"1\":{\"635\":1}}],[\"sent\",{\"1\":{\"644\":1}}],[\"sentinel选择从节点晋升为主节点时的决策\",{\"1\":{\"633\":1,\"644\":1}}],[\"sentinel\",{\"1\":{\"621\":1,\"643\":3,\"645\":1}}],[\"sensible\",{\"1\":{\"635\":1}}],[\"send\",{\"1\":{\"560\":1,\"561\":3,\"567\":1,\"640\":1,\"641\":1}}],[\"sendfeed\",{\"1\":{\"98\":2,\"102\":2,\"116\":1,\"121\":2}}],[\"sex\",{\"1\":{\"442\":12,\"443\":12}}],[\"se7\",{\"1\":{\"412\":1}}],[\"series\",{\"0\":{\"523\":1}}],[\"series类型\",{\"1\":{\"512\":1}}],[\"serializer\",{\"1\":{\"554\":4}}],[\"serialgc\",{\"1\":{\"384\":1}}],[\"serial收集器是最基本的\",{\"1\":{\"377\":1}}],[\"serialold\",{\"0\":{\"377\":1},\"1\":{\"377\":1,\"379\":1}}],[\"serial\",{\"0\":{\"377\":1},\"1\":{\"376\":1,\"377\":8,\"379\":2,\"384\":1}}],[\"served\",{\"1\":{\"639\":1}}],[\"serve\",{\"1\":{\"627\":1,\"628\":1,\"637\":3,\"638\":1,\"640\":1}}],[\"server中的数据\",{\"1\":{\"554\":1}}],[\"server中同步过来\",{\"1\":{\"551\":1}}],[\"servermode\",{\"1\":{\"553\":2,\"560\":2,\"567\":2}}],[\"server伪装成slave同步mysql中的数据\",{\"1\":{\"551\":1}}],[\"server<\",{\"1\":{\"260\":2}}],[\"server\",{\"1\":{\"163\":1,\"242\":2,\"258\":2,\"259\":2,\"376\":1,\"511\":1,\"512\":1,\"551\":1,\"552\":1,\"554\":1,\"558\":1,\"559\":1,\"561\":1,\"566\":1,\"568\":2,\"635\":1,\"640\":3}}],[\"services\",{\"1\":{\"464\":1}}],[\"serviceloader<s>\",{\"1\":{\"466\":1}}],[\"serviceloader<接口类型>\",{\"1\":{\"465\":1}}],[\"serviceloader<driver>\",{\"1\":{\"464\":1}}],[\"serviceloader\",{\"1\":{\"464\":2,\"465\":1,\"466\":3}}],[\"serviceimpl<usermapper\",{\"1\":{\"184\":1}}],[\"service\",{\"0\":{\"184\":1,\"193\":1},\"1\":{\"184\":3,\"464\":1,\"466\":7,\"561\":1}}],[\"servletexception\",{\"1\":{\"209\":1,\"212\":1,\"215\":1,\"218\":1,\"225\":1}}],[\"servlet\",{\"1\":{\"163\":1,\"168\":1,\"218\":1,\"264\":1,\"465\":1}}],[\"semaphore可以用于多种同步场景\",{\"1\":{\"314\":1}}],[\"semaphore提供了tryacquire\",{\"1\":{\"313\":1}}],[\"semaphore内部有一个计数器\",{\"1\":{\"313\":1}}],[\"semaphore本质上是一个计数信号量\",{\"1\":{\"311\":1}}],[\"semaphore是一个同步辅助类\",{\"1\":{\"311\":1}}],[\"semaphore\",{\"0\":{\"311\":1,\"312\":1},\"1\":{\"277\":2,\"310\":1,\"312\":1,\"314\":5}}],[\"session\",{\"1\":{\"226\":2,\"253\":1,\"513\":1}}],[\"sessionmanagement\",{\"1\":{\"226\":1}}],[\"sessioninformationexpiredevent\",{\"1\":{\"225\":1}}],[\"sessioninformationexpiredstrategy\",{\"1\":{\"225\":1}}],[\"section\",{\"1\":{\"645\":1}}],[\"sections\",{\"1\":{\"635\":1}}],[\"sec\",{\"1\":{\"267\":2}}],[\"sec=\",{\"1\":{\"267\":1}}],[\"secret属性\",{\"1\":{\"271\":1}}],[\"secret\",{\"1\":{\"265\":1,\"271\":1}}],[\"security之上的一个单独的项目\",{\"1\":{\"259\":1}}],[\"security之所以默认帮助我们做了那么多事情\",{\"1\":{\"166\":1}}],[\"security框架中\",{\"1\":{\"222\":1}}],[\"securitycontext\",{\"1\":{\"222\":3,\"223\":1}}],[\"securitycontextholder用于管理当前线程的安全上下文\",{\"1\":{\"222\":1}}],[\"securitycontextholder\",{\"1\":{\"222\":5,\"223\":1}}],[\"securityconfiguration\",{\"1\":{\"205\":1}}],[\"security会使用authenticationentrypoint将用户请求跳转到登录页面\",{\"1\":{\"218\":1}}],[\"security在进行用户身份验证时需要将用户输入的密码进行单向转换\",{\"1\":{\"198\":1}}],[\"security的passwordencoder接口用于对密码进行单向转换\",{\"1\":{\"198\":1}}],[\"security的底层原理\",{\"1\":{\"166\":1}}],[\"security将初始的用户名和密码存在了securityproperties类中\",{\"1\":{\"174\":1}}],[\"securityproperties\",{\"0\":{\"174\":1}}],[\"securityfilterchain配置\",{\"0\":{\"210\":1,\"216\":1,\"219\":1,\"226\":1}}],[\"securityfilterchain接口的实现\",{\"1\":{\"173\":1}}],[\"securityfilterchain\",{\"0\":{\"170\":1,\"171\":1},\"1\":{\"170\":2,\"171\":1,\"190\":1,\"229\":1,\"231\":1,\"233\":1}}],[\"security提供的一个特殊的filter\",{\"1\":{\"169\":1}}],[\"security以确保https\",{\"1\":{\"165\":1}}],[\"security默认做了什么\",{\"0\":{\"165\":1}}],[\"security<\",{\"1\":{\"160\":1,\"267\":1}}],[\"securitydemo\",{\"1\":{\"159\":1,\"176\":1,\"182\":1,\"183\":2,\"184\":2,\"185\":1,\"188\":1,\"203\":1,\"209\":1,\"212\":1,\"215\":1,\"218\":1,\"223\":1,\"225\":1}}],[\"security\",{\"0\":{\"166\":1},\"1\":{\"156\":1,\"157\":1,\"158\":3,\"160\":1,\"168\":1,\"174\":2,\"181\":1,\"188\":1,\"193\":1,\"197\":1,\"218\":1,\"222\":1,\"231\":1,\"234\":1,\"238\":1,\"239\":2,\"259\":2,\"264\":2,\"265\":1,\"267\":1,\"568\":1,\"638\":1}}],[\"seconds\",{\"1\":{\"639\":1,\"640\":4,\"642\":1,\"644\":4}}],[\"second\",{\"1\":{\"85\":1,\"644\":1}}],[\"selctmail\",{\"1\":{\"119\":1,\"122\":1}}],[\"selected\",{\"1\":{\"643\":1}}],[\"selectorexpression=\",{\"1\":{\"561\":1}}],[\"selectone\",{\"1\":{\"188\":1}}],[\"select\",{\"1\":{\"118\":1,\"139\":1,\"393\":1,\"420\":1,\"531\":1,\"534\":1,\"552\":1,\"559\":1,\"566\":1,\"568\":1,\"641\":2,\"643\":1}}],[\"selectmail\",{\"1\":{\"117\":1,\"119\":1}}],[\"selectfans\",{\"0\":{\"118\":1,\"120\":1},\"1\":{\"98\":2,\"102\":2,\"118\":2,\"120\":3,\"121\":2}}],[\"sethashvalueserializer\",{\"1\":{\"554\":1}}],[\"sethashkeyserializer\",{\"1\":{\"554\":1}}],[\"setvalueserializer\",{\"1\":{\"554\":1}}],[\"setkeyserializer\",{\"1\":{\"554\":1}}],[\"setconnectionfactory\",{\"1\":{\"554\":1}}],[\"setcontenttype\",{\"1\":{\"209\":1,\"212\":1,\"215\":1,\"218\":1,\"225\":1,\"231\":1}}],[\"setbit\",{\"1\":{\"538\":1,\"539\":2}}],[\"setdistance\",{\"1\":{\"537\":1}}],[\"setdelegate\",{\"1\":{\"472\":1}}],[\"setmintime\",{\"1\":{\"535\":1}}],[\"setmemory\",{\"1\":{\"350\":1,\"351\":1}}],[\"setoffset\",{\"1\":{\"535\":1}}],[\"setlist\",{\"1\":{\"535\":1}}],[\"setfollowuserid\",{\"1\":{\"531\":1,\"532\":1}}],[\"set<zsetoperations\",{\"1\":{\"535\":1}}],[\"set<string>\",{\"1\":{\"530\":1,\"532\":1}}],[\"set<integer>\",{\"1\":{\"438\":1}}],[\"setislike\",{\"1\":{\"530\":1}}],[\"setuserid\",{\"1\":{\"531\":1,\"532\":1,\"534\":1}}],[\"setusername\",{\"1\":{\"194\":1}}],[\"setupdatetime\",{\"1\":{\"527\":1}}],[\"setsql\",{\"1\":{\"529\":3,\"530\":2}}],[\"sets或lists来存储时间戳和相关数据\",{\"1\":{\"523\":1}}],[\"sets\",{\"0\":{\"517\":1},\"1\":{\"512\":2,\"640\":1}}],[\"setparent\",{\"1\":{\"472\":1}}],[\"setpassword\",{\"1\":{\"194\":1}}],[\"set\",{\"0\":{\"515\":1},\"1\":{\"385\":3,\"525\":1,\"526\":1,\"554\":2,\"561\":1,\"633\":1,\"637\":3,\"640\":1,\"642\":1,\"644\":2,\"645\":1}}],[\"setaccessible\",{\"1\":{\"351\":1}}],[\"setenabled\",{\"1\":{\"194\":1}}],[\"set集合重复会加不进去\",{\"1\":{\"105\":1}}],[\"setting\",{\"1\":{\"98\":2,\"102\":2,\"644\":1}}],[\"searchdocument\",{\"1\":{\"94\":2}}],[\"search\",{\"1\":{\"87\":4,\"88\":12,\"89\":1,\"94\":2,\"537\":1,\"569\":1}}],[\"seq\",{\"1\":{\"85\":6}}],[\"still\",{\"1\":{\"637\":2,\"638\":1}}],[\"stw\",{\"1\":{\"378\":1,\"379\":1,\"381\":2,\"394\":1}}],[\"study\",{\"1\":{\"339\":2}}],[\"studygolang\",{\"1\":{\"133\":1}}],[\"style=\",{\"1\":{\"267\":9}}],[\"store\",{\"1\":{\"526\":1,\"638\":1}}],[\"storage\",{\"1\":{\"197\":1}}],[\"stopwords\",{\"1\":{\"90\":2}}],[\"stop\",{\"1\":{\"90\":1,\"286\":2,\"371\":2,\"377\":2,\"379\":2,\"635\":1,\"644\":1}}],[\"stdoutimpl\",{\"1\":{\"181\":1}}],[\"stdout\",{\"1\":{\"181\":1}}],[\"stdin\",{\"1\":{\"151\":1}}],[\"stale\",{\"1\":{\"627\":1,\"628\":1,\"637\":3,\"638\":1}}],[\"stack等\",{\"1\":{\"410\":1}}],[\"stack=3\",{\"1\":{\"429\":1}}],[\"stack=1\",{\"1\":{\"406\":1,\"415\":1,\"427\":1,\"428\":1,\"430\":1,\"431\":1,\"432\":1,\"438\":1}}],[\"stack=2\",{\"1\":{\"289\":1,\"341\":2,\"406\":1,\"409\":1,\"411\":1,\"414\":1,\"415\":1,\"416\":1,\"433\":1,\"437\":1,\"438\":1}}],[\"stackoverflowerror\",{\"1\":{\"327\":2}}],[\"stack\",{\"1\":{\"289\":1}}],[\"stackmaptable\",{\"1\":{\"289\":1,\"428\":1,\"429\":1}}],[\"starts\",{\"1\":{\"639\":1,\"640\":1}}],[\"starting\",{\"1\":{\"636\":1,\"639\":1,\"642\":1}}],[\"startup\",{\"1\":{\"553\":2,\"560\":2,\"567\":2,\"568\":1}}],[\"starter\",{\"1\":{\"260\":3,\"537\":1,\"554\":5,\"561\":3}}],[\"starter<\",{\"1\":{\"180\":1,\"195\":1,\"554\":1,\"561\":1}}],[\"start\",{\"1\":{\"90\":11,\"286\":2,\"289\":1,\"297\":2,\"298\":2,\"299\":2,\"300\":3,\"315\":3,\"316\":2,\"319\":1,\"375\":1,\"411\":1,\"428\":1,\"429\":1,\"438\":3,\"469\":2,\"470\":2,\"474\":2,\"476\":2,\"478\":1,\"480\":1,\"639\":1,\"640\":1}}],[\"standard\",{\"1\":{\"90\":2}}],[\"static变量在分配空间和赋值是在两个阶段完成的\",{\"1\":{\"451\":1}}],[\"static变量在jdk\",{\"1\":{\"451\":1}}],[\"static\",{\"1\":{\"289\":3,\"294\":4,\"297\":1,\"298\":1,\"299\":1,\"300\":2,\"302\":2,\"303\":1,\"315\":1,\"319\":1,\"326\":7,\"333\":1,\"338\":1,\"341\":4,\"343\":1,\"345\":1,\"350\":3,\"351\":5,\"357\":1,\"364\":6,\"365\":4,\"373\":6,\"374\":6,\"375\":6,\"393\":1,\"397\":1,\"405\":1,\"406\":2,\"411\":3,\"412\":1,\"413\":3,\"414\":1,\"415\":6,\"416\":2,\"417\":2,\"423\":1,\"427\":1,\"428\":3,\"429\":4,\"430\":1,\"431\":4,\"432\":2,\"433\":1,\"436\":3,\"437\":1,\"438\":3,\"439\":4,\"440\":4,\"441\":4,\"442\":5,\"443\":6,\"444\":3,\"445\":1,\"446\":4,\"451\":4,\"452\":1,\"455\":8,\"456\":8,\"458\":2,\"459\":2,\"463\":2,\"464\":1,\"466\":1,\"469\":1,\"470\":3,\"471\":5,\"472\":3,\"474\":2,\"476\":3,\"478\":2,\"480\":2,\"554\":1,\"581\":4,\"601\":4,\"612\":4,\"655\":4,\"666\":4}}],[\"statefulredisconnection<string\",{\"1\":{\"526\":1}}],[\"statement\",{\"1\":{\"141\":1,\"144\":3,\"393\":1,\"444\":1,\"552\":1,\"559\":1,\"566\":1}}],[\"state和address有mill子串\",{\"1\":{\"88\":1}}],[\"state或者address中包含mill\",{\"1\":{\"88\":1}}],[\"state\",{\"1\":{\"85\":1,\"88\":1,\"89\":1,\"295\":1,\"312\":1,\"471\":1,\"644\":1}}],[\"status\",{\"1\":{\"85\":2,\"91\":3,\"93\":1}}],[\"strategy\",{\"1\":{\"639\":1}}],[\"strutil\",{\"1\":{\"530\":1,\"535\":1,\"537\":1}}],[\"struct\",{\"1\":{\"90\":1,\"91\":1}}],[\"str2\",{\"1\":{\"342\":1}}],[\"str\",{\"1\":{\"94\":2,\"138\":2,\"341\":2,\"441\":8}}],[\"strconv\",{\"1\":{\"93\":1,\"106\":1,\"107\":1,\"108\":1,\"109\":2,\"112\":1,\"116\":1,\"117\":3}}],[\"stringredisserializer\",{\"1\":{\"554\":1}}],[\"stringredistemplate\",{\"1\":{\"529\":3,\"530\":5,\"532\":3,\"534\":1,\"535\":1,\"536\":2,\"537\":1,\"539\":1,\"540\":1}}],[\"string>\",{\"1\":{\"526\":2}}],[\"stringtablesize=桶个数\",{\"1\":{\"346\":1}}],[\"stringtablestudy\",{\"1\":{\"341\":1}}],[\"stringtabletest\",{\"1\":{\"345\":1}}],[\"stringtable在内存紧张时\",{\"1\":{\"345\":1}}],[\"stringtable是放在堆中的\",{\"1\":{\"344\":1}}],[\"stringtable是属于常量池的一部分\",{\"1\":{\"344\":1}}],[\"stringtable\",{\"0\":{\"344\":1,\"345\":1,\"346\":1},\"1\":{\"341\":1,\"345\":1}}],[\"stringbuilder\",{\"1\":{\"326\":6,\"333\":2,\"341\":17}}],[\"stringbuffer\",{\"1\":{\"303\":2}}],[\"string转为基本数据类型\",{\"1\":{\"139\":1}}],[\"string\",{\"0\":{\"513\":1},\"1\":{\"66\":1,\"70\":1,\"74\":1,\"78\":1,\"90\":2,\"91\":3,\"94\":3,\"98\":1,\"102\":1,\"109\":1,\"117\":2,\"119\":1,\"126\":1,\"130\":1,\"134\":1,\"136\":1,\"138\":2,\"142\":1,\"144\":2,\"148\":3,\"150\":1,\"159\":1,\"182\":2,\"188\":6,\"200\":1,\"203\":1,\"209\":1,\"212\":2,\"215\":1,\"218\":2,\"223\":1,\"225\":1,\"230\":2,\"231\":1,\"266\":1,\"271\":2,\"289\":3,\"298\":1,\"315\":1,\"319\":1,\"326\":2,\"333\":2,\"338\":1,\"341\":37,\"342\":1,\"343\":19,\"345\":2,\"350\":1,\"351\":1,\"357\":1,\"364\":2,\"365\":1,\"373\":1,\"374\":1,\"375\":1,\"387\":4,\"397\":1,\"400\":4,\"405\":1,\"406\":9,\"411\":4,\"412\":1,\"413\":3,\"414\":1,\"415\":4,\"416\":1,\"417\":2,\"424\":2,\"427\":1,\"428\":4,\"429\":4,\"430\":1,\"431\":2,\"432\":1,\"433\":3,\"436\":3,\"437\":1,\"438\":5,\"439\":12,\"440\":4,\"441\":7,\"442\":2,\"443\":2,\"444\":3,\"445\":1,\"446\":2,\"448\":2,\"451\":1,\"452\":1,\"455\":1,\"456\":2,\"458\":1,\"460\":1,\"464\":4,\"466\":1,\"469\":1,\"470\":1,\"471\":1,\"472\":1,\"474\":1,\"476\":1,\"478\":1,\"480\":1,\"488\":1,\"492\":1,\"496\":1,\"500\":1,\"504\":1,\"508\":1,\"526\":1,\"527\":2,\"529\":1,\"530\":4,\"531\":1,\"532\":3,\"534\":1,\"535\":2,\"536\":1,\"537\":3,\"539\":2,\"540\":2,\"554\":2,\"561\":6,\"581\":1,\"601\":1,\"612\":1,\"655\":1,\"666\":1}}],[\"stream提供了以下特性\",{\"1\":{\"518\":1}}],[\"streams\",{\"1\":{\"512\":1}}],[\"stream\",{\"1\":{\"55\":1,\"530\":2,\"532\":2,\"536\":1,\"537\":1}}],[\"soon\",{\"1\":{\"639\":1}}],[\"so\",{\"1\":{\"638\":1,\"640\":1,\"642\":1,\"643\":2,\"645\":1}}],[\"some\",{\"1\":{\"638\":1,\"642\":2}}],[\"softreference\",{\"1\":{\"365\":1}}],[\"softreferencetest\",{\"1\":{\"364\":1}}],[\"softreference<>\",{\"1\":{\"364\":3}}],[\"softreference<byte\",{\"1\":{\"364\":5}}],[\"sorted\",{\"1\":{\"512\":1}}],[\"sort排序\",{\"1\":{\"88\":1}}],[\"sort\",{\"1\":{\"87\":3,\"88\":1}}],[\"sort=account\",{\"1\":{\"87\":1}}],[\"source=cd81f8812505504b960957155cd81114\",{\"1\":{\"481\":1}}],[\"sourcefile\",{\"1\":{\"400\":1,\"406\":1}}],[\"source\",{\"1\":{\"85\":1,\"88\":1,\"89\":3,\"94\":3,\"400\":1}}],[\"sockets\",{\"1\":{\"639\":1}}],[\"socket这个名词有时容易使人把一些概念弄混淆\",{\"1\":{\"56\":1}}],[\"socket2\",{\"1\":{\"56\":2}}],[\"socket1\",{\"1\":{\"56\":2}}],[\"socket\",{\"1\":{\"56\":2,\"639\":1,\"640\":1,\"641\":1,\"645\":1}}],[\"sure\",{\"1\":{\"640\":1}}],[\"survivorration\",{\"1\":{\"378\":1}}],[\"survivorratio=ratio晋升阈值\",{\"1\":{\"373\":1}}],[\"survivor\",{\"1\":{\"378\":1}}],[\"such\",{\"1\":{\"638\":1}}],[\"successhandler\",{\"1\":{\"210\":1}}],[\"successfully\",{\"1\":{\"267\":1}}],[\"successful\",{\"1\":{\"85\":3,\"88\":1}}],[\"succss\",{\"1\":{\"98\":1,\"102\":1}}],[\"suppressed\",{\"1\":{\"444\":1}}],[\"superclass\",{\"1\":{\"400\":1}}],[\"super\",{\"1\":{\"350\":1,\"397\":1,\"400\":1,\"406\":1,\"415\":1,\"416\":1,\"435\":1,\"443\":1,\"448\":1}}],[\"subscribe\",{\"1\":{\"637\":1}}],[\"subtype\",{\"1\":{\"466\":1}}],[\"subclasses\",{\"1\":{\"400\":1}}],[\"submit\",{\"1\":{\"204\":1,\"267\":1}}],[\"sun\",{\"1\":{\"90\":1,\"419\":1,\"459\":2,\"460\":3,\"472\":2}}],[\"sum\",{\"1\":{\"18\":1,\"88\":1,\"471\":4}}],[\"shutdown\",{\"1\":{\"637\":1}}],[\"sh\",{\"1\":{\"553\":1,\"560\":1,\"567\":1}}],[\"shadow\",{\"1\":{\"638\":1}}],[\"sha1\",{\"1\":{\"198\":1}}],[\"sha\",{\"1\":{\"198\":2}}],[\"sharing\",{\"1\":{\"220\":1}}],[\"share\",{\"1\":{\"90\":3}}],[\"shards\",{\"1\":{\"85\":3,\"87\":1,\"88\":1}}],[\"shops\",{\"1\":{\"537\":3}}],[\"shopserviceimpl\",{\"1\":{\"537\":1}}],[\"shopservice\",{\"1\":{\"536\":1,\"537\":1}}],[\"shopidstr\",{\"1\":{\"537\":3}}],[\"shopid\",{\"1\":{\"537\":1}}],[\"shopcontroller\",{\"1\":{\"537\":1}}],[\"shop\",{\"1\":{\"536\":10,\"537\":5}}],[\"short\",{\"1\":{\"405\":1,\"410\":5,\"412\":1}}],[\"shouldbindjson\",{\"1\":{\"98\":3,\"102\":3,\"121\":3}}],[\"should\",{\"1\":{\"88\":2,\"642\":2}}],[\"show\",{\"1\":{\"85\":1}}],[\"流程如下\",{\"1\":{\"565\":1}}],[\"流程以及\",{\"1\":{\"430\":1}}],[\"流程\",{\"1\":{\"115\":1,\"430\":1}}],[\"流量控制\",{\"0\":{\"61\":1},\"1\":{\"62\":1}}],[\"流\",{\"1\":{\"55\":1,\"81\":1,\"726\":1,\"729\":1}}],[\"5分钟随机\",{\"1\":{\"572\":1}}],[\"5为例\",{\"1\":{\"552\":1,\"559\":1,\"566\":1}}],[\"5502\",{\"1\":{\"481\":1}}],[\"5项\",{\"1\":{\"400\":1}}],[\"52\",{\"1\":{\"399\":2,\"406\":1}}],[\"539\",{\"1\":{\"471\":1}}],[\"53\",{\"1\":{\"397\":7,\"400\":10}}],[\"5b\",{\"1\":{\"397\":2,\"400\":2}}],[\"57\",{\"1\":{\"397\":3,\"400\":7}}],[\"572\",{\"1\":{\"303\":1}}],[\"5与\",{\"1\":{\"376\":1}}],[\"542\",{\"1\":{\"303\":1}}],[\"54\",{\"1\":{\"295\":1,\"397\":2,\"400\":6}}],[\"512\",{\"1\":{\"373\":1,\"374\":1,\"375\":1}}],[\"512kb\",{\"1\":{\"373\":3,\"374\":1,\"375\":1}}],[\"512等\",{\"1\":{\"198\":1}}],[\"518\",{\"1\":{\"303\":1}}],[\"51\",{\"1\":{\"143\":2}}],[\"50<\",{\"1\":{\"554\":1}}],[\"50280576\",{\"1\":{\"481\":1}}],[\"507\",{\"1\":{\"303\":1}}],[\"50000\",{\"1\":{\"474\":2,\"476\":2}}],[\"5000\",{\"1\":{\"474\":1,\"537\":1}}],[\"500\",{\"1\":{\"179\":1,\"470\":1}}],[\"50\",{\"1\":{\"138\":1,\"142\":1,\"143\":2,\"179\":1,\"397\":3,\"400\":5,\"428\":2}}],[\"56\",{\"1\":{\"90\":1,\"397\":4,\"400\":11,\"401\":4}}],[\"594\",{\"1\":{\"471\":1}}],[\"59\",{\"1\":{\"85\":6}}],[\"5而端口号是80\",{\"1\":{\"56\":1}}],[\"5\",{\"0\":{\"86\":1,\"144\":1,\"162\":1,\"163\":1,\"164\":1,\"171\":1,\"183\":1,\"191\":1,\"192\":1,\"193\":1,\"194\":1,\"195\":1,\"196\":2,\"214\":1,\"215\":1,\"216\":1,\"256\":1,\"267\":1,\"335\":1,\"336\":1,\"337\":1,\"338\":1,\"339\":1,\"340\":2,\"341\":1,\"344\":1,\"345\":1,\"346\":1,\"390\":1,\"391\":1,\"392\":1,\"393\":1,\"394\":1,\"395\":2,\"396\":1,\"409\":1,\"413\":1,\"422\":1,\"431\":1,\"439\":1,\"457\":1,\"458\":1,\"459\":1,\"460\":1,\"461\":1,\"462\":2},\"1\":{\"55\":1,\"56\":4,\"85\":1,\"88\":2,\"90\":5,\"98\":1,\"102\":1,\"109\":1,\"115\":1,\"121\":1,\"133\":1,\"138\":1,\"143\":2,\"180\":1,\"285\":1,\"289\":2,\"299\":4,\"303\":4,\"312\":1,\"315\":1,\"324\":3,\"341\":6,\"364\":3,\"400\":1,\"401\":1,\"406\":2,\"410\":2,\"412\":1,\"413\":4,\"414\":1,\"415\":3,\"416\":1,\"427\":2,\"428\":4,\"429\":2,\"430\":3,\"431\":2,\"432\":2,\"433\":1,\"436\":3,\"437\":2,\"438\":3,\"439\":1,\"440\":5,\"455\":2,\"463\":1,\"469\":1,\"471\":7,\"530\":2,\"534\":2,\"535\":4,\"537\":1,\"539\":1,\"540\":2,\"552\":1,\"553\":1,\"554\":1,\"559\":1,\"560\":1,\"561\":1,\"566\":1,\"567\":1,\"568\":8,\"580\":1,\"600\":1,\"611\":1,\"640\":2,\"645\":4,\"654\":1,\"665\":1}}],[\"4<\",{\"1\":{\"561\":1}}],[\"45966440\",{\"1\":{\"481\":1}}],[\"450570\",{\"1\":{\"471\":1}}],[\"4层\",{\"1\":{\"469\":1}}],[\"478\",{\"1\":{\"471\":1}}],[\"47\",{\"1\":{\"463\":1}}],[\"4反射获取泛型信息\",{\"0\":{\"438\":1}}],[\"419\",{\"1\":{\"406\":1}}],[\"414\",{\"1\":{\"85\":2}}],[\"4项\",{\"1\":{\"400\":1}}],[\"4~7\",{\"1\":{\"399\":1}}],[\"4f\",{\"1\":{\"397\":1,\"400\":2}}],[\"467\",{\"1\":{\"471\":1}}],[\"46\",{\"1\":{\"397\":1,\"400\":2}}],[\"4d\",{\"1\":{\"397\":1,\"400\":2}}],[\"481\",{\"1\":{\"459\":1}}],[\"48\",{\"1\":{\"397\":3,\"400\":4}}],[\"4865\",{\"1\":{\"338\":1}}],[\"4e\",{\"1\":{\"397\":1,\"400\":4}}],[\"4c\",{\"1\":{\"397\":7,\"400\":15}}],[\"43\",{\"1\":{\"397\":1,\"400\":4}}],[\"4bit\",{\"1\":{\"371\":1}}],[\"4mb\",{\"1\":{\"364\":4,\"365\":3}}],[\"4m\",{\"1\":{\"364\":2,\"561\":1}}],[\"4堆内存诊断\",{\"0\":{\"334\":1}}],[\"448\",{\"1\":{\"333\":1}}],[\"404\",{\"1\":{\"732\":1}}],[\"4096\",{\"1\":{\"561\":1}}],[\"40\",{\"1\":{\"300\":1,\"428\":2,\"641\":1}}],[\"4种数据同步到elasticsearch方案\",{\"1\":{\"81\":1,\"726\":1,\"729\":1}}],[\"4字节=60字节\",{\"1\":{\"57\":1}}],[\"4位最大是1111\",{\"1\":{\"57\":1}}],[\"4位\",{\"1\":{\"57\":1}}],[\"4\",{\"0\":{\"85\":1,\"90\":1,\"143\":1,\"161\":1,\"170\":1,\"182\":1,\"190\":1,\"195\":1,\"201\":1,\"211\":1,\"212\":1,\"213\":1,\"251\":1,\"261\":1,\"266\":1,\"269\":1,\"270\":1,\"271\":1,\"330\":1,\"331\":1,\"332\":1,\"333\":1,\"334\":1,\"339\":1,\"376\":1,\"377\":1,\"378\":1,\"379\":1,\"380\":2,\"394\":1,\"401\":1,\"408\":1,\"412\":1,\"421\":1,\"430\":1,\"447\":1,\"448\":1,\"449\":1,\"453\":1,\"456\":1,\"461\":1,\"701\":1,\"721\":1},\"1\":{\"55\":1,\"56\":3,\"85\":1,\"88\":2,\"89\":2,\"90\":4,\"98\":1,\"102\":1,\"112\":1,\"117\":1,\"121\":1,\"133\":1,\"180\":1,\"200\":1,\"289\":3,\"295\":2,\"299\":4,\"312\":2,\"324\":3,\"341\":7,\"364\":2,\"365\":1,\"393\":1,\"395\":1,\"400\":1,\"406\":3,\"410\":4,\"411\":1,\"412\":1,\"413\":1,\"414\":2,\"415\":4,\"416\":2,\"427\":1,\"428\":1,\"429\":3,\"430\":1,\"431\":1,\"432\":1,\"433\":2,\"437\":2,\"438\":4,\"440\":4,\"455\":2,\"529\":3,\"530\":6,\"532\":1,\"534\":3,\"535\":5,\"537\":4,\"539\":1,\"540\":1,\"554\":1,\"561\":1,\"568\":1,\"592\":1}}],[\"不给当前key设置过期时间\",{\"1\":{\"572\":1}}],[\"不过对于uv统计来说\",{\"1\":{\"541\":1}}],[\"不过可以把结果存储到一个指定的key\",{\"1\":{\"519\":1,\"535\":1}}],[\"不需要坐标查询\",{\"1\":{\"537\":1}}],[\"不需要我们用户再去推送信息\",{\"1\":{\"115\":1,\"533\":1}}],[\"不支持多消费者消费同一消息的不同副本\",{\"1\":{\"514\":1}}],[\"不管接收者有没有运行都不影响消息发布到队列中\",{\"1\":{\"484\":1}}],[\"不带\",{\"1\":{\"469\":1}}],[\"不带update\",{\"1\":{\"85\":1}}],[\"不写\",{\"1\":{\"463\":1}}],[\"不知道你注意到没有\",{\"1\":{\"463\":1}}],[\"不冲突\",{\"1\":{\"461\":1}}],[\"不一定是并行的可能会交替执行\",{\"1\":{\"376\":1}}],[\"不受jvm内存回收管理\",{\"1\":{\"348\":1}}],[\"不可扩容\",{\"1\":{\"341\":1}}],[\"不断地向list\",{\"1\":{\"333\":1}}],[\"不涉及修改操作\",{\"1\":{\"303\":1}}],[\"不遵从以上规则\",{\"1\":{\"289\":1}}],[\"不加\",{\"1\":{\"289\":1}}],[\"不占用\",{\"1\":{\"278\":1}}],[\"不再只使用密码作为哈希函数的输入\",{\"1\":{\"198\":1}}],[\"不再支持url中的type参数\",{\"1\":{\"89\":1}}],[\"不及格\",{\"1\":{\"142\":1}}],[\"不曾使用的常量\",{\"1\":{\"138\":1}}],[\"不能自动实现故障转移\",{\"1\":{\"624\":1}}],[\"不能以消费组形式消费数据\",{\"1\":{\"514\":1}}],[\"不能解\",{\"1\":{\"481\":1}}],[\"不能解密\",{\"1\":{\"198\":1}}],[\"不能保证原子性\",{\"1\":{\"481\":1}}],[\"不能直接操作文件管理\",{\"1\":{\"349\":1}}],[\"不能先\",{\"1\":{\"283\":1}}],[\"不能定义全局变量\",{\"1\":{\"136\":1}}],[\"不能把多条语句写在同一个\",{\"1\":{\"133\":1}}],[\"不能采用原始方案来做\",{\"1\":{\"115\":1,\"534\":1}}],[\"不要写成make\",{\"1\":{\"118\":1}}],[\"不要求都有\",{\"1\":{\"88\":1}}],[\"不会交错\",{\"1\":{\"474\":1}}],[\"不会初始化类\",{\"1\":{\"455\":2}}],[\"不会触发初始化\",{\"1\":{\"455\":3}}],[\"不会触发full\",{\"1\":{\"384\":1}}],[\"不会抛出异常\",{\"1\":{\"431\":1}}],[\"不会列入\",{\"1\":{\"423\":1}}],[\"不会stw\",{\"1\":{\"382\":1}}],[\"不会让其他的线程结束运行\",{\"1\":{\"375\":1}}],[\"不会有内存碎片\",{\"1\":{\"368\":1,\"369\":1}}],[\"不会有缺失\",{\"1\":{\"115\":1,\"533\":1}}],[\"不会\",{\"1\":{\"326\":2}}],[\"不会存在内存溢出\",{\"1\":{\"324\":1}}],[\"不会被修改的量\",{\"1\":{\"138\":1}}],[\"不会检查原数据\",{\"1\":{\"85\":1}}],[\"不做内容筛选\",{\"1\":{\"115\":1,\"533\":1}}],[\"不做任何操作\",{\"1\":{\"85\":1}}],[\"不用考虑这个问题\",{\"1\":{\"592\":1}}],[\"不用去db查询\",{\"1\":{\"572\":1}}],[\"不用重新\",{\"1\":{\"294\":1}}],[\"不用阻塞等待\",{\"1\":{\"282\":1}}],[\"不用临时拉取\",{\"1\":{\"115\":1,\"533\":1}}],[\"不用主动去寻找\",{\"1\":{\"115\":1,\"533\":1}}],[\"不用引入新的组件\",{\"1\":{\"81\":1,\"726\":1,\"729\":1}}],[\"不允许重复取消关注\",{\"1\":{\"105\":1}}],[\"不错\",{\"1\":{\"90\":1}}],[\"不看详情\",{\"1\":{\"88\":1}}],[\"不参与评分更快\",{\"1\":{\"88\":1}}],[\"不贡献得分\",{\"1\":{\"88\":1}}],[\"不满足也可以\",{\"1\":{\"88\":1}}],[\"不拆分字符串进行检索\",{\"1\":{\"88\":1}}],[\"不分词\",{\"1\":{\"88\":1,\"89\":1}}],[\"不指定\",{\"1\":{\"85\":1}}],[\"不改变原来程序的性能\",{\"1\":{\"81\":1,\"726\":1,\"729\":1}}],[\"不改变原来代码\",{\"1\":{\"81\":1,\"726\":1,\"729\":1}}],[\"不同应用的同名类都可以加载\",{\"1\":{\"461\":1}}],[\"不同方法在调用时\",{\"1\":{\"416\":1}}],[\"不同的东西有不同的魔数\",{\"1\":{\"398\":1}}],[\"不同type中的相同字段名称就会在处理中出现冲突的情况\",{\"1\":{\"89\":1}}],[\"不同\",{\"1\":{\"56\":1}}],[\"不是重写\",{\"1\":{\"461\":1}}],[\"不是\",{\"1\":{\"326\":1,\"394\":1}}],[\"不是一个原子操作\",{\"1\":{\"285\":1}}],[\"不是应用进程\",{\"1\":{\"56\":1}}],[\"不是主机的ip地址\",{\"1\":{\"56\":1}}],[\"不是主机\",{\"1\":{\"56\":1}}],[\"不重复\",{\"1\":{\"55\":1}}],[\"不丢失\",{\"1\":{\"55\":1}}],[\"每隔一段时间触发读的主动更新即可\",{\"1\":{\"592\":1}}],[\"每与一次\",{\"1\":{\"540\":1}}],[\"每得到一个非0的数字计数器+1\",{\"1\":{\"540\":1}}],[\"每签到一次需要使用\",{\"1\":{\"538\":1}}],[\"每秒吞吐量\",{\"1\":{\"471\":1}}],[\"每一个类加载器\",{\"1\":{\"457\":1}}],[\"每一个小区间独立回收\",{\"1\":{\"381\":1}}],[\"每一个\",{\"1\":{\"142\":1}}],[\"每一条tcp连接唯一地被通信两端的两个端点\",{\"1\":{\"56\":1}}],[\"每一条tcp连接有两个端点\",{\"1\":{\"56\":1}}],[\"每一条tcp连接只能是点对点的\",{\"1\":{\"55\":1}}],[\"每一条tcp连接只能有两个端点\",{\"1\":{\"55\":1}}],[\"每当\",{\"1\":{\"139\":1}}],[\"每次签到就到对应的位上把数字从0变成1\",{\"1\":{\"539\":1}}],[\"每次只执行其中一个\",{\"1\":{\"455\":1}}],[\"每次重入仍然需要执行\",{\"1\":{\"294\":1}}],[\"每次生成的密文也不一致\",{\"1\":{\"200\":1}}],[\"每次查询完成后\",{\"1\":{\"115\":1,\"535\":1}}],[\"每次更新都会+1\",{\"1\":{\"85\":1}}],[\"每种类型文档一个独立索引\",{\"1\":{\"89\":1}}],[\"每发送一次新的数据包\",{\"1\":{\"57\":1}}],[\"每个商品作为一个字段\",{\"1\":{\"516\":1}}],[\"每个块中都有finally块\",{\"1\":{\"430\":1}}],[\"每个空间4个字节\",{\"1\":{\"409\":1}}],[\"每个栈由多个栈帧\",{\"1\":{\"326\":1}}],[\"每个线程只能有一个活动栈帧\",{\"1\":{\"326\":1}}],[\"每个线程运行需要的内存空间\",{\"1\":{\"326\":1}}],[\"每个线程执行到某个需要\",{\"1\":{\"316\":1}}],[\"每个线程都的栈帧都会包含一个锁记录的结构\",{\"1\":{\"301\":1}}],[\"每个线程都有一个私有的\",{\"1\":{\"283\":1}}],[\"每个线程都有自己的一个\",{\"1\":{\"280\":1}}],[\"每个语句后不需要分号\",{\"1\":{\"133\":1}}],[\"每个文档都有下列的\",{\"1\":{\"85\":1}}],[\"每个数据的结果\",{\"1\":{\"85\":1}}],[\"每个\",{\"1\":{\"29\":1,\"288\":1,\"677\":1}}],[\"通知机制\",{\"1\":{\"277\":1}}],[\"通常来说uv会比pv大很多\",{\"1\":{\"541\":1}}],[\"通常你可以把他看成一个攻击\",{\"1\":{\"541\":1}}],[\"通常通过redis模块如redisbloom实现\",{\"1\":{\"522\":1}}],[\"通常需要使用其他同步机制\",{\"1\":{\"286\":1}}],[\"通常就是会话期间\",{\"1\":{\"253\":1}}],[\"通常是一个web或者无线应用\",{\"1\":{\"242\":1}}],[\"通常是独立的单词\",{\"1\":{\"90\":1}}],[\"通话结束后要挂机释放连接\",{\"1\":{\"55\":1}}],[\"通话前要先拨号建立连接\",{\"1\":{\"55\":1}}],[\"通过requirepass指令\",{\"1\":{\"627\":1,\"637\":1}}],[\"通过增加从节点来扩展系统的读取能力\",{\"1\":{\"624\":1}}],[\"通过从节点备份主节点的数据\",{\"1\":{\"624\":1}}],[\"通过主从复制实现数据冗余\",{\"1\":{\"622\":1}}],[\"通过多个从节\",{\"1\":{\"619\":1}}],[\"通过此机制可以将一个redis服务器\",{\"1\":{\"618\":1}}],[\"通过加锁保证并发读写\",{\"1\":{\"592\":1}}],[\"通过设置过期时间实现自动登出\",{\"1\":{\"545\":1,\"548\":1}}],[\"通过lua脚本在redis中执行数据聚合操作\",{\"1\":{\"523\":1}}],[\"通过位运算快速检查权限\",{\"1\":{\"521\":1}}],[\"通过原子操作实现计数\",{\"1\":{\"513\":1}}],[\"通过接口来使用实现\",{\"1\":{\"461\":1}}],[\"通过字符串的\",{\"1\":{\"441\":1}}],[\"通过分析字节码指令即可知晓\",{\"1\":{\"414\":1}}],[\"通过上面的代码\",{\"1\":{\"373\":1}}],[\"通过虚引用\",{\"1\":{\"350\":1}}],[\"通过bytebuffer申请1m的直接内存bytebuffer\",{\"1\":{\"350\":1}}],[\"通过申请直接内存\",{\"1\":{\"350\":1}}],[\"通过拼接的方式来创建字符串的过程是\",{\"1\":{\"341\":1}}],[\"通过反编译来查看类的信息\",{\"0\":{\"339\":1}}],[\"通过new关键字创建的对象都会使用堆内存\",{\"1\":{\"331\":1}}],[\"通过查看进程中的线程的nid\",{\"1\":{\"328\":1}}],[\"通过对用户角色关联和角色权限关联表进行操作\",{\"1\":{\"235\":1}}],[\"通过如下源码可以知道\",{\"1\":{\"201\":1}}],[\"通过使用\",{\"1\":{\"160\":1,\"163\":1,\"168\":1}}],[\"通过操作地址\",{\"1\":{\"150\":1}}],[\"通过无限下拉刷新获取新的信息\",{\"1\":{\"115\":1,\"533\":1}}],[\"通过tcp连接传送的数据\",{\"1\":{\"55\":1}}],[\"通过\",{\"1\":{\"11\":1,\"14\":1,\"57\":1,\"85\":1,\"277\":3,\"283\":1,\"423\":1,\"424\":1}}],[\"打开\",{\"1\":{\"357\":1,\"420\":1}}],[\"打个比喻\",{\"1\":{\"280\":1}}],[\"打印编译信息\",{\"1\":{\"470\":1}}],[\"打印地址\",{\"1\":{\"148\":1}}],[\"打印字符串常量池信息\",{\"1\":{\"345\":1}}],[\"打印字符\",{\"1\":{\"148\":1}}],[\"打印类型\",{\"1\":{\"148\":1}}],[\"打印后换行\",{\"1\":{\"148\":1}}],[\"打印\",{\"1\":{\"148\":1,\"345\":1,\"463\":1,\"470\":1}}],[\"打印输出\",{\"0\":{\"145\":1}}],[\"打印按钮\",{\"1\":{\"6\":1}}],[\"打电话\",{\"1\":{\"55\":1}}],[\"在使用端口转发或网络地址转换\",{\"1\":{\"646\":1}}],[\"在不影响主节点的情况下\",{\"1\":{\"624\":1}}],[\"在redis\",{\"1\":{\"621\":1}}],[\"在主从复制的基础上\",{\"1\":{\"619\":1}}],[\"在箭头处才写入旧数据的缓存\",{\"1\":{\"591\":1}}],[\"在删除缓存前\",{\"1\":{\"588\":1}}],[\"在数据库没有查询该条数据的时候\",{\"1\":{\"577\":1,\"597\":1,\"608\":1,\"651\":1,\"662\":1}}],[\"在数据传输过程中\",{\"1\":{\"484\":1}}],[\"在原有的失效时间基础上行增加一个随机值\",{\"1\":{\"572\":1}}],[\"在设置key的时候\",{\"1\":{\"572\":1}}],[\"在这里插入图片描述\",{\"1\":{\"554\":2}}],[\"在这个例子中\",{\"1\":{\"286\":1,\"319\":1}}],[\"在这个设计方案中\",{\"1\":{\"235\":1}}],[\"在yaml配置canal地址\",{\"1\":{\"554\":1}}],[\"在线升级和扩展\",{\"1\":{\"624\":1}}],[\"在线考试\",{\"1\":{\"545\":1,\"548\":1}}],[\"在线用户统计\",{\"1\":{\"545\":1,\"548\":1}}],[\"在保存blog到数据库的同时\",{\"1\":{\"534\":1}}],[\"在博主个人页面展示出当前用户与博主的共同关注呢\",{\"1\":{\"532\":1}}],[\"在探店笔记的详情页面\",{\"1\":{\"530\":1}}],[\"在blog\",{\"1\":{\"529\":1}}],[\"在实际开发中图片一般会放在nginx上或者是云存储上\",{\"1\":{\"527\":1}}],[\"在处理大量数据时\",{\"1\":{\"522\":1}}],[\"在指定范围内搜索member\",{\"1\":{\"519\":1,\"535\":1}}],[\"在分布式系统中\",{\"1\":{\"513\":1}}],[\"在学习的过程\",{\"1\":{\"512\":1}}],[\"在门内执行\",{\"1\":{\"476\":1}}],[\"在内联情况下将\",{\"1\":{\"471\":1}}],[\"在刚才的示例中\",{\"1\":{\"471\":1}}],[\"在下面一些框架中都运用了此思想\",{\"1\":{\"465\":1}}],[\"在类加载器中的loadclass\",{\"1\":{\"461\":1}}],[\"在本地内存中\",{\"1\":{\"448\":1}}],[\"在进行输出判断\",{\"1\":{\"441\":1}}],[\"在编译期间\",{\"1\":{\"441\":1}}],[\"在编译泛型代码后会执行泛型擦除\",{\"1\":{\"437\":1}}],[\"在编译的时候\",{\"1\":{\"138\":1}}],[\"在执行invokevirtual指令时\",{\"1\":{\"417\":1}}],[\"在堆内存中找到该对象\",{\"1\":{\"410\":1}}],[\"在运行时常量池中找到\",{\"1\":{\"410\":1}}],[\"在并发标记阶段结束以后\",{\"1\":{\"386\":1}}],[\"在并发编程中\",{\"1\":{\"283\":1}}],[\"在引用变更时通过post\",{\"1\":{\"385\":1}}],[\"在老年代占用堆内存的比例达到阈值时\",{\"1\":{\"382\":1}}],[\"在虚拟机执行垃圾回收的过程中\",{\"1\":{\"367\":1,\"368\":1}}],[\"在垃圾回收时\",{\"1\":{\"361\":1,\"363\":1,\"386\":1}}],[\"在垃圾回收后\",{\"1\":{\"360\":1}}],[\"在系统内存中有一份\",{\"1\":{\"349\":1}}],[\"在控制台运行\",{\"1\":{\"450\":1}}],[\"在控制台输入\",{\"1\":{\"339\":1}}],[\"在控制台的启动日志中查找初始的默认密码\",{\"1\":{\"161\":1}}],[\"在jvm内部\",{\"1\":{\"387\":1}}],[\"在jdk对应的bin目录下运行cmd\",{\"1\":{\"339\":1}}],[\"在java中使用布隆过滤器\",{\"1\":{\"581\":1,\"601\":1,\"612\":1,\"655\":1,\"666\":1}}],[\"在java中\",{\"1\":{\"311\":1,\"319\":1}}],[\"在尝试不成功后再次进入\",{\"1\":{\"312\":1}}],[\"在调用时都使用invokespecial指令\",{\"1\":{\"416\":1}}],[\"在调用\",{\"1\":{\"296\":1}}],[\"在64位jvm中长度是64bit\",{\"1\":{\"292\":1}}],[\"在需要更复杂的同步操作时\",{\"1\":{\"286\":1}}],[\"在读取\",{\"1\":{\"286\":1}}],[\"在没有同步机制的情况下\",{\"1\":{\"283\":1}}],[\"在多线程环境中\",{\"1\":{\"283\":2}}],[\"在开发者设置中找到oauth\",{\"1\":{\"263\":1}}],[\"在传统的身份验证中\",{\"1\":{\"245\":1}}],[\"在传送数据完毕后\",{\"1\":{\"55\":1}}],[\"在配置文件中添加如下注解\",{\"1\":{\"237\":1}}],[\"在配置文件中添加如下配置即可\",{\"1\":{\"220\":1}}],[\"在controller中获取用户信息\",{\"0\":{\"223\":1}}],[\"在customer索引下的external类型下保存1号数据\",{\"1\":{\"85\":1}}],[\"在set集合中\",{\"1\":{\"532\":1}}],[\"在spring\",{\"1\":{\"222\":1}}],[\"在springsecurity中解决跨域很简单\",{\"1\":{\"220\":1}}],[\"在socketapi中使用的一个函数名也叫做socket\",{\"1\":{\"56\":1}}],[\"在前后端分离的项目中\",{\"1\":{\"220\":1}}],[\"在前面安装的elasticsearch时\",{\"1\":{\"90\":1}}],[\"在测试类中编写一个测试方法\",{\"1\":{\"200\":1}}],[\"在filterchain方法中添加如下代码\",{\"1\":{\"196\":1}}],[\"在websecurityconfig中添加如下配置\",{\"1\":{\"190\":1}}],[\"在usernamepasswordauthenticationfilter过滤器中的attemptauthentication方法中将用户输入的用户名密码和从数据库中获取到的用户信息进行比较\",{\"1\":{\"187\":1}}],[\"在usernamepasswordauthenticationfilter过滤器中的attemptauthentication方法中将用户输入的用户名密码和从内存中获取到的用户信息进行比较\",{\"1\":{\"177\":1}}],[\"在应用程序中初始化这个类的对象\",{\"1\":{\"187\":1}}],[\"在application\",{\"1\":{\"174\":1}}],[\"在路径resources\",{\"1\":{\"160\":1}}],[\"在评估条件之前执行\",{\"1\":{\"141\":1}}],[\"在上面两个布尔表达式都为false时\",{\"1\":{\"140\":1}}],[\"在布尔表达式1为\",{\"1\":{\"140\":2}}],[\"在布尔表达式为\",{\"1\":{\"140\":3}}],[\"在新的一行被使用时\",{\"1\":{\"139\":1}}],[\"在程序运行时\",{\"1\":{\"138\":1}}],[\"在同一个作用域中\",{\"1\":{\"136\":1}}],[\"在个人主页的\",{\"1\":{\"115\":1,\"535\":1}}],[\"在发表帖子时\",{\"1\":{\"98\":1,\"102\":1}}],[\"在发送时\",{\"1\":{\"55\":1}}],[\"在里面新建文件fenci\",{\"1\":{\"90\":1}}],[\"在nginx\",{\"1\":{\"90\":1}}],[\"在es同一个索引下其实被认为是同一个filed\",{\"1\":{\"89\":1}}],[\"在\",{\"1\":{\"85\":1,\"88\":1,\"277\":2,\"289\":1,\"364\":1,\"377\":1,\"382\":1,\"436\":1,\"463\":1,\"464\":1,\"552\":1,\"559\":1,\"566\":1}}],[\"在写入mysql时同时写入es\",{\"1\":{\"81\":1,\"726\":1,\"729\":1}}],[\"在连接建立时由计算机计算出的初始值\",{\"1\":{\"57\":1}}],[\"在一个tcp连接中传送的字节流中的每一个字节都按顺序编号\",{\"1\":{\"57\":1}}],[\"在一个应用进程和另一个应用进程之间建立了一条tcp连接\",{\"1\":{\"56\":1}}],[\"在操作系统内核中连网协议的berkeley实现\",{\"1\":{\"56\":1}}],[\"在接收时\",{\"1\":{\"55\":1}}],[\"在页面禁用功能与布局\",{\"1\":{\"3\":1,\"274\":1}}],[\"计费系统\",{\"1\":{\"545\":1,\"548\":1}}],[\"计算出数组中的地址\",{\"1\":{\"580\":1,\"600\":1,\"611\":1,\"654\":1,\"665\":1}}],[\"计算总的签到次数\",{\"1\":{\"540\":1}}],[\"计算分页参数\",{\"1\":{\"537\":1}}],[\"计算指定的两个点之间的距离并返回\",{\"1\":{\"519\":1,\"535\":1}}],[\"计算共同关注\",{\"1\":{\"515\":1}}],[\"计算共同点赞\",{\"1\":{\"515\":1}}],[\"计算机可以每秒执行数十亿次哈希计算\",{\"1\":{\"198\":1}}],[\"计算机网络\",{\"0\":{\"54\":1},\"1\":{\"54\":1,\"62\":1},\"2\":{\"63\":1,\"64\":1}}],[\"计数个数\",{\"1\":{\"316\":2}}],[\"计数器+1\",{\"1\":{\"540\":1}}],[\"计数器减1\",{\"1\":{\"313\":1}}],[\"计数器\",{\"1\":{\"313\":1,\"521\":1}}],[\"计划\",{\"1\":{\"19\":2}}],[\"蔬菜\",{\"2\":{\"52\":1}}],[\"番茄\",{\"0\":{\"49\":1}}],[\"草莓\",{\"0\":{\"44\":1},\"2\":{\"47\":1}}],[\"大数据\",{\"0\":{\"739\":1}}],[\"大数据去重\",{\"1\":{\"522\":1}}],[\"大概是思路如下\",{\"1\":{\"572\":1}}],[\"大量并发只让一人去查\",{\"1\":{\"572\":1}}],[\"大家可以自行将笔记中的代码拷贝到idea中就可以实现这两个功能了\",{\"1\":{\"532\":1}}],[\"大部分对象用过即死\",{\"1\":{\"394\":1}}],[\"大表\",{\"1\":{\"393\":1}}],[\"大括号都是成对出现的\",{\"1\":{\"133\":1}}],[\"大小不等\",{\"1\":{\"55\":1}}],[\"大\",{\"2\":{\"43\":1,\"690\":1,\"695\":1,\"700\":1,\"705\":1}}],[\"水果\",{\"2\":{\"42\":1,\"47\":1,\"699\":1,\"704\":1,\"709\":1,\"714\":1}}],[\"火龙果\",{\"0\":{\"39\":1},\"2\":{\"42\":1}}],[\"圆\",{\"2\":{\"38\":1,\"53\":1,\"690\":1,\"695\":1,\"700\":1,\"705\":1}}],[\"小结\",{\"0\":{\"425\":1}}],[\"小于\",{\"1\":{\"140\":1}}],[\"小\",{\"2\":{\"38\":1,\"48\":1}}],[\"红\",{\"2\":{\"38\":1,\"43\":1,\"48\":1,\"53\":1,\"690\":1,\"695\":1,\"700\":1,\"705\":1}}],[\"3600\",{\"1\":{\"631\":1,\"642\":1}}],[\"368960\",{\"1\":{\"471\":1}}],[\"3层\",{\"1\":{\"469\":1}}],[\"3项\",{\"1\":{\"400\":1}}],[\"371262\",{\"1\":{\"471\":1}}],[\"37\",{\"1\":{\"397\":1}}],[\"37<\",{\"1\":{\"207\":1}}],[\"3b\",{\"1\":{\"397\":5,\"400\":11}}],[\"3e\",{\"1\":{\"397\":1,\"400\":4}}],[\"3c\",{\"1\":{\"397\":1,\"400\":4}}],[\"3307\",{\"1\":{\"553\":1,\"560\":1,\"567\":1,\"568\":1}}],[\"3306\",{\"1\":{\"181\":1}}],[\"33项\",{\"1\":{\"400\":1}}],[\"33\",{\"1\":{\"341\":1,\"400\":2,\"411\":1,\"415\":1,\"459\":1}}],[\"3332\",{\"1\":{\"333\":1}}],[\"3堆内存溢出\",{\"0\":{\"333\":1}}],[\"391\",{\"1\":{\"471\":1}}],[\"390747\",{\"1\":{\"471\":1}}],[\"39\",{\"1\":{\"300\":1}}],[\"3000\",{\"1\":{\"561\":2,\"568\":1}}],[\"3001\",{\"1\":{\"481\":1}}],[\"30287\",{\"1\":{\"406\":2}}],[\"30项\",{\"1\":{\"400\":1}}],[\"30\",{\"1\":{\"299\":2,\"400\":2,\"411\":1,\"415\":7,\"428\":2,\"429\":2,\"430\":4,\"433\":2,\"437\":1,\"438\":1}}],[\"30<\",{\"1\":{\"180\":1}}],[\"31项\",{\"1\":{\"400\":1}}],[\"311\",{\"1\":{\"350\":1}}],[\"31\",{\"1\":{\"295\":1,\"341\":1,\"400\":2,\"429\":1,\"437\":1,\"438\":2}}],[\"318\",{\"1\":{\"85\":1}}],[\"3<\",{\"1\":{\"180\":1}}],[\"351\",{\"1\":{\"471\":1}}],[\"35\",{\"1\":{\"143\":1,\"397\":2,\"400\":3,\"415\":1}}],[\"34项\",{\"1\":{\"400\":2}}],[\"34h\",{\"1\":{\"399\":1}}],[\"34\",{\"1\":{\"88\":1,\"285\":1,\"397\":1,\"398\":1,\"399\":4,\"400\":5,\"415\":1}}],[\"322\",{\"1\":{\"459\":1}}],[\"32767\",{\"1\":{\"410\":1}}],[\"32768\",{\"1\":{\"410\":2}}],[\"32项\",{\"1\":{\"400\":1}}],[\"32\",{\"1\":{\"88\":1,\"400\":2,\"411\":2,\"438\":1}}],[\"38\",{\"1\":{\"88\":1,\"415\":1}}],[\"3\",{\"0\":{\"36\":1,\"41\":1,\"46\":1,\"51\":1,\"89\":1,\"136\":1,\"142\":1,\"148\":1,\"160\":1,\"169\":1,\"172\":1,\"173\":1,\"174\":1,\"181\":1,\"186\":1,\"187\":1,\"188\":1,\"189\":2,\"194\":1,\"200\":1,\"205\":1,\"208\":1,\"209\":1,\"210\":1,\"235\":1,\"243\":1,\"260\":1,\"262\":1,\"263\":1,\"264\":1,\"265\":2,\"266\":1,\"267\":1,\"268\":1,\"328\":1,\"329\":1,\"338\":1,\"351\":1,\"358\":1,\"369\":1,\"370\":1,\"371\":1,\"372\":1,\"379\":1,\"393\":1,\"400\":1,\"407\":1,\"411\":1,\"420\":1,\"429\":1,\"434\":1,\"435\":1,\"436\":1,\"437\":2,\"438\":1,\"439\":1,\"440\":1,\"441\":1,\"442\":1,\"443\":1,\"444\":1,\"445\":1,\"446\":1,\"452\":1,\"453\":1,\"460\":1,\"471\":1,\"481\":1,\"688\":1,\"693\":1,\"696\":1,\"698\":1,\"703\":1,\"708\":1,\"713\":1,\"716\":1,\"718\":1,\"723\":1},\"1\":{\"55\":1,\"56\":3,\"85\":1,\"88\":1,\"89\":2,\"90\":7,\"98\":1,\"102\":1,\"109\":1,\"110\":1,\"111\":1,\"112\":1,\"117\":1,\"121\":1,\"122\":1,\"133\":2,\"148\":1,\"158\":1,\"183\":2,\"289\":4,\"290\":1,\"299\":4,\"312\":4,\"315\":1,\"324\":3,\"326\":3,\"341\":10,\"395\":1,\"400\":1,\"406\":3,\"410\":5,\"411\":5,\"412\":2,\"413\":2,\"414\":3,\"415\":6,\"416\":2,\"428\":3,\"429\":3,\"430\":3,\"431\":1,\"432\":2,\"433\":4,\"437\":2,\"438\":3,\"440\":4,\"455\":2,\"521\":1,\"526\":1,\"529\":3,\"530\":4,\"531\":2,\"532\":2,\"534\":1,\"535\":1,\"536\":5,\"537\":3,\"538\":1,\"539\":1,\"540\":1,\"558\":1,\"568\":1,\"580\":1,\"592\":1,\"600\":1,\"611\":1,\"635\":1,\"640\":1,\"644\":2,\"654\":1,\"665\":1}}],[\"这确保了监控和管理工具能够使用正确的端口访问从节点\",{\"1\":{\"646\":1}}],[\"这确保了在\",{\"1\":{\"285\":1}}],[\"这段配置文件内容详细描述了redis的replication\",{\"1\":{\"635\":1}}],[\"这段代码在\",{\"1\":{\"436\":1}}],[\"这建立了主从关系\",{\"1\":{\"626\":1,\"636\":1}}],[\"这就是布隆过滤器的计算原理\",{\"1\":{\"580\":1,\"600\":1,\"611\":1,\"654\":1,\"665\":1}}],[\"这就是我们所说的缓存穿透问题\",{\"1\":{\"576\":1,\"596\":1,\"607\":1,\"650\":1,\"661\":1}}],[\"这就是说\",{\"1\":{\"55\":1}}],[\"这将导致这个不存在的数据每次请求都要到存储层去查询\",{\"1\":{\"572\":1}}],[\"这完全可以忽略\",{\"1\":{\"541\":1}}],[\"这句话可以表达得更通俗一些\",{\"1\":{\"457\":1}}],[\"这三个常量是否会导致\",{\"1\":{\"456\":1}}],[\"这同时解释了为什么匿名内部类引用局部变量时\",{\"1\":{\"446\":2}}],[\"这告诉我们\",{\"1\":{\"431\":1}}],[\"这类题记住编译器在编译期间会把字符字面量作为常量放在常量池中\",{\"1\":{\"343\":1}}],[\"这在某些情况下可以提高性能\",{\"1\":{\"319\":1}}],[\"这行代码会使当前线程进入等待状态\",{\"1\":{\"319\":1}}],[\"这通常用于实现锁和其他同步器的框架\",{\"1\":{\"319\":1}}],[\"这不同于之前讲的细分锁的粒度\",{\"1\":{\"304\":1}}],[\"这些类希望予以隔离\",{\"1\":{\"461\":1}}],[\"这些垃圾就叫浮动垃圾\",{\"1\":{\"379\":1}}],[\"这些加锁解锁操作完全没有必要\",{\"1\":{\"303\":1}}],[\"这些修改不会相互干扰\",{\"1\":{\"283\":1}}],[\"这时候才会解开门上的锁\",{\"1\":{\"476\":1}}],[\"这时候如果\",{\"1\":{\"476\":1}}],[\"这时操作数栈中有一份对象的引用\",{\"1\":{\"433\":1}}],[\"这时也需要执行finally块中的代码\",{\"1\":{\"430\":1}}],[\"这时运行\",{\"1\":{\"418\":1}}],[\"这时a引用了c\",{\"1\":{\"386\":1}}],[\"这时就会用到remark\",{\"1\":{\"386\":1}}],[\"这时就不能用上面的方式了\",{\"1\":{\"253\":1}}],[\"这时不仅会回收伊甸园中的垃圾\",{\"1\":{\"371\":1}}],[\"这时终结器对象就会被放入引用队列中\",{\"1\":{\"363\":1}}],[\"这时需要将虚引用对象cleaner放入引用队列中\",{\"1\":{\"362\":1}}],[\"这时需要定位占用cpu过高的线程\",{\"1\":{\"328\":1}}],[\"这时需要进行锁膨胀\",{\"1\":{\"302\":1}}],[\"这时会进入重量级解锁流程\",{\"1\":{\"302\":1}}],[\"这时\",{\"1\":{\"302\":1,\"312\":2}}],[\"这时一种情况就是有其它线程为此对象加上了轻量级锁\",{\"1\":{\"302\":1}}],[\"这时使用\",{\"1\":{\"301\":1}}],[\"这时重置锁记录\",{\"1\":{\"301\":1}}],[\"这时表明有竞争\",{\"1\":{\"301\":1}}],[\"这时偏向了线程\",{\"1\":{\"299\":1}}],[\"这两个字符串的hashcode值都是\",{\"1\":{\"441\":1}}],[\"这两个语句都会去字符串常量池中检查是否已经存在\",{\"1\":{\"342\":1}}],[\"这两个参数第一次会由前端来指定\",{\"1\":{\"115\":1,\"535\":1}}],[\"这两种情况都会把串池中的对象返回\",{\"1\":{\"341\":1}}],[\"这两者通常是相辅相成的\",{\"1\":{\"283\":1}}],[\"这称为\",{\"1\":{\"245\":1}}],[\"这意味着\",{\"1\":{\"284\":1}}],[\"这意味着我们可以轻松地破解每个密码\",{\"1\":{\"198\":1}}],[\"这意味着你可以在\",{\"1\":{\"29\":1,\"677\":1}}],[\"这要求请求参数中必须有一个隐藏的\",{\"1\":{\"196\":1}}],[\"这样用户再次以该key请求后台的时候\",{\"1\":{\"577\":1,\"597\":1,\"608\":1,\"651\":1,\"662\":1}}],[\"这样很多个非法的请求直接打在数据库中\",{\"1\":{\"576\":1,\"596\":1,\"607\":1,\"650\":1,\"661\":1}}],[\"这样每一个缓存的过期时间的重复率就会降低\",{\"1\":{\"572\":1}}],[\"这样我们就用极小的空间\",{\"1\":{\"538\":1}}],[\"这样问题来了\",{\"1\":{\"463\":1}}],[\"这样也可以避免内存碎片的问题\",{\"1\":{\"369\":1}}],[\"这样下一次解释器会从程序计数器拿到指令然后进行解释执行\",{\"1\":{\"324\":1}}],[\"这样的\",{\"1\":{\"448\":2}}],[\"这样的前后端分离\",{\"1\":{\"252\":1}}],[\"这样的设计方案使得权限管理更加简单和可维护\",{\"1\":{\"235\":1}}],[\"这样就不用考虑一致性问题\",{\"1\":{\"591\":1}}],[\"这样就需要用上其他的数据库了\",{\"1\":{\"512\":1}}],[\"这样就可以使用\",{\"1\":{\"465\":1}}],[\"这样就可以将servlet容器中的\",{\"1\":{\"168\":1}}],[\"这样就简单实现了不可重复关注\",{\"1\":{\"105\":1}}],[\"这样\",{\"1\":{\"160\":1,\"163\":1,\"285\":1,\"484\":3}}],[\"这与变量就不一样了\",{\"1\":{\"138\":1}}],[\"这也是为什么这两个方法必须要放在synchronized代码块里的原因\",{\"1\":{\"298\":1}}],[\"这也体现出golang的简洁性\",{\"1\":{\"133\":1}}],[\"这也就意味着\",{\"1\":{\"88\":1}}],[\"这种架构设计主要用于实现数据冗余\",{\"1\":{\"618\":1}}],[\"这种并发几率非常小\",{\"1\":{\"592\":1}}],[\"这种方案只适合最终一致性\",{\"1\":{\"591\":1}}],[\"这种方式会导致一个用户无限点赞\",{\"1\":{\"529\":1}}],[\"这种方式给出的令牌\",{\"1\":{\"255\":1}}],[\"这种方式需要用户给出自己的用户名\",{\"1\":{\"254\":1}}],[\"这种方式把令牌直接传给前端\",{\"1\":{\"253\":1}}],[\"这种方式没有授权码这个中间步骤\",{\"1\":{\"253\":1}}],[\"这种方式是最常用\",{\"1\":{\"252\":1}}],[\"这种方式它只能被用在函数体内\",{\"1\":{\"134\":1}}],[\"这种思路就称为位图\",{\"1\":{\"538\":1}}],[\"这种调节方式称为\",{\"1\":{\"378\":1}}],[\"这种算法是一个很好的选择\",{\"1\":{\"199\":1}}],[\"这种权衡是为了让攻击者难以破解密码\",{\"1\":{\"198\":1}}],[\"这种第三方中间件\",{\"1\":{\"125\":1}}],[\"这种重传的概念是很简单的\",{\"1\":{\"60\":1}}],[\"这几条记录\",{\"1\":{\"115\":1,\"534\":1}}],[\"这是有数学论文进行验证\",{\"1\":{\"580\":1,\"600\":1,\"611\":1,\"654\":1,\"665\":1}}],[\"这是因为当一个线程抛出oom异常后\",{\"1\":{\"375\":1}}],[\"这是非常强大且有效的\",{\"1\":{\"88\":1}}],[\"这是最简单的方式\",{\"1\":{\"81\":1,\"726\":1,\"729\":1}}],[\"这个缓冲区有助于从节点在重连后仅同步缺失的部分数据\",{\"1\":{\"621\":1}}],[\"这个时候\",{\"1\":{\"580\":1,\"600\":1,\"611\":1,\"654\":1,\"665\":1}}],[\"这个数据不是最新\",{\"1\":{\"572\":1}}],[\"这个是因为canal中的druid包和\",{\"1\":{\"568\":1}}],[\"这个跟的是要同步的数据库\",{\"1\":{\"568\":1}}],[\"这个需要指向canal地址\",{\"1\":{\"568\":1}}],[\"这个需求\",{\"1\":{\"115\":1,\"533\":1}}],[\"这个list也会很大\",{\"1\":{\"541\":1}}],[\"这个很容易\",{\"1\":{\"539\":1}}],[\"这个地方就需要使用到我们的geo\",{\"1\":{\"536\":1}}],[\"这个页面会发起两个请求\",{\"1\":{\"532\":1}}],[\"这个功能其实也是语法糖\",{\"1\":{\"441\":1}}],[\"这个特性是\",{\"1\":{\"436\":1}}],[\"这个无参构造器是java编译器帮我们加上的\",{\"1\":{\"435\":1}}],[\"这个对象就归该线程所有\",{\"1\":{\"294\":1}}],[\"这个线程\",{\"1\":{\"294\":1}}],[\"这个操作在多线程环境下不是原子的\",{\"1\":{\"285\":1}}],[\"这个变量可能会被不同的线程同时访问和修改\",{\"1\":{\"284\":1}}],[\"这个包是为了解决并发问题的\",{\"1\":{\"277\":1}}],[\"这个并发包\",{\"1\":{\"277\":1}}],[\"这个类中有一个静态内部类user\",{\"1\":{\"174\":1}}],[\"这个过程叫做授权\",{\"1\":{\"156\":1}}],[\"这个方式不能用于全局变量\",{\"1\":{\"134\":1}}],[\"这个值必须被使用\",{\"1\":{\"136\":1}}],[\"这个值会作为下一次查询的条件\",{\"1\":{\"115\":1,\"535\":1}}],[\"这个值是动态变化的\",{\"1\":{\"57\":1}}],[\"这个用户发了动态\",{\"1\":{\"115\":1,\"533\":1}}],[\"这个被称为query\",{\"1\":{\"88\":1}}],[\"这表明b期望收到的下一个序号是31\",{\"1\":{\"59\":1}}],[\"这表明b正确收到了a发送的到序号700为止的数据\",{\"1\":{\"57\":1}}],[\"这里可以忽视\",{\"0\":{\"625\":1}}],[\"这里可以看到数据同步于哪个数据库\",{\"1\":{\"560\":1}}],[\"这里使用9200通信\",{\"1\":{\"568\":1}}],[\"这里使用rocketmq\",{\"1\":{\"560\":1}}],[\"这里使用tcp\",{\"1\":{\"553\":1,\"567\":1}}],[\"这里对流程做一个解释\",{\"1\":{\"558\":1}}],[\"这里注意如下几个东西\",{\"1\":{\"553\":1,\"560\":1,\"567\":1}}],[\"这里需要配置相同的密码\",{\"1\":{\"627\":1,\"637\":1}}],[\"这里需要注意2个东西\",{\"1\":{\"560\":1}}],[\"这里需要注意\",{\"1\":{\"553\":1,\"567\":1}}],[\"这里需要把主键修改为自增长\",{\"1\":{\"531\":1}}],[\"这里需要根据id查询对应的用户信息\",{\"1\":{\"112\":1}}],[\"这里生产者发送消息\",{\"1\":{\"484\":1}}],[\"这里引用\",{\"1\":{\"476\":1}}],[\"这里所说的\",{\"1\":{\"461\":1}}],[\"这里一个例子来验证\",{\"1\":{\"455\":1}}],[\"这里进行了类型转换\",{\"1\":{\"437\":1}}],[\"这里进行了泛型擦除\",{\"1\":{\"437\":1}}],[\"这里也进行了泛型擦除\",{\"1\":{\"437\":1}}],[\"这里没有\",{\"1\":{\"431\":1}}],[\"这里小的数字都是和字节码指令存在一起\",{\"1\":{\"410\":1}}],[\"这里的\",{\"1\":{\"464\":1}}],[\"这里的比较是将两个数做减法\",{\"1\":{\"414\":1}}],[\"这里的清除并不是将内存空间字节清零\",{\"1\":{\"367\":1}}],[\"这里的批量操作\",{\"1\":{\"85\":1}}],[\"这里调用了一个cleaner的create方法\",{\"1\":{\"350\":1}}],[\"这里必须是司机停车的时候才能接单\",{\"1\":{\"282\":1}}],[\"这里跟现实不一样\",{\"1\":{\"282\":1}}],[\"这里代入一下\",{\"1\":{\"280\":1}}],[\"这里我们也希望系统返回json结果\",{\"1\":{\"218\":1}}],[\"这里讨论的都是增量同步\",{\"1\":{\"98\":1,\"102\":1}}],[\"这里假设hit\",{\"1\":{\"94\":1}}],[\"这里先是查询所有匹配address包含mill的文档\",{\"1\":{\"88\":1}}],[\"这里只查balance\",{\"1\":{\"88\":1}}],[\"这里是directbytebuffer\",{\"1\":{\"350\":1}}],[\"这里是关注后推送\",{\"1\":{\"115\":1}}],[\"这里是分配了一个指针数组\",{\"1\":{\"112\":1}}],[\"这里是创建了一条数据\",{\"1\":{\"85\":1}}],[\"这里是内容\",{\"1\":{\"35\":1,\"36\":1,\"40\":1,\"41\":1,\"45\":1,\"46\":1,\"50\":1,\"51\":1,\"687\":1,\"688\":1,\"692\":1,\"693\":1,\"697\":1,\"698\":1,\"702\":1,\"703\":1,\"707\":1,\"708\":1,\"712\":1,\"713\":1,\"717\":1,\"718\":1,\"722\":1,\"723\":1}}],[\"这里\",{\"1\":{\"56\":1}}],[\"樱桃\",{\"0\":{\"34\":1},\"2\":{\"37\":1}}],[\"学习笔记\",{\"0\":{\"32\":1},\"2\":{\"33\":1}}],[\"标示是否被当前用户点赞\",{\"1\":{\"529\":1}}],[\"标记+整理\",{\"1\":{\"380\":1}}],[\"标记\",{\"1\":{\"376\":1,\"379\":3}}],[\"标记整理\",{\"0\":{\"368\":1}}],[\"标记清除\",{\"0\":{\"367\":1}}],[\"标准分词器\",{\"1\":{\"90\":1}}],[\"标志字段\",{\"1\":{\"57\":1}}],[\"标签为\",{\"1\":{\"27\":1,\"675\":1}}],[\"标题\",{\"0\":{\"35\":1,\"36\":1,\"40\":1,\"41\":1,\"45\":1,\"46\":1,\"50\":1,\"51\":1,\"687\":1,\"688\":1,\"692\":1,\"693\":1,\"697\":1,\"698\":1,\"702\":1,\"703\":1,\"707\":1,\"708\":1,\"712\":1,\"713\":1,\"717\":1,\"718\":1,\"722\":1,\"723\":1}}],[\"标题会被视为页面标题\",{\"1\":{\"26\":1,\"674\":1}}],[\"标题和页面信息\",{\"1\":{\"6\":1}}],[\"日期的格式\",{\"1\":{\"89\":1}}],[\"日期或地理位置\",{\"1\":{\"89\":1}}],[\"日志存储\",{\"1\":{\"545\":1,\"548\":1}}],[\"日志给\",{\"1\":{\"81\":1,\"726\":1,\"729\":1}}],[\"日志\",{\"1\":{\"81\":1,\"726\":1,\"729\":1}}],[\"日\",{\"1\":{\"27\":1,\"675\":1}}],[\"月\",{\"1\":{\"27\":1,\"675\":1}}],[\"年龄为23岁\",{\"1\":{\"88\":1}}],[\"年\",{\"1\":{\"27\":1,\"675\":1}}],[\"的环境中\",{\"1\":{\"646\":1}}],[\"的环境来说\",{\"1\":{\"377\":1}}],[\"的数据实时复制到一个或多个其他redis服务器\",{\"1\":{\"618\":1}}],[\"的数据为宜\",{\"1\":{\"394\":1}}],[\"的一致性\",{\"1\":{\"590\":1}}],[\"的一个简单例子\",{\"0\":{\"314\":1}}],[\"的多语言能力\",{\"1\":{\"558\":1}}],[\"的误差\",{\"1\":{\"541\":1}}],[\"的bit值\",{\"1\":{\"538\":1}}],[\"的访问\",{\"1\":{\"478\":1}}],[\"的静态变量一个做自增\",{\"1\":{\"474\":1}}],[\"的静态代码块中\",{\"1\":{\"463\":1}}],[\"的意思\",{\"1\":{\"472\":1}}],[\"的元素\",{\"1\":{\"471\":1}}],[\"的优化\",{\"1\":{\"470\":1}}],[\"的内存模型如下\",{\"1\":{\"474\":1}}],[\"的内存地址\",{\"0\":{\"422\":1},\"1\":{\"422\":1}}],[\"的内部类\",{\"1\":{\"466\":1}}],[\"的思想\",{\"1\":{\"465\":1}}],[\"的上级是bootstarp\",{\"1\":{\"460\":1}}],[\"的线程安全\",{\"1\":{\"454\":1}}],[\"的线程都处于阻塞状态\",{\"1\":{\"278\":1}}],[\"的基本类型\",{\"1\":{\"451\":1}}],[\"的基础\",{\"1\":{\"283\":1}}],[\"的魔数\",{\"1\":{\"450\":1}}],[\"的地址\",{\"1\":{\"448\":1}}],[\"的类加载器\",{\"1\":{\"463\":1}}],[\"的类镜像\",{\"1\":{\"448\":1}}],[\"的类型\",{\"1\":{\"144\":2}}],[\"的子类\",{\"1\":{\"445\":1}}],[\"的方法内联\",{\"1\":{\"471\":1}}],[\"的方法呢\",{\"1\":{\"444\":1}}],[\"的方式释放内存\",{\"1\":{\"351\":1}}],[\"的方式\",{\"1\":{\"277\":1}}],[\"的动作\",{\"1\":{\"437\":1}}],[\"的无参构造方法\",{\"1\":{\"435\":1}}],[\"的反编译功能\",{\"1\":{\"434\":1}}],[\"的为准\",{\"1\":{\"431\":1}}],[\"的情况\",{\"0\":{\"429\":1}}],[\"的情况是通过\",{\"1\":{\"416\":1}}],[\"的检测范围\",{\"1\":{\"427\":1}}],[\"的结构\",{\"1\":{\"427\":1}}],[\"的起始地址\",{\"1\":{\"423\":1}}],[\"的起始地址开始算\",{\"1\":{\"423\":1}}],[\"的字节码\",{\"1\":{\"413\":1}}],[\"的字段\",{\"1\":{\"81\":1,\"726\":1,\"729\":1}}],[\"的比较\",{\"1\":{\"412\":1}}],[\"的区别是先执行\",{\"1\":{\"411\":1}}],[\"的老年代内存越大越好\",{\"1\":{\"395\":1}}],[\"的过程\",{\"1\":{\"379\":1}}],[\"的自适应调节策略\",{\"1\":{\"378\":1}}],[\"的实现类内部\",{\"1\":{\"350\":1}}],[\"的次数\",{\"1\":{\"345\":1}}],[\"的主要区别在于\",{\"1\":{\"316\":1}}],[\"的主要特点包括\",{\"0\":{\"313\":1}}],[\"的时刻调用\",{\"1\":{\"316\":1}}],[\"的最终状态\",{\"1\":{\"305\":1}}],[\"的四种锁状态\",{\"0\":{\"305\":1}}],[\"的四种方式\",{\"1\":{\"251\":1}}],[\"的锁记录\",{\"1\":{\"301\":1}}],[\"的轻量级锁\",{\"1\":{\"301\":1}}],[\"的值缓存至自己工作内存中的高速缓存中\",{\"1\":{\"478\":1}}],[\"的值\",{\"1\":{\"478\":2,\"538\":1}}],[\"的值到工作内存\",{\"1\":{\"478\":1}}],[\"的值赋值给了\",{\"1\":{\"446\":1}}],[\"的值更新为新值b\",{\"1\":{\"309\":1}}],[\"的值相同时\",{\"1\":{\"309\":1}}],[\"的值恢复给对象头\",{\"1\":{\"301\":1,\"302\":1}}],[\"的值存入锁记录\",{\"1\":{\"301\":1}}],[\"的值为\",{\"1\":{\"140\":1}}],[\"的对象\",{\"0\":{\"356\":1}}],[\"的对象仍有机会重新偏向\",{\"1\":{\"299\":1}}],[\"的对象不会关联监视器\",{\"1\":{\"289\":1}}],[\"的简称\",{\"1\":{\"241\":1}}],[\"的底层原理\",{\"0\":{\"166\":1}}],[\"的作用\",{\"0\":{\"163\":1}}],[\"的体验\",{\"1\":{\"115\":1,\"533\":1}}],[\"的character\",{\"1\":{\"90\":1}}],[\"的start\",{\"1\":{\"90\":1}}],[\"的顺序或position位置\",{\"1\":{\"90\":1}}],[\"的所有者\",{\"1\":{\"289\":1}}],[\"的所有人的年龄分布以及平均年龄\",{\"1\":{\"88\":1}}],[\"的所有记录\",{\"1\":{\"88\":1}}],[\"的提取\",{\"1\":{\"81\":1,\"726\":1,\"729\":1}}],[\"的从节点\",{\"1\":{\"81\":1,\"726\":1,\"729\":1}}],[\"的相关配置\",{\"1\":{\"66\":1,\"70\":1,\"74\":1,\"78\":1,\"98\":1,\"102\":1,\"126\":1,\"130\":1,\"488\":1,\"492\":1,\"496\":1,\"500\":1,\"504\":1,\"508\":1}}],[\"的含义是\",{\"1\":{\"55\":1}}],[\"的\",{\"0\":{\"283\":1},\"1\":{\"26\":1,\"27\":1,\"81\":2,\"90\":1,\"279\":1,\"299\":1,\"301\":1,\"302\":1,\"350\":1,\"378\":2,\"423\":1,\"434\":1,\"441\":2,\"442\":2,\"446\":1,\"448\":1,\"451\":1,\"472\":1,\"674\":1,\"675\":1,\"726\":2,\"729\":2}}],[\"high\",{\"1\":{\"641\":1}}],[\"hit\",{\"1\":{\"94\":3}}],[\"hits\",{\"1\":{\"87\":3,\"88\":4,\"89\":2,\"94\":3}}],[\"hbase\",{\"1\":{\"558\":1,\"565\":1}}],[\"hll\",{\"1\":{\"541\":1}}],[\"hmdianpingapplicationtests\",{\"1\":{\"536\":1}}],[\"hyperloglog\",{\"1\":{\"522\":3,\"541\":1}}],[\"hsdb\",{\"0\":{\"419\":1},\"1\":{\"419\":1,\"448\":1}}],[\"huan\",{\"1\":{\"176\":1}}],[\"href=\",{\"1\":{\"160\":1}}],[\"h\",{\"1\":{\"139\":2,\"328\":1,\"387\":2,\"441\":4}}],[\"handshake\",{\"1\":{\"645\":1}}],[\"handler\",{\"1\":{\"362\":1}}],[\"having\",{\"1\":{\"644\":1}}],[\"haozi3156666\",{\"1\":{\"558\":1}}],[\"happen\",{\"1\":{\"466\":1,\"639\":1}}],[\"happens\",{\"1\":{\"283\":1}}],[\"has\",{\"1\":{\"642\":1}}],[\"hasnextservice\",{\"1\":{\"466\":1}}],[\"hasnext\",{\"1\":{\"440\":1,\"464\":1,\"465\":1}}],[\"hasrole\",{\"1\":{\"233\":1,\"239\":1}}],[\"hasauthority\",{\"1\":{\"229\":2,\"239\":1}}],[\"hash函数的数量\",{\"1\":{\"580\":1,\"600\":1,\"611\":1,\"654\":1,\"665\":1}}],[\"hash结构value的虚拟化\",{\"1\":{\"554\":1}}],[\"hash结构key的虚拟化\",{\"1\":{\"554\":1}}],[\"hash\",{\"0\":{\"516\":1},\"1\":{\"560\":1,\"567\":1}}],[\"hashes\",{\"1\":{\"512\":1}}],[\"hashtable结构\",{\"1\":{\"341\":1}}],[\"hashcode\",{\"0\":{\"296\":1},\"1\":{\"295\":1,\"296\":5,\"424\":2,\"441\":13}}],[\"hashmap<>\",{\"1\":{\"537\":1}}],[\"hashmap\",{\"1\":{\"209\":2,\"212\":2,\"215\":2,\"218\":2,\"223\":2,\"225\":2,\"231\":2}}],[\"hash算法\",{\"1\":{\"198\":1}}],[\"half\",{\"1\":{\"198\":1}}],[\"halflmchall\",{\"1\":{\"198\":1}}],[\"ha\",{\"1\":{\"139\":4}}],[\"hence\",{\"1\":{\"642\":1}}],[\"helen\",{\"1\":{\"179\":1}}],[\"hellowworld\",{\"1\":{\"397\":1}}],[\"helloworld\",{\"1\":{\"341\":3,\"397\":5,\"400\":3,\"450\":1}}],[\"hello\",{\"1\":{\"134\":2,\"136\":1,\"148\":1,\"333\":1,\"387\":2,\"397\":1,\"400\":1,\"406\":3,\"439\":1,\"441\":5,\"456\":1}}],[\"heap\",{\"1\":{\"333\":3,\"334\":1}}],[\"heavyweight\",{\"1\":{\"295\":2}}],[\"heading\",{\"1\":{\"541\":1}}],[\"head\",{\"1\":{\"312\":2}}],[\"head>\",{\"1\":{\"160\":1,\"204\":1,\"267\":1}}],[\"headers\",{\"1\":{\"156\":1}}],[\"header\",{\"1\":{\"85\":1}}],[\"health\",{\"1\":{\"85\":1}}],[\"html>\",{\"1\":{\"160\":1,\"204\":2,\"267\":2}}],[\"html\",{\"0\":{\"160\":1},\"1\":{\"90\":4,\"156\":1,\"160\":1,\"195\":1,\"204\":1,\"267\":1,\"412\":2,\"583\":2,\"603\":2,\"614\":2,\"657\":2,\"668\":2}}],[\"httpbasic\",{\"1\":{\"190\":1}}],[\"http客户端工具\",{\"1\":{\"87\":1}}],[\"httpclient\",{\"1\":{\"85\":1}}],[\"httpclinet\",{\"1\":{\"85\":1}}],[\"httpservletresponse\",{\"1\":{\"209\":1,\"212\":1,\"215\":1,\"218\":1,\"225\":1}}],[\"httpservletrequests\",{\"1\":{\"231\":1}}],[\"httpservletrequest\",{\"1\":{\"209\":1,\"212\":1,\"215\":1,\"218\":1}}],[\"httpsecurity\",{\"1\":{\"190\":1}}],[\"https\",{\"1\":{\"90\":1,\"133\":2,\"146\":1,\"151\":1,\"156\":2,\"160\":1,\"204\":1,\"253\":1,\"267\":2,\"271\":3,\"412\":1,\"481\":3,\"512\":2,\"541\":1,\"553\":1,\"554\":1,\"558\":4,\"560\":1,\"567\":1,\"568\":2,\"583\":3,\"603\":3,\"614\":3,\"657\":3,\"668\":3}}],[\"https对比\",{\"1\":{\"62\":1}}],[\"https加密过程\",{\"1\":{\"62\":1}}],[\"http\",{\"1\":{\"62\":2,\"66\":1,\"70\":1,\"74\":1,\"78\":1,\"85\":6,\"90\":2,\"98\":1,\"102\":1,\"126\":1,\"130\":1,\"156\":2,\"161\":2,\"183\":1,\"190\":3,\"195\":1,\"196\":1,\"216\":1,\"219\":1,\"220\":1,\"226\":1,\"229\":1,\"231\":1,\"233\":1,\"265\":1,\"267\":1,\"471\":1,\"488\":1,\"492\":1,\"496\":1,\"500\":1,\"504\":1,\"508\":1,\"568\":1}}],[\"however\",{\"1\":{\"643\":1,\"645\":1}}],[\"hops\",{\"1\":{\"641\":1}}],[\"hope\",{\"1\":{\"27\":1,\"639\":1,\"675\":1}}],[\"hosts使用的是es的9200端口\",{\"1\":{\"568\":1}}],[\"hosts\",{\"1\":{\"568\":1}}],[\"host\",{\"1\":{\"554\":1,\"561\":1,\"568\":2,\"637\":1}}],[\"hot\",{\"1\":{\"461\":2}}],[\"hotspot名称的由\",{\"1\":{\"469\":1}}],[\"hotspot\",{\"1\":{\"337\":1,\"419\":1}}],[\"home\",{\"1\":{\"457\":2,\"459\":2,\"460\":1,\"463\":2}}],[\"hobucken\",{\"1\":{\"85\":1}}],[\"h1>\",{\"1\":{\"160\":1,\"204\":1,\"267\":1}}],[\"h1\",{\"1\":{\"26\":2,\"674\":2}}],[\"h2o\",{\"1\":{\"21\":1}}],[\"fpp\",{\"1\":{\"581\":2,\"601\":2,\"612\":2,\"655\":2,\"666\":2}}],[\"f2\",{\"1\":{\"580\":4,\"600\":4,\"611\":4,\"654\":4,\"665\":4}}],[\"f1\",{\"1\":{\"580\":3,\"600\":3,\"611\":3,\"654\":3,\"665\":3}}],[\"flush\",{\"1\":{\"552\":2,\"559\":2,\"566\":2}}],[\"flag\",{\"1\":{\"400\":1}}],[\"flags\",{\"1\":{\"397\":1,\"406\":3,\"411\":1,\"428\":1,\"429\":1,\"438\":2}}],[\"float\",{\"1\":{\"267\":4,\"400\":1,\"412\":1}}],[\"float64\",{\"1\":{\"116\":1,\"117\":2,\"119\":1,\"144\":3,\"148\":1,\"150\":1}}],[\"feature\",{\"1\":{\"644\":2}}],[\"few\",{\"1\":{\"635\":1}}],[\"feed\",{\"1\":{\"534\":1,\"535\":1}}],[\"feed流的滚动分页\",{\"1\":{\"534\":1}}],[\"feed流的实现有两种模式\",{\"1\":{\"533\":1}}],[\"feed流实现方案\",{\"0\":{\"533\":1}}],[\"feed流中的数据会不断更新\",{\"1\":{\"115\":1,\"534\":1}}],[\"feed流产品有两种常见模式\",{\"1\":{\"115\":1,\"533\":1}}],[\"fe\",{\"1\":{\"397\":1,\"398\":2,\"399\":2,\"400\":3}}],[\"female\",{\"1\":{\"138\":1,\"442\":6,\"443\":5}}],[\"fenci\",{\"1\":{\"90\":2}}],[\"folding\",{\"1\":{\"470\":1}}],[\"following\",{\"1\":{\"640\":1,\"642\":1,\"645\":2}}],[\"followid\",{\"1\":{\"106\":2,\"107\":2}}],[\"followcommons\",{\"1\":{\"532\":1}}],[\"followcontroller\",{\"1\":{\"531\":1}}],[\"follows\",{\"1\":{\"531\":1,\"532\":3,\"534\":2}}],[\"followserviceimpl\",{\"1\":{\"532\":2}}],[\"followservice\",{\"1\":{\"531\":3,\"534\":1}}],[\"follow表来标示\",{\"1\":{\"531\":1}}],[\"followeruserid\",{\"1\":{\"110\":1,\"111\":1,\"532\":1}}],[\"followuserid\",{\"1\":{\"108\":1,\"110\":1,\"111\":1,\"531\":9,\"532\":5}}],[\"follow\",{\"1\":{\"108\":1,\"110\":1,\"111\":1,\"118\":2,\"122\":1,\"531\":15,\"532\":10,\"534\":6,\"535\":1}}],[\"followoff\",{\"1\":{\"107\":1,\"111\":1}}],[\"followon\",{\"1\":{\"106\":1,\"110\":1}}],[\"followkey2\",{\"1\":{\"109\":2}}],[\"followkey1\",{\"1\":{\"109\":2}}],[\"followkey\",{\"1\":{\"106\":2,\"107\":2,\"108\":2}}],[\"foo\",{\"1\":{\"439\":6,\"472\":6,\"525\":2,\"526\":2}}],[\"font\",{\"1\":{\"267\":5}}],[\"forwarding\",{\"1\":{\"645\":1}}],[\"forth\",{\"1\":{\"638\":1}}],[\"forname的参数2为false时\",{\"1\":{\"455\":1}}],[\"forname\",{\"1\":{\"455\":3,\"458\":1,\"463\":1,\"464\":2,\"466\":2}}],[\"foreach\",{\"0\":{\"440\":1},\"1\":{\"440\":3,\"537\":1,\"561\":2}}],[\"forks\",{\"1\":{\"471\":1}}],[\"fork\",{\"1\":{\"303\":1}}],[\"form\",{\"1\":{\"205\":2,\"210\":1,\"213\":1}}],[\"form>\",{\"1\":{\"204\":1,\"267\":1}}],[\"formlogin\",{\"1\":{\"190\":1,\"205\":1}}],[\"format=row\",{\"1\":{\"552\":1,\"559\":1,\"566\":1}}],[\"format=b\",{\"1\":{\"357\":2}}],[\"format\",{\"1\":{\"148\":1,\"150\":1,\"539\":1,\"540\":1}}],[\"formatint\",{\"1\":{\"93\":1}}],[\"for\",{\"1\":{\"94\":1,\"112\":1,\"116\":1,\"117\":1,\"139\":1,\"295\":1,\"299\":2,\"300\":3,\"338\":1,\"345\":1,\"364\":5,\"365\":5,\"413\":3,\"438\":2,\"440\":3,\"445\":1,\"464\":1,\"469\":2,\"470\":2,\"471\":5,\"472\":1,\"474\":2,\"476\":2,\"526\":1,\"534\":1,\"535\":2,\"536\":2,\"537\":1,\"568\":1,\"581\":2,\"601\":2,\"612\":2,\"635\":1,\"640\":3,\"641\":4,\"642\":4,\"643\":3,\"644\":3,\"645\":2,\"655\":2,\"666\":2}}],[\"fox\",{\"1\":{\"90\":3}}],[\"found\",{\"1\":{\"85\":1,\"460\":1,\"466\":1,\"732\":1}}],[\"funnels\",{\"1\":{\"581\":1,\"601\":1,\"612\":1,\"655\":1,\"666\":1}}],[\"func\",{\"1\":{\"66\":1,\"70\":1,\"74\":1,\"78\":1,\"92\":1,\"93\":1,\"94\":1,\"98\":4,\"102\":4,\"106\":1,\"107\":1,\"108\":1,\"109\":1,\"110\":1,\"111\":1,\"112\":1,\"116\":1,\"117\":1,\"118\":1,\"119\":1,\"120\":1,\"121\":1,\"122\":1,\"126\":1,\"130\":1,\"134\":1,\"136\":2,\"138\":2,\"139\":1,\"140\":1,\"141\":1,\"142\":1,\"143\":2,\"144\":3,\"148\":4,\"150\":4,\"151\":1,\"488\":1,\"492\":1,\"496\":1,\"500\":1,\"504\":1,\"508\":1}}],[\"future\",{\"1\":{\"277\":1}}],[\"fullgc\",{\"1\":{\"389\":1}}],[\"full\",{\"1\":{\"89\":1,\"289\":1,\"351\":1,\"364\":1,\"371\":1,\"373\":1,\"384\":2,\"393\":1,\"394\":2,\"395\":2,\"396\":3,\"639\":1,\"642\":1}}],[\"f\",{\"1\":{\"85\":1,\"139\":2,\"142\":1,\"148\":9,\"150\":3,\"339\":3,\"343\":1,\"458\":4}}],[\"fast\",{\"1\":{\"639\":1}}],[\"fastjson2<\",{\"1\":{\"207\":1}}],[\"factory\",{\"1\":{\"554\":2}}],[\"facebook\",{\"1\":{\"271\":1}}],[\"fairness\",{\"1\":{\"313\":1}}],[\"fail\",{\"1\":{\"466\":3,\"528\":1,\"534\":1}}],[\"failurehandler\",{\"1\":{\"213\":1}}],[\"failureurl\",{\"1\":{\"205\":1}}],[\"failed\",{\"1\":{\"66\":2,\"70\":2,\"74\":2,\"78\":2,\"85\":3,\"88\":1,\"90\":1,\"92\":1,\"93\":1,\"94\":1,\"98\":7,\"102\":7,\"121\":3,\"126\":2,\"130\":2,\"464\":1,\"488\":2,\"492\":2,\"496\":2,\"500\":2,\"504\":2,\"508\":2,\"560\":1,\"561\":2,\"567\":1}}],[\"fallthrough应该是某个case的最后一行\",{\"1\":{\"143\":1}}],[\"fallthrough\",{\"0\":{\"143\":1},\"1\":{\"143\":1}}],[\"false\",{\"1\":{\"85\":1,\"88\":1,\"89\":1,\"134\":1,\"138\":2,\"140\":2,\"188\":1,\"286\":2,\"341\":2,\"343\":2,\"455\":2,\"460\":1,\"466\":1,\"478\":1,\"480\":1,\"481\":2,\"529\":1,\"537\":2,\"560\":2,\"567\":2}}],[\"fans\",{\"1\":{\"118\":3}}],[\"fmt包读取键盘输入\",{\"0\":{\"150\":1}}],[\"fmt包实现了类似c语言printf和scanf的格式化i\",{\"1\":{\"146\":1}}],[\"fmt包\",{\"0\":{\"146\":1}}],[\"fmt\",{\"1\":{\"66\":3,\"70\":3,\"74\":3,\"78\":3,\"90\":1,\"92\":2,\"93\":2,\"94\":5,\"98\":6,\"102\":6,\"126\":3,\"130\":3,\"136\":5,\"138\":5,\"139\":2,\"140\":3,\"141\":3,\"142\":7,\"143\":8,\"144\":7,\"146\":1,\"147\":1,\"148\":14,\"150\":6,\"151\":3,\"488\":3,\"492\":3,\"496\":3,\"500\":3,\"504\":3,\"508\":3}}],[\"fianlly\",{\"1\":{\"444\":1}}],[\"filename\",{\"1\":{\"527\":4}}],[\"fileinputstream\",{\"1\":{\"444\":2}}],[\"file\",{\"1\":{\"357\":1,\"527\":2,\"635\":1,\"639\":7}}],[\"file=1\",{\"1\":{\"357\":1}}],[\"filters\",{\"1\":{\"522\":2}}],[\"filter列表\",{\"1\":{\"170\":1}}],[\"filter实例\",{\"1\":{\"169\":1}}],[\"filterchainproxy决定使用哪个securityfilterchain\",{\"1\":{\"171\":1}}],[\"filterchainproxy\",{\"0\":{\"169\":1},\"1\":{\"169\":1,\"170\":1}}],[\"filterchain\",{\"1\":{\"167\":1,\"190\":1}}],[\"filter\",{\"0\":{\"167\":1},\"1\":{\"88\":3,\"168\":2,\"522\":2,\"553\":3}}],[\"fieldref\",{\"1\":{\"400\":2,\"406\":1}}],[\"fields\",{\"1\":{\"88\":1,\"89\":2,\"397\":3}}],[\"field\",{\"1\":{\"88\":10,\"89\":1,\"351\":4,\"397\":1,\"400\":1,\"406\":1,\"411\":2,\"414\":1,\"415\":3,\"433\":1,\"471\":1,\"530\":2,\"535\":1,\"537\":1}}],[\"finebi\",{\"1\":{\"680\":1,\"683\":1}}],[\"finishes\",{\"1\":{\"639\":1}}],[\"finished\",{\"1\":{\"338\":1}}],[\"findclass\",{\"1\":{\"460\":2}}],[\"findbootstrapclassornull\",{\"1\":{\"460\":1}}],[\"findloadedclass\",{\"1\":{\"460\":1}}],[\"find\",{\"1\":{\"420\":1}}],[\"findstr\",{\"1\":{\"390\":1}}],[\"finalize\",{\"1\":{\"363\":1,\"424\":2}}],[\"finalizer\",{\"1\":{\"363\":1}}],[\"finally不带return\",{\"0\":{\"432\":1}}],[\"finally中的return\",{\"0\":{\"431\":1}}],[\"finally\",{\"0\":{\"430\":1},\"1\":{\"338\":1,\"345\":1,\"350\":1,\"430\":2,\"431\":7,\"432\":1,\"444\":2}}],[\"final\",{\"1\":{\"277\":1,\"289\":1,\"294\":1,\"350\":1,\"364\":1,\"373\":5,\"374\":5,\"375\":5,\"400\":2,\"416\":1,\"423\":1,\"443\":4,\"446\":6,\"455\":1,\"456\":4,\"463\":1,\"470\":2,\"472\":1}}],[\"fin\",{\"1\":{\"57\":1}}],[\"firstname\",{\"1\":{\"85\":1,\"89\":1}}],[\"first\",{\"0\":{\"380\":1},\"1\":{\"26\":1,\"85\":1,\"637\":1,\"674\":1}}],[\"free\",{\"1\":{\"642\":1}}],[\"freed\",{\"1\":{\"642\":2}}],[\"freememory\",{\"1\":{\"350\":3,\"351\":2}}],[\"freememory来手动释放\",{\"1\":{\"350\":1}}],[\"fragment=\",{\"1\":{\"267\":1}}],[\"framework\",{\"1\":{\"251\":1}}],[\"frame\",{\"1\":{\"165\":1,\"289\":3,\"326\":1}}],[\"frac\",{\"1\":{\"18\":4}}],[\"fromcoordinate\",{\"1\":{\"537\":1}}],[\"from=pagedriver\",{\"1\":{\"481\":1}}],[\"from和to\",{\"1\":{\"369\":1}}],[\"from+size限定\",{\"1\":{\"88\":1}}],[\"from\",{\"1\":{\"88\":1,\"118\":1,\"289\":1,\"371\":2,\"393\":1,\"400\":1,\"406\":1,\"420\":1,\"427\":2,\"428\":1,\"429\":1,\"430\":1,\"431\":1,\"432\":1,\"433\":1,\"460\":1,\"531\":2,\"532\":1,\"534\":1,\"537\":4,\"568\":1,\"639\":1,\"640\":3,\"642\":1,\"644\":2}}],[\"frontmatter\",{\"1\":{\"3\":1,\"6\":1,\"11\":4,\"26\":1,\"27\":1,\"274\":1,\"674\":1,\"675\":1}}],[\"上传接口\",{\"1\":{\"527\":1}}],[\"上例从字节码理解是这样的\",{\"1\":{\"481\":1}}],[\"上级为application\",{\"1\":{\"457\":1}}],[\"上级为extension\",{\"1\":{\"457\":1}}],[\"上级为bootstrap\",{\"1\":{\"457\":1}}],[\"上进行运算\",{\"1\":{\"411\":1}}],[\"上锁的过程中\",{\"1\":{\"289\":1}}],[\"上一章节我们是同步到rocketmq\",{\"1\":{\"567\":1}}],[\"上一次查询的最小时间戳\",{\"1\":{\"115\":1,\"535\":1}}],[\"上一篇\",{\"1\":{\"3\":1,\"274\":1}}],[\"上面把要修改的内容展示出来了\",{\"1\":{\"568\":1}}],[\"上面开通的mysql用户\",{\"1\":{\"553\":1,\"560\":1,\"567\":1}}],[\"上面的代码中\",{\"1\":{\"364\":1,\"582\":1,\"602\":1,\"613\":1,\"656\":1,\"667\":1}}],[\"上面的must和should影响相关性得分\",{\"1\":{\"88\":1}}],[\"上面的数据\",{\"1\":{\"85\":1}}],[\"上面的这些socket的意思都和本章所引用的rfc793定义的socket\",{\"1\":{\"56\":1}}],[\"上面已经讲到\",{\"1\":{\"60\":1}}],[\"上层的应用进程在合适的时候读取缓存中的数据\",{\"1\":{\"55\":1}}],[\"上下角标\",{\"0\":{\"21\":1}}],[\"2^32个bit位\",{\"1\":{\"538\":1}}],[\"2提供的geosearch命令\",{\"1\":{\"537\":1}}],[\"2版本中加入了对geo的支持\",{\"1\":{\"535\":1}}],[\"2版本引入的一个功能\",{\"1\":{\"521\":1}}],[\"2<\",{\"1\":{\"525\":1,\"537\":1}}],[\"2层\",{\"1\":{\"469\":1}}],[\"2面世以前的\",{\"1\":{\"461\":1}}],[\"2项\",{\"1\":{\"400\":1}}],[\"2a\",{\"1\":{\"397\":1}}],[\"2e\",{\"1\":{\"397\":1,\"400\":4}}],[\"2f\",{\"1\":{\"397\":23,\"400\":31}}],[\"2特点\",{\"0\":{\"332\":1}}],[\"27项\",{\"1\":{\"400\":1}}],[\"27\",{\"1\":{\"299\":4,\"341\":2,\"400\":3,\"406\":2,\"428\":1,\"429\":1,\"430\":3,\"433\":1,\"437\":1,\"438\":1}}],[\"26项\",{\"1\":{\"400\":1}}],[\"26\",{\"1\":{\"299\":4,\"324\":6,\"338\":1,\"400\":2,\"406\":2,\"428\":4,\"429\":2,\"430\":1,\"433\":1}}],[\"23项\",{\"1\":{\"400\":1}}],[\"23\",{\"1\":{\"289\":1,\"299\":4,\"397\":1,\"398\":1,\"399\":2,\"400\":7,\"406\":2,\"415\":1,\"416\":1,\"428\":2}}],[\"220\",{\"1\":{\"471\":1}}],[\"22项\",{\"1\":{\"400\":1}}],[\"22\",{\"1\":{\"289\":2,\"299\":4,\"333\":1,\"397\":1,\"400\":8,\"406\":2,\"411\":1,\"415\":1,\"428\":2,\"429\":4,\"430\":1,\"433\":2,\"437\":1,\"438\":1,\"451\":2}}],[\"2104d11ee0a2\",{\"1\":{\"583\":1,\"603\":1,\"614\":1,\"657\":1,\"668\":1}}],[\"2123\",{\"1\":{\"441\":2}}],[\"21项\",{\"1\":{\"400\":1}}],[\"21\",{\"1\":{\"289\":1,\"299\":4,\"324\":1,\"341\":2,\"397\":2,\"400\":10,\"401\":5,\"406\":2,\"411\":1,\"414\":3,\"429\":1,\"430\":3,\"433\":1,\"437\":1,\"438\":1}}],[\"2469176\",{\"1\":{\"471\":1}}],[\"2420286\",{\"1\":{\"471\":1}}],[\"24项\",{\"1\":{\"400\":1}}],[\"24\",{\"1\":{\"289\":3,\"299\":4,\"324\":1,\"341\":2,\"393\":1,\"400\":2,\"406\":2,\"414\":1,\"430\":1,\"438\":2}}],[\"244\",{\"1\":{\"85\":1}}],[\"2中的角色\",{\"1\":{\"258\":1}}],[\"2协议包含以下角色\",{\"1\":{\"242\":1}}],[\"2securityfilterchain配置\",{\"0\":{\"213\":1}}],[\"2进制的整数\",{\"1\":{\"148\":1}}],[\"2544313\",{\"1\":{\"471\":1}}],[\"25项\",{\"1\":{\"400\":1}}],[\"250\",{\"1\":{\"289\":1}}],[\"255\",{\"1\":{\"289\":1}}],[\"25\",{\"1\":{\"289\":1,\"295\":1,\"299\":4,\"324\":1,\"400\":2,\"406\":2,\"411\":2,\"414\":1,\"415\":1,\"428\":2,\"429\":4,\"430\":1,\"433\":4,\"643\":1}}],[\"256\",{\"1\":{\"89\":1,\"198\":1}}],[\"25208\",{\"1\":{\"88\":1}}],[\"28项\",{\"1\":{\"400\":1}}],[\"28\",{\"1\":{\"88\":2,\"299\":4,\"397\":3,\"400\":9,\"406\":2,\"411\":1,\"414\":1,\"415\":1,\"433\":2}}],[\"2kb\",{\"1\":{\"85\":2}}],[\"296141\",{\"1\":{\"471\":1}}],[\"29453f44\",{\"1\":{\"459\":1}}],[\"29项\",{\"1\":{\"400\":1}}],[\"29\",{\"1\":{\"85\":1,\"299\":4,\"324\":1,\"341\":2,\"397\":3,\"400\":11,\"401\":4,\"411\":1,\"415\":1,\"433\":1}}],[\"20项\",{\"1\":{\"400\":1}}],[\"20m\",{\"1\":{\"364\":1}}],[\"200万的数据进行测试\",{\"1\":{\"582\":1,\"602\":1,\"613\":1,\"656\":1,\"667\":1}}],[\"200ms\",{\"1\":{\"378\":1}}],[\"200\",{\"1\":{\"136\":2,\"380\":1,\"469\":1}}],[\"2000ms\",{\"1\":{\"561\":1}}],[\"2000\",{\"1\":{\"116\":1,\"316\":1}}],[\"2000000\",{\"1\":{\"581\":1,\"601\":1,\"612\":1,\"655\":1,\"666\":1}}],[\"20000\",{\"1\":{\"88\":1}}],[\"20\",{\"1\":{\"88\":1,\"136\":2,\"140\":2,\"143\":1,\"289\":1,\"299\":5,\"324\":2,\"341\":2,\"397\":2,\"400\":6,\"406\":2,\"412\":2,\"415\":5,\"416\":1,\"427\":2,\"430\":2,\"431\":6,\"432\":4,\"433\":1,\"437\":1,\"438\":3,\"456\":1,\"472\":1,\"553\":1,\"560\":1,\"567\":1}}],[\"20的文档\",{\"1\":{\"88\":1}}],[\"2014\",{\"1\":{\"481\":1}}],[\"201\",{\"1\":{\"85\":2}}],[\"202203\",{\"1\":{\"540\":1}}],[\"2021\",{\"1\":{\"406\":1}}],[\"20211012192537189\",{\"1\":{\"90\":1}}],[\"20211012192408901\",{\"1\":{\"90\":1}}],[\"20211012154808341\",{\"1\":{\"90\":1}}],[\"20211012145531890\",{\"1\":{\"89\":1}}],[\"20211012145516034\",{\"1\":{\"89\":1}}],[\"20211012145448490\",{\"1\":{\"89\":1}}],[\"20211011143910397\",{\"1\":{\"87\":1}}],[\"20211011140906175\",{\"1\":{\"85\":1}}],[\"20211011134451525\",{\"1\":{\"85\":1}}],[\"20211011134234874\",{\"1\":{\"85\":1}}],[\"20230510165314829\",{\"1\":{\"264\":1}}],[\"20230510163101376\",{\"1\":{\"263\":1}}],[\"20230510154255157\",{\"1\":{\"263\":1}}],[\"20230421184645177\",{\"1\":{\"199\":1}}],[\"20230410140908841\",{\"1\":{\"161\":1}}],[\"20231221000906168\",{\"1\":{\"263\":1}}],[\"20231223203225688\",{\"1\":{\"270\":1}}],[\"20231223164128030\",{\"1\":{\"261\":1}}],[\"20231223020052999\",{\"1\":{\"256\":1}}],[\"20231220185958063\",{\"1\":{\"255\":1}}],[\"20231220180422742\",{\"1\":{\"252\":1}}],[\"20231220190152888\",{\"1\":{\"254\":1}}],[\"20231222203259785\",{\"1\":{\"255\":1}}],[\"20231222203240921\",{\"1\":{\"254\":1}}],[\"20231222203218334\",{\"1\":{\"253\":1}}],[\"20231222203153125\",{\"1\":{\"252\":1}}],[\"20231222152557861\",{\"1\":{\"249\":1}}],[\"20231222152734546\",{\"1\":{\"248\":1}}],[\"20231222131118611\",{\"1\":{\"246\":1}}],[\"20231222131233025\",{\"1\":{\"245\":1}}],[\"20231222124053994\",{\"1\":{\"242\":1}}],[\"20231209011827867\",{\"1\":{\"201\":1}}],[\"20231206023030864\",{\"1\":{\"196\":1}}],[\"20231206022701725\",{\"1\":{\"195\":1}}],[\"20231205164049257\",{\"1\":{\"174\":1}}],[\"20231204230216259\",{\"1\":{\"173\":1}}],[\"20231130152345471\",{\"1\":{\"164\":1}}],[\"20231130152247055\",{\"1\":{\"164\":1}}],[\"20240720211011947\",{\"1\":{\"151\":1}}],[\"20240720211002113\",{\"1\":{\"151\":1}}],[\"20240720210942710\",{\"1\":{\"151\":1}}],[\"20240720210930091\",{\"1\":{\"150\":1}}],[\"20240720210909087\",{\"1\":{\"148\":1}}],[\"20240720210834530\",{\"1\":{\"146\":1}}],[\"20240720205940115\",{\"1\":{\"139\":1}}],[\"20240720193959648\",{\"1\":{\"133\":1}}],[\"20240720193943393\",{\"1\":{\"133\":1}}],[\"20240721031348904\",{\"1\":{\"115\":1}}],[\"20240721031244857\",{\"1\":{\"115\":1}}],[\"20240721000951669\",{\"1\":{\"115\":1}}],[\"20240721000935042\",{\"1\":{\"115\":1}}],[\"20240724174902053\",{\"1\":{\"90\":1}}],[\"20240724174725467\",{\"1\":{\"90\":1}}],[\"20240716233013863\",{\"1\":{\"572\":1}}],[\"20240716232939467\",{\"1\":{\"572\":1}}],[\"20240716232915559\",{\"1\":{\"572\":1}}],[\"20240716184046490\",{\"1\":{\"512\":1}}],[\"20240716173734159\",{\"1\":{\"81\":1,\"726\":1,\"729\":1}}],[\"20240716171207081\",{\"1\":{\"726\":1,\"729\":1}}],[\"20240716171234652\",{\"1\":{\"81\":1,\"726\":1,\"729\":1}}],[\"20240716171151636\",{\"1\":{\"81\":1,\"726\":1,\"729\":1}}],[\"20240716171141128\",{\"1\":{\"81\":1,\"726\":1,\"729\":1}}],[\"20240717181813999\",{\"1\":{\"617\":1}}],[\"20240717182103796\",{\"1\":{\"617\":1}}],[\"20240717150210528\",{\"1\":{\"565\":1}}],[\"20240717000827587\",{\"1\":{\"592\":1}}],[\"20240717040036393\",{\"1\":{\"590\":1}}],[\"20240717040018130\",{\"1\":{\"590\":1}}],[\"20240717032251588\",{\"1\":{\"591\":1}}],[\"20240717032141396\",{\"1\":{\"590\":1}}],[\"20240717031606230\",{\"1\":{\"592\":1}}],[\"20240717031931497\",{\"1\":{\"589\":1}}],[\"20240717031245889\",{\"1\":{\"588\":1}}],[\"20240717031153944\",{\"1\":{\"587\":1}}],[\"20240717073627838\",{\"1\":{\"592\":1}}],[\"20240717073638153\",{\"1\":{\"552\":1,\"592\":1}}],[\"20240717073909259\",{\"1\":{\"81\":1}}],[\"20240717073857877\",{\"1\":{\"81\":1}}],[\"20240715222432570\",{\"1\":{\"478\":1}}],[\"20240715222337696\",{\"1\":{\"478\":1}}],[\"20240715222147607\",{\"1\":{\"478\":1}}],[\"20240715213034845\",{\"1\":{\"474\":1}}],[\"20240715200831758\",{\"1\":{\"464\":1}}],[\"20240715233123923\",{\"1\":{\"310\":1}}],[\"20240718143913151\",{\"1\":{\"59\":1}}],[\"20240718014234276\",{\"1\":{\"54\":1}}],[\"20240718012318793\",{\"1\":{\"54\":1}}],[\"20240718012257046\",{\"1\":{\"54\":1}}],[\"20240718012231414\",{\"1\":{\"54\":1}}],[\"20240718012155747\",{\"1\":{\"54\":1}}],[\"20240718012117157\",{\"1\":{\"54\":1}}],[\"20240718012410220\",{\"1\":{\"54\":1}}],[\"20240718012528965\",{\"1\":{\"54\":1}}],[\"2020\",{\"1\":{\"27\":1,\"675\":1}}],[\"2的16次方\",{\"1\":{\"57\":1}}],[\"2个字节\",{\"1\":{\"57\":1}}],[\"2\",{\"0\":{\"35\":1,\"40\":1,\"45\":1,\"50\":1,\"88\":1,\"135\":1,\"139\":1,\"140\":1,\"141\":2,\"142\":1,\"143\":1,\"144\":1,\"147\":1,\"150\":1,\"151\":2,\"159\":1,\"164\":1,\"166\":1,\"167\":1,\"168\":2,\"169\":1,\"170\":1,\"171\":1,\"174\":1,\"177\":1,\"178\":1,\"179\":1,\"180\":2,\"181\":1,\"182\":1,\"183\":1,\"184\":1,\"185\":1,\"188\":1,\"193\":1,\"199\":1,\"204\":1,\"207\":1,\"210\":1,\"216\":1,\"219\":1,\"223\":1,\"224\":1,\"225\":1,\"226\":2,\"232\":1,\"236\":1,\"237\":1,\"238\":2,\"239\":2,\"242\":1,\"257\":1,\"258\":1,\"259\":2,\"260\":1,\"261\":1,\"264\":1,\"271\":1,\"325\":1,\"326\":1,\"327\":2,\"328\":1,\"337\":1,\"349\":1,\"355\":1,\"366\":1,\"367\":1,\"368\":2,\"369\":1,\"372\":1,\"378\":1,\"392\":1,\"399\":1,\"402\":1,\"403\":1,\"404\":2,\"406\":1,\"411\":1,\"412\":1,\"413\":1,\"414\":1,\"415\":1,\"416\":1,\"417\":1,\"419\":1,\"426\":1,\"428\":1,\"433\":1,\"436\":1,\"449\":1,\"451\":1,\"455\":1,\"459\":1,\"470\":1,\"472\":1,\"475\":1,\"477\":1,\"478\":1,\"479\":2,\"481\":1,\"542\":1,\"687\":1,\"691\":1,\"692\":1,\"697\":1,\"702\":1,\"707\":1,\"711\":1,\"712\":1,\"717\":1,\"722\":1},\"1\":{\"19\":1,\"55\":1,\"56\":2,\"85\":7,\"88\":3,\"89\":3,\"90\":12,\"98\":2,\"102\":1,\"106\":1,\"107\":1,\"109\":1,\"110\":1,\"115\":1,\"116\":1,\"117\":1,\"118\":2,\"121\":1,\"122\":1,\"133\":2,\"138\":1,\"139\":2,\"141\":1,\"143\":1,\"158\":2,\"241\":1,\"251\":2,\"264\":1,\"267\":3,\"285\":1,\"289\":10,\"290\":1,\"295\":1,\"299\":4,\"312\":1,\"315\":1,\"316\":2,\"324\":2,\"326\":4,\"341\":15,\"343\":1,\"350\":1,\"357\":1,\"406\":2,\"410\":3,\"411\":7,\"412\":1,\"413\":6,\"414\":13,\"415\":4,\"416\":1,\"422\":3,\"427\":4,\"428\":13,\"429\":2,\"430\":4,\"431\":2,\"432\":3,\"433\":5,\"437\":4,\"438\":5,\"440\":5,\"442\":3,\"445\":2,\"455\":2,\"459\":1,\"464\":2,\"471\":1,\"519\":2,\"526\":1,\"528\":1,\"529\":4,\"530\":5,\"531\":2,\"532\":3,\"534\":2,\"535\":11,\"536\":2,\"537\":2,\"539\":1,\"540\":1,\"554\":3,\"561\":4,\"568\":1,\"580\":1,\"592\":1,\"600\":1,\"611\":1,\"635\":1,\"637\":1,\"638\":1,\"639\":1,\"640\":1,\"654\":1,\"665\":1}}],[\"rdb\",{\"1\":{\"639\":6,\"640\":2}}],[\"rinack\",{\"1\":{\"583\":1,\"603\":1,\"614\":1,\"657\":1,\"668\":1}}],[\"right\",{\"1\":{\"18\":3,\"267\":2}}],[\"ruanyifeng\",{\"1\":{\"251\":1}}],[\"runtimeexception\",{\"1\":{\"527\":1}}],[\"runnerexception\",{\"1\":{\"471\":2}}],[\"runner\",{\"1\":{\"471\":6}}],[\"runnable\",{\"1\":{\"446\":13}}],[\"running\",{\"1\":{\"286\":5,\"319\":2,\"446\":2}}],[\"run方法\",{\"1\":{\"350\":1}}],[\"run\",{\"1\":{\"90\":2,\"350\":3,\"446\":4,\"464\":2,\"471\":1,\"478\":9,\"480\":4,\"481\":12,\"554\":1}}],[\"rfc\",{\"1\":{\"251\":1,\"253\":1,\"254\":1}}],[\"rfc6749\",{\"1\":{\"251\":1}}],[\"rbac\",{\"1\":{\"235\":1}}],[\"rocketmqlistener<messageext>\",{\"1\":{\"561\":1}}],[\"rocketmqmessagelistener\",{\"1\":{\"561\":1}}],[\"rocketmq<\",{\"1\":{\"561\":1}}],[\"rocketmq极简入门专题\",{\"1\":{\"560\":1}}],[\"rocketmq的地址\",{\"1\":{\"560\":1,\"567\":1}}],[\"rocketmq等\",{\"1\":{\"558\":1,\"565\":1}}],[\"rocketmq\",{\"1\":{\"553\":1,\"558\":1,\"560\":13,\"561\":1,\"567\":10,\"568\":1}}],[\"row是记录数据\",{\"1\":{\"552\":1,\"559\":1,\"566\":1}}],[\"ro\",{\"1\":{\"538\":1}}],[\"root引用的对象\",{\"1\":{\"369\":1}}],[\"root引用的对象从from放入to中\",{\"1\":{\"369\":1}}],[\"roots\",{\"1\":{\"359\":1,\"379\":2}}],[\"root\",{\"1\":{\"357\":1,\"382\":1,\"568\":1}}],[\"round\",{\"1\":{\"350\":1}}],[\"role\",{\"1\":{\"235\":10,\"560\":1,\"567\":1,\"637\":1,\"643\":1,\"645\":2}}],[\"roles\",{\"1\":{\"176\":1,\"234\":1,\"238\":1}}],[\"road就用match\",{\"1\":{\"88\":1}}],[\"road一整个子串\",{\"1\":{\"88\":1}}],[\"road\",{\"1\":{\"88\":8}}],[\"randomints\",{\"1\":{\"471\":2}}],[\"random\",{\"1\":{\"471\":4}}],[\"range\",{\"1\":{\"88\":1,\"94\":1,\"112\":1,\"116\":1,\"117\":1,\"530\":1}}],[\"rabbitmq\",{\"1\":{\"568\":1},\"2\":{\"103\":1,\"104\":1}}],[\"rawmessage\",{\"1\":{\"90\":1}}],[\"rmnsjz\",{\"1\":{\"179\":3,\"201\":1}}],[\"rm\",{\"1\":{\"90\":1}}],[\"reachable\",{\"1\":{\"645\":1}}],[\"read\",{\"1\":{\"271\":1,\"297\":1,\"351\":6,\"357\":2,\"364\":1,\"417\":1,\"418\":1,\"451\":1,\"452\":1,\"628\":1,\"629\":1,\"638\":5,\"639\":1}}],[\"readstring\",{\"1\":{\"151\":1}}],[\"reader\",{\"1\":{\"151\":2}}],[\"report\",{\"1\":{\"645\":2}}],[\"reported\",{\"1\":{\"645\":1}}],[\"replconf\",{\"1\":{\"637\":1,\"640\":1}}],[\"reply\",{\"1\":{\"637\":2}}],[\"repl\",{\"1\":{\"629\":1,\"630\":3,\"631\":3,\"632\":2,\"639\":1,\"640\":7,\"641\":3,\"642\":3,\"643\":2}}],[\"replicas\",{\"1\":{\"633\":1,\"634\":2,\"635\":3,\"638\":3,\"639\":7,\"640\":5,\"641\":2,\"642\":4,\"643\":1,\"644\":9,\"645\":3}}],[\"replica\",{\"1\":{\"627\":1,\"628\":2,\"629\":1,\"631\":1,\"632\":1,\"633\":1,\"635\":3,\"636\":2,\"637\":7,\"638\":6,\"639\":2,\"640\":6,\"641\":4,\"642\":6,\"643\":6,\"644\":2,\"645\":9,\"646\":2}}],[\"replicaof\",{\"1\":{\"625\":1,\"626\":1,\"635\":2,\"636\":1,\"637\":1}}],[\"replication\",{\"1\":{\"552\":2,\"559\":2,\"566\":2,\"618\":1,\"621\":1,\"630\":1,\"635\":6,\"636\":1,\"637\":1,\"639\":7,\"640\":3,\"641\":1,\"642\":2,\"645\":2}}],[\"reduced\",{\"1\":{\"641\":1}}],[\"redirection\",{\"1\":{\"270\":1}}],[\"redirecturi\",{\"1\":{\"265\":1}}],[\"redis提供了两个配置项\",{\"1\":{\"646\":1}}],[\"redis主节点维护一个固定大小的fifo队列\",{\"1\":{\"621\":1}}],[\"redis主从复制配置\",{\"1\":{\"617\":1}}],[\"redis主从复制原理\",{\"1\":{\"617\":1}}],[\"redis主从复制\",{\"0\":{\"617\":1}}],[\"redis的主从复制机制是其高可用性和可扩展性设计的重要组成部分\",{\"1\":{\"623\":1}}],[\"redis的主从复制是异步的\",{\"1\":{\"623\":1}}],[\"redis的主从复制\",{\"1\":{\"618\":1}}],[\"redis缓存数据和数据库数据如何保持一致性\",{\"1\":{\"586\":1}}],[\"redis缓存数据和数据库数据一致性\",{\"0\":{\"586\":1}}],[\"redis缓存穿透\",{\"0\":{\"575\":1,\"595\":1,\"606\":1,\"649\":1,\"660\":1}}],[\"redis缓存三兄弟\",{\"0\":{\"572\":1}}],[\"redis始终会随着mysql变化而变化\",{\"1\":{\"561\":1}}],[\"redistemplate<>\",{\"1\":{\"554\":1}}],[\"redistemplate<object\",{\"1\":{\"554\":3,\"561\":1}}],[\"redistemplate\",{\"1\":{\"554\":12,\"561\":3}}],[\"redisconnectionfactory\",{\"1\":{\"554\":1}}],[\"redisconfig\",{\"1\":{\"554\":1}}],[\"redisclient\",{\"1\":{\"526\":4}}],[\"redis作为一种高性能的键值数据库\",{\"1\":{\"545\":1,\"548\":1}}],[\"redis应用场景\",{\"0\":{\"545\":1,\"548\":1},\"2\":{\"547\":1,\"550\":1}}],[\"redis里边也不存在的数据\",{\"1\":{\"541\":1}}],[\"redis<\",{\"1\":{\"537\":3,\"554\":1,\"561\":1}}],[\"redisgeocommands\",{\"1\":{\"536\":1,\"537\":1}}],[\"redis还是力不从心\",{\"1\":{\"536\":1}}],[\"redis在3\",{\"1\":{\"535\":1}}],[\"redisasynccommands<string\",{\"1\":{\"526\":1}}],[\"redis支持几种概率性数据结构\",{\"1\":{\"522\":1}}],[\"redisbloom支持多个模块配置参数\",{\"1\":{\"522\":1}}],[\"redis入门\",{\"1\":{\"511\":1}}],[\"redis简介\",{\"0\":{\"511\":1}}],[\"redis中的hll是基于string结构实现的\",{\"1\":{\"541\":1}}],[\"redis中的geo\",{\"1\":{\"536\":1}}],[\"redis中是利用string类型数据结构实现bitmap\",{\"1\":{\"538\":1}}],[\"redis中求set集合求交集\",{\"1\":{\"112\":1}}],[\"redis中插入set数据\",{\"1\":{\"110\":1}}],[\"redis\",{\"0\":{\"671\":1},\"1\":{\"110\":3,\"111\":1,\"112\":1,\"116\":1,\"117\":1,\"119\":1,\"125\":6,\"393\":1,\"511\":1,\"512\":3,\"526\":1,\"554\":1,\"561\":1,\"619\":4,\"635\":5,\"638\":1,\"639\":2,\"641\":1,\"643\":3,\"645\":2},\"2\":{\"114\":1,\"124\":1,\"128\":1,\"543\":1,\"544\":1,\"546\":1,\"547\":1,\"549\":1,\"550\":1,\"555\":1,\"556\":1,\"562\":1,\"563\":1,\"570\":1,\"571\":1,\"573\":1,\"584\":1,\"593\":1,\"604\":1,\"615\":1,\"647\":1,\"648\":1,\"658\":1,\"669\":1,\"672\":1}}],[\"redis是键值数据库\",{\"1\":{\"105\":1}}],[\"rename\",{\"1\":{\"638\":1}}],[\"receiving\",{\"1\":{\"639\":1}}],[\"received\",{\"1\":{\"644\":1}}],[\"receive\",{\"1\":{\"635\":1}}],[\"reconnecting\",{\"1\":{\"639\":1}}],[\"reconnect\",{\"1\":{\"635\":1,\"642\":1}}],[\"records\",{\"1\":{\"532\":2}}],[\"record\",{\"1\":{\"295\":1,\"301\":2}}],[\"reverserangebyscorewithscores\",{\"1\":{\"535\":1}}],[\"review\",{\"1\":{\"66\":1,\"70\":1,\"74\":1,\"78\":1,\"98\":1,\"102\":1,\"126\":1,\"130\":1,\"488\":1,\"492\":1,\"496\":1,\"500\":1,\"504\":1,\"508\":1}}],[\"retry\",{\"1\":{\"560\":1,\"561\":2,\"567\":1}}],[\"retrieve\",{\"1\":{\"526\":1}}],[\"return\",{\"1\":{\"66\":2,\"70\":2,\"74\":2,\"78\":2,\"90\":1,\"92\":1,\"93\":1,\"94\":2,\"98\":10,\"102\":10,\"106\":2,\"107\":2,\"108\":1,\"109\":2,\"110\":4,\"111\":2,\"112\":1,\"116\":1,\"117\":3,\"118\":1,\"119\":1,\"120\":1,\"121\":5,\"122\":3,\"126\":2,\"130\":2,\"159\":1,\"176\":1,\"185\":1,\"188\":3,\"189\":1,\"190\":1,\"203\":1,\"223\":1,\"230\":2,\"234\":1,\"238\":1,\"239\":1,\"266\":1,\"271\":1,\"289\":1,\"324\":1,\"326\":2,\"341\":3,\"350\":3,\"406\":2,\"410\":1,\"411\":1,\"412\":1,\"413\":3,\"414\":1,\"415\":2,\"416\":1,\"417\":1,\"427\":1,\"428\":1,\"429\":1,\"430\":1,\"431\":5,\"432\":1,\"433\":1,\"437\":1,\"438\":3,\"443\":2,\"445\":4,\"456\":1,\"460\":1,\"464\":3,\"466\":2,\"470\":2,\"471\":1,\"472\":1,\"488\":2,\"492\":2,\"496\":2,\"500\":2,\"504\":2,\"508\":2,\"527\":2,\"528\":2,\"529\":1,\"530\":5,\"531\":4,\"532\":6,\"534\":2,\"535\":3,\"537\":5,\"539\":2,\"540\":4,\"554\":1}}],[\"remembered\",{\"1\":{\"385\":3}}],[\"remark\",{\"1\":{\"383\":1}}],[\"remove\",{\"1\":{\"350\":1,\"364\":1,\"365\":1,\"529\":1,\"530\":1,\"531\":1,\"532\":2}}],[\"removal\",{\"1\":{\"85\":1}}],[\"remote\",{\"1\":{\"90\":2,\"511\":1,\"512\":1}}],[\"refuse\",{\"1\":{\"636\":1}}],[\"reflectionfactory\",{\"1\":{\"472\":1}}],[\"reflectiveoperationexception\",{\"1\":{\"429\":1}}],[\"reflectutil\",{\"1\":{\"472\":2}}],[\"reflect1\",{\"1\":{\"472\":1}}],[\"reflecttest\",{\"1\":{\"438\":1}}],[\"reflect\",{\"1\":{\"429\":2,\"472\":3}}],[\"refinement\",{\"1\":{\"385\":1}}],[\"ref\",{\"1\":{\"364\":10}}],[\"ref=\",{\"1\":{\"364\":1}}],[\"reference<\",{\"1\":{\"364\":1,\"365\":1}}],[\"referencequeue<>\",{\"1\":{\"364\":1,\"365\":1}}],[\"referencequeue<byte\",{\"1\":{\"364\":1,\"365\":1}}],[\"referencehandler\",{\"1\":{\"350\":1}}],[\"reference\",{\"1\":{\"156\":1,\"301\":1,\"362\":1}}],[\"reentrantreadwritelock\",{\"0\":{\"308\":1}}],[\"reentrantlock\",{\"0\":{\"306\":1},\"1\":{\"277\":2}}],[\"regex=canaldb\",{\"1\":{\"553\":1}}],[\"regex=\",{\"1\":{\"553\":1}}],[\"regex\",{\"1\":{\"553\":2}}],[\"region\",{\"1\":{\"380\":1}}],[\"registereddrivers\",{\"1\":{\"463\":1}}],[\"registeredoauth2authorizedclient\",{\"1\":{\"266\":1}}],[\"register\",{\"1\":{\"324\":1}}],[\"registration\",{\"1\":{\"265\":1}}],[\"registrationid是clientregistration的唯一标识符\",{\"1\":{\"263\":1}}],[\"registrationid\",{\"1\":{\"263\":1,\"271\":3}}],[\"regarded\",{\"1\":{\"26\":1,\"674\":1}}],[\"require\",{\"1\":{\"644\":1}}],[\"requirepass\",{\"1\":{\"636\":1}}],[\"required\",{\"1\":{\"91\":3,\"537\":2}}],[\"requestparam\",{\"1\":{\"527\":1,\"532\":2,\"535\":3,\"537\":4}}],[\"requestmatchers\",{\"1\":{\"229\":2,\"233\":1}}],[\"requestmapping\",{\"1\":{\"185\":1,\"527\":2}}],[\"requestbody\",{\"1\":{\"192\":1,\"239\":1,\"527\":1}}],[\"requests\",{\"1\":{\"85\":1,\"156\":1,\"637\":1}}],[\"request\",{\"1\":{\"85\":3,\"87\":2,\"90\":3,\"209\":1,\"212\":1,\"215\":1,\"218\":1,\"231\":1,\"636\":1}}],[\"relatively\",{\"1\":{\"635\":1}}],[\"relation\",{\"1\":{\"88\":1,\"89\":1}}],[\"release<\",{\"1\":{\"526\":1,\"537\":1,\"554\":2,\"561\":1}}],[\"release\",{\"1\":{\"313\":1,\"314\":1,\"642\":1}}],[\"releases\",{\"1\":{\"90\":1,\"553\":1,\"560\":1,\"567\":1,\"568\":1}}],[\"reindex\",{\"1\":{\"89\":3}}],[\"resync\",{\"1\":{\"638\":1,\"642\":2}}],[\"resynchronize\",{\"1\":{\"635\":1,\"642\":1}}],[\"resynchronization\",{\"1\":{\"635\":1,\"642\":1}}],[\"resolveclass\",{\"1\":{\"460\":1}}],[\"resolve\",{\"1\":{\"460\":2}}],[\"resource\",{\"1\":{\"185\":1,\"188\":1,\"193\":1,\"242\":2,\"254\":1,\"258\":2,\"259\":1,\"260\":1,\"444\":1,\"527\":1,\"554\":1}}],[\"resources\",{\"0\":{\"444\":1},\"1\":{\"183\":1,\"204\":1,\"220\":1,\"267\":1,\"444\":3}}],[\"reservememory\",{\"1\":{\"350\":2}}],[\"restcontroller\",{\"1\":{\"185\":1,\"223\":1,\"527\":2}}],[\"rest\",{\"1\":{\"87\":2,\"568\":3}}],[\"results\",{\"1\":{\"537\":3}}],[\"resultset\",{\"1\":{\"393\":1,\"444\":1}}],[\"result\",{\"1\":{\"85\":3,\"93\":2,\"106\":1,\"107\":1,\"108\":1,\"109\":3,\"112\":3,\"200\":4,\"209\":5,\"212\":4,\"215\":4,\"218\":4,\"223\":4,\"225\":4,\"231\":4,\"431\":4,\"527\":4,\"528\":3,\"529\":3,\"530\":6,\"531\":6,\"532\":10,\"534\":3,\"535\":4,\"537\":9,\"539\":3,\"540\":9}}],[\"response\",{\"1\":{\"209\":3,\"212\":3,\"215\":3,\"218\":3,\"225\":3,\"231\":3}}],[\"responsesuccess\",{\"1\":{\"98\":1,\"102\":1,\"121\":1,\"122\":1}}],[\"responseerror\",{\"1\":{\"98\":6,\"102\":6,\"121\":5,\"122\":3}}],[\"resp\",{\"1\":{\"66\":2,\"70\":2,\"74\":2,\"78\":2,\"92\":2,\"93\":2,\"94\":3,\"98\":2,\"102\":2,\"126\":2,\"130\":2,\"488\":2,\"492\":2,\"496\":2,\"500\":2,\"504\":2,\"508\":2}}],[\"rst\",{\"1\":{\"57\":1}}],[\"r\",{\"1\":{\"18\":3,\"535\":5}}],[\"^\",{\"1\":{\"18\":1}}],[\"^i\",{\"1\":{\"18\":1}}],[\"^r\",{\"1\":{\"18\":2}}],[\"1小时\",{\"1\":{\"632\":1,\"643\":1}}],[\"1天内同一个用户多次访问该网站\",{\"1\":{\"541\":1}}],[\"1亿条\",{\"1\":{\"538\":1}}],[\"1层\",{\"1\":{\"469\":1}}],[\"1项\",{\"1\":{\"400\":1}}],[\"1~\",{\"1\":{\"400\":1}}],[\"1f\",{\"1\":{\"397\":1,\"400\":3}}],[\"1e\",{\"1\":{\"397\":1,\"400\":5}}],[\"1d\",{\"1\":{\"397\":2,\"400\":8}}],[\"1c\",{\"1\":{\"397\":1,\"400\":4}}],[\"1b8\",{\"1\":{\"423\":1}}],[\"1b\",{\"1\":{\"397\":2,\"400\":10}}],[\"1a\",{\"1\":{\"397\":1,\"400\":6}}],[\"1+radio\",{\"1\":{\"378\":1}}],[\"1并且交换\",{\"1\":{\"371\":1}}],[\"1gb\",{\"1\":{\"351\":5}}],[\"1l\",{\"1\":{\"350\":1}}],[\"1mb\",{\"1\":{\"373\":1,\"374\":1,\"375\":1,\"642\":1}}],[\"1m\",{\"1\":{\"350\":1}}],[\"1定义\",{\"0\":{\"324\":1}}],[\"13项\",{\"1\":{\"400\":1}}],[\"136\",{\"1\":{\"333\":1,\"471\":1}}],[\"13\",{\"1\":{\"299\":4,\"341\":2,\"397\":3,\"400\":7,\"406\":2,\"411\":1,\"415\":1,\"416\":1,\"429\":1,\"431\":1,\"432\":1}}],[\"126433498\",{\"1\":{\"554\":1}}],[\"127\",{\"1\":{\"554\":2,\"560\":2,\"561\":2,\"567\":1,\"568\":4}}],[\"120824295\",{\"1\":{\"481\":1}}],[\"12项\",{\"1\":{\"400\":1}}],[\"124\",{\"1\":{\"333\":1}}],[\"12\",{\"0\":{\"446\":1,\"542\":1},\"1\":{\"299\":4,\"341\":2,\"397\":3,\"400\":4,\"406\":1,\"411\":2,\"412\":2,\"415\":2,\"416\":1,\"427\":2,\"428\":1,\"429\":2,\"430\":1,\"433\":2}}],[\"1234\",{\"1\":{\"645\":1}}],[\"1234567891011121314151617\",{\"1\":{\"569\":1}}],[\"123456\",{\"1\":{\"554\":1,\"561\":1,\"568\":1}}],[\"123\",{\"1\":{\"85\":3,\"350\":1}}],[\"1public\",{\"1\":{\"285\":1}}],[\"1<\",{\"1\":{\"180\":1}}],[\"17项\",{\"1\":{\"400\":1}}],[\"17表示它引用了常量池中\",{\"1\":{\"400\":1}}],[\"17\",{\"1\":{\"158\":1,\"299\":4,\"341\":2,\"397\":1,\"400\":6,\"406\":2,\"411\":1,\"415\":1,\"416\":1,\"430\":1,\"433\":1}}],[\"14项\",{\"1\":{\"400\":1}}],[\"14\",{\"1\":{\"148\":1,\"289\":2,\"299\":4,\"324\":1,\"333\":1,\"397\":1,\"406\":2,\"412\":1,\"413\":4,\"414\":1,\"429\":1,\"430\":1,\"431\":1,\"432\":1,\"437\":1,\"438\":1}}],[\"140\",{\"1\":{\"136\":1}}],[\"1次\",{\"1\":{\"139\":1}}],[\"1的记录\",{\"1\":{\"115\":1,\"534\":1}}],[\"113742011\",{\"1\":{\"481\":1}}],[\"11331880\",{\"1\":{\"441\":1}}],[\"11项\",{\"1\":{\"400\":1}}],[\"11100000\",{\"1\":{\"299\":60}}],[\"11111\",{\"1\":{\"554\":1,\"568\":2}}],[\"11111000\",{\"1\":{\"298\":1}}],[\"11110111\",{\"1\":{\"299\":19}}],[\"11110001\",{\"1\":{\"299\":22}}],[\"11110000\",{\"1\":{\"297\":1}}],[\"11110011\",{\"1\":{\"299\":82}}],[\"11\",{\"0\":{\"433\":1,\"445\":1},\"1\":{\"90\":1,\"289\":2,\"295\":1,\"299\":4,\"324\":1,\"397\":1,\"400\":1,\"406\":1,\"411\":2,\"413\":3,\"414\":2,\"415\":1,\"427\":1,\"428\":2,\"429\":4,\"430\":3,\"431\":1,\"432\":1,\"433\":1,\"437\":1,\"438\":2}}],[\"11001010\",{\"1\":{\"298\":1}}],[\"11010100\",{\"1\":{\"298\":1}}],[\"110\",{\"1\":{\"85\":6}}],[\"18b4aac2\",{\"1\":{\"459\":1}}],[\"18项\",{\"1\":{\"400\":1}}],[\"18\",{\"1\":{\"88\":1,\"299\":4,\"397\":1,\"400\":8,\"406\":2,\"411\":3,\"414\":1,\"428\":1,\"429\":1,\"430\":1,\"444\":1}}],[\"18中的字节编号都取得很小\",{\"1\":{\"59\":1}}],[\"10911177\",{\"1\":{\"583\":1,\"603\":1,\"614\":1,\"657\":1,\"668\":1}}],[\"10314\",{\"1\":{\"582\":2,\"602\":2,\"613\":2,\"656\":2,\"667\":2}}],[\"10项\",{\"1\":{\"400\":1}}],[\"10进制\",{\"1\":{\"399\":1}}],[\"10进制的整数\",{\"1\":{\"148\":1}}],[\"1024\",{\"1\":{\"350\":2,\"351\":3,\"364\":4,\"365\":2,\"373\":9,\"374\":9,\"375\":9,\"561\":1}}],[\"108\",{\"1\":{\"303\":1}}],[\"10110011\",{\"1\":{\"298\":1}}],[\"10110101\",{\"1\":{\"297\":1}}],[\"101\",{\"1\":{\"143\":1}}],[\"100万\",{\"1\":{\"582\":1,\"602\":1,\"613\":1,\"656\":1,\"667\":1}}],[\"100万条数据\",{\"1\":{\"582\":1,\"602\":1,\"613\":1,\"656\":1,\"667\":1}}],[\"100mb\",{\"1\":{\"350\":2}}],[\"1009\",{\"1\":{\"346\":1}}],[\"100\",{\"1\":{\"88\":2,\"139\":4,\"143\":3,\"148\":1,\"345\":1,\"350\":1,\"632\":1,\"643\":3}}],[\"1000l\",{\"1\":{\"375\":1}}],[\"1000000\",{\"1\":{\"581\":3,\"582\":1,\"601\":3,\"602\":1,\"612\":3,\"613\":1,\"655\":3,\"656\":1,\"666\":3,\"667\":1}}],[\"10000\",{\"1\":{\"88\":1,\"338\":1,\"345\":2}}],[\"1000\",{\"1\":{\"85\":1,\"89\":1,\"319\":1,\"469\":1,\"470\":1,\"471\":1,\"478\":1,\"480\":1}}],[\"10\",{\"0\":{\"426\":1,\"444\":1},\"1\":{\"88\":1,\"90\":4,\"93\":1,\"112\":1,\"117\":3,\"134\":4,\"138\":1,\"140\":1,\"141\":1,\"143\":1,\"289\":2,\"295\":1,\"299\":4,\"324\":1,\"365\":1,\"373\":1,\"397\":5,\"400\":11,\"405\":1,\"406\":2,\"410\":1,\"411\":4,\"412\":2,\"413\":6,\"414\":4,\"415\":7,\"417\":1,\"427\":2,\"428\":2,\"429\":1,\"430\":2,\"431\":5,\"432\":6,\"433\":1,\"437\":2,\"438\":2,\"456\":1,\"537\":1,\"633\":1,\"640\":2,\"643\":2,\"644\":3,\"711\":1}}],[\"106\",{\"1\":{\"85\":6}}],[\"1653838053608\",{\"1\":{\"542\":1}}],[\"1653837988985\",{\"1\":{\"541\":1}}],[\"1653836578970\",{\"1\":{\"541\":1}}],[\"1653836416586\",{\"1\":{\"541\":1}}],[\"1653835784444\",{\"1\":{\"540\":1}}],[\"1653834455899\",{\"1\":{\"540\":1}}],[\"1653833970361\",{\"1\":{\"539\":1}}],[\"1653824498278\",{\"1\":{\"538\":1}}],[\"1653823145495\",{\"1\":{\"538\":1}}],[\"1653822021827\",{\"1\":{\"536\":1}}],[\"1653822036941\",{\"1\":{\"536\":1}}],[\"1653819821591\",{\"1\":{\"535\":1}}],[\"1653813462834\",{\"1\":{\"534\":1}}],[\"1653813047671\",{\"1\":{\"534\":1}}],[\"1653812346852\",{\"1\":{\"533\":1}}],[\"1653809875208\",{\"1\":{\"533\":1}}],[\"1653809450816\",{\"1\":{\"533\":1}}],[\"1653808993693\",{\"1\":{\"533\":1}}],[\"1653808641260\",{\"1\":{\"533\":1}}],[\"1653806973212\",{\"1\":{\"532\":1}}],[\"1653806706296\",{\"1\":{\"532\":1}}],[\"1653806253817\",{\"1\":{\"531\":1}}],[\"1653806140822\",{\"1\":{\"531\":1}}],[\"1653805203758\",{\"1\":{\"530\":1}}],[\"1653805077118\",{\"1\":{\"530\":1}}],[\"1653581590453\",{\"1\":{\"529\":1}}],[\"1653579931626\",{\"1\":{\"528\":1}}],[\"1653578992639\",{\"1\":{\"527\":1}}],[\"16项\",{\"1\":{\"400\":1}}],[\"16104\",{\"1\":{\"357\":2}}],[\"16进制\",{\"1\":{\"148\":1,\"399\":1}}],[\"168\",{\"1\":{\"90\":1,\"553\":1,\"560\":1,\"567\":1}}],[\"16623\",{\"1\":{\"85\":1}}],[\"16\",{\"1\":{\"85\":6,\"138\":2,\"289\":2,\"299\":4,\"303\":1,\"324\":1,\"341\":2,\"393\":1,\"397\":2,\"400\":15,\"406\":3,\"411\":1,\"415\":1,\"416\":1,\"421\":1,\"422\":1,\"428\":2,\"472\":1}}],[\"15项\",{\"1\":{\"400\":1}}],[\"15引用了常量池中\",{\"1\":{\"400\":1}}],[\"15至图5\",{\"1\":{\"59\":1}}],[\"15\",{\"1\":{\"57\":1,\"143\":1,\"289\":1,\"299\":4,\"324\":1,\"397\":3,\"398\":1,\"399\":2,\"400\":14,\"406\":3,\"411\":1,\"412\":2,\"414\":1,\"415\":1,\"428\":2,\"429\":1,\"430\":2,\"431\":1,\"432\":1,\"433\":1,\"472\":2}}],[\"1为止的所有数据都已正确收到\",{\"1\":{\"57\":1}}],[\"19项\",{\"1\":{\"400\":1}}],[\"19\",{\"1\":{\"289\":5,\"299\":4,\"324\":1,\"350\":1,\"397\":1,\"400\":8,\"406\":2,\"415\":1,\"428\":1,\"433\":1,\"437\":1,\"438\":1}}],[\"1999942误判了\",{\"1\":{\"582\":1,\"602\":1,\"613\":1,\"656\":1,\"667\":1}}],[\"1999827误判了\",{\"1\":{\"582\":1,\"602\":1,\"613\":1,\"656\":1,\"667\":1}}],[\"1999697误判了\",{\"1\":{\"582\":1,\"602\":1,\"613\":1,\"656\":1,\"667\":1}}],[\"1999640误判了\",{\"1\":{\"582\":1,\"602\":1,\"613\":1,\"656\":1,\"667\":1}}],[\"1999567误判了\",{\"1\":{\"582\":1,\"602\":1,\"613\":1,\"656\":1,\"667\":1}}],[\"1999501误判了\",{\"1\":{\"582\":1,\"602\":1,\"613\":1,\"656\":1,\"667\":1}}],[\"1999\",{\"1\":{\"267\":1,\"471\":1}}],[\"192\",{\"1\":{\"56\":1,\"90\":1}}],[\"19th\",{\"1\":{\"21\":1}}],[\"1\",{\"0\":{\"134\":2,\"135\":1,\"136\":1,\"138\":2,\"139\":1,\"140\":1,\"146\":2,\"147\":1,\"148\":1,\"150\":1,\"157\":1,\"158\":2,\"159\":1,\"160\":1,\"161\":1,\"162\":1,\"163\":2,\"164\":1,\"165\":1,\"167\":1,\"173\":1,\"175\":1,\"176\":2,\"177\":1,\"179\":1,\"187\":1,\"192\":1,\"198\":1,\"203\":1,\"206\":1,\"209\":1,\"212\":1,\"215\":1,\"218\":1,\"221\":1,\"222\":2,\"223\":1,\"225\":1,\"227\":1,\"228\":2,\"232\":1,\"235\":1,\"237\":1,\"240\":1,\"241\":2,\"242\":1,\"243\":1,\"251\":1,\"256\":1,\"258\":1,\"263\":1,\"270\":1,\"323\":1,\"324\":1,\"326\":1,\"331\":1,\"336\":1,\"348\":1,\"352\":1,\"353\":2,\"355\":1,\"358\":1,\"367\":1,\"371\":1,\"377\":1,\"391\":1,\"397\":1,\"398\":2,\"399\":1,\"400\":1,\"401\":1,\"403\":1,\"405\":1,\"418\":1,\"427\":1,\"435\":1,\"448\":1,\"450\":1,\"454\":1,\"458\":1,\"468\":1,\"469\":1,\"473\":1,\"474\":2,\"475\":1,\"476\":1,\"478\":1,\"480\":1,\"686\":1,\"706\":1},\"1\":{\"18\":1,\"19\":1,\"27\":2,\"29\":2,\"55\":1,\"56\":2,\"57\":2,\"66\":1,\"70\":1,\"74\":1,\"78\":1,\"85\":33,\"87\":1,\"88\":5,\"89\":4,\"90\":15,\"93\":1,\"98\":2,\"102\":2,\"106\":1,\"107\":1,\"108\":1,\"109\":1,\"110\":1,\"111\":1,\"115\":2,\"116\":1,\"117\":2,\"119\":1,\"121\":1,\"122\":1,\"126\":1,\"130\":1,\"133\":2,\"138\":3,\"139\":5,\"183\":1,\"195\":1,\"212\":1,\"218\":1,\"225\":1,\"226\":1,\"231\":1,\"285\":1,\"289\":7,\"290\":1,\"295\":3,\"299\":4,\"302\":2,\"303\":5,\"312\":1,\"313\":1,\"314\":1,\"315\":2,\"324\":8,\"326\":4,\"337\":2,\"338\":5,\"341\":8,\"343\":2,\"350\":3,\"357\":3,\"378\":1,\"395\":2,\"397\":1,\"400\":1,\"405\":2,\"406\":3,\"410\":4,\"411\":12,\"412\":5,\"413\":15,\"414\":12,\"415\":4,\"416\":5,\"422\":1,\"427\":4,\"428\":7,\"429\":6,\"430\":7,\"431\":2,\"432\":2,\"433\":4,\"436\":3,\"437\":3,\"438\":9,\"440\":7,\"441\":9,\"442\":3,\"443\":1,\"444\":3,\"445\":1,\"448\":3,\"455\":2,\"458\":1,\"463\":1,\"464\":2,\"471\":4,\"474\":12,\"478\":1,\"481\":4,\"484\":1,\"488\":1,\"492\":1,\"496\":1,\"500\":1,\"504\":1,\"508\":1,\"525\":1,\"528\":1,\"529\":8,\"530\":11,\"531\":3,\"532\":5,\"534\":3,\"535\":6,\"536\":2,\"537\":5,\"538\":3,\"539\":3,\"540\":4,\"553\":3,\"554\":3,\"560\":5,\"561\":2,\"567\":4,\"568\":19,\"592\":1,\"635\":1,\"637\":1,\"639\":1,\"640\":1,\"675\":2,\"677\":2}}],[\"iblogservice\",{\"1\":{\"527\":1}}],[\"ibatis\",{\"1\":{\"181\":1}}],[\"i<=16\",{\"1\":{\"472\":1}}],[\"ireturn\",{\"1\":{\"431\":4,\"432\":1}}],[\"icmplt\",{\"1\":{\"413\":1}}],[\"icmpge\",{\"1\":{\"413\":2,\"414\":1}}],[\"iconst\",{\"1\":{\"289\":1,\"324\":5,\"412\":1,\"413\":3,\"414\":2,\"427\":1,\"428\":1,\"429\":2,\"430\":1,\"437\":1,\"438\":1,\"474\":8,\"481\":2}}],[\"iinc\",{\"1\":{\"411\":5,\"413\":3,\"414\":2}}],[\"illegalargumentexception\",{\"1\":{\"472\":1}}],[\"illegalaccessexception\",{\"1\":{\"351\":2,\"429\":2,\"472\":1}}],[\"iload\",{\"1\":{\"410\":1,\"411\":6,\"412\":1,\"413\":3,\"414\":3,\"415\":1,\"431\":3,\"432\":2}}],[\"iload2\",{\"1\":{\"410\":1}}],[\"iload1\",{\"1\":{\"410\":1}}],[\"iadd\",{\"1\":{\"289\":1,\"410\":1,\"411\":2,\"474\":4,\"481\":1}}],[\"iam\",{\"1\":{\"250\":1}}],[\"i++\",{\"0\":{\"411\":1},\"1\":{\"285\":1,\"299\":2,\"300\":3,\"333\":1,\"338\":1,\"345\":1,\"350\":1,\"364\":3,\"365\":2,\"413\":1,\"414\":1,\"438\":1,\"469\":1,\"470\":1,\"471\":4,\"472\":1,\"474\":2,\"476\":1,\"481\":1,\"581\":2,\"601\":2,\"612\":2,\"655\":2,\"666\":2}}],[\"i+1\",{\"1\":{\"18\":1}}],[\"ietf\",{\"1\":{\"251\":1}}],[\"ioexception\",{\"1\":{\"209\":1,\"212\":1,\"215\":1,\"218\":1,\"225\":1,\"297\":1,\"350\":1,\"351\":4,\"357\":1,\"364\":4,\"417\":2,\"444\":2,\"451\":1,\"452\":1,\"527\":1}}],[\"io\",{\"1\":{\"156\":1,\"391\":1,\"400\":2,\"406\":8,\"410\":1,\"411\":4,\"414\":2,\"417\":1,\"433\":2,\"512\":2}}],[\"iota\",{\"0\":{\"139\":1},\"1\":{\"139\":15}}],[\"ik\",{\"1\":{\"90\":8,\"569\":1}}],[\"ignore\",{\"1\":{\"89\":1,\"552\":1,\"559\":1,\"566\":1}}],[\"isempty\",{\"1\":{\"530\":1,\"532\":1,\"535\":1,\"540\":1}}],[\"iservice<user>\",{\"1\":{\"184\":1}}],[\"isblogliked\",{\"1\":{\"530\":1,\"535\":1}}],[\"issuccess\",{\"1\":{\"529\":4,\"530\":4,\"531\":1,\"532\":4,\"534\":2}}],[\"isfalse\",{\"1\":{\"529\":1}}],[\"isfollow\",{\"1\":{\"110\":2,\"531\":9,\"532\":2}}],[\"islike\",{\"1\":{\"529\":1}}],[\"isub\",{\"1\":{\"474\":4,\"481\":1}}],[\"isvmanonymousclass\",{\"1\":{\"472\":1}}],[\"istore\",{\"1\":{\"410\":3,\"411\":2,\"412\":3,\"413\":3,\"414\":3,\"427\":3,\"428\":5,\"430\":6,\"431\":4,\"432\":4}}],[\"istrue\",{\"1\":{\"200\":1}}],[\"isdirectmemorypagealigned\",{\"1\":{\"350\":1}}],[\"isassignablefrom\",{\"1\":{\"466\":1}}],[\"isalive\",{\"1\":{\"279\":1}}],[\"isauthenticated\",{\"1\":{\"267\":1}}],[\"ismember\",{\"1\":{\"108\":2,\"529\":3}}],[\"is\",{\"1\":{\"85\":1,\"141\":3,\"143\":4,\"319\":2,\"400\":1,\"444\":7,\"633\":1,\"635\":3,\"636\":2,\"637\":4,\"639\":6,\"640\":10,\"642\":5,\"643\":6,\"644\":5,\"645\":11}}],[\"id作为文档id\",{\"1\":{\"568\":2}}],[\"id为key\",{\"1\":{\"561\":2}}],[\"idle\",{\"1\":{\"561\":2}}],[\"id=1\",{\"1\":{\"552\":1,\"559\":1,\"566\":1}}],[\"idstr\",{\"1\":{\"530\":2,\"535\":2,\"537\":2}}],[\"ids\",{\"1\":{\"530\":3,\"532\":2,\"535\":4,\"537\":4}}],[\"idea\",{\"1\":{\"434\":2,\"641\":1}}],[\"ideaprojects\",{\"1\":{\"406\":2}}],[\"identified\",{\"1\":{\"552\":3,\"559\":3,\"566\":3}}],[\"identifier\",{\"1\":{\"138\":1}}],[\"identity\",{\"1\":{\"250\":1}}],[\"id和client\",{\"1\":{\"271\":1}}],[\"idtype\",{\"1\":{\"182\":1}}],[\"id`\",{\"1\":{\"118\":1}}],[\"iddata\",{\"1\":{\"117\":5,\"119\":1,\"122\":2}}],[\"idint64\",{\"1\":{\"117\":2}}],[\"idint\",{\"1\":{\"112\":2}}],[\"id\",{\"1\":{\"85\":15,\"89\":1,\"90\":4,\"91\":7,\"93\":3,\"98\":2,\"102\":2,\"110\":1,\"112\":2,\"118\":4,\"120\":2,\"121\":1,\"182\":2,\"235\":9,\"265\":1,\"271\":1,\"294\":2,\"296\":1,\"297\":1,\"299\":1,\"418\":1,\"419\":1,\"481\":1,\"514\":1,\"528\":2,\"529\":11,\"530\":16,\"531\":12,\"532\":12,\"534\":2,\"535\":2,\"537\":3,\"541\":1,\"554\":1,\"560\":2,\"561\":3,\"567\":2,\"568\":9,\"569\":1}}],[\"iflt\",{\"1\":{\"412\":1}}],[\"ifne\",{\"1\":{\"412\":2}}],[\"ifeq\",{\"1\":{\"412\":1}}],[\"if=\",{\"1\":{\"204\":1}}],[\"if\",{\"0\":{\"140\":1,\"141\":1},\"1\":{\"66\":2,\"70\":2,\"74\":2,\"78\":2,\"85\":4,\"90\":1,\"92\":1,\"93\":1,\"94\":1,\"98\":9,\"102\":9,\"106\":1,\"107\":1,\"109\":1,\"110\":3,\"111\":1,\"112\":2,\"117\":4,\"121\":5,\"122\":3,\"126\":2,\"130\":2,\"139\":1,\"140\":6,\"141\":4,\"188\":1,\"350\":4,\"412\":1,\"413\":3,\"414\":1,\"438\":1,\"441\":4,\"444\":2,\"460\":5,\"464\":1,\"466\":2,\"472\":1,\"488\":2,\"492\":2,\"496\":2,\"500\":2,\"504\":2,\"508\":2,\"528\":1,\"529\":3,\"530\":5,\"531\":1,\"532\":5,\"534\":1,\"535\":2,\"537\":3,\"540\":3,\"561\":2,\"581\":1,\"601\":1,\"612\":1,\"635\":2,\"636\":1,\"637\":3,\"638\":1,\"641\":2,\"643\":2,\"644\":1,\"645\":1,\"655\":1,\"666\":1}}],[\"img\",{\"1\":{\"277\":1,\"278\":1,\"283\":1,\"289\":1,\"291\":2,\"301\":3,\"302\":2,\"312\":4,\"322\":1,\"325\":1,\"326\":1,\"327\":2,\"337\":1,\"339\":4,\"344\":1,\"349\":2,\"354\":1,\"357\":3,\"358\":1,\"364\":3,\"367\":1,\"368\":1,\"369\":1,\"370\":1,\"371\":6,\"374\":1,\"375\":1,\"376\":1,\"377\":1,\"378\":1,\"379\":1,\"380\":1,\"381\":3,\"382\":1,\"383\":1,\"385\":2,\"386\":5,\"389\":1,\"394\":1,\"396\":1,\"402\":2,\"407\":1,\"408\":1,\"409\":1,\"410\":16,\"411\":11,\"414\":1,\"420\":1,\"421\":1,\"422\":1,\"423\":2,\"424\":1,\"448\":1,\"580\":3,\"600\":3,\"611\":3,\"654\":3,\"665\":3}}],[\"improve\",{\"1\":{\"638\":1}}],[\"implicit\",{\"1\":{\"251\":1,\"253\":1}}],[\"implements\",{\"1\":{\"184\":1,\"188\":1,\"209\":1,\"212\":1,\"215\":1,\"218\":1,\"225\":1,\"444\":1,\"446\":2,\"554\":1,\"561\":1}}],[\"impl\",{\"1\":{\"184\":1}}],[\"impl=org\",{\"1\":{\"181\":1}}],[\"important\",{\"1\":{\"640\":2}}],[\"import\",{\"1\":{\"65\":2,\"69\":2,\"73\":2,\"77\":2,\"94\":1,\"97\":2,\"98\":1,\"101\":2,\"102\":1,\"125\":2,\"129\":2,\"136\":1,\"138\":2,\"139\":1,\"140\":1,\"141\":1,\"142\":1,\"143\":2,\"144\":1,\"147\":1,\"148\":1,\"150\":1,\"151\":1,\"417\":1,\"471\":7,\"472\":2,\"487\":2,\"491\":2,\"495\":2,\"499\":2,\"503\":2,\"507\":2}}],[\"image\",{\"1\":{\"54\":8,\"59\":1,\"81\":6,\"85\":3,\"87\":1,\"89\":3,\"90\":5,\"115\":4,\"133\":2,\"139\":1,\"146\":1,\"148\":1,\"150\":1,\"151\":3,\"161\":1,\"164\":2,\"173\":1,\"174\":1,\"195\":1,\"196\":1,\"199\":1,\"201\":1,\"242\":1,\"245\":1,\"246\":1,\"248\":1,\"249\":1,\"252\":2,\"253\":1,\"254\":2,\"255\":2,\"256\":1,\"261\":1,\"263\":3,\"264\":1,\"270\":1,\"310\":1,\"464\":1,\"474\":1,\"478\":3,\"512\":1,\"527\":5,\"552\":1,\"565\":1,\"572\":3,\"587\":1,\"588\":1,\"589\":1,\"590\":3,\"591\":1,\"592\":4,\"617\":2,\"726\":5,\"729\":5}}],[\"ip2\",{\"1\":{\"56\":2}}],[\"ip1\",{\"1\":{\"56\":2}}],[\"ip地址\",{\"1\":{\"56\":2}}],[\"ip地址即构成了套接字\",{\"1\":{\"56\":1}}],[\"ip\",{\"1\":{\"56\":1,\"645\":6,\"646\":1}}],[\"ini\",{\"1\":{\"552\":1,\"559\":1,\"566\":1}}],[\"initialize\",{\"1\":{\"464\":3}}],[\"initialized\",{\"1\":{\"463\":1}}],[\"initialsurvivorratio=ratio\",{\"1\":{\"373\":1}}],[\"initiatingheapoccupancypercent\",{\"1\":{\"389\":2}}],[\"initiatingheapoccupancypercent=percent\",{\"1\":{\"382\":1}}],[\"init\",{\"1\":{\"98\":3,\"102\":3,\"415\":1,\"455\":3,\"458\":2,\"459\":4}}],[\"includedistance\",{\"1\":{\"537\":1}}],[\"include\",{\"1\":{\"471\":1}}],[\"incrementally\",{\"1\":{\"639\":1}}],[\"increment\",{\"1\":{\"179\":1,\"285\":1,\"460\":1}}],[\"inline\",{\"1\":{\"471\":2}}],[\"inlining\",{\"1\":{\"470\":2}}],[\"inspector\",{\"1\":{\"423\":1}}],[\"instead\",{\"1\":{\"639\":1}}],[\"install\",{\"1\":{\"568\":1}}],[\"instances\",{\"1\":{\"645\":1}}],[\"instance\",{\"1\":{\"456\":2,\"553\":7,\"560\":4,\"567\":4,\"568\":2,\"635\":1,\"638\":3,\"643\":1}}],[\"instanceklass和\",{\"1\":{\"448\":1}}],[\"instanceklass\",{\"1\":{\"448\":3}}],[\"instanceof\",{\"1\":{\"438\":1}}],[\"instantiated\",{\"1\":{\"400\":1,\"466\":1}}],[\"instruction\",{\"1\":{\"400\":1}}],[\"insert就添加\",{\"1\":{\"561\":1}}],[\"insert\",{\"1\":{\"179\":1,\"194\":1,\"554\":1,\"561\":2}}],[\"insertfollow\",{\"1\":{\"110\":3}}],[\"inflationthreshold\",{\"1\":{\"472\":2}}],[\"inf\",{\"1\":{\"464\":1}}],[\"information\",{\"1\":{\"645\":1}}],[\"info\",{\"1\":{\"397\":4,\"561\":1,\"637\":1,\"643\":1,\"645\":3}}],[\"inference\",{\"1\":{\"134\":1}}],[\"ing\",{\"1\":{\"341\":2}}],[\"invocationtargetexception\",{\"1\":{\"429\":2,\"472\":2}}],[\"invoke0\",{\"1\":{\"472\":2}}],[\"invokeinterface\",{\"1\":{\"437\":2,\"438\":2}}],[\"invoke\",{\"1\":{\"429\":1,\"472\":4}}],[\"invokestatic\",{\"1\":{\"416\":1,\"437\":1,\"438\":1}}],[\"invokespecial\",{\"1\":{\"341\":2,\"400\":1,\"406\":1,\"415\":1,\"416\":6,\"433\":1,\"437\":1,\"438\":2}}],[\"invoked\",{\"1\":{\"400\":1}}],[\"invokedynamic\",{\"1\":{\"400\":1}}],[\"invokevirtual\",{\"1\":{\"324\":5,\"341\":6,\"406\":1,\"410\":1,\"411\":2,\"414\":1,\"416\":2,\"425\":1,\"429\":3,\"433\":1}}],[\"invalid\",{\"1\":{\"98\":1,\"102\":1,\"121\":1}}],[\"inmemoryuserdetailsmanager\",{\"1\":{\"176\":2}}],[\"inmemoryuserdetailsmanager是userdetailsservice的一个实现\",{\"1\":{\"176\":1}}],[\"inputstream\",{\"1\":{\"444\":3}}],[\"input\",{\"1\":{\"98\":1,\"102\":1}}],[\"intvalue\",{\"1\":{\"436\":2,\"437\":2}}],[\"into\",{\"1\":{\"179\":1,\"643\":1}}],[\"interval\",{\"1\":{\"640\":2}}],[\"intervention\",{\"1\":{\"635\":1}}],[\"intersect\",{\"1\":{\"532\":5}}],[\"interpreter\",{\"1\":{\"469\":1}}],[\"interpretation\",{\"1\":{\"400\":1}}],[\"internet\",{\"1\":{\"638\":1}}],[\"intern关注的是字符串对象\",{\"1\":{\"387\":1}}],[\"intern的区别\",{\"1\":{\"387\":1}}],[\"intern\",{\"1\":{\"341\":1,\"343\":3,\"345\":1,\"346\":1}}],[\"intern方法\",{\"1\":{\"341\":1,\"343\":1}}],[\"interruptedexception\",{\"1\":{\"297\":2,\"298\":3,\"299\":2,\"300\":1,\"315\":1,\"316\":3,\"319\":1,\"374\":1,\"375\":1,\"474\":1,\"476\":1,\"478\":1,\"480\":1}}],[\"interfacemethod\",{\"1\":{\"437\":2,\"438\":2}}],[\"interfacemethodref\",{\"1\":{\"400\":1}}],[\"interfaces\",{\"1\":{\"397\":3}}],[\"interface\",{\"1\":{\"144\":2,\"148\":3,\"150\":3,\"183\":1,\"184\":1,\"400\":2,\"438\":2,\"464\":1}}],[\"integerfunnel\",{\"1\":{\"581\":1,\"601\":1,\"612\":1,\"655\":1,\"666\":1}}],[\"integer\",{\"1\":{\"89\":2,\"182\":1,\"393\":1,\"400\":1,\"436\":5,\"437\":12,\"438\":5,\"440\":2,\"445\":6,\"456\":2,\"531\":1,\"532\":1,\"535\":3,\"537\":4,\"643\":1}}],[\"int\",{\"1\":{\"106\":1,\"107\":1,\"108\":1,\"109\":2,\"116\":1,\"117\":1,\"134\":1,\"138\":3,\"140\":1,\"142\":1,\"143\":1,\"144\":4,\"148\":4,\"150\":4,\"179\":1,\"235\":9,\"285\":1,\"289\":1,\"299\":2,\"300\":4,\"303\":1,\"326\":4,\"333\":1,\"338\":2,\"345\":2,\"350\":5,\"351\":1,\"364\":5,\"365\":3,\"373\":5,\"374\":5,\"375\":5,\"393\":1,\"405\":3,\"410\":1,\"411\":2,\"412\":2,\"413\":3,\"414\":2,\"415\":3,\"424\":1,\"427\":1,\"428\":1,\"430\":1,\"431\":5,\"432\":3,\"436\":3,\"437\":5,\"438\":1,\"440\":6,\"441\":1,\"442\":3,\"443\":1,\"444\":1,\"446\":4,\"455\":1,\"456\":1,\"469\":2,\"470\":7,\"471\":15,\"472\":2,\"474\":3,\"476\":3,\"480\":1,\"535\":1,\"537\":2,\"539\":1,\"540\":2,\"581\":4,\"601\":4,\"612\":4,\"655\":4,\"666\":4}}],[\"int32\",{\"1\":{\"91\":1}}],[\"int64\",{\"1\":{\"91\":3,\"106\":2,\"107\":2,\"109\":1,\"112\":1,\"116\":2,\"117\":7,\"118\":3,\"119\":3,\"120\":2,\"122\":1}}],[\"indexcontroller\",{\"1\":{\"159\":1,\"223\":2,\"266\":1}}],[\"indexing\",{\"1\":{\"93\":1}}],[\"indexdocument\",{\"1\":{\"93\":2}}],[\"index\",{\"1\":{\"66\":3,\"70\":3,\"74\":3,\"78\":3,\"85\":13,\"89\":10,\"90\":7,\"92\":3,\"93\":1,\"94\":1,\"98\":3,\"102\":3,\"126\":3,\"130\":3,\"156\":1,\"159\":2,\"179\":1,\"223\":2,\"266\":2,\"267\":1,\"437\":1,\"488\":3,\"492\":3,\"496\":3,\"500\":3,\"504\":3,\"508\":3,\"568\":2}}],[\"indices\",{\"1\":{\"66\":1,\"70\":1,\"74\":1,\"78\":1,\"85\":2,\"90\":2,\"92\":1,\"98\":1,\"102\":1,\"126\":1,\"130\":1,\"488\":1,\"492\":1,\"496\":1,\"500\":1,\"504\":1,\"508\":1}}],[\"in\",{\"1\":{\"26\":1,\"85\":1,\"161\":1,\"267\":1,\"297\":1,\"338\":1,\"350\":1,\"351\":6,\"357\":2,\"364\":1,\"400\":1,\"417\":1,\"418\":1,\"451\":1,\"452\":1,\"530\":2,\"535\":1,\"537\":1,\"637\":3,\"639\":3,\"640\":4,\"641\":1,\"643\":2,\"644\":3,\"645\":5,\"674\":1}}],[\"i\",{\"1\":{\"18\":1,\"29\":1,\"112\":4,\"139\":2,\"144\":2,\"285\":3,\"289\":2,\"299\":9,\"300\":15,\"303\":4,\"333\":2,\"338\":4,\"345\":2,\"350\":2,\"364\":6,\"365\":4,\"410\":1,\"411\":4,\"413\":2,\"414\":4,\"415\":10,\"427\":3,\"428\":7,\"430\":4,\"431\":1,\"432\":5,\"437\":2,\"438\":6,\"440\":5,\"444\":1,\"469\":3,\"470\":9,\"471\":13,\"472\":1,\"474\":21,\"476\":3,\"481\":5,\"581\":7,\"601\":7,\"612\":7,\"640\":1,\"655\":7,\"666\":7,\"677\":1}}],[\"i=1\",{\"1\":{\"18\":1}}],[\"itable\",{\"1\":{\"448\":1}}],[\"its\",{\"1\":{\"400\":1,\"637\":1,\"639\":1,\"645\":1}}],[\"itheima\",{\"1\":{\"333\":1,\"338\":1,\"343\":1}}],[\"itcast\",{\"1\":{\"333\":1,\"338\":1,\"343\":1,\"400\":2,\"411\":1,\"417\":1,\"420\":1,\"438\":2,\"452\":2,\"455\":3,\"458\":4,\"459\":4}}],[\"iter\",{\"1\":{\"465\":3}}],[\"iterations\",{\"1\":{\"471\":2}}],[\"iterations=5\",{\"1\":{\"303\":1}}],[\"iterations=3\",{\"1\":{\"303\":1}}],[\"iterator<接口类型>\",{\"1\":{\"465\":1}}],[\"iterator<driver>\",{\"1\":{\"464\":1}}],[\"iterator<integer>\",{\"1\":{\"440\":1}}],[\"iterator\",{\"1\":{\"440\":6,\"464\":1,\"465\":1}}],[\"iterable\",{\"1\":{\"440\":3}}],[\"items\",{\"1\":{\"85\":1}}],[\"itoa\",{\"1\":{\"106\":1,\"107\":1,\"108\":1,\"109\":2,\"116\":1,\"117\":1}}],[\"it\",{\"1\":{\"12\":2,\"635\":1,\"636\":1,\"638\":2,\"640\":6,\"643\":1,\"644\":1}}],[\"+after\",{\"1\":{\"554\":1}}],[\"+employee\",{\"1\":{\"554\":2,\"561\":2}}],[\"+unlockdiagnosticvmoptions\",{\"1\":{\"470\":1}}],[\"+usestringdeduplication\",{\"1\":{\"387\":1}}],[\"+useserialgc\",{\"1\":{\"373\":1,\"374\":1,\"375\":1,\"377\":1}}],[\"+useg1gc\",{\"1\":{\"380\":1}}],[\"+useconcmarksweepgc\",{\"1\":{\"379\":1}}],[\"+useadptivesizepolicy\",{\"1\":{\"378\":1}}],[\"+useadaptivesizepolicy\",{\"1\":{\"378\":1}}],[\"+useadaptivesizepolicy幸存区比例\",{\"1\":{\"373\":1}}],[\"+useparnewgc\",{\"1\":{\"379\":1}}],[\"+useparallelgc\",{\"1\":{\"378\":1}}],[\"+usepralleroldgc\",{\"1\":{\"378\":1}}],[\"++this\",{\"1\":{\"472\":1}}],[\"++i\",{\"1\":{\"440\":1}}],[\"++a\",{\"1\":{\"411\":2}}],[\"+classunloadingwithconcurrentmark\",{\"1\":{\"388\":1}}],[\"+cmsscavengebeforeremark\",{\"1\":{\"379\":1}}],[\"+scavengebeforefullgc\",{\"1\":{\"373\":1}}],[\"+disableexplicitgc\",{\"1\":{\"351\":2}}],[\"+printcompilation\",{\"1\":{\"470\":1}}],[\"+printinlining\",{\"1\":{\"470\":1}}],[\"+printtenuringdistrubution\",{\"1\":{\"394\":1}}],[\"+printtenuringdistributiongc详情\",{\"1\":{\"373\":1}}],[\"+printflagsfinal\",{\"1\":{\"390\":1}}],[\"+printgcdetails\",{\"1\":{\"345\":2,\"364\":1,\"373\":2,\"374\":1,\"375\":1}}],[\"+printstringtablestatistics\",{\"1\":{\"345\":2}}],[\"+new\",{\"1\":{\"316\":4,\"343\":2}}],[\"+1\",{\"1\":{\"289\":1,\"529\":1}}],[\"+=1\",{\"1\":{\"139\":2}}],[\"+=\",{\"1\":{\"139\":2,\"143\":2,\"471\":3}}],[\"+\",{\"0\":{\"377\":1},\"1\":{\"18\":1,\"29\":1,\"106\":1,\"107\":1,\"108\":1,\"109\":2,\"116\":1,\"285\":1,\"299\":8,\"300\":14,\"326\":1,\"333\":1,\"338\":2,\"341\":2,\"343\":2,\"350\":2,\"364\":1,\"365\":3,\"373\":1,\"376\":1,\"377\":1,\"380\":3,\"385\":1,\"405\":2,\"410\":1,\"411\":2,\"417\":1,\"423\":1,\"438\":1,\"441\":1,\"446\":2,\"464\":4,\"466\":6,\"529\":2,\"530\":7,\"531\":1,\"532\":3,\"534\":1,\"535\":4,\"536\":1,\"537\":3,\"538\":5,\"539\":2,\"540\":2,\"581\":2,\"601\":2,\"612\":2,\"635\":8,\"655\":2,\"666\":2,\"677\":1}}],[\"yes\",{\"1\":{\"627\":1,\"628\":1,\"637\":2,\"638\":1,\"641\":2}}],[\"yellow\",{\"1\":{\"85\":1}}],[\"yyyymm\",{\"1\":{\"539\":1,\"540\":1}}],[\"your\",{\"1\":{\"635\":1}}],[\"young\",{\"0\":{\"381\":1,\"385\":1},\"1\":{\"380\":2,\"382\":1}}],[\"you\",{\"1\":{\"267\":1,\"635\":2,\"638\":2,\"641\":2,\"645\":1}}],[\"yml内容如下\",{\"1\":{\"568\":1}}],[\"yml拷贝重命名一个employee\",{\"1\":{\"568\":1}}],[\"yml\",{\"1\":{\"265\":1,\"568\":2}}],[\"y的数值\",{\"1\":{\"150\":1}}],[\"y\",{\"1\":{\"18\":2,\"136\":2,\"138\":3,\"150\":6,\"436\":3,\"537\":7}}],[\"y^\",{\"1\":{\"18\":2}}],[\"lcmp\",{\"1\":{\"412\":1}}],[\"lcn\",{\"1\":{\"400\":1,\"438\":1}}],[\"ldc2\",{\"1\":{\"410\":1}}],[\"ldc\",{\"1\":{\"341\":14,\"406\":1,\"410\":2,\"415\":2,\"429\":2,\"433\":1}}],[\"ljava\",{\"1\":{\"289\":2,\"341\":10,\"400\":4,\"406\":10,\"411\":4,\"414\":1,\"428\":5,\"429\":4,\"433\":2,\"437\":3,\"438\":7}}],[\"likeblog\",{\"1\":{\"529\":1,\"530\":1}}],[\"liked\",{\"1\":{\"529\":7,\"530\":7}}],[\"likes\",{\"1\":{\"529\":1,\"530\":1}}],[\"lib里未查找到该class\",{\"1\":{\"460\":1}}],[\"lib\",{\"1\":{\"419\":1,\"457\":2,\"459\":2,\"463\":2}}],[\"live\",{\"1\":{\"357\":1}}],[\"link\",{\"1\":{\"635\":1}}],[\"linux上启动\",{\"1\":{\"553\":1,\"560\":1,\"567\":1}}],[\"linux\",{\"0\":{\"743\":1},\"1\":{\"397\":1,\"641\":1}}],[\"linux环境下运行某些程序的时候\",{\"1\":{\"328\":1}}],[\"line\",{\"1\":{\"289\":4,\"406\":3,\"411\":5,\"438\":5}}],[\"linenumbertable\",{\"1\":{\"289\":1,\"400\":1,\"406\":3,\"411\":1,\"428\":1,\"429\":1,\"438\":2}}],[\"lightweight\",{\"1\":{\"295\":1}}],[\"li>\",{\"1\":{\"267\":1}}],[\"listen\",{\"1\":{\"645\":1}}],[\"listed\",{\"1\":{\"645\":1}}],[\"listbyids\",{\"1\":{\"532\":1}}],[\"lists\",{\"1\":{\"512\":1}}],[\"list=new\",{\"1\":{\"374\":1}}],[\"list和softreference是强引用\",{\"1\":{\"364\":2}}],[\"list<employee>\",{\"1\":{\"561\":1}}],[\"list<georesult<redisgeocommands\",{\"1\":{\"537\":1}}],[\"list<redisgeocommands\",{\"1\":{\"536\":1}}],[\"list<\",{\"1\":{\"535\":1}}],[\"list<follow>\",{\"1\":{\"534\":1}}],[\"list<blog>\",{\"1\":{\"532\":1,\"535\":1}}],[\"list<byte\",{\"1\":{\"373\":1}}],[\"list<bytebuffer>\",{\"1\":{\"350\":1}}],[\"list<userdto>\",{\"1\":{\"530\":1,\"532\":1}}],[\"list<user>\",{\"1\":{\"185\":1,\"239\":1}}],[\"list<long>\",{\"1\":{\"530\":1,\"532\":1,\"535\":1,\"537\":1,\"540\":1}}],[\"list<ljava\",{\"1\":{\"438\":1}}],[\"list<shop>>\",{\"1\":{\"536\":2}}],[\"list<shop>\",{\"1\":{\"536\":2,\"537\":1}}],[\"list<string>\",{\"1\":{\"438\":1}}],[\"list<softreference<byte\",{\"1\":{\"364\":1}}],[\"list<integer>\",{\"1\":{\"437\":1,\"440\":2}}],[\"list<weakreference<byte\",{\"1\":{\"365\":2}}],[\"list接口\",{\"1\":{\"228\":1}}],[\"list权限的用户可以访问\",{\"1\":{\"228\":1,\"229\":1}}],[\"list\",{\"0\":{\"514\":1},\"1\":{\"185\":3,\"229\":3,\"230\":2,\"239\":2,\"299\":7,\"300\":4,\"333\":3,\"350\":2,\"357\":7,\"364\":15,\"365\":8,\"373\":7,\"374\":1,\"375\":3,\"437\":11,\"438\":8,\"440\":4,\"530\":1,\"534\":1,\"535\":2,\"536\":3,\"537\":6,\"645\":1}}],[\"limited\",{\"1\":{\"638\":1}}],[\"limit\",{\"1\":{\"117\":1,\"119\":1,\"122\":1,\"393\":1,\"535\":1,\"537\":1,\"644\":1}}],[\"let\",{\"1\":{\"640\":1}}],[\"lettuce<\",{\"1\":{\"526\":1,\"537\":2,\"561\":1}}],[\"lettuce\",{\"0\":{\"526\":1},\"1\":{\"523\":1,\"526\":1}}],[\"least\",{\"1\":{\"635\":1,\"642\":1,\"644\":1}}],[\"less\",{\"1\":{\"143\":2,\"641\":1,\"644\":2}}],[\"length\",{\"1\":{\"138\":2,\"289\":1,\"338\":1,\"411\":1,\"428\":1,\"429\":1,\"438\":4,\"439\":2,\"440\":1,\"464\":1,\"471\":4}}],[\"len\",{\"1\":{\"112\":1,\"117\":1}}],[\"left\",{\"1\":{\"18\":3,\"136\":1,\"267\":1}}],[\"l\",{\"1\":{\"98\":6,\"102\":6,\"121\":5,\"387\":4}}],[\"lte\",{\"1\":{\"88\":1}}],[\"large\",{\"1\":{\"639\":1}}],[\"layer\",{\"1\":{\"638\":1}}],[\"lag\",{\"1\":{\"633\":1,\"634\":1,\"644\":5,\"645\":1}}],[\"labels\",{\"1\":{\"568\":1}}],[\"lazyiterator\",{\"1\":{\"466\":1}}],[\"lazyholder\",{\"1\":{\"456\":2}}],[\"launcher$extclassloader\",{\"1\":{\"459\":1}}],[\"launcher$appclassloader\",{\"1\":{\"459\":1}}],[\"latitude\",{\"1\":{\"519\":1,\"535\":1}}],[\"later\",{\"1\":{\"639\":1,\"642\":2}}],[\"latency\",{\"1\":{\"380\":1,\"637\":1,\"641\":1}}],[\"latest\",{\"1\":{\"65\":1,\"69\":1,\"73\":1,\"77\":1,\"97\":1,\"101\":1,\"129\":1,\"487\":1,\"491\":1,\"495\":1,\"499\":1,\"503\":1,\"507\":1,\"512\":1,\"526\":1}}],[\"latch\",{\"1\":{\"315\":8}}],[\"lang\",{\"1\":{\"289\":4,\"327\":2,\"333\":6,\"338\":8,\"341\":20,\"350\":1,\"400\":5,\"406\":15,\"411\":5,\"414\":1,\"424\":3,\"427\":1,\"428\":9,\"429\":8,\"430\":1,\"433\":4,\"435\":1,\"437\":5,\"438\":13,\"444\":2,\"445\":2,\"472\":1}}],[\"language\",{\"1\":{\"90\":1}}],[\"language领域特定语言\",{\"1\":{\"88\":1}}],[\"last\",{\"1\":{\"406\":1,\"530\":1,\"535\":1,\"537\":1,\"642\":1,\"644\":1}}],[\"lastidstr\",{\"1\":{\"117\":4,\"119\":2,\"122\":2}}],[\"lastid\",{\"1\":{\"115\":1,\"117\":1,\"122\":2,\"535\":2}}],[\"lastname最好包含wallace\",{\"1\":{\"88\":1}}],[\"lastname\",{\"1\":{\"85\":1,\"88\":1,\"89\":1}}],[\"loses\",{\"1\":{\"637\":1}}],[\"lost\",{\"1\":{\"635\":1,\"644\":1}}],[\"loadshopdata\",{\"1\":{\"536\":1}}],[\"loading\",{\"1\":{\"464\":1}}],[\"loadinitialdrivers\",{\"1\":{\"463\":1,\"464\":2}}],[\"loadeddrivers\",{\"1\":{\"464\":2}}],[\"loader\",{\"1\":{\"448\":1,\"460\":1,\"466\":1}}],[\"load5\",{\"1\":{\"458\":2,\"459\":1}}],[\"load3\",{\"1\":{\"455\":1}}],[\"load2\",{\"1\":{\"452\":2,\"456\":1}}],[\"load\",{\"1\":{\"452\":2,\"458\":4,\"459\":4,\"464\":2,\"465\":1,\"466\":3}}],[\"loadclass源码\",{\"1\":{\"460\":1}}],[\"loadclass方法\",{\"1\":{\"455\":1}}],[\"loadclass\",{\"1\":{\"451\":1,\"452\":2,\"455\":1,\"460\":3,\"461\":2}}],[\"loaduserbyusername\",{\"1\":{\"188\":1}}],[\"lowest\",{\"1\":{\"643\":1}}],[\"low\",{\"1\":{\"380\":1,\"640\":1,\"641\":1,\"643\":1}}],[\"loopnumber\",{\"1\":{\"300\":4}}],[\"locked\",{\"1\":{\"295\":2}}],[\"lock对象\",{\"1\":{\"289\":3}}],[\"lock引用\",{\"1\":{\"289\":4}}],[\"lock\",{\"1\":{\"277\":1,\"283\":1,\"289\":2,\"295\":3,\"301\":2,\"433\":2}}],[\"locksupport还提供了一些变体的park方法\",{\"1\":{\"319\":1}}],[\"locksupport提供了一些静态方法\",{\"1\":{\"319\":1}}],[\"locksupport工具类\",{\"1\":{\"319\":1}}],[\"locksupport\",{\"0\":{\"319\":1},\"1\":{\"280\":2,\"300\":4,\"319\":5}}],[\"locks\",{\"1\":{\"277\":2,\"319\":1}}],[\"locks子包\",{\"1\":{\"277\":1}}],[\"locations\",{\"1\":{\"536\":3}}],[\"location<\",{\"1\":{\"90\":1}}],[\"localdatetime\",{\"1\":{\"539\":2,\"540\":2}}],[\"localvariabletypetable\",{\"1\":{\"438\":2}}],[\"localvariabletable\",{\"1\":{\"289\":1,\"400\":1,\"411\":1,\"428\":1,\"429\":1,\"438\":2}}],[\"locals=2\",{\"1\":{\"416\":1,\"429\":1}}],[\"locals=0\",{\"1\":{\"415\":1}}],[\"locals=4\",{\"1\":{\"409\":1,\"430\":1,\"433\":1}}],[\"locals=1\",{\"1\":{\"406\":2,\"438\":1}}],[\"locals=6\",{\"1\":{\"341\":1}}],[\"locals=5\",{\"1\":{\"341\":1}}],[\"locals=3\",{\"1\":{\"289\":1,\"411\":1,\"414\":1,\"415\":1,\"427\":1,\"428\":1,\"431\":1,\"432\":1,\"437\":1,\"438\":1}}],[\"locals\",{\"1\":{\"289\":1,\"410\":1}}],[\"local\",{\"1\":{\"283\":1,\"394\":1,\"471\":6}}],[\"localizedmessage\",{\"1\":{\"212\":2,\"218\":1}}],[\"localhost\",{\"1\":{\"66\":1,\"70\":1,\"74\":1,\"78\":1,\"90\":1,\"98\":1,\"102\":1,\"126\":1,\"130\":1,\"161\":2,\"181\":1,\"185\":1,\"195\":1,\"265\":1,\"488\":1,\"492\":1,\"496\":1,\"500\":1,\"504\":1,\"508\":1,\"525\":1,\"526\":1,\"560\":1}}],[\"longer\",{\"1\":{\"642\":2,\"643\":1}}],[\"longvalue\",{\"1\":{\"535\":1}}],[\"longitude\",{\"1\":{\"519\":1,\"535\":1}}],[\"long\",{\"1\":{\"89\":2,\"319\":2,\"350\":3,\"351\":1,\"400\":1,\"410\":2,\"412\":1,\"460\":2,\"469\":2,\"470\":2,\"528\":1,\"529\":3,\"530\":6,\"531\":6,\"532\":7,\"534\":1,\"535\":7,\"536\":1,\"537\":1,\"539\":1,\"540\":2,\"554\":1,\"561\":1,\"569\":1}}],[\"log日志文件\",{\"1\":{\"558\":1}}],[\"log日志\",{\"0\":{\"552\":1,\"559\":1,\"566\":1},\"1\":{\"558\":1}}],[\"logger\",{\"1\":{\"568\":1}}],[\"logged\",{\"1\":{\"267\":1}}],[\"logging\",{\"1\":{\"181\":1}}],[\"login<\",{\"1\":{\"267\":1}}],[\"loginpage\",{\"1\":{\"205\":1}}],[\"logincontroller\",{\"1\":{\"203\":1}}],[\"login\",{\"1\":{\"161\":1,\"203\":3,\"204\":4,\"205\":2,\"259\":1,\"261\":1,\"263\":1,\"264\":2,\"265\":1,\"267\":1,\"271\":2}}],[\"logic\",{\"1\":{\"98\":8,\"102\":8,\"121\":6,\"122\":2}}],[\"logoutsuccesshandler\",{\"1\":{\"215\":1,\"216\":1}}],[\"logout\",{\"0\":{\"163\":1},\"1\":{\"160\":2,\"163\":3,\"216\":3,\"267\":3}}],[\"logs\",{\"1\":{\"90\":1}}],[\"logstash\",{\"1\":{\"81\":1,\"726\":1,\"729\":1}}],[\"log\",{\"1\":{\"18\":2,\"90\":1,\"181\":1,\"297\":4,\"298\":4,\"299\":5,\"300\":10,\"315\":8,\"527\":1,\"551\":1,\"552\":1,\"559\":1,\"561\":1,\"566\":1}}],[\"=1\",{\"1\":{\"442\":1}}],[\"=0\",{\"1\":{\"442\":1}}],[\"=authentication\",{\"1\":{\"223\":1}}],[\"===========================================\",{\"1\":{\"365\":1}}],[\"=====================\",{\"1\":{\"364\":1}}],[\"===============>\",{\"1\":{\"299\":2,\"300\":2}}],[\"==\",{\"1\":{\"88\":1,\"117\":1,\"141\":1,\"142\":5,\"188\":1,\"239\":1,\"341\":2,\"350\":1,\"412\":2,\"460\":2,\"464\":1,\"528\":1,\"530\":3,\"532\":2,\"535\":3,\"537\":3,\"540\":4}}],[\"=\",{\"1\":{\"18\":1,\"56\":2,\"57\":2,\"65\":2,\"66\":5,\"69\":2,\"70\":5,\"73\":2,\"74\":5,\"77\":2,\"78\":5,\"90\":4,\"92\":2,\"93\":2,\"94\":4,\"97\":2,\"98\":22,\"101\":2,\"102\":22,\"105\":2,\"106\":3,\"107\":3,\"108\":2,\"109\":4,\"110\":7,\"111\":2,\"112\":8,\"115\":2,\"116\":4,\"117\":14,\"118\":4,\"121\":12,\"122\":8,\"125\":2,\"126\":5,\"129\":2,\"130\":5,\"134\":9,\"135\":2,\"136\":6,\"138\":12,\"139\":8,\"140\":1,\"141\":1,\"142\":6,\"143\":2,\"144\":1,\"148\":6,\"151\":2,\"174\":2,\"176\":1,\"182\":2,\"188\":3,\"189\":1,\"193\":1,\"194\":1,\"200\":2,\"209\":3,\"212\":3,\"215\":2,\"218\":3,\"223\":6,\"225\":3,\"230\":1,\"231\":2,\"271\":1,\"285\":2,\"286\":2,\"289\":9,\"294\":1,\"297\":3,\"298\":2,\"299\":7,\"300\":11,\"302\":1,\"303\":3,\"314\":1,\"315\":1,\"316\":1,\"319\":1,\"324\":1,\"326\":3,\"333\":4,\"338\":5,\"341\":12,\"342\":1,\"343\":1,\"345\":4,\"350\":17,\"351\":8,\"357\":2,\"364\":15,\"365\":11,\"373\":6,\"374\":5,\"375\":6,\"376\":1,\"377\":1,\"387\":2,\"393\":1,\"399\":1,\"405\":3,\"406\":28,\"410\":2,\"411\":2,\"412\":4,\"413\":3,\"414\":5,\"415\":10,\"416\":1,\"427\":3,\"428\":5,\"429\":1,\"430\":4,\"431\":3,\"432\":3,\"433\":1,\"436\":6,\"437\":7,\"438\":5,\"439\":2,\"440\":8,\"441\":8,\"442\":6,\"443\":3,\"444\":9,\"446\":5,\"451\":3,\"452\":3,\"455\":5,\"456\":4,\"458\":1,\"459\":2,\"460\":7,\"463\":1,\"464\":6,\"465\":2,\"466\":6,\"469\":4,\"470\":6,\"471\":15,\"472\":5,\"474\":5,\"476\":6,\"478\":3,\"480\":3,\"487\":2,\"488\":5,\"491\":2,\"492\":5,\"495\":2,\"496\":5,\"499\":2,\"500\":5,\"503\":2,\"504\":5,\"507\":2,\"508\":5,\"525\":1,\"526\":3,\"527\":3,\"528\":1,\"529\":9,\"530\":17,\"531\":10,\"532\":19,\"534\":8,\"535\":15,\"536\":6,\"537\":18,\"539\":5,\"540\":8,\"541\":1,\"553\":4,\"554\":2,\"560\":13,\"561\":5,\"567\":12,\"580\":4,\"581\":6,\"582\":1,\"600\":4,\"601\":6,\"602\":1,\"611\":4,\"612\":6,\"613\":1,\"654\":4,\"655\":6,\"656\":1,\"665\":4,\"666\":6,\"667\":1}}],[\"peer\",{\"1\":{\"645\":1}}],[\"perform\",{\"1\":{\"635\":1,\"642\":1,\"643\":1}}],[\"perfcounter\",{\"1\":{\"460\":3}}],[\"period\",{\"1\":{\"631\":1,\"640\":3,\"641\":1}}],[\"person\",{\"1\":{\"560\":1,\"567\":1}}],[\"permgen\",{\"1\":{\"338\":1}}],[\"permits\",{\"1\":{\"312\":6}}],[\"permitall\",{\"1\":{\"205\":1}}],[\"permission\",{\"1\":{\"235\":6}}],[\"pk\",{\"1\":{\"568\":1}}],[\"pkg\",{\"1\":{\"146\":1,\"151\":1}}],[\"pkgdoc\",{\"1\":{\"133\":1}}],[\"python\",{\"1\":{\"558\":1}}],[\"python客户端\",{\"1\":{\"558\":1}}],[\"pv\",{\"1\":{\"541\":1}}],[\"p2p模型的规定就是每一个消息数据\",{\"1\":{\"484\":1}}],[\"p2p模型是基于队列的\",{\"1\":{\"484\":1}}],[\"p2p\",{\"1\":{\"484\":1}}],[\"p=19\",{\"1\":{\"481\":1}}],[\"png\",{\"1\":{\"398\":1}}],[\"psubscribe\",{\"1\":{\"637\":1}}],[\"ps\",{\"1\":{\"328\":1,\"350\":5,\"484\":1}}],[\"ptr\",{\"1\":{\"295\":2}}],[\"pbkdf2是一种故意缓慢的算法\",{\"1\":{\"199\":1}}],[\"pbkdf2passwordencoder\",{\"1\":{\"199\":1}}],[\"pbkdf2\",{\"1\":{\"198\":1}}],[\"pick\",{\"1\":{\"643\":1}}],[\"pings\",{\"1\":{\"640\":3}}],[\"ping\",{\"1\":{\"631\":1,\"637\":1,\"640\":3,\"641\":1,\"644\":1}}],[\"pipelining\",{\"1\":{\"545\":1,\"548\":1}}],[\"pipeline\",{\"1\":{\"116\":3}}],[\"pid\",{\"1\":{\"98\":1,\"102\":1,\"328\":1}}],[\"p\",{\"1\":{\"90\":2,\"98\":10,\"102\":10,\"108\":3,\"110\":7,\"111\":4,\"121\":9,\"148\":1,\"458\":1,\"466\":3,\"583\":3,\"603\":3,\"614\":3,\"657\":3,\"668\":3}}],[\"predefined\",{\"1\":{\"640\":1}}],[\"present\",{\"1\":{\"400\":1}}],[\"pretenuresizethreshold\",{\"1\":{\"378\":1}}],[\"preauthorize\",{\"1\":{\"239\":2}}],[\"promotion\",{\"1\":{\"643\":2}}],[\"promote\",{\"1\":{\"643\":1}}],[\"promoted\",{\"1\":{\"642\":1}}],[\"problems\",{\"1\":{\"638\":1}}],[\"probabilistic\",{\"0\":{\"522\":1}}],[\"probablistic\",{\"1\":{\"512\":1}}],[\"progress\",{\"1\":{\"637\":2}}],[\"program\",{\"1\":{\"324\":1}}],[\"protobuf\",{\"1\":{\"558\":1}}],[\"protected\",{\"1\":{\"424\":2,\"460\":1,\"636\":1}}],[\"protection\",{\"1\":{\"156\":1,\"638\":1}}],[\"producing\",{\"1\":{\"639\":1}}],[\"producer\",{\"1\":{\"560\":1,\"561\":2,\"567\":1}}],[\"producer消息重复和消息丢失的原因\",{\"1\":{\"484\":1}}],[\"production\",{\"1\":{\"458\":1,\"459\":1}}],[\"proﬁling\",{\"1\":{\"469\":2}}],[\"providers\",{\"1\":{\"466\":1}}],[\"provider\",{\"1\":{\"464\":1,\"466\":3}}],[\"process\",{\"1\":{\"338\":1,\"636\":1,\"639\":4}}],[\"projectlombok<\",{\"1\":{\"180\":1,\"554\":1}}],[\"projects\",{\"1\":{\"157\":1,\"264\":1,\"471\":1}}],[\"proximity词近邻查询\",{\"1\":{\"90\":1}}],[\"properties中配置自定义用户名和密码\",{\"1\":{\"174\":1}}],[\"properties>\",{\"1\":{\"90\":1}}],[\"properties\",{\"1\":{\"89\":3,\"90\":2,\"553\":2,\"560\":2,\"561\":1,\"567\":2,\"568\":1,\"569\":1}}],[\"priority\",{\"1\":{\"632\":1,\"633\":1,\"643\":8,\"644\":1}}],[\"privileges\",{\"1\":{\"552\":3,\"559\":3,\"566\":3}}],[\"privilegedaction<string>\",{\"1\":{\"464\":1}}],[\"privilegedaction<void>\",{\"1\":{\"350\":1,\"464\":1}}],[\"private\",{\"1\":{\"182\":4,\"188\":1,\"193\":1,\"285\":1,\"286\":1,\"297\":1,\"299\":1,\"300\":1,\"350\":1,\"351\":3,\"373\":5,\"374\":5,\"375\":5,\"415\":2,\"416\":3,\"443\":2,\"456\":2,\"463\":1,\"464\":1,\"466\":1,\"470\":2,\"471\":1,\"472\":4,\"527\":1,\"529\":1,\"530\":1,\"535\":3,\"554\":4,\"561\":7,\"581\":3,\"601\":3,\"612\":3,\"655\":3,\"666\":3}}],[\"principal可以通过authentication对象的getprincipal\",{\"1\":{\"222\":1}}],[\"principal和credential是一些与身份验证和授权相关的重要概念\",{\"1\":{\"222\":1}}],[\"principal\",{\"1\":{\"209\":2,\"222\":1,\"223\":2}}],[\"prints\",{\"1\":{\"525\":1,\"526\":1}}],[\"printstream\",{\"1\":{\"324\":1,\"400\":2,\"406\":8,\"410\":1,\"411\":4,\"414\":2,\"433\":2}}],[\"printstacktrace\",{\"1\":{\"297\":2,\"298\":2,\"299\":1,\"316\":2,\"319\":1,\"333\":1,\"345\":1,\"350\":1,\"429\":2,\"444\":3,\"561\":1}}],[\"print\",{\"1\":{\"136\":1,\"148\":1,\"365\":3,\"480\":1}}],[\"println\",{\"1\":{\"134\":1,\"136\":3,\"138\":2,\"139\":1,\"141\":2,\"143\":6,\"148\":2,\"150\":1,\"151\":2,\"200\":1,\"209\":1,\"212\":1,\"215\":1,\"218\":1,\"223\":5,\"225\":1,\"231\":1,\"316\":4,\"319\":2,\"324\":5,\"326\":2,\"333\":1,\"338\":1,\"341\":4,\"343\":5,\"345\":1,\"350\":1,\"351\":4,\"357\":3,\"364\":8,\"365\":3,\"375\":1,\"397\":1,\"400\":1,\"405\":1,\"406\":4,\"410\":1,\"411\":4,\"414\":2,\"415\":3,\"417\":3,\"429\":1,\"431\":2,\"432\":1,\"433\":2,\"438\":1,\"439\":2,\"440\":4,\"441\":8,\"442\":4,\"444\":2,\"445\":1,\"446\":4,\"455\":9,\"456\":4,\"458\":2,\"459\":2,\"463\":2,\"464\":4,\"470\":3,\"472\":1,\"474\":1,\"476\":1,\"480\":2,\"525\":1,\"526\":1,\"581\":2,\"601\":2,\"612\":2,\"655\":2,\"666\":2}}],[\"printf\",{\"1\":{\"66\":3,\"70\":3,\"74\":3,\"78\":3,\"90\":1,\"92\":2,\"93\":2,\"94\":3,\"98\":5,\"102\":5,\"126\":3,\"130\":3,\"138\":3,\"140\":2,\"142\":6,\"144\":6,\"148\":13,\"150\":2,\"438\":1,\"469\":1,\"470\":1,\"488\":3,\"492\":3,\"496\":3,\"500\":3,\"504\":3,\"508\":3}}],[\"primary\",{\"1\":{\"85\":7,\"179\":1}}],[\"phrase\",{\"1\":{\"88\":3}}],[\"plus\",{\"1\":{\"180\":1,\"181\":1}}],[\"plugins\",{\"1\":{\"90\":3}}],[\"plugin\",{\"1\":{\"14\":1,\"568\":1}}],[\"placeholder=\",{\"1\":{\"204\":2}}],[\"place\",{\"1\":{\"85\":1,\"645\":1}}],[\"pubsub\",{\"1\":{\"637\":1}}],[\"published\",{\"1\":{\"643\":1}}],[\"publish\",{\"1\":{\"637\":1}}],[\"public\",{\"1\":{\"28\":1,\"159\":2,\"176\":2,\"182\":1,\"183\":2,\"184\":2,\"185\":3,\"188\":8,\"189\":1,\"190\":1,\"192\":1,\"193\":1,\"194\":1,\"203\":2,\"209\":2,\"212\":2,\"215\":2,\"218\":2,\"223\":2,\"225\":2,\"230\":2,\"239\":2,\"266\":2,\"271\":1,\"285\":1,\"286\":3,\"289\":1,\"294\":3,\"298\":1,\"302\":1,\"303\":3,\"315\":1,\"319\":2,\"326\":9,\"333\":2,\"338\":4,\"341\":8,\"343\":2,\"345\":2,\"350\":6,\"351\":3,\"357\":1,\"364\":8,\"365\":5,\"373\":2,\"374\":2,\"375\":2,\"397\":2,\"400\":2,\"405\":2,\"406\":6,\"411\":4,\"412\":2,\"413\":6,\"414\":2,\"415\":5,\"416\":5,\"417\":7,\"424\":4,\"427\":2,\"428\":4,\"429\":5,\"430\":2,\"431\":6,\"432\":3,\"433\":2,\"435\":3,\"436\":6,\"437\":2,\"438\":6,\"439\":7,\"440\":10,\"441\":10,\"442\":4,\"443\":6,\"444\":8,\"445\":10,\"446\":13,\"451\":2,\"452\":2,\"455\":2,\"456\":7,\"458\":3,\"459\":2,\"463\":1,\"464\":2,\"466\":1,\"469\":2,\"470\":2,\"471\":6,\"472\":4,\"474\":2,\"476\":2,\"478\":1,\"480\":3,\"527\":4,\"528\":1,\"529\":2,\"530\":3,\"531\":4,\"532\":4,\"534\":1,\"535\":3,\"537\":2,\"539\":2,\"540\":2,\"554\":9,\"561\":4,\"581\":1,\"601\":1,\"612\":1,\"655\":1,\"666\":1,\"676\":1}}],[\"punsubscribe\",{\"1\":{\"637\":1}}],[\"putmapping\",{\"1\":{\"531\":1}}],[\"putfield\",{\"1\":{\"415\":6}}],[\"putstatic\",{\"1\":{\"289\":1,\"415\":3,\"474\":8,\"481\":3}}],[\"put\",{\"1\":{\"85\":8,\"89\":3,\"209\":3,\"212\":2,\"215\":2,\"218\":2,\"223\":2,\"225\":2,\"231\":2,\"466\":1,\"537\":1,\"569\":2,\"581\":1,\"601\":1,\"612\":1,\"655\":1,\"666\":1}}],[\"poi\",{\"1\":{\"545\":1,\"548\":1}}],[\"poi信息存储\",{\"1\":{\"545\":1,\"548\":1}}],[\"point\",{\"1\":{\"536\":2,\"640\":3}}],[\"pop\",{\"1\":{\"416\":1,\"429\":1,\"437\":1,\"438\":1}}],[\"pool\",{\"1\":{\"397\":3,\"406\":1,\"561\":1}}],[\"poll\",{\"1\":{\"364\":6,\"365\":6}}],[\"pom中添加配置用于测试\",{\"1\":{\"195\":1}}],[\"possibly\",{\"1\":{\"637\":1}}],[\"possible\",{\"1\":{\"636\":1,\"640\":3,\"644\":1}}],[\"position\",{\"1\":{\"90\":11}}],[\"posts\",{\"0\":{\"733\":1}}],[\"postmapping\",{\"1\":{\"192\":1,\"239\":1,\"527\":2,\"539\":1}}],[\"postman\",{\"1\":{\"87\":1}}],[\"postid\",{\"1\":{\"116\":3}}],[\"post不带\",{\"1\":{\"85\":1}}],[\"post\",{\"1\":{\"62\":1,\"85\":11,\"89\":3,\"90\":4,\"91\":2,\"92\":1,\"93\":6,\"94\":1,\"98\":2,\"102\":2,\"118\":1,\"121\":2,\"122\":1,\"204\":2,\"267\":1,\"541\":1,\"637\":1}}],[\"portion\",{\"1\":{\"642\":1}}],[\"port\",{\"1\":{\"561\":1,\"645\":9,\"646\":1}}],[\"port2\",{\"1\":{\"56\":2}}],[\"port1\",{\"1\":{\"56\":2}}],[\"pairs\",{\"1\":{\"645\":1}}],[\"paixppll\",{\"1\":{\"406\":2}}],[\"passing\",{\"1\":{\"642\":1}}],[\"password>\",{\"1\":{\"626\":1,\"636\":1}}],[\"passwordparameter\",{\"1\":{\"205\":1}}],[\"passwordencoder\",{\"0\":{\"199\":1},\"1\":{\"200\":1}}],[\"password=123456\",{\"1\":{\"181\":1}}],[\"password=123\",{\"1\":{\"174\":1}}],[\"password\",{\"1\":{\"174\":1,\"176\":2,\"182\":1,\"193\":1,\"197\":1,\"200\":3,\"204\":3,\"205\":1,\"234\":1,\"235\":1,\"238\":1,\"251\":1,\"254\":1,\"553\":1,\"554\":1,\"560\":1,\"561\":1,\"567\":1,\"568\":1,\"636\":1}}],[\"packets\",{\"1\":{\"641\":1}}],[\"package\",{\"1\":{\"98\":1,\"102\":1,\"134\":1,\"136\":1,\"138\":2,\"139\":1,\"140\":1,\"141\":1,\"142\":1,\"143\":2,\"144\":1,\"148\":1,\"150\":1,\"151\":1,\"159\":1,\"176\":1,\"182\":1,\"183\":1,\"184\":2,\"185\":1,\"188\":1,\"203\":1,\"209\":1,\"212\":1,\"215\":1,\"218\":1,\"223\":1,\"225\":1,\"266\":1,\"343\":1,\"350\":1,\"400\":1,\"411\":1,\"416\":1,\"417\":1,\"452\":1,\"458\":2,\"459\":2,\"471\":1}}],[\"pathvariable\",{\"1\":{\"529\":1,\"530\":1,\"531\":3,\"532\":1}}],[\"path=\",{\"1\":{\"163\":1}}],[\"pa\",{\"1\":{\"350\":3}}],[\"partitionhash=mytest\",{\"1\":{\"560\":1,\"567\":1}}],[\"partitionsnum=3\",{\"1\":{\"560\":1,\"567\":1}}],[\"partition\",{\"1\":{\"560\":1,\"567\":1,\"635\":1}}],[\"partition=0\",{\"1\":{\"560\":1,\"567\":1}}],[\"partially\",{\"1\":{\"642\":1}}],[\"partial\",{\"1\":{\"18\":1,\"635\":1,\"642\":2}}],[\"partial^r\",{\"1\":{\"18\":1}}],[\"parent>\",{\"1\":{\"554\":1,\"561\":1}}],[\"parent<\",{\"1\":{\"554\":1,\"561\":1}}],[\"parent\",{\"1\":{\"460\":3,\"472\":5,\"639\":1}}],[\"parnew收集器其实就是serial收集器的多线程版本\",{\"1\":{\"379\":1}}],[\"parnew\",{\"1\":{\"377\":3,\"378\":2,\"379\":2}}],[\"parallelized\",{\"1\":{\"639\":1}}],[\"parallelgc\",{\"1\":{\"384\":1,\"392\":1}}],[\"parallelgcthreads=n\",{\"1\":{\"378\":1,\"379\":1}}],[\"parallelgcthreads\",{\"1\":{\"377\":1}}],[\"parallel\",{\"1\":{\"376\":2,\"378\":5}}],[\"paranoia\",{\"1\":{\"350\":1}}],[\"parameterizedtype\",{\"1\":{\"438\":6}}],[\"parameters\",{\"1\":{\"397\":1,\"522\":1}}],[\"param\",{\"1\":{\"98\":1,\"102\":1,\"121\":1,\"122\":2,\"204\":1}}],[\"parkunparkexample\",{\"1\":{\"319\":1}}],[\"parkuntil\",{\"1\":{\"319\":1}}],[\"parknanos\",{\"1\":{\"319\":1}}],[\"park方法的用法非常简单\",{\"1\":{\"319\":1}}],[\"park方法的作用是阻塞当前线程\",{\"1\":{\"319\":1}}],[\"park方法就是其中之一\",{\"1\":{\"319\":1}}],[\"park方法属java\",{\"1\":{\"319\":1}}],[\"parker\",{\"1\":{\"280\":1}}],[\"park\",{\"0\":{\"280\":1},\"1\":{\"280\":1,\"283\":3,\"300\":2,\"312\":2,\"319\":3}}],[\"parseobject\",{\"1\":{\"561\":1}}],[\"parseinstance\",{\"1\":{\"297\":4,\"298\":3,\"299\":4,\"300\":8}}],[\"parseint\",{\"1\":{\"112\":1,\"117\":3}}],[\"parser\",{\"1\":{\"81\":1,\"726\":1,\"729\":1}}],[\"page<shop>\",{\"1\":{\"537\":1}}],[\"page<>\",{\"1\":{\"532\":1,\"537\":1}}],[\"page<blog>\",{\"1\":{\"532\":1}}],[\"pagesize\",{\"1\":{\"350\":1}}],[\"page\",{\"1\":{\"26\":1,\"350\":1,\"532\":4,\"537\":6,\"674\":1}}],[\"turning\",{\"1\":{\"641\":1}}],[\"tuple\",{\"1\":{\"535\":3}}],[\"two\",{\"1\":{\"637\":1,\"639\":1,\"645\":1}}],[\"twitters\",{\"1\":{\"89\":2}}],[\"twitter\",{\"1\":{\"89\":4}}],[\"twitter的正确映射\",{\"1\":{\"89\":1}}],[\"ttl\",{\"1\":{\"631\":1,\"632\":1,\"642\":1,\"643\":1}}],[\"tb\",{\"1\":{\"527\":2,\"531\":2,\"532\":1,\"534\":1}}],[\"t0\",{\"1\":{\"460\":2}}],[\"t5\",{\"1\":{\"400\":2}}],[\"tlab\",{\"1\":{\"394\":1}}],[\"t3\",{\"1\":{\"300\":6,\"411\":1,\"417\":1,\"420\":1,\"438\":2,\"452\":2,\"455\":3,\"458\":4,\"459\":4}}],[\"t2\",{\"1\":{\"297\":7,\"298\":2,\"299\":95,\"300\":5,\"474\":3,\"476\":6}}],[\"t2时刻发布了新的记录\",{\"1\":{\"115\":1,\"534\":1}}],[\"t1\",{\"1\":{\"279\":6,\"297\":5,\"298\":6,\"299\":34,\"300\":4,\"460\":3,\"474\":3,\"476\":7}}],[\"tar\",{\"1\":{\"553\":1,\"560\":1,\"567\":1,\"568\":1}}],[\"target\",{\"1\":{\"289\":1,\"427\":2,\"428\":1,\"429\":1,\"430\":1,\"431\":1,\"432\":1,\"433\":1,\"472\":3}}],[\"tables\",{\"1\":{\"552\":1,\"559\":1,\"566\":1}}],[\"tables授权表\",{\"1\":{\"552\":1,\"559\":1,\"566\":1}}],[\"tablefield\",{\"1\":{\"529\":1}}],[\"tableid\",{\"1\":{\"182\":1}}],[\"table\",{\"1\":{\"179\":1,\"235\":5,\"289\":1,\"427\":2,\"428\":2,\"429\":1,\"430\":1,\"431\":1,\"432\":1,\"433\":1,\"553\":1,\"561\":1}}],[\"tag标签\",{\"1\":{\"561\":1}}],[\"tag\",{\"1\":{\"98\":1,\"102\":1,\"121\":1,\"560\":1,\"567\":1}}],[\"tree\",{\"1\":{\"568\":1}}],[\"treat\",{\"1\":{\"400\":1}}],[\"traffic\",{\"1\":{\"640\":1,\"641\":1}}],[\"trace\",{\"1\":{\"560\":2,\"561\":1,\"567\":2}}],[\"tracing\",{\"1\":{\"379\":1}}],[\"translation\",{\"1\":{\"645\":1}}],[\"transfers\",{\"1\":{\"640\":1}}],[\"transfer\",{\"1\":{\"639\":4,\"640\":4}}],[\"transferred\",{\"1\":{\"639\":1}}],[\"transferto\",{\"1\":{\"527\":1}}],[\"transmission\",{\"1\":{\"639\":1}}],[\"transmitted\",{\"1\":{\"639\":1}}],[\"transport模式\",{\"1\":{\"568\":1}}],[\"transport\",{\"1\":{\"165\":1}}],[\"try块执行完后\",{\"1\":{\"430\":1}}],[\"try块\",{\"1\":{\"430\":1}}],[\"try\",{\"0\":{\"427\":1,\"444\":1},\"1\":{\"297\":2,\"298\":2,\"299\":1,\"313\":1,\"316\":3,\"319\":1,\"333\":1,\"338\":1,\"345\":1,\"350\":3,\"427\":1,\"428\":1,\"429\":1,\"430\":2,\"431\":3,\"432\":1,\"444\":9,\"460\":1,\"464\":3,\"466\":2,\"526\":1,\"527\":1,\"561\":1,\"635\":1}}],[\"true\",{\"1\":{\"85\":2,\"140\":4,\"143\":1,\"148\":1,\"179\":3,\"188\":3,\"194\":1,\"286\":1,\"297\":4,\"298\":3,\"299\":4,\"300\":8,\"333\":1,\"341\":2,\"343\":3,\"350\":1,\"351\":1,\"464\":1,\"478\":1,\"480\":1,\"481\":4,\"539\":1,\"540\":1,\"561\":1,\"568\":1}}],[\"those\",{\"1\":{\"645\":1}}],[\"that\",{\"1\":{\"639\":4,\"640\":3,\"642\":4,\"643\":1,\"644\":3,\"645\":2}}],[\"than\",{\"1\":{\"143\":5,\"640\":1,\"644\":2}}],[\"things\",{\"1\":{\"635\":1}}],[\"this为虚引用的实际对象\",{\"1\":{\"350\":1}}],[\"this\",{\"1\":{\"271\":1,\"350\":3,\"397\":1,\"400\":1,\"415\":8,\"417\":1,\"438\":1,\"446\":2,\"466\":1,\"471\":1,\"472\":11,\"480\":1,\"635\":1,\"637\":1,\"640\":3,\"641\":2,\"644\":1,\"645\":2}}],[\"thunk\",{\"1\":{\"350\":1}}],[\"three\",{\"1\":{\"643\":1}}],[\"threads\",{\"1\":{\"385\":1}}],[\"thread\",{\"1\":{\"289\":9,\"295\":1,\"297\":4,\"298\":4,\"299\":5,\"300\":4,\"302\":4,\"312\":9,\"315\":3,\"316\":3,\"319\":12,\"338\":1,\"339\":2,\"350\":1,\"375\":2,\"394\":1,\"455\":2,\"466\":1,\"474\":4,\"476\":4,\"478\":3,\"480\":3}}],[\"threadpoolexecutor\",{\"1\":{\"277\":1,\"310\":1}}],[\"threadlocalrandom\",{\"1\":{\"471\":2}}],[\"threadlocal\",{\"1\":{\"277\":1}}],[\"thrpt\",{\"1\":{\"471\":6}}],[\"throughput\",{\"1\":{\"380\":1}}],[\"thrown\",{\"1\":{\"460\":1}}],[\"throwable\",{\"1\":{\"289\":1,\"333\":1,\"350\":1,\"444\":4,\"464\":1,\"466\":1}}],[\"throw\",{\"1\":{\"188\":1,\"289\":1,\"350\":1,\"444\":2,\"466\":2,\"527\":1}}],[\"throws\",{\"1\":{\"188\":1,\"190\":1,\"209\":1,\"212\":1,\"215\":1,\"218\":1,\"225\":1,\"297\":1,\"298\":1,\"299\":1,\"300\":1,\"303\":2,\"315\":1,\"350\":1,\"351\":4,\"357\":1,\"364\":4,\"374\":1,\"375\":1,\"417\":1,\"438\":1,\"444\":1,\"451\":1,\"452\":1,\"455\":1,\"458\":1,\"460\":1,\"471\":1,\"472\":2,\"474\":1,\"476\":1,\"478\":1,\"480\":1}}],[\"th\",{\"1\":{\"160\":1,\"204\":3,\"267\":7}}],[\"th=\",{\"1\":{\"160\":1,\"204\":1,\"267\":1}}],[\"thymeleaf将自动处理生成正确的url\",{\"1\":{\"160\":1,\"163\":1}}],[\"thymeleaf\",{\"1\":{\"158\":1,\"160\":1,\"204\":1,\"267\":3}}],[\"they\",{\"1\":{\"642\":2}}],[\"there\",{\"1\":{\"640\":1,\"642\":1,\"643\":1,\"644\":1,\"645\":1}}],[\"them\",{\"1\":{\"635\":1}}],[\"theunsafe\",{\"1\":{\"351\":1}}],[\"the\",{\"1\":{\"26\":1,\"241\":1,\"251\":1,\"267\":1,\"371\":2,\"377\":2,\"379\":2,\"400\":2,\"460\":1,\"526\":1,\"635\":4,\"636\":6,\"637\":9,\"638\":5,\"639\":22,\"640\":20,\"641\":6,\"642\":19,\"643\":8,\"644\":10,\"645\":22,\"674\":1}}],[\"t\",{\"1\":{\"138\":2,\"144\":1,\"148\":9,\"299\":4,\"300\":7,\"397\":1,\"444\":5,\"464\":1,\"469\":1,\"470\":2,\"471\":6,\"478\":7,\"480\":3,\"481\":5,\"522\":2}}],[\"txpipeline\",{\"1\":{\"116\":1}}],[\"txt<\",{\"1\":{\"90\":1}}],[\"txt即可\",{\"1\":{\"90\":1}}],[\"txt\",{\"1\":{\"90\":1,\"444\":2}}],[\"tell\",{\"1\":{\"636\":1}}],[\"templates\",{\"1\":{\"204\":1,\"267\":1}}],[\"templates中创建index\",{\"1\":{\"160\":1}}],[\"test<\",{\"1\":{\"554\":1}}],[\"test6\",{\"1\":{\"444\":6}}],[\"test1\",{\"1\":{\"416\":3,\"471\":5}}],[\"test4\",{\"1\":{\"300\":1,\"416\":4}}],[\"test3\",{\"1\":{\"299\":1,\"416\":3,\"471\":3}}],[\"testbiased\",{\"1\":{\"297\":4}}],[\"test2\",{\"1\":{\"297\":1,\"416\":3,\"471\":3}}],[\"testpassword\",{\"1\":{\"200\":1}}],[\"test\",{\"1\":{\"200\":1,\"338\":2,\"417\":3,\"429\":5,\"431\":4,\"432\":2,\"438\":2,\"444\":3,\"445\":2,\"446\":2,\"451\":1,\"471\":1,\"536\":1,\"560\":1,\"567\":1,\"568\":1}}],[\"terminates\",{\"1\":{\"639\":1}}],[\"terminated\",{\"1\":{\"350\":1}}],[\"terms\",{\"1\":{\"88\":4}}],[\"term=1时\",{\"1\":{\"85\":1}}],[\"term=1\",{\"1\":{\"85\":2}}],[\"term\",{\"1\":{\"85\":4,\"88\":3}}],[\"text=\",{\"1\":{\"267\":4}}],[\"text\",{\"1\":{\"88\":1,\"89\":6,\"90\":4,\"204\":1,\"569\":1}}],[\"tex\",{\"0\":{\"18\":1}}],[\"touching\",{\"1\":{\"639\":1}}],[\"tolist\",{\"1\":{\"530\":2,\"532\":2}}],[\"top5\",{\"1\":{\"530\":4}}],[\"top\",{\"1\":{\"522\":2}}],[\"topic主题\",{\"1\":{\"561\":1}}],[\"topic=example\",{\"1\":{\"560\":2,\"561\":1,\"567\":2}}],[\"topic\",{\"1\":{\"484\":1,\"560\":1,\"561\":1,\"567\":1,\"568\":1}}],[\"toprintablesimple\",{\"1\":{\"297\":4,\"298\":3,\"299\":4,\"300\":8}}],[\"to中为空\",{\"1\":{\"369\":1}}],[\"tobytearray\",{\"1\":{\"338\":1}}],[\"tostring\",{\"1\":{\"326\":2,\"341\":5,\"343\":1,\"417\":2,\"424\":2,\"529\":3,\"530\":4,\"532\":2,\"534\":1,\"536\":2,\"537\":1}}],[\"to\",{\"1\":{\"241\":1,\"289\":1,\"295\":2,\"350\":1,\"371\":2,\"427\":2,\"428\":1,\"429\":1,\"430\":1,\"431\":1,\"432\":1,\"433\":1,\"552\":2,\"559\":2,\"566\":2,\"633\":1,\"634\":1,\"635\":8,\"636\":2,\"637\":5,\"638\":7,\"639\":5,\"640\":10,\"641\":6,\"642\":7,\"643\":3,\"644\":9,\"645\":9}}],[\"tojsonstring\",{\"1\":{\"209\":1,\"212\":1,\"215\":1,\"218\":1,\"225\":1,\"231\":1}}],[\"tomcat\",{\"1\":{\"461\":1}}],[\"tom\",{\"1\":{\"179\":1}}],[\"todo\",{\"1\":{\"90\":6}}],[\"tokenuri\",{\"1\":{\"271\":1}}],[\"token=access\",{\"1\":{\"253\":1}}],[\"token\",{\"1\":{\"90\":11,\"253\":1,\"271\":1}}],[\"tokens\",{\"1\":{\"90\":3}}],[\"tokenizer遇到空白字符时分割文本\",{\"1\":{\"90\":1}}],[\"took\",{\"1\":{\"85\":1,\"87\":1,\"88\":1}}],[\"tools\",{\"1\":{\"85\":1,\"420\":1,\"423\":1,\"424\":1,\"471\":1,\"645\":1}}],[\"total\",{\"1\":{\"85\":3,\"87\":1,\"88\":2,\"89\":1,\"94\":2}}],[\"toc\",{\"1\":{\"6\":1}}],[\"typeid\",{\"1\":{\"536\":2,\"537\":6}}],[\"typeid一致的放到一个集合\",{\"1\":{\"536\":1}}],[\"type的值就去表中找类型\",{\"1\":{\"400\":1}}],[\"type=\",{\"1\":{\"204\":3,\"267\":1}}],[\"type2\",{\"1\":{\"135\":1}}],[\"type1\",{\"1\":{\"135\":1}}],[\"typedtuple<string>\",{\"1\":{\"535\":1}}],[\"typedtuple<string>>\",{\"1\":{\"535\":1}}],[\"typedtuples\",{\"1\":{\"535\":5}}],[\"typedapi\",{\"1\":{\"94\":1}}],[\"typedclient\",{\"1\":{\"66\":1,\"70\":1,\"74\":1,\"78\":1,\"90\":6,\"92\":1,\"93\":1,\"94\":1,\"98\":2,\"102\":2,\"126\":1,\"130\":1,\"488\":1,\"492\":1,\"496\":1,\"500\":1,\"504\":1,\"508\":1}}],[\"types\",{\"1\":{\"85\":2,\"94\":3,\"438\":2,\"512\":1}}],[\"type\",{\"0\":{\"144\":1},\"1\":{\"85\":11,\"87\":1,\"89\":18,\"90\":11,\"91\":1,\"134\":1,\"135\":1,\"138\":1,\"143\":1,\"144\":5,\"165\":1,\"182\":1,\"289\":3,\"400\":3,\"427\":2,\"428\":1,\"429\":1,\"430\":1,\"431\":1,\"432\":1,\"433\":1,\"438\":6,\"537\":2,\"561\":1,\"568\":2,\"569\":2}}],[\"tid\",{\"1\":{\"328\":1}}],[\"time>=\",{\"1\":{\"568\":1}}],[\"timeout\",{\"1\":{\"561\":1,\"630\":1,\"631\":1,\"640\":5,\"641\":1,\"642\":1}}],[\"times\",{\"1\":{\"560\":1,\"561\":2,\"567\":1}}],[\"timestamp\",{\"1\":{\"81\":1,\"726\":1,\"729\":1}}],[\"timeunit\",{\"1\":{\"303\":1}}],[\"timeline\",{\"1\":{\"115\":2,\"533\":1}}],[\"time\",{\"0\":{\"523\":1},\"1\":{\"91\":4,\"116\":1,\"117\":3,\"471\":2,\"512\":1,\"535\":3,\"635\":1,\"639\":1,\"640\":1,\"642\":4}}],[\"timed\",{\"1\":{\"87\":1,\"88\":1}}],[\"title>\",{\"1\":{\"160\":1,\"204\":1,\"267\":1}}],[\"title\",{\"1\":{\"26\":3,\"85\":3,\"91\":3,\"93\":1,\"674\":3}}],[\"tcp指的是直接同步到客户端\",{\"1\":{\"567\":1}}],[\"tcp\",{\"0\":{\"551\":1},\"1\":{\"81\":1,\"553\":3,\"560\":1,\"567\":3,\"568\":5,\"641\":3,\"642\":1,\"726\":1,\"729\":1}}],[\"tcp套接字编程\",{\"1\":{\"62\":1}}],[\"tcp的发送方在规定的时间内没有收到确认就要重传已发送的报文段\",{\"1\":{\"60\":1}}],[\"tcp的滑动窗口是以字节为单位的\",{\"1\":{\"59\":1}}],[\"tcp的可靠传输的实现\",{\"0\":{\"58\":1}}],[\"tcp的分用功能通过端口实现的\",{\"1\":{\"57\":1}}],[\"tcp的连接\",{\"0\":{\"56\":1}}],[\"tcp报文段首部的前20个字节是固定的\",{\"1\":{\"57\":1}}],[\"tcp报文段的首部格式\",{\"0\":{\"57\":1}}],[\"tcp虽然是面向字节流的\",{\"1\":{\"57\":1}}],[\"tcp连\",{\"1\":{\"56\":1}}],[\"tcp连接就是由协议软件所提供的一种抽象\",{\"1\":{\"56\":1}}],[\"tcp连接\",{\"1\":{\"56\":1}}],[\"tcp连接的两个套接字就是\",{\"1\":{\"56\":1}}],[\"tcp连接的两端都设有发送缓存和接收缓存\",{\"1\":{\"55\":1}}],[\"tcp连接的端点叫做套接字\",{\"1\":{\"56\":1}}],[\"tcp连接的端点是什么呢\",{\"1\":{\"56\":1}}],[\"tcp不保证接收方应用程序所收到的数据块和发送方应用程序所发出的数据块具有对应大小的关系\",{\"1\":{\"55\":1}}],[\"tcp并不知道所传送的字节流的含义\",{\"1\":{\"55\":1}}],[\"tcp中的\",{\"1\":{\"55\":1}}],[\"tcp把收到的数据放入缓存\",{\"1\":{\"55\":1}}],[\"tcp允许通信双方的应用进程在任何时候都能发送数据\",{\"1\":{\"55\":1}}],[\"tcp提供全双工通信\",{\"1\":{\"55\":1}}],[\"tcp提供可靠交付的服务\",{\"1\":{\"55\":1}}],[\"tcp是面向连接的运输层协议\",{\"1\":{\"55\":1}}],[\"tcp最主要的特点\",{\"0\":{\"55\":1}}],[\"导致缓存在某一时刻同时失效\",{\"1\":{\"572\":1}}],[\"导致数据重新发送\",{\"1\":{\"484\":1}}],[\"导致了\",{\"1\":{\"478\":1}}],[\"导致无法分配\",{\"1\":{\"367\":1}}],[\"导致两个对象都无法被释放\",{\"0\":{\"354\":1}}],[\"导致栈内存溢出的情况\",{\"1\":{\"327\":1}}],[\"导致线程发生多次重入\",{\"1\":{\"304\":1}}],[\"导致lucene处理效率下降\",{\"1\":{\"89\":1}}],[\"导入如下依赖\",{\"1\":{\"554\":1}}],[\"导入pom\",{\"1\":{\"537\":1}}],[\"导入店铺数据到geo\",{\"0\":{\"536\":1}}],[\"导入包\",{\"0\":{\"147\":1}}],[\"导入依赖\",{\"1\":{\"65\":1,\"69\":1,\"73\":1,\"77\":1,\"97\":1,\"101\":1,\"125\":1,\"129\":1,\"487\":1,\"491\":1,\"495\":1,\"499\":1,\"503\":1,\"507\":1,\"561\":1}}],[\"导入文件\",{\"0\":{\"17\":1}}],[\"导航栏\",{\"1\":{\"3\":1,\"6\":1,\"274\":1}}],[\"脚注\",{\"0\":{\"16\":1}}],[\"m3\",{\"1\":{\"294\":2,\"326\":1}}],[\"m2\",{\"1\":{\"294\":2,\"326\":1}}],[\"m1\",{\"1\":{\"294\":1,\"326\":1}}],[\"missed\",{\"1\":{\"642\":1}}],[\"misuse\",{\"1\":{\"638\":1}}],[\"misconfiguration\",{\"1\":{\"638\":1}}],[\"misc\",{\"1\":{\"459\":2,\"460\":3,\"472\":1}}],[\"mightcontain\",{\"1\":{\"581\":1,\"601\":1,\"612\":1,\"655\":1,\"666\":1}}],[\"mirror末尾了\",{\"1\":{\"451\":1}}],[\"mirror\",{\"1\":{\"448\":4}}],[\"mixed\",{\"1\":{\"380\":1}}],[\"minor\",{\"1\":{\"371\":1,\"373\":1,\"384\":4,\"394\":3,\"396\":1,\"397\":1,\"399\":1,\"406\":1}}],[\"minorgcxx\",{\"1\":{\"373\":1}}],[\"minorgc\",{\"1\":{\"371\":2}}],[\"min\",{\"1\":{\"117\":2,\"119\":1,\"122\":1,\"164\":1,\"522\":2,\"535\":1,\"561\":1,\"633\":1,\"634\":2,\"644\":4,\"645\":2}}],[\"mintime\",{\"1\":{\"117\":5,\"119\":1,\"122\":2,\"535\":7}}],[\"milliseconds\",{\"1\":{\"641\":1}}],[\"mill\",{\"1\":{\"88\":12}}],[\"modified\",{\"1\":{\"406\":1}}],[\"mode使用rest方式\",{\"1\":{\"568\":1}}],[\"mode\",{\"1\":{\"303\":3,\"471\":4,\"568\":3}}],[\"model\",{\"1\":{\"266\":5,\"283\":1,\"472\":2}}],[\"models\",{\"1\":{\"98\":1,\"102\":1,\"108\":1,\"110\":1,\"111\":1,\"112\":2,\"118\":1,\"121\":1}}],[\"monitorexit\",{\"1\":{\"289\":2,\"433\":2}}],[\"monitorenter指令是在编译后插入到同步代码块的开始位置\",{\"1\":{\"476\":1}}],[\"monitorenter\",{\"1\":{\"289\":1,\"433\":1}}],[\"monitor中只能有一个\",{\"1\":{\"289\":1}}],[\"monitor\",{\"0\":{\"288\":1},\"1\":{\"283\":1,\"288\":2,\"289\":4,\"295\":1,\"296\":1,\"302\":4}}],[\"more\",{\"1\":{\"25\":1,\"572\":1,\"575\":1,\"595\":1,\"606\":1,\"639\":1,\"640\":1,\"641\":1,\"649\":1,\"660\":1,\"673\":1}}],[\"mv\",{\"1\":{\"90\":1}}],[\"means\",{\"1\":{\"642\":1}}],[\"measurement\",{\"1\":{\"303\":1,\"471\":1}}],[\"mehtod1\",{\"1\":{\"364\":2}}],[\"mem\",{\"1\":{\"422\":2,\"423\":1}}],[\"memory\",{\"1\":{\"283\":3,\"350\":1,\"357\":2,\"375\":1,\"472\":2}}],[\"member\",{\"1\":{\"116\":1,\"117\":1,\"519\":1,\"535\":1,\"536\":1}}],[\"messageext\",{\"1\":{\"561\":1}}],[\"messagemodel\",{\"1\":{\"561\":2}}],[\"message\",{\"1\":{\"209\":1,\"212\":1,\"215\":1,\"218\":1,\"225\":1,\"231\":1,\"560\":3,\"561\":4,\"567\":1}}],[\"messages\",{\"1\":{\"171\":1}}],[\"meta\",{\"1\":{\"464\":1}}],[\"metaspace\",{\"1\":{\"338\":3}}],[\"metadata\",{\"1\":{\"85\":2}}],[\"methodaccessorgenerator\",{\"1\":{\"472\":1}}],[\"methodaccessorimpl\",{\"1\":{\"472\":3}}],[\"methodaccessor\",{\"1\":{\"472\":1}}],[\"methodparameters\",{\"1\":{\"400\":1,\"428\":1,\"429\":1}}],[\"methodtype\",{\"1\":{\"400\":1}}],[\"methodhandle\",{\"1\":{\"400\":1}}],[\"methodref\",{\"1\":{\"400\":2,\"406\":2}}],[\"methods\",{\"1\":{\"397\":3,\"400\":1,\"448\":1}}],[\"method3\",{\"1\":{\"364\":1}}],[\"method2\",{\"1\":{\"326\":2,\"364\":4,\"365\":2}}],[\"method1\",{\"1\":{\"302\":1,\"326\":2,\"351\":2,\"364\":2,\"365\":2}}],[\"method\",{\"1\":{\"239\":1,\"338\":1,\"341\":8,\"351\":3,\"397\":1,\"400\":2,\"406\":2,\"411\":2,\"414\":1,\"416\":5,\"429\":2,\"433\":2,\"437\":2,\"438\":6,\"445\":1,\"472\":18}}],[\"method=\",{\"1\":{\"204\":1,\"267\":1}}],[\"method必须为\",{\"1\":{\"204\":1}}],[\"medcl\",{\"1\":{\"90\":1}}],[\"m\",{\"1\":{\"88\":1,\"416\":4,\"445\":14,\"644\":1}}],[\"mutex是互斥锁\",{\"1\":{\"280\":1}}],[\"mutex\",{\"1\":{\"280\":1}}],[\"mutexes\",{\"1\":{\"277\":1}}],[\"must改为filter就使must不贡献得分\",{\"1\":{\"88\":1}}],[\"must\",{\"1\":{\"88\":6,\"400\":1,\"644\":1}}],[\"must复合查询\",{\"1\":{\"88\":1}}],[\"multipartfile\",{\"1\":{\"527\":1}}],[\"multiple\",{\"0\":{\"171\":1},\"1\":{\"639\":1}}],[\"multi\",{\"0\":{\"429\":1},\"1\":{\"88\":2,\"171\":1}}],[\"mckenzie\",{\"1\":{\"85\":1}}],[\"mq\",{\"0\":{\"557\":1,\"564\":1},\"1\":{\"81\":1,\"523\":1,\"558\":2,\"560\":7,\"561\":1,\"567\":7,\"568\":1,\"726\":1,\"729\":1},\"2\":{\"563\":1,\"571\":1}}],[\"maven\",{\"1\":{\"471\":1,\"526\":2}}],[\"many\",{\"1\":{\"641\":1}}],[\"man\",{\"1\":{\"442\":2}}],[\"management\",{\"1\":{\"250\":1}}],[\"manager\",{\"1\":{\"176\":3,\"189\":2}}],[\"may\",{\"1\":{\"400\":1,\"635\":1,\"637\":1,\"638\":2,\"641\":1,\"642\":1,\"645\":1}}],[\"major\",{\"1\":{\"397\":1,\"399\":1,\"406\":1}}],[\"magic\",{\"1\":{\"397\":1,\"398\":1}}],[\"marked\",{\"1\":{\"295\":1}}],[\"mark\",{\"1\":{\"290\":1,\"294\":1,\"295\":1,\"301\":3,\"302\":1,\"379\":2,\"380\":1}}],[\"markword\",{\"1\":{\"289\":3,\"296\":1,\"421\":1}}],[\"marks\",{\"1\":{\"142\":2,\"643\":1}}],[\"markdown\",{\"0\":{\"9\":1,\"10\":1,\"11\":1,\"12\":1},\"1\":{\"9\":2,\"10\":3,\"11\":1,\"12\":3,\"13\":2,\"14\":1,\"26\":3,\"27\":1,\"28\":2,\"29\":2,\"674\":3,\"675\":1,\"676\":2,\"677\":2},\"2\":{\"24\":1}}],[\"male\",{\"1\":{\"138\":1,\"442\":8,\"443\":5}}],[\"main>javap\",{\"1\":{\"406\":1}}],[\"main1\",{\"1\":{\"326\":2,\"333\":3,\"338\":5}}],[\"main\",{\"0\":{\"409\":1},\"1\":{\"134\":2,\"136\":3,\"138\":4,\"139\":2,\"140\":2,\"141\":2,\"142\":2,\"143\":4,\"144\":2,\"148\":2,\"150\":2,\"151\":2,\"283\":1,\"289\":1,\"298\":1,\"315\":1,\"319\":1,\"326\":2,\"333\":2,\"338\":3,\"339\":2,\"341\":4,\"343\":2,\"345\":1,\"350\":7,\"351\":1,\"357\":1,\"364\":2,\"365\":1,\"373\":1,\"374\":2,\"375\":2,\"397\":1,\"400\":1,\"405\":1,\"406\":15,\"410\":3,\"411\":2,\"412\":1,\"413\":3,\"414\":1,\"415\":6,\"416\":9,\"417\":1,\"427\":2,\"428\":2,\"429\":2,\"430\":2,\"431\":4,\"432\":3,\"433\":1,\"436\":3,\"437\":1,\"438\":2,\"439\":2,\"440\":4,\"441\":2,\"442\":2,\"444\":5,\"445\":1,\"446\":2,\"451\":1,\"452\":1,\"455\":3,\"456\":1,\"458\":1,\"469\":1,\"470\":1,\"471\":1,\"472\":1,\"474\":1,\"476\":1,\"478\":3,\"480\":1,\"481\":1,\"554\":1,\"581\":1,\"601\":1,\"612\":1,\"655\":1,\"666\":1}}],[\"make\",{\"1\":{\"112\":1,\"117\":1,\"118\":1,\"635\":1,\"640\":1}}],[\"map<string\",{\"1\":{\"537\":1}}],[\"map<long\",{\"1\":{\"536\":1}}],[\"map<integer\",{\"1\":{\"438\":1}}],[\"mapper>\",{\"1\":{\"183\":1}}],[\"mapper\",{\"0\":{\"183\":1},\"1\":{\"183\":7}}],[\"mappings\",{\"1\":{\"89\":2}}],[\"mapping\",{\"1\":{\"89\":5,\"569\":1}}],[\"mapping字段映射\",{\"0\":{\"89\":1}}],[\"map\",{\"1\":{\"94\":1,\"223\":1,\"393\":2,\"438\":3,\"442\":4,\"530\":2,\"532\":2,\"536\":3}}],[\"mat\",{\"0\":{\"357\":1}}],[\"math\",{\"1\":{\"88\":1,\"350\":1}}],[\"matches\",{\"1\":{\"200\":1}}],[\"matchphrasequery\",{\"1\":{\"94\":1}}],[\"matchphrase\",{\"1\":{\"94\":1}}],[\"match匹配查询\",{\"1\":{\"88\":1}}],[\"match\",{\"1\":{\"87\":2,\"88\":21}}],[\"maxtenuringthreshold=threshold\",{\"1\":{\"394\":1}}],[\"maxtenuringthreshold=threshold晋升详情\",{\"1\":{\"373\":1}}],[\"maxgcpausemills\",{\"1\":{\"383\":1}}],[\"maxgcpausemillis=time\",{\"1\":{\"380\":1}}],[\"maxgcpausemillis=ms\",{\"1\":{\"378\":2}}],[\"maxnewsize=size\",{\"1\":{\"373\":1}}],[\"maxheapsize=size新生代大小\",{\"1\":{\"373\":1}}],[\"maxmetaspacesize=8m\",{\"1\":{\"338\":2}}],[\"maxpermsize=8m\",{\"1\":{\"338\":1}}],[\"maximumsessions\",{\"1\":{\"226\":1}}],[\"max\",{\"1\":{\"87\":1,\"88\":1,\"89\":1,\"90\":3,\"117\":2,\"119\":1,\"122\":1,\"350\":1,\"405\":1,\"410\":2,\"532\":1,\"535\":6,\"561\":3,\"633\":1,\"634\":1,\"644\":2,\"645\":1}}],[\"masters\",{\"1\":{\"635\":1,\"640\":1,\"642\":1}}],[\"masterauth\",{\"1\":{\"626\":1,\"627\":1,\"636\":1,\"637\":1}}],[\"master\",{\"1\":{\"81\":3,\"85\":2,\"553\":2,\"560\":2,\"567\":2,\"618\":1,\"635\":5,\"636\":2,\"637\":2,\"638\":1,\"639\":4,\"640\":2,\"641\":1,\"642\":1,\"643\":3,\"644\":1,\"645\":4,\"726\":3,\"729\":3}}],[\"mytest\",{\"1\":{\"560\":3,\"567\":3}}],[\"myresource\",{\"1\":{\"444\":4}}],[\"mybenchmark\",{\"1\":{\"303\":5}}],[\"mybatis\",{\"1\":{\"181\":1,\"183\":3}}],[\"mybatis<\",{\"1\":{\"180\":2}}],[\"mysessioninformationexpiredstrategy\",{\"1\":{\"225\":1,\"226\":1}}],[\"mysql实现elasticsearch的数据同步你有方案吗\",{\"1\":{\"561\":1}}],[\"mysql和redis数据同步方案\",{\"0\":{\"558\":1}}],[\"mysql和redis各存一份\",{\"1\":{\"105\":1}}],[\"mysql的地址\",{\"1\":{\"553\":1,\"560\":1,\"567\":1}}],[\"mysql部分就搞定了\",{\"1\":{\"552\":1,\"559\":1,\"566\":1}}],[\"mysqld\",{\"1\":{\"552\":2,\"559\":2,\"566\":2}}],[\"mysql是关系型数据库\",{\"1\":{\"512\":1}}],[\"mysqlsha1\",{\"1\":{\"198\":1}}],[\"mysql数据源\",{\"1\":{\"181\":1}}],[\"mysql\",{\"0\":{\"565\":1,\"738\":1},\"1\":{\"81\":3,\"98\":1,\"102\":1,\"110\":1,\"111\":1,\"112\":1,\"120\":1,\"181\":2,\"463\":4,\"523\":1,\"558\":2,\"565\":1,\"568\":1,\"726\":3,\"729\":3}}],[\"mysql通过binlog订阅实现主从同步\",{\"1\":{\"81\":1,\"726\":1,\"729\":1}}],[\"mysql写入失败或es写入失败都需要考虑回滚\",{\"1\":{\"81\":1,\"726\":1,\"729\":1}}],[\"mylogoutsuccesshandler\",{\"1\":{\"215\":1,\"216\":1}}],[\"myauthenticationentrypoint\",{\"1\":{\"218\":1,\"219\":1,\"231\":1}}],[\"myauthenticationfailurehandler\",{\"1\":{\"212\":1,\"213\":1}}],[\"myauthenticationsuccesshandler\",{\"1\":{\"209\":1,\"210\":1}}],[\"mydata\",{\"1\":{\"90\":5}}],[\"my\",{\"1\":{\"66\":1,\"70\":1,\"74\":1,\"78\":1,\"85\":3,\"89\":2,\"90\":6,\"98\":1,\"102\":1,\"126\":1,\"130\":1,\"459\":1,\"488\":1,\"492\":1,\"496\":1,\"500\":1,\"504\":1,\"508\":1}}],[\"msg\",{\"1\":{\"561\":1}}],[\"ms\",{\"1\":{\"27\":1,\"380\":1,\"675\":1}}],[\"md5\",{\"1\":{\"198\":2,\"406\":1}}],[\"md\",{\"1\":{\"14\":1}}],[\"对employee表中数据进行修改或者删除\",{\"1\":{\"561\":1}}],[\"对redis进行数据同步\",{\"1\":{\"561\":1}}],[\"对redis做配置\",{\"1\":{\"554\":1}}],[\"对nba消息主题感兴趣的消费者就可以申请订阅nba主题\",{\"1\":{\"484\":1}}],[\"对数据的可见性\",{\"1\":{\"472\":1}}],[\"对数据库有一定的轮询压力\",{\"1\":{\"81\":1,\"726\":1,\"729\":1}}],[\"对我们不可见\",{\"1\":{\"442\":1}}],[\"对号入座\",{\"1\":{\"424\":1}}],[\"对进行并发标记\",{\"1\":{\"382\":1}}],[\"对新生代垃圾收集\",{\"1\":{\"380\":1}}],[\"对标记的对象进行清除回收\",{\"1\":{\"379\":1}}],[\"对应要同步的数据库表\",{\"1\":{\"568\":1}}],[\"对应要同步的数据库的表\",{\"1\":{\"554\":1}}],[\"对应了canal的instance\",{\"1\":{\"561\":1}}],[\"对应枚举类中的元素\",{\"1\":{\"443\":1}}],[\"对应字节码\",{\"1\":{\"437\":1}}],[\"对应字节码文件\",{\"1\":{\"398\":1,\"399\":1}}],[\"对应的表有两个\",{\"1\":{\"527\":1}}],[\"对应的字节码文件\",{\"1\":{\"416\":1,\"427\":1,\"428\":1,\"430\":1,\"431\":1,\"432\":1}}],[\"对应的虚拟机指令有所区别\",{\"1\":{\"416\":1}}],[\"对应的目录下就会出现类的\",{\"1\":{\"339\":1}}],[\"对应代码中的\",{\"1\":{\"410\":1}}],[\"对应操作数栈有2个空间\",{\"1\":{\"409\":1}}],[\"对应着当前正在执行的方法\",{\"1\":{\"326\":1}}],[\"对应着每次调用方法时所占用的内存\",{\"1\":{\"326\":1}}],[\"对相同对象多次加锁\",{\"1\":{\"304\":1}}],[\"对密码单向转换需要用到哈希算法\",{\"1\":{\"198\":1}}],[\"对所有请求开启授权保护\",{\"1\":{\"190\":1,\"229\":1,\"233\":1}}],[\"对服务器压力巨大\",{\"1\":{\"115\":1,\"533\":1}}],[\"对映射的操作\",{\"1\":{\"89\":1}}],[\"对比更新呢\",{\"1\":{\"85\":1}}],[\"对象呢\",{\"1\":{\"476\":1}}],[\"对象的\",{\"1\":{\"446\":1}}],[\"对象的指针\",{\"1\":{\"288\":1}}],[\"对象时\",{\"1\":{\"446\":1}}],[\"对象引用\",{\"1\":{\"416\":5}}],[\"对象大小\",{\"1\":{\"393\":1}}],[\"对象图\",{\"1\":{\"393\":1}}],[\"对象首先分配在伊甸园区域\",{\"1\":{\"371\":1}}],[\"对象都不通过\",{\"1\":{\"359\":1}}],[\"对象都可以关联一个\",{\"1\":{\"288\":1}}],[\"对象就会被回收\",{\"1\":{\"357\":1}}],[\"对象调用\",{\"1\":{\"351\":1}}],[\"对象被垃圾回收\",{\"1\":{\"350\":1}}],[\"对象完成直接内存的分配回收\",{\"1\":{\"350\":1}}],[\"对象申请\",{\"1\":{\"302\":1}}],[\"对象头中存储了\",{\"1\":{\"301\":1}}],[\"对象头由以下三部分组成\",{\"1\":{\"290\":1}}],[\"对象头\",{\"0\":{\"290\":1}}],[\"对象\",{\"1\":{\"81\":1,\"280\":1,\"288\":1,\"301\":1,\"302\":1,\"350\":1,\"357\":1,\"416\":1,\"476\":1,\"561\":1,\"726\":1,\"729\":1}}],[\"对方若同意建立连接\",{\"1\":{\"57\":1}}],[\"对于这种两个库如何保证一致性的问题\",{\"1\":{\"586\":1}}],[\"对于一些设置了过期时间的key\",{\"1\":{\"572\":1}}],[\"对于rocketmq没使用过的童鞋可以看我\",{\"1\":{\"560\":1}}],[\"对于仅占据小部分的热点代码\",{\"1\":{\"469\":1}}],[\"对于大部分的不常用的代码\",{\"1\":{\"469\":1}}],[\"对于大并发更新\",{\"1\":{\"85\":1}}],[\"对于大并发查询\",{\"1\":{\"85\":1}}],[\"对于任意一个类\",{\"1\":{\"457\":1}}],[\"对于子类\",{\"1\":{\"445\":1}}],[\"对于限定单个\",{\"1\":{\"377\":1}}],[\"对于以上代码\",{\"1\":{\"357\":1}}],[\"对于服务请求\",{\"1\":{\"165\":1}}],[\"对于web请求\",{\"1\":{\"165\":1}}],[\"对于新型的feed流的的效果\",{\"1\":{\"115\":1,\"533\":1}}],[\"对于传统的模式的内容解锁\",{\"1\":{\"115\":1,\"533\":1}}],[\"对于已经存在的映射字段\",{\"1\":{\"89\":1}}],[\"对于\",{\"1\":{\"28\":1,\"676\":1}}],[\"对\",{\"1\":{\"13\":1,\"357\":1,\"465\":1}}],[\"为解决这个问题\",{\"1\":{\"646\":1}}],[\"为静态变量\",{\"1\":{\"474\":1}}],[\"为e\",{\"1\":{\"427\":1}}],[\"为什么\",{\"0\":{\"619\":1}}],[\"为什么采用set集合\",{\"1\":{\"529\":1}}],[\"为什么还需要redis\",{\"0\":{\"512\":1}}],[\"为什么会这样\",{\"1\":{\"478\":1}}],[\"为什么会交错\",{\"1\":{\"474\":1}}],[\"为什么需要这里的\",{\"1\":{\"476\":1}}],[\"为什么需要两份引用呢\",{\"1\":{\"416\":1}}],[\"为什么呢\",{\"1\":{\"474\":1}}],[\"为什么要设计一个\",{\"1\":{\"444\":1}}],[\"为什么第一遍时必须既比较\",{\"1\":{\"441\":1}}],[\"为什么最终的\",{\"1\":{\"414\":1}}],[\"为什么有的老年代被拷贝了\",{\"1\":{\"383\":1}}],[\"为例\",{\"1\":{\"395\":1,\"457\":1}}],[\"为\",{\"1\":{\"286\":1,\"289\":1,\"302\":1,\"312\":1,\"397\":1,\"442\":2,\"451\":1,\"481\":1}}],[\"为一些知名资源服务api提供商\",{\"1\":{\"271\":1}}],[\"为客户应用创建访问github的凭据\",{\"1\":{\"263\":1}}],[\"为扩展名\",{\"1\":{\"133\":1}}],[\"为用户持续的提供\",{\"1\":{\"115\":1,\"533\":1}}],[\"为此需要安装中文的分词器\",{\"1\":{\"90\":1}}],[\"为了支持部分复制\",{\"1\":{\"621\":1}}],[\"为了反射使用\",{\"1\":{\"437\":1}}],[\"为了抓住重点\",{\"1\":{\"427\":1}}],[\"为了保证时间不超过设定的停顿时间\",{\"1\":{\"383\":1}}],[\"为了修正并发标记期间因用户程序继续运行而导致标记产生变动的那一部分对象的标记记录\",{\"1\":{\"379\":1}}],[\"为了防止密码破解\",{\"1\":{\"199\":1}}],[\"为了防止在自定义硬件上进行密码破解\",{\"1\":{\"199\":2}}],[\"为了增加对密码破解的抵抗力\",{\"1\":{\"199\":1}}],[\"为了减轻彩虹表的效果\",{\"1\":{\"198\":1}}],[\"为了不计算分数\",{\"1\":{\"88\":1}}],[\"为了便于说明滑动窗口的工作原理\",{\"1\":{\"59\":1}}],[\"为了丰富文档写作\",{\"1\":{\"13\":1}}],[\"为每个\",{\"1\":{\"11\":1}}],[\"扩展类的加载器\",{\"0\":{\"459\":1}}],[\"扩展配置<\",{\"1\":{\"90\":1}}],[\"扩展\",{\"0\":{\"12\":1,\"13\":1},\"1\":{\"13\":1}}],[\"请将以下依赖项添加到您的pom\",{\"1\":{\"526\":1}}],[\"请编辑相应的依赖项文件\",{\"1\":{\"526\":1}}],[\"请编辑依赖项文件\",{\"1\":{\"525\":1}}],[\"请参考之\",{\"1\":{\"279\":1}}],[\"请输入一个字符串\",{\"1\":{\"151\":1}}],[\"请输入一个整数\",{\"1\":{\"150\":1}}],[\"请求全部转发到db\",{\"1\":{\"572\":1}}],[\"请求高峰期发生\",{\"1\":{\"396\":1}}],[\"请求\",{\"1\":{\"394\":1}}],[\"请求用户数据\",{\"1\":{\"270\":1}}],[\"请求令牌\",{\"1\":{\"270\":1,\"271\":1}}],[\"请求未授权的接口\",{\"0\":{\"231\":1},\"1\":{\"231\":1}}],[\"请求未认证的接口\",{\"0\":{\"217\":1},\"1\":{\"219\":1,\"231\":1}}],[\"请求参数方式检索\",{\"1\":{\"87\":1}}],[\"请求后推送\",{\"1\":{\"81\":1,\"726\":1,\"729\":1}}],[\"请读者加以注意\",{\"1\":{\"56\":1}}],[\"请注意此处声明了变量\",{\"1\":{\"134\":1}}],[\"请注意\",{\"1\":{\"56\":1,\"57\":1}}],[\"请使用绝对链接\",{\"1\":{\"28\":1,\"676\":1}}],[\"请阅读\",{\"1\":{\"11\":1,\"13\":1}}],[\"请先阅读\",{\"1\":{\"10\":1}}],[\"中对静态变量的自增\",{\"1\":{\"474\":1}}],[\"中如果抛出了异常\",{\"1\":{\"444\":1}}],[\"中出现了\",{\"1\":{\"431\":1}}],[\"中一个分支\",{\"1\":{\"428\":1}}],[\"中去\",{\"1\":{\"364\":1}}],[\"中引用的对象\",{\"1\":{\"356\":1}}],[\"中引入了偏向锁来做进一步优化\",{\"1\":{\"294\":1}}],[\"中添加\",{\"1\":{\"333\":1}}],[\"中记录\",{\"1\":{\"296\":1}}],[\"中存储的是线程\",{\"1\":{\"296\":1}}],[\"中等待的线程来竞争锁\",{\"1\":{\"289\":1}}],[\"中就被设置指向\",{\"1\":{\"288\":1}}],[\"中创建一个es文件夹\",{\"1\":{\"90\":1}}],[\"中国\",{\"1\":{\"90\":1}}],[\"中国人\",{\"1\":{\"90\":2}}],[\"中包含\",{\"1\":{\"88\":2}}],[\"中\",{\"1\":{\"81\":2,\"88\":1,\"277\":2,\"283\":1,\"289\":1,\"302\":1,\"371\":1,\"385\":1,\"410\":1,\"433\":1,\"440\":1,\"448\":1,\"466\":1,\"580\":3,\"600\":3,\"611\":3,\"654\":3,\"665\":3,\"726\":2,\"729\":2}}],[\"中间件实现同步\",{\"1\":{\"81\":1,\"84\":1,\"726\":1,\"729\":1}}],[\"中间用冒号或逗号隔开\",{\"1\":{\"56\":1}}],[\"中使用\",{\"1\":{\"29\":1,\"677\":1}}],[\"中设置页面信息\",{\"1\":{\"27\":1,\"675\":1}}],[\"中设置页面标题\",{\"1\":{\"26\":1,\"674\":1}}],[\"中的canal\",{\"1\":{\"561\":1}}],[\"中的代码被复制了\",{\"1\":{\"430\":1}}],[\"中的第一个\",{\"1\":{\"26\":1,\"674\":1}}],[\"中的\",{\"1\":{\"13\":1,\"289\":1,\"364\":1,\"431\":1}}],[\"中很重要的一个概念\",{\"1\":{\"11\":1}}],[\"中自定义它们\",{\"1\":{\"6\":1}}],[\"是持久化之外的一种数据冗余方\",{\"1\":{\"619\":1}}],[\"是什么\",{\"0\":{\"618\":1}}],[\"是记录sql\",{\"1\":{\"552\":1,\"559\":1,\"566\":1}}],[\"是记录下一条\",{\"1\":{\"324\":1}}],[\"是10号\",{\"1\":{\"540\":1}}],[\"是博主与粉丝的关系\",{\"1\":{\"531\":1}}],[\"是redis\",{\"1\":{\"521\":1}}],[\"是允许被多个消费者同时消费的\",{\"1\":{\"484\":1}}],[\"是热点方法\",{\"1\":{\"470\":1}}],[\"是将字节码解释为针对所有平台都通用的机器码\",{\"1\":{\"469\":1}}],[\"是将异常对象引用存入局部变量表的2号位置\",{\"1\":{\"427\":1}}],[\"是指通过互联网访问\",{\"1\":{\"541\":1}}],[\"是指在运行过程中收集一些程序执行状态的数据\",{\"1\":{\"469\":1}}],[\"是指针\",{\"1\":{\"112\":1}}],[\"是由于用户对程序动态性的追求而导致的\",{\"1\":{\"461\":1}}],[\"是由这个模型自身的缺陷导致的\",{\"1\":{\"461\":1}}],[\"是包装类\",{\"1\":{\"456\":1}}],[\"是存储在堆中\",{\"1\":{\"448\":2}}],[\"是存储在方法区\",{\"1\":{\"448\":2}}],[\"是父类\",{\"1\":{\"445\":1}}],[\"是我们代码出现的异常\",{\"1\":{\"444\":1}}],[\"是为了防止异常信息的丢失\",{\"1\":{\"444\":1}}],[\"是为了防止\",{\"1\":{\"441\":1}}],[\"是为了提高效率\",{\"1\":{\"441\":1}}],[\"是为了提高比较效率\",{\"1\":{\"441\":1}}],[\"是防止有\",{\"1\":{\"441\":1}}],[\"是前闭后开\",{\"1\":{\"427\":1}}],[\"是查看\",{\"1\":{\"422\":1}}],[\"是对象地址\",{\"1\":{\"422\":1}}],[\"是通过\",{\"1\":{\"416\":1}}],[\"是复制操作数栈栈顶的内容\",{\"1\":{\"416\":1}}],[\"是创建\",{\"1\":{\"416\":1}}],[\"是否禁用tcp\",{\"1\":{\"642\":1}}],[\"是否继续响应客户端的读请求\",{\"1\":{\"628\":1,\"638\":1}}],[\"是否开启自动配置\",{\"1\":{\"561\":1}}],[\"是否存在内存泄漏\",{\"1\":{\"393\":1}}],[\"是否超时\",{\"1\":{\"87\":1}}],[\"是并发的\",{\"1\":{\"379\":1}}],[\"是parallel\",{\"1\":{\"378\":1}}],[\"是被\",{\"1\":{\"351\":1}}],[\"是线程私有的\",{\"1\":{\"324\":1}}],[\"是可以重用的\",{\"1\":{\"316\":1}}],[\"是可以的\",{\"1\":{\"136\":1}}],[\"是java中用于实现锁和同步器的基础框架\",{\"1\":{\"310\":1}}],[\"是类\",{\"1\":{\"306\":1}}],[\"是一个开源的\",{\"1\":{\"511\":1,\"512\":1}}],[\"是一个类\",{\"1\":{\"401\":1}}],[\"是一样的\",{\"1\":{\"297\":1}}],[\"是一种数据管理和扩展的策略\",{\"1\":{\"618\":1}}],[\"是一种非常热点的数据\",{\"1\":{\"572\":1}}],[\"是一种概率数据结构\",{\"1\":{\"522\":3}}],[\"是一种估计集合基数的概率数据结构\",{\"1\":{\"522\":1}}],[\"是一种原子操作\",{\"1\":{\"309\":1}}],[\"是一种比\",{\"1\":{\"286\":1}}],[\"是一种抽象的模型\",{\"1\":{\"283\":1}}],[\"是一种常用的数据库设计方案\",{\"1\":{\"235\":1}}],[\"是自己的就表示没有竞争\",{\"1\":{\"294\":1}}],[\"是之前获得过锁\",{\"1\":{\"289\":1}}],[\"是唤醒所有等待线程\",{\"1\":{\"283\":1}}],[\"是调用者轮询检查线程\",{\"1\":{\"279\":1}}],[\"是针对第三方应用的\",{\"1\":{\"255\":1}}],[\"是很不安全的\",{\"1\":{\"253\":1}}],[\"是从loglog算法派生的概率算法\",{\"1\":{\"541\":1}}],[\"是从自己工作内存中的高速缓存中读取这个变量的值\",{\"1\":{\"478\":1}}],[\"是从\",{\"1\":{\"222\":1}}],[\"是不会报错的\",{\"1\":{\"138\":1}}],[\"是声明单个变量的语法\",{\"1\":{\"134\":1}}],[\"是基于关注的好友来做feed流\",{\"1\":{\"115\":1,\"533\":1}}],[\"是因为其也是一个指针\",{\"1\":{\"112\":1}}],[\"是因为数据缓存空间是有限的\",{\"1\":{\"57\":1}}],[\"是获取该地址的值\",{\"1\":{\"112\":1}}],[\"是字符串类型\",{\"1\":{\"94\":1}}],[\"是如何存储和索引的\",{\"1\":{\"89\":1}}],[\"是用来定义一个文档\",{\"1\":{\"89\":1}}],[\"是期望收到对方下一个报文段的第一个数据字节的序号\",{\"1\":{\"57\":1}}],[\"是个很抽象的概念\",{\"1\":{\"56\":1}}],[\"是\",{\"1\":{\"11\":1,\"90\":2,\"144\":4,\"168\":1,\"222\":1,\"241\":1,\"312\":1,\"378\":1,\"400\":21,\"410\":2,\"472\":1}}],[\"演示多态原理\",{\"1\":{\"417\":1}}],[\"演示内存的分配策略\",{\"1\":{\"374\":1,\"375\":1}}],[\"演示堆内存不足\",{\"1\":{\"364\":1}}],[\"演示堆内存溢出\",{\"1\":{\"333\":1}}],[\"演示元空间内存溢出\",{\"1\":{\"338\":1}}],[\"演示\",{\"1\":{\"10\":1,\"345\":1,\"351\":2,\"364\":3,\"365\":2}}],[\"和从节点\",{\"1\":{\"635\":1}}],[\"和我们之前定义的误判率为0\",{\"1\":{\"582\":1,\"602\":1,\"613\":1,\"656\":1,\"667\":1}}],[\"和下标为5的位置设置成1\",{\"1\":{\"580\":1,\"600\":1,\"611\":1,\"654\":1,\"665\":1}}],[\"和上一章节redis同步还是有点区别\",{\"1\":{\"567\":1}}],[\"和上一章节讲的redis的同步流程不一样\",{\"1\":{\"565\":1}}],[\"和monitorexit指令实现的\",{\"1\":{\"476\":1}}],[\"和原子性的规则和保障\",{\"1\":{\"472\":1}}],[\"和枚举使用时\",{\"1\":{\"441\":1}}],[\"和内存位置\",{\"1\":{\"309\":1}}],[\"和新值\",{\"1\":{\"309\":1}}],[\"和credential\",{\"1\":{\"222\":1}}],[\"和登录页面保持一致即可\",{\"1\":{\"204\":1}}],[\"和其他自适应单向函数一样\",{\"1\":{\"199\":1}}],[\"和密码\",{\"1\":{\"174\":1}}],[\"和字符串型\",{\"1\":{\"138\":1}}],[\"和偏移量这两个参数\",{\"1\":{\"115\":1,\"535\":1}}],[\"和end\",{\"1\":{\"90\":1}}],[\"和\",{\"0\":{\"565\":1},\"1\":{\"10\":1,\"27\":1,\"56\":3,\"85\":1,\"87\":1,\"88\":2,\"142\":1,\"277\":1,\"278\":1,\"280\":1,\"283\":3,\"312\":1,\"373\":1,\"377\":1,\"380\":1,\"396\":1,\"400\":11,\"411\":1,\"413\":1,\"441\":3,\"459\":1,\"580\":4,\"600\":4,\"611\":4,\"634\":1,\"645\":1,\"654\":4,\"665\":4,\"675\":1}}],[\"介绍\",{\"0\":{\"10\":1},\"1\":{\"10\":1,\"11\":1}}],[\"介绍页\",{\"0\":{\"0\":1}}],[\"你的鼓励是我最大的动力\",{\"1\":{\"569\":1}}],[\"你的等级是\",{\"1\":{\"142\":1}}],[\"你只要签到就打上一个勾\",{\"1\":{\"538\":1}}],[\"你知道是怎么做的吗\",{\"1\":{\"463\":1}}],[\"你发现它们是一模一样的\",{\"1\":{\"413\":1}}],[\"你是否同意\",{\"1\":{\"270\":1}}],[\"你必须在两个不同的type中定义相同的filed映射\",{\"1\":{\"89\":1}}],[\"你也可以创建并引入你自己的组件\",{\"1\":{\"29\":1,\"677\":1}}],[\"你需要创建并编写\",{\"1\":{\"9\":1}}],[\"你可以把数据复制到在线json转换工具中进行分析\",{\"1\":{\"561\":1}}],[\"你可以定义任意个数的case\",{\"1\":{\"144\":1}}],[\"你可以将图片和\",{\"1\":{\"28\":1,\"676\":1}}],[\"你可以自由在这里书写你的\",{\"1\":{\"28\":1,\"676\":1}}],[\"你可以在\",{\"1\":{\"26\":1,\"27\":1,\"674\":1,\"675\":1}}],[\"你可以在主题选项和页面的\",{\"1\":{\"6\":1}}],[\"你可以使用它轻松生成文档或博客站点\",{\"1\":{\"9\":1}}],[\"你可以通过设置页面的\",{\"1\":{\"3\":1,\"274\":1}}],[\"文章到这就结束了\",{\"1\":{\"569\":1}}],[\"文章标题列表\",{\"1\":{\"6\":1}}],[\"文字\",{\"1\":{\"527\":1}}],[\"文本\",{\"1\":{\"336\":1}}],[\"文本字段应该用\",{\"1\":{\"88\":1}}],[\"文档等资源\",{\"1\":{\"545\":1,\"548\":1}}],[\"文档中的所有属性是否都能被索引\",{\"1\":{\"89\":1}}],[\"文档相关性最高得分\",{\"1\":{\"87\":1}}],[\"文档样本\",{\"1\":{\"85\":1}}],[\"文档\",{\"1\":{\"85\":1}}],[\"文件上传失败\",{\"1\":{\"527\":1}}],[\"文件上传成功\",{\"1\":{\"527\":1}}],[\"文件内容是实现类名称\",{\"1\":{\"464\":1}}],[\"文件进行分析\",{\"1\":{\"357\":1}}],[\"文件名\",{\"1\":{\"357\":1}}],[\"文件读取流程\",{\"1\":{\"349\":1}}],[\"文件读写流程\",{\"1\":{\"349\":1}}],[\"文件中的\",{\"1\":{\"340\":1}}],[\"文件\",{\"1\":{\"90\":1,\"277\":1,\"398\":1,\"403\":1,\"457\":1,\"568\":1}}],[\"文件夹的图片\",{\"1\":{\"28\":1,\"676\":1}}],[\"文件放置在一起使用相对路径进行引用\",{\"1\":{\"28\":1,\"676\":1}}],[\"文件生成页面\",{\"1\":{\"9\":1}}],[\"展示\",{\"0\":{\"9\":1}}],[\"夜间模式按钮\",{\"1\":{\"6\":1}}],[\"主节点写入限制\",{\"0\":{\"634\":1,\"645\":1}}],[\"主节点等待额外的秒数以允许更多从节点连接\",{\"1\":{\"630\":1,\"640\":1}}],[\"主节点处理写操作\",{\"1\":{\"622\":1}}],[\"主节点会持续将新的写操作命令异步地发送给所有从节点\",{\"1\":{\"621\":1}}],[\"主节点会根据复制积压缓冲区\",{\"1\":{\"621\":1}}],[\"主节点会执行bgsave生成rdb快照文件\",{\"1\":{\"621\":1}}],[\"主节点的存储能力受到单机的限制\",{\"1\":{\"620\":1}}],[\"主节点的写能力受到单机的限制\",{\"1\":{\"620\":1}}],[\"主从间数据交换及心跳检测\",{\"1\":{\"631\":1,\"641\":1}}],[\"主从心跳与超时等等\",{\"1\":{\"625\":1}}],[\"主从之间同步策略\",{\"1\":{\"625\":1}}],[\"主从复制replication\",{\"0\":{\"635\":1}}],[\"主从复制基础\",{\"0\":{\"626\":1,\"636\":1}}],[\"主从复制模式适合数据备份\",{\"1\":{\"624\":1}}],[\"主从复制模式适用于以下场景\",{\"1\":{\"624\":1}}],[\"主从复制场景应用\",{\"0\":{\"624\":1}}],[\"主从复制虽好\",{\"1\":{\"620\":1}}],[\"主从复制还是哨兵和集群能够实施的\",{\"1\":{\"619\":1}}],[\"主从复制实现了数据的热备份\",{\"1\":{\"619\":1}}],[\"主从复制主要的作用\",{\"0\":{\"619\":1}}],[\"主从同步\",{\"1\":{\"484\":1}}],[\"主键\",{\"1\":{\"541\":1}}],[\"主线程还是会正常执行\",{\"1\":{\"375\":1}}],[\"主线程稍等一秒钟后调用unpark方法唤醒等待的线程\",{\"1\":{\"319\":1}}],[\"主动将串池中还没有的字符串对象放入串池中\",{\"1\":{\"341\":1}}],[\"主流的彩虹表都是100g以上\",{\"1\":{\"198\":1}}],[\"主分片重新分配\",{\"1\":{\"85\":1}}],[\"主题\",{\"1\":{\"484\":1}}],[\"主题扩展了更多\",{\"1\":{\"14\":1}}],[\"主题扩展\",{\"0\":{\"14\":1}}],[\"主题也带有以下元素\",{\"1\":{\"6\":1}}],[\"主要的内容是配置主节点的ip+端口+密码\",{\"1\":{\"625\":1}}],[\"主要就是kafka为了提高数据可靠性所提供的重试机制\",{\"1\":{\"484\":1}}],[\"主要是为了减轻程序员的负担\",{\"1\":{\"434\":1}}],[\"主要配合\",{\"1\":{\"362\":1}}],[\"主要用于保证变量的可见性\",{\"1\":{\"286\":1}}],[\"主要负责\",{\"1\":{\"81\":1,\"726\":1,\"729\":1}}],[\"主要流程为\",{\"1\":{\"81\":1,\"726\":1,\"729\":1}}],[\"主要从\",{\"1\":{\"9\":1}}],[\"主要功能与配置演示\",{\"0\":{\"1\":1}}],[\"页面样式bootstrap\",{\"1\":{\"164\":1}}],[\"页面样式无法加载的问题\",{\"0\":{\"164\":1}}],[\"页面都会被转换为一个\",{\"1\":{\"29\":1,\"677\":1}}],[\"页面内容\",{\"0\":{\"28\":1,\"676\":1}}],[\"页面标题\",{\"0\":{\"26\":1,\"674\":1},\"1\":{\"26\":1,\"674\":1}}],[\"页面配置\",{\"0\":{\"25\":1,\"673\":1},\"1\":{\"27\":1,\"675\":1},\"2\":{\"31\":1,\"679\":1}}],[\"页面引入配置\",{\"1\":{\"11\":1}}],[\"页面信息\",{\"0\":{\"27\":1,\"675\":1},\"1\":{\"3\":1,\"274\":1}}],[\"页脚\",{\"1\":{\"3\":1,\"6\":1,\"274\":1}}],[\"评论\",{\"1\":{\"3\":1,\"6\":1,\"274\":1}}],[\"链接\",{\"0\":{\"449\":1},\"1\":{\"3\":1,\"274\":1}}],[\"贡献者\",{\"1\":{\"3\":1,\"6\":1,\"274\":1}}],[\"侧边栏\",{\"1\":{\"3\":1,\"6\":1,\"274\":1}}]],\"serializationVersion\":2}}")).map(([e,t])=>[e,zt(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n,id:o}})=>{const u=bt[s];e==="suggest"?self.postMessage([e,o,tt(t,u,n)]):e==="search"?self.postMessage([e,o,Z(t,u,n)]):self.postMessage({suggestions:[e,o,tt(t,u,n)],results:[e,o,Z(t,u,n)]})};
//# sourceMappingURL=index.js.map
